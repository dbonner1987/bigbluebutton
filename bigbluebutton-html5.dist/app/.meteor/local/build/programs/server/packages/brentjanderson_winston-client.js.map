{"version":3,"sources":["meteor://ðŸ’»app/packages/brentjanderson_winston-client/packages/brentjanderson_winston-client.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iH","file":"/packages/brentjanderson_winston-client.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/brentjanderson:winston-client/server.js                                                   //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nvar util = Npm.require(\"util\"),                                                                       // 1\n    lastMessage = ''; // The message to return to the user                                            // 2\n                                                                                                      // 3\n/**                                                                                                   // 4\nA custom transport for winston that is used by winston-client to send log messages back to the client // 5\n@class MeteorClient                                                                                   // 6\n*/                                                                                                    // 7\nvar MeteorClient = Winston.transports.MeteorClient = function (options) {                             // 8\n  this.name = 'meteorClient';                                                                         // 9\n  this.level = options.level || 'silly';                                                              // 10\n};                                                                                                    // 11\n                                                                                                      // 12\nutil.inherits(MeteorClient, Winston.Transport);                                                       // 13\n                                                                                                      // 14\n/**                                                                                                   // 15\nDetermine if a dictionary is empty                                                                    // 16\n@method isEmpty                                                                                       // 17\n@param {Object} obj The object to test                                                                // 18\n@return Boolean                                                                                       // 19\n*/                                                                                                    // 20\nfunction isEmpty(obj) {                                                                               // 21\n    \"use strict\";                                                                                     // 22\n    var prop, result;                                                                                 // 23\n    if (Object.keys) { // EMCAScript 5 support                                                        // 24\n        result =  Object.keys(obj).length === 0;                                                      // 25\n    } else { // Old school                                                                            // 26\n        for (prop in obj) {                                                                           // 27\n            if (obj.hasOwnProperty(prop)) {                                                           // 28\n                return false;                                                                         // 29\n            }                                                                                         // 30\n        }                                                                                             // 31\n        result = true;                                                                                // 32\n    }                                                                                                 // 33\n    return result;                                                                                    // 34\n}                                                                                                     // 35\n                                                                                                      // 36\nMeteorClient.prototype.log = function (level, msg, meta, callback) {                                  // 37\n  // @TODO: Make the log message conform better to Winston's own output                               // 38\n  \"use strict\";                                                                                       // 39\n  var lastMessage = level + ': ' + msg;                                                               // 40\n  if (!isEmpty(meta) && JSON.stringify) {                                                             // 41\n    lastMessage += '\\nmeta = ' + JSON.stringify(meta)                                                 // 42\n  }                                                                                                   // 43\n  callback(null, true);                                                                               // 44\n};                                                                                                    // 45\n                                                                                                      // 46\nWinston.add(Winston.transports.MeteorClient, {});                                                     // 47\nMeteor.startup(function () {                                                                          // 48\n    Meteor.methods({                                                                                  // 49\n      /**                                                                                             // 50\n      A rough equivalent to Winston.log() over Meteor.call.                                           // 51\n      Takes the same arguments                                                                        // 52\n      */                                                                                              // 53\n      'winston-client.log': function() {                                                              // 54\n        check(arguments, [Match.Any]);                                                                // 55\n        Winston.log.apply(null, arguments);                                                           // 56\n        return lastMessage;                                                                           // 57\n      }                                                                                               // 58\n    });                                                                                               // 59\n});                                                                                                   // 60\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}