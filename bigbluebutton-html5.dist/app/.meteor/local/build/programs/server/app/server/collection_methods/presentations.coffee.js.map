{"version":3,"sources":["meteor://ðŸ’»app/server/collection_methods/presentations.coffee"],"names":[],"mappings":"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","file":"/server/collection_methods/presentations.coffee.js","sourcesContent":["\nMeteor.methods\n  publishSwitchToPreviousSlideMessage: (meetingId, userId, authToken) ->\n    currentPresentationDoc = Meteor.Presentations.findOne({\n      \"meetingId\": meetingId\n      \"presentation.current\" : true})\n    currentSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.current\" : true})\n    previousSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.num\" : currentSlideDoc?.slide.num-1})\n\n    if previousSlideDoc? and isAllowedTo('switchSlide', meetingId, userId, authToken)\n      message =\n        \"payload\":\n          \"page\": previousSlideDoc.slide.id\n          \"meeting_id\": meetingId\n        \"header\":\n          \"name\": \"go_to_slide\"\n\n      publish Meteor.config.redis.channels.toBBBApps.presentation, message\n\n\n  publishSwitchToNextSlideMessage: (meetingId, userId, authToken) ->\n    currentPresentationDoc = Meteor.Presentations.findOne({\n      \"meetingId\": meetingId\n      \"presentation.current\" : true})\n    currentSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.current\" : true})\n    nextSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.num\" : currentSlideDoc?.slide.num+1})\n\n    if nextSlideDoc? and isAllowedTo('switchSlide', meetingId, userId, authToken)\n      message =\n        \"payload\":\n          \"page\": nextSlideDoc.slide.id\n          \"meeting_id\": meetingId\n        \"header\":\n          \"name\": \"go_to_slide\"\n\n      publish Meteor.config.redis.channels.toBBBApps.presentation, message\n\n\n# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n@addPresentationToCollection = (meetingId, presentationObject) ->\n  #check if the presentation is already in the collection\n  unless Meteor.Presentations.findOne({meetingId: meetingId, 'presentation.id': presentationObject.id})?\n    entry =\n      meetingId: meetingId\n      presentation:\n        id: presentationObject.id\n        name: presentationObject.name\n        current: presentationObject.current\n\n      pointer: #initially we have no data about the cursor\n        x: 0.0\n        y: 0.0\n\n    id = Meteor.Presentations.insert(entry)\n    #Meteor.log.info \"presentation added id =[#{id}]:#{presentationObject.id} in #{meetingId}. Presentations.size is now #{Meteor.Presentations.find({meetingId: meetingId}).count()}\"\n\n@removePresentationFromCollection = (meetingId, presentationId) ->\n  if meetingId? and presentationId? and Meteor.Presentations.findOne({meetingId: meetingId, \"presentation.id\": presentationId})?\n    id = Meteor.Presentations.findOne({meetingId: meetingId, \"presentation.id\": presentationId})\n    if id?\n      Meteor.Slides.remove({presentationId: presentationId}, Meteor.log.info \"cleared Slides Collection (presentationId: #{presentationId}!\")\n      Meteor.Presentations.remove(id._id)\n      Meteor.log.info \"----removed presentation[\" + presentationId + \"] from \" + meetingId\n\n\n# called on server start and meeting end\n@clearPresentationsCollection = (meetingId) ->\n  if meetingId?\n    Meteor.Presentations.remove({meetingId: meetingId}, Meteor.log.info \"cleared Presentations Collection (meetingId: #{meetingId}!\")\n  else\n    Meteor.Presentations.remove({}, Meteor.log.info \"cleared Presentations Collection (all meetings)!\")\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n"]}