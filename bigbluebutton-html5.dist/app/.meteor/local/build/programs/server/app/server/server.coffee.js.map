{"version":3,"sources":["meteor://ðŸ’»app/server/server.coffee"],"names":[],"mappings":"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","file":"/server/server.coffee.js","sourcesContent":["Meteor.startup ->\r\n  Meteor.log.info \"server start\"\r\n\r\n  #remove all data\r\n  Meteor.WhiteboardCleanStatus.remove({})\r\n  clearUsersCollection()\r\n  clearChatCollection()\r\n  clearMeetingsCollection()\r\n  clearShapesCollection()\r\n  clearSlidesCollection()\r\n  clearPresentationsCollection()\r\n  clearPollCollection()\r\n\r\n  # create create a PubSub connection, start listening\r\n  Meteor.redisPubSub = new Meteor.RedisPubSub(->\r\n    Meteor.log.info \"created pubsub\")\r\n\r\n\r\n  Meteor.myQueue = new PowerQueue({\r\n    # autoStart:true\r\n    # isPaused: true\r\n  })\r\n  Meteor.myQueue.taskHandler = (data, next, failures) ->\r\n    eventName = JSON.parse(data.jsonMsg)?.header.name\r\n    if failures > 0\r\n      Meteor.log.error \"got a failure on taskHandler #{eventName} #{failures}\"\r\n    else\r\n      handleRedisMessage(data, ()->\r\n        length = Meteor.myQueue.length()\r\n        lengthString = ->\r\n          if length>0\r\n            \"In the queue we have #{length} event(s) to process.\"\r\n          else \"\"\r\n\r\n        Meteor.log.info \"in callback after handleRedisMessage #{eventName}.\r\n          #{lengthString()}\"\r\n        next()\r\n      )\r\n\r\n\r\n  # To ensure that we process the redis json event messages serially we use a\r\n  # callback. This callback is to be called when the Meteor collection is\r\n  # updated with the information coming in the payload of the json message. The\r\n  # callback signalizes to the queue that we are done processing the current\r\n  # message in the queue and are ready to move on to the next one. If we do not\r\n  # use the callback mechanism we may encounter a race condition situation\r\n  # due to not following the order of events coming through the redis pubsub.\r\n  # for example: a user_left event reaching the collection before a user_joined\r\n  # for the same user.\r\n  @handleRedisMessage = (data, callback) ->\r\n    message = JSON.parse(data.jsonMsg)\r\n    # correlationId = message.payload?.reply_to or message.header?.reply_to\r\n    meetingId = message.payload?.meeting_id\r\n\r\n    # Avoid cluttering the log with json messages carrying little or repetitive\r\n    # information. Comment out a message type in the array to be able to see it\r\n    # in the log upon restarting of the Meteor process.\r\n    notLoggedEventTypes = [\r\n      \"keep_alive_reply\"\r\n      \"page_resized_message\"\r\n      \"presentation_page_resized_message\"\r\n      \"presentation_cursor_updated_message\"\r\n      \"get_presentation_info_reply\"\r\n#      \"get_users_reply\"\r\n      \"get_chat_history_reply\"\r\n#      \"get_all_meetings_reply\"\r\n      \"get_whiteboard_shapes_reply\"\r\n      \"presentation_shared_message\"\r\n      \"presentation_conversion_done_message\"\r\n      \"presentation_conversion_progress_message\"\r\n      \"presentation_page_generated_message\"\r\n      # \"presentation_page_changed_message\"\r\n      \"BbbPubSubPongMessage\"\r\n      \"bbb_apps_is_alive_message\"\r\n      \"user_voice_talking_message\"\r\n      \"meeting_state_message\"\r\n      \"get_recording_status_reply\"\r\n    ]\r\n\r\n    eventName = message.header.name\r\n    meetingId = message.payload?.meeting_id\r\n\r\n    unless message?.header? and message.payload?\r\n      Meteor.log.error \"ERROR!! No header or payload\"\r\n      callback()\r\n\r\n    unless message.header.name in notLoggedEventTypes\r\n      Meteor.log.info \"redis incoming message  #{eventName}  \",\r\n        message: data.jsonMsg\r\n\r\n    # we currently disregard the pattern and channel\r\n    if message?.header? and message.payload?\r\n      if eventName is 'meeting_created_message'\r\n        # Meteor.log.error JSON.stringify message\r\n        meetingName = message.payload.name\r\n        intendedForRecording = message.payload.recorded\r\n        voiceConf = message.payload.voice_conf\r\n        duration = message.payload.duration\r\n        addMeetingToCollection meetingId, meetingName, intendedForRecording,\r\n         voiceConf, duration, callback\r\n\r\n      # handle voice events\r\n      else if message.payload.user? and eventName in [\r\n       'user_left_voice_message'\r\n       'user_joined_voice_message'\r\n       'user_voice_talking_message'\r\n       'user_voice_muted_message']\r\n\r\n        voiceUserObj = {\r\n          'web_userid': message.payload.user.voiceUser.web_userid\r\n          'listen_only': message.payload.listen_only\r\n          'talking': message.payload.user.voiceUser.talking\r\n          'joined': message.payload.user.voiceUser.joined\r\n          'locked': message.payload.user.voiceUser.locked\r\n          'muted': message.payload.user.voiceUser.muted\r\n        }\r\n        updateVoiceUser meetingId, voiceUserObj, callback\r\n\r\n      else if eventName is 'user_listening_only'\r\n        voiceUserObj = {\r\n          'web_userid': message.payload.userid\r\n          'listen_only': message.payload.listen_only\r\n        }\r\n        updateVoiceUser meetingId, voiceUserObj, callback\r\n\r\n      else if eventName is 'get_all_meetings_reply'\r\n        Meteor.log.info \"Let's store some data for the running meetings\r\n         so that when an HTML5 client joins everything is ready!\"\r\n        Meteor.log.info JSON.stringify(message)\r\n        listOfMeetings = message.payload.meetings\r\n\r\n        # Processing the meetings recursively with a callback to notify us,\r\n        # ensuring that we update the meeting collection serially\r\n        processMeeting = () ->\r\n          meeting = listOfMeetings.pop()\r\n          if meeting?\r\n            addMeetingToCollection meeting.meetingID, meeting.meetingName,\r\n              meeting.recorded, meeting.voiceBridge, meeting.duration, processMeeting\r\n          else\r\n            callback() # all meeting arrays (if any) have been processed\r\n\r\n        processMeeting()\r\n\r\n      else if eventName is 'user_joined_message'\r\n        userObj = message.payload.user\r\n        dbUser = Meteor.Users.findOne({userId: userObj.userid, meetingId: message.payload.meeting_id})\r\n\r\n        # On attempting reconnection of Flash clients (in voiceBridge) we receive\r\n        # an extra user_joined_message. Ignore it as it will add an extra user\r\n        # in the user list, creating discrepancy with the list in the Flash client\r\n        if dbUser?.user?.connection_status is \"offline\" and message.payload.user?.phone_user\r\n          Meteor.log.error \"offline AND phone user\"\r\n          callback() #return without joining the user\r\n        else\r\n          if dbUser?.clientType is \"HTML5\" # typically html5 users will be in\r\n            # the db [as a dummy user] before the joining message\r\n            status = dbUser?.validated\r\n            Meteor.log.info \"in user_joined_message the validStatus\r\n             of the user was #{status}\"\r\n            userObj.timeOfJoining = message.header.current_time\r\n            userJoined meetingId, userObj, callback\r\n          else\r\n            userJoined meetingId, userObj, callback\r\n\r\n\r\n      # only process if requester is nodeJSapp means only process in the case when\r\n      # we explicitly request the users\r\n      else if eventName is 'get_users_reply' and message.payload.requester_id is 'nodeJSapp'\r\n        users = message.payload.users\r\n\r\n        #TODO make the serialization be split per meeting. This will allow us to\r\n        # use N threads vs 1 and we'll take advantage of Mongo's concurrency tricks\r\n\r\n        # Processing the users recursively with a callback to notify us,\r\n        # ensuring that we update the users collection serially\r\n        processUser = () ->\r\n          user = users.pop()\r\n          if user?\r\n            user.timeOfJoining = message.header.current_time\r\n            if user.emoji_status isnt 'none' and typeof user.emoji_status is 'string'\r\n              console.log \"3\"\r\n              user.set_emoji_time = new Date()\r\n              userJoined meetingId, user, processUser\r\n            else\r\n              # console.error(\"this is not supposed to happen\")\r\n              userJoined meetingId, user, processUser\r\n          else\r\n            callback() # all meeting arrays (if any) have been processed\r\n\r\n        processUser()\r\n\r\n\r\n      else if eventName is 'validate_auth_token_reply'\r\n        userId = message.payload.userid\r\n        user = Meteor.Users.findOne({userId:userId, meetingId: meetingId})\r\n        validStatus = message.payload.valid\r\n\r\n        # if the user already exists in the db\r\n        if user?.clientType is \"HTML5\"\r\n          #if the html5 client user was validated successfully, add a flag\r\n          Meteor.Users.update({userId:userId, meetingId:message.payload.meeting_id},\r\n            {$set:{validated: validStatus}},\r\n            (err, numChanged) ->\r\n              if numChanged.insertedId?\r\n                funct = (cbk) ->\r\n                  val=Meteor.Users.findOne({userId:userId, meetingId: message.payload.meeting_id})?.validated\r\n                  Meteor.log.info \"user.validated for user #{userId} in meeting #{user.meetingId} just became #{val}\"\r\n                  cbk()\r\n\r\n                funct(callback)\r\n              else\r\n                callback()\r\n          )\r\n        else\r\n          Meteor.log.info \"a non-html5 user got validate_auth_token_reply.\"\r\n          callback()\r\n\r\n\r\n      else if eventName is 'user_left_message'\r\n        userId = message.payload.user?.userid\r\n        if userId? and meetingId?\r\n          markUserOffline meetingId, userId, callback\r\n        else\r\n          callback() #TODO check how to get these cases out and reuse code\r\n\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is 'presenter_assigned_message'\r\n        newPresenterId = message.payload.new_presenter_id\r\n        if newPresenterId?\r\n          # reset the previous presenter\r\n          Meteor.Users.update({\"user.presenter\": true, meetingId: meetingId},\r\n            {$set: {\"user.presenter\": false}},\r\n            (err, numUpdated) ->\r\n              Meteor.log.info(\" Updating old presenter numUpdated=#{numUpdated},\r\n               err=#{err}\")\r\n          )\r\n          # set the new presenter\r\n          Meteor.Users.update({\"user.userid\": newPresenterId, meetingId: meetingId},\r\n            {$set: {\"user.presenter\": true}},\r\n            (err, numUpdated) ->\r\n              Meteor.log.info(\" Updating new presenter numUpdated=#{numUpdated},\r\n               err=#{err}\")\r\n          )\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is 'user_emoji_status_message'\r\n        userId = message.payload.userid\r\n        meetingId = message.payload.meeting_id\r\n        emojiStatus = message.payload.emoji_status\r\n        if userId? and meetingId?\r\n          set_emoji_time = new Date()\r\n          Meteor.Users.update({\"user.userid\": userId},\r\n            {$set:{\"user.set_emoji_time\":set_emoji_time,\"user.emoji_status\":emojiStatus}},\r\n            (err, numUpdated) ->\r\n              Meteor.log.info(\" Updating emoji numUpdated=#{numUpdated}, err=#{err}\")\r\n          )\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName in ['user_locked_message', 'user_unlocked_message']\r\n        userId = message.payload.userid\r\n        isLocked = message.payload.locked\r\n        setUserLockedStatus(meetingId, userId, isLocked)\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName in [\"meeting_ended_message\", \"meeting_destroyed_event\",\r\n        \"end_and_kick_all_message\", \"disconnect_all_users_message\"]\r\n        Meteor.log.info(\"DESTROYING MEETING #{meetingId}\")\r\n        removeMeetingFromCollection meetingId, callback\r\n\r\n        ###\r\n         if Meteor.Meetings.findOne({meetingId: meetingId})?\r\n          count=Meteor.Users.find({meetingId: meetingId}).count()\r\n          Meteor.log.info \"there are #{count} users in the meeting\"\r\n          for user in Meteor.Users.find({meetingId: meetingId}).fetch()\r\n            markUserOffline meetingId, user.userId\r\n          #TODO should we clear the chat messages for that meeting?!\r\n          unless eventName is \"disconnect_all_users_message\"\r\n            removeMeetingFromCollection meetingId\r\n        ###\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"get_chat_history_reply\" and message.payload.requester_id is \"nodeJSapp\"\r\n        unless Meteor.Meetings.findOne({MeetingId: message.payload.meeting_id})?\r\n          for chatMessage in message.payload.chat_history\r\n            addChatToCollection meetingId, chatMessage\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"send_public_chat_message\" or eventName is \"send_private_chat_message\"\r\n        messageObject = message.payload.message\r\n        # use current_time instead of message.from_time so that the chats from Flash and HTML5 have uniform times\r\n        messageObject.from_time = message.header.current_time\r\n        addChatToCollection meetingId, messageObject\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"presentation_shared_message\"\r\n        presentationId = message.payload.presentation?.id\r\n        # change the currently displayed presentation to presentation.current = false\r\n        Meteor.Presentations.update({\"presentation.current\": true, meetingId: meetingId},\r\n          {$set: {\"presentation.current\": false}})\r\n\r\n        #update(if already present) entirely the presentation with the fresh data\r\n        removePresentationFromCollection meetingId, presentationId\r\n        addPresentationToCollection meetingId, message.payload.presentation\r\n\r\n        for slide in message.payload.presentation?.pages\r\n          addSlideToCollection meetingId, message.payload.presentation?.id, slide\r\n          if slide.current\r\n            displayThisSlide meetingId, slide.id, slide\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"get_presentation_info_reply\" and message.payload.requester_id is \"nodeJSapp\"\r\n        for presentation in message.payload.presentations\r\n          addPresentationToCollection meetingId, presentation\r\n\r\n          for page in presentation.pages\r\n            #add the slide to the collection\r\n            addSlideToCollection meetingId, presentation.id, page\r\n\r\n            #request for shapes\r\n            whiteboardId = \"#{presentation.id}/#{page.num}\" # d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1404411622872/1\r\n            #Meteor.log.info \"the whiteboard_id here is:\" + whiteboardId\r\n\r\n            message =\r\n              \"payload\":\r\n                \"meeting_id\": meetingId\r\n                \"requester_id\": \"nodeJSapp\"\r\n                \"whiteboard_id\": whiteboardId\r\n              \"header\":\r\n                \"timestamp\": new Date().getTime()\r\n                \"name\": \"get_whiteboard_shapes_request\"\r\n                \"version\": \"0.0.1\"\r\n\r\n            if whiteboardId? and meetingId?\r\n              publish Meteor.config.redis.channels.toBBBApps.whiteboard, message #TODO\r\n            else\r\n              Meteor.log.info \"did not have enough information to send a user_leaving_request\" #TODO\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"presentation_page_changed_message\"\r\n        newSlide = message.payload.page\r\n        displayThisSlide meetingId, newSlide?.id, newSlide\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"presentation_removed_message\"\r\n        presentationId = message.payload.presentation_id\r\n        meetingId = message.payload.meeting_id\r\n        removePresentationFromCollection meetingId, presentationId\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"get_whiteboard_shapes_reply\" and message.payload.requester_id is \"nodeJSapp\"\r\n        # Create a whiteboard clean status or find one for the current meeting\r\n        if not Meteor.WhiteboardCleanStatus.findOne({meetingId: meetingId})?\r\n          Meteor.WhiteboardCleanStatus.insert({meetingId: meetingId, in_progress: false})\r\n\r\n        for shape in message.payload.shapes\r\n          whiteboardId = shape.wb_id\r\n          addShapeToCollection meetingId, whiteboardId, shape\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"send_whiteboard_shape_message\"\r\n        #Meteor stringifies an array of JSONs (...shape.result) in this message\r\n        #parsing the String and reassigning the value\r\n        if message.payload.shape.shape_type is \"poll_result\" and typeof message.payload.shape.shape.result is 'string'\r\n          message.payload.shape.shape.result = JSON.parse message.payload.shape.shape.result\r\n\r\n        shape = message.payload.shape\r\n        whiteboardId = shape?.wb_id\r\n        addShapeToCollection meetingId, whiteboardId, shape\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"presentation_cursor_updated_message\"\r\n        x = message.payload.x_percent\r\n        y = message.payload.y_percent\r\n        Meteor.Presentations.update({\"presentation.current\": true, meetingId: meetingId},\r\n          {$set: {\"pointer.x\": x, \"pointer.y\": y}})\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"whiteboard_cleared_message\"\r\n        whiteboardId = message.payload.whiteboard_id\r\n        Meteor.WhiteboardCleanStatus.update({meetingId: meetingId}, {$set: {'in_progress': true}})\r\n        removeAllShapesFromSlide meetingId, whiteboardId\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"undo_whiteboard_request\"\r\n        whiteboardId = message.payload.whiteboard_id\r\n        shapeId = message.payload.shape_id\r\n        removeShapeFromSlide meetingId, whiteboardId, shapeId\r\n        callback()\r\n\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"presentation_page_resized_message\"\r\n        slideId = message.payload.page?.id\r\n        heightRatio = message.payload.page?.height_ratio\r\n        widthRatio = message.payload.page?.width_ratio\r\n        xOffset = message.payload.page?.x_offset\r\n        yOffset = message.payload.page?.y_offset\r\n        presentationId = slideId.split(\"/\")[0]\r\n        Meteor.Slides.update({presentationId: presentationId, \"slide.current\": true},\r\n          {$set:{\"slide.height_ratio\": heightRatio,\"slide.width_ratio\": widthRatio,\"slide.x_offset\":xOffset,\"slide.y_offset\":yOffset}}\r\n        )\r\n        callback()\r\n\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"recording_status_changed_message\"\r\n        intendedForRecording = message.payload.recorded\r\n        currentlyBeingRecorded = message.payload.recording\r\n        Meteor.Meetings.update({meetingId: meetingId, intendedForRecording: intendedForRecording},\r\n          {$set: {currentlyBeingRecorded: currentlyBeingRecorded}}\r\n        )\r\n        callback()\r\n\r\n      # --------------------------------------------------\r\n      # lock settings ------------------------------------\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"eject_voice_user_message\"\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"new_permission_settings\"\r\n        oldSettings = Meteor.Meetings.findOne({meetingId:meetingId})?.roomLockSettings\r\n        newSettings = message.payload?.permissions\r\n\r\n        # if the disableMic setting was turned on\r\n        if !oldSettings?.disableMic and newSettings.disableMic\r\n          handleLockingMic(meetingId, newSettings)\r\n\r\n        # substitute with the new lock settings\r\n        Meteor.Meetings.update({meetingId: meetingId}, {$set: {\r\n          'roomLockSettings.disablePrivateChat': newSettings.disablePrivateChat\r\n          'roomLockSettings.disableCam': newSettings.disableCam\r\n          'roomLockSettings.disableMic': newSettings.disableMic\r\n          'roomLockSettings.lockOnJoin': newSettings.lockOnJoin\r\n          'roomLockSettings.lockedLayout': newSettings.lockedLayout\r\n          'roomLockSettings.disablePublicChat': newSettings.disablePublicChat\r\n          'roomLockSettings.lockOnJoinConfigurable': newSettings.lockOnJoinConfigurable #TODO\r\n        }})\r\n        callback()\r\n\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"poll_started_message\"\r\n        if message.payload.meeting_id? and message.payload.requester_id? and message.payload.poll?\r\n          if Meteor.Meetings.findOne({meetingId: message.payload.meeting_id})?\r\n            #initializing the list of current users\r\n            users = Meteor.Users.find({meetingId: message.payload.meeting_id},\r\n              {fields:{\"user.userid\": 1, _id: 0}} ).fetch()\r\n            addPollToCollection message.payload.poll, message.payload.requester_id,\r\n              users, message.payload.meeting_id\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"poll_stopped_message\"\r\n        meetingId = message.payload.meeting_id\r\n        poll_id = message.payload.poll_id\r\n        clearPollCollection meetingId, poll_id\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"user_voted_poll_message\"\r\n        if message.payload?.poll? and message.payload.meeting_id? and message.payload.presenter_id?\r\n          pollObj = message.payload.poll\r\n          meetingId = message.payload.meeting_id\r\n          requesterId = message.payload.presenter_id\r\n          updatePollCollection pollObj, meetingId, requesterId\r\n          callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"poll_show_result_message\"\r\n        if message.payload.poll.id? and message.payload.meeting_id?\r\n          poll_id = message.payload.poll.id\r\n          meetingId = message.payload.meeting_id\r\n          clearPollCollection meetingId, poll_id\r\n        callback()\r\n\r\n\r\n      else # keep moving in the queue\r\n        unless eventName in notLoggedEventTypes\r\n          Meteor.log.info \"WARNING!!!\r\n          THE JSON MESSAGE WAS NOT OF TYPE SUPPORTED BY THIS APPLICATION\\n\r\n          #{eventName}   {JSON.stringify message}\"\r\n        callback()\r\n    else\r\n      callback()\r\n"]}