{"version":3,"sources":["meteor://ðŸ’»app/lib/router.coffee"],"names":[],"mappings":"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","file":"/lib/router.coffee.js","sourcesContent":["@Router.configure layoutTemplate: 'layout'\n\n@Router.map ->\n  # this is how we handle login attempts\n  @route \"main\",\n    path: \"/html5client/:meeting_id/:user_id/:auth_token\"\n    onBeforeAction: ->\n      meetingId = @params.meeting_id\n      userId = @params.user_id\n      authToken = @params.auth_token\n\n      # catch if any of the user's meeting data is invalid\n      if not authToken? or not meetingId? or not userId?\n        # if their data is invalid, redirect the user to the logout page\n        document.location = getInSession 'logoutURL'\n\n      else\n        Meteor.call(\"validateAuthToken\", meetingId, userId, authToken)\n\n        applyNewSessionVars = ->\n          setInSession(\"authToken\", authToken)\n          setInSession(\"meetingId\", meetingId)\n          setInSession(\"userId\", userId)\n          Router.go('/html5client')\n\n        clearSessionVar(applyNewSessionVars)\n\n      @next()\n\n\n  # the user successfully logged in\n  @route \"signedin\",\n    path: \"/html5client\"\n    action: ->\n      meetingId = getInSession \"meetingId\"\n      userId = getInSession \"userId\"\n      authToken = getInSession \"authToken\"\n\n      onErrorFunction = (error, result) ->\n        console.log \"ONERRORFUNCTION\"\n        #if error\n        #  # Was unable to authorize the user. Redirect to the home page\n        #  # alert error.reason\n\n        #make sure the user is not let through\n        Meteor.call(\"userLogout\", meetingId, userId, authToken)\n\n        clearSessionVar (alert \"Please sign in again\")\n        document.location = getInSession('logoutURL') or '/'\n        return\n\n      Meteor.subscribe 'chat', meetingId, userId, authToken, onError: onErrorFunction, onReady: =>\n        Meteor.subscribe 'shapes', meetingId, onReady: =>\n          Meteor.subscribe 'slides', meetingId, onReady: =>\n            Meteor.subscribe 'meetings', meetingId, onReady: =>\n              Meteor.subscribe 'presentations', meetingId, onReady: =>\n                Meteor.subscribe 'users', meetingId, userId, authToken, onError: onErrorFunction, onReady: =>\n                  Meteor.subscribe 'whiteboard-clean-status', meetingId, onReady: =>\n                    Meteor.subscribe 'bbb_poll', meetingId,  userId, authToken, onReady: =>\n                    # done subscribing, start rendering the client and set default settings\n                    @render('main')\n                    onLoadComplete()\n\n                    handleLogourUrlError = () ->\n                      alert \"Error: could not find the logoutURL\"\n                      setInSession(\"logoutURL\", document.location.hostname)\n                      return\n\n                    # obtain the logoutURL\n                    a = $.ajax({dataType: 'json', url: '/bigbluebutton/api/enter'})\n                    a.done (data) ->\n                      if data.response.logoutURL? # for a meeting with 0 users\n                        setInSession(\"logoutURL\", data.response.logoutURL)\n                        return\n                      else\n                        if data.response.logoutUrl? # for a running meeting\n                          setInSession(\"logoutURL\", data.response.logoutUrl)\n                          return\n                        else\n                          handleLogourUrlError()\n\n                    a.fail (data, textStatus, errorThrown) ->\n                      handleLogourUrlError()\n\n      @render('loading')\n\n\n  # endpoint - is the html5client running (ready to handle a user)\n  @route 'meteorEndpoint',\n    path: '/check'\n    where: 'server'\n    action: ->\n      @response.writeHead 200, 'Content-Type': 'application/json'\n\n      # reply that the html5client is running\n      @response.end JSON.stringify {\"html5clientStatus\":\"running\"}\n      return\n  return\n"]}