{"version":3,"sources":["meteor://ðŸ’»app/client/views/whiteboard/slide.coffee"],"names":[],"mappings":"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","file":"/client/views/whiteboard/slide.coffee.js","sourcesContent":["Template.slide.rendered = ->\n  currentSlide = getCurrentSlideDoc()\n\n  pic = new Image()\n  pic.onload = ->\n    setInSession 'slideOriginalWidth', this.width\n    setInSession 'slideOriginalHeight', this.height\n    $(window).resize( ->\n      # redraw the whiteboard to adapt to the resized window\n      if !$('.panel-footer').hasClass('ui-resizable-resizing') # not in the middle of resizing the message input\n        scaleWhiteboard()\n    )\n    if currentSlide?.slide?.img_uri?\n      createWhiteboardPaper (wpm) ->\n        displaySlide wpm\n  pic.src = currentSlide?.slide?.img_uri\n\n@createWhiteboardPaper = (callback) =>\n  @whiteboardPaperModel = new Meteor.WhiteboardPaperModel('whiteboard-paper')\n  callback(@whiteboardPaperModel)\n\n@displaySlide = (wpm) ->\n  currentSlide = getCurrentSlideDoc()\n\n  wpm.create()\n  adjustedDimensions = scaleSlide(getInSession('slideOriginalWidth'), getInSession('slideOriginalHeight'))\n  wpm._displayPage(currentSlide?.slide?.img_uri, getInSession('slideOriginalWidth'), getInSession('slideOriginalHeight'))\n  manuallyDisplayShapes()\n  wpm.scale(adjustedDimensions.width, adjustedDimensions.height)\n\n@manuallyDisplayShapes = ->\n\n  return if Meteor.WhiteboardCleanStatus.findOne({in_progress: true})?\n\n  currentSlide = getCurrentSlideDoc()\n  wpm = @whiteboardPaperModel\n  shapes = Meteor.Shapes.find({whiteboardId: currentSlide?.slide?.id}).fetch()\n  for s in shapes\n    shapeInfo = s.shape?.shape or s?.shape\n    shapeType = shapeInfo?.type\n\n    if shapeType isnt \"text\"\n      len = shapeInfo.points.length\n      for num in [0..len] # the coordinates must be in the range 0 to 1\n        shapeInfo?.points[num] = shapeInfo?.points[num] / 100\n    wpm?.makeShape(shapeType, shapeInfo)\n    wpm?.updateShape(shapeType, shapeInfo)\n\n\n# calculates and returns the best fitting {width, height} pair\n# based on the image's original width and height\n@scaleSlide = (originalWidth, originalHeight) ->\n\n  # set the size of the whiteboard space (frame) where the slide will be displayed\n  if window.matchMedia('(orientation: landscape)').matches\n    # for landscape orientation we want \"fit to height\" so that we can\n    # minimize the empty space above and below the slide (for best readability)\n    boardWidth = $(\"#whiteboard-container\").width()\n    boardHeight = $(\"#whiteboard-container\").height()\n  else\n    # for portrait orientation we want \"fit to width\" so that we can\n    # minimize the empty space on the sides of the slide (for best readability)\n    boardWidth = $(\"#whiteboard-container\").width()\n    boardHeight = 1.4 * $(\"#whiteboard-container\").width() # A4 paper size\n\n  # this is the best fitting pair\n  adjustedWidth = null\n  adjustedHeight = null\n\n\n  # the slide image is in portrait orientation\n  if originalWidth <= originalHeight\n    adjustedWidth = boardHeight * originalWidth / originalHeight\n    if boardWidth < adjustedWidth\n      adjustedHeight = boardHeight * boardWidth / adjustedWidth\n      adjustedWidth = boardWidth\n    else\n      adjustedHeight = boardHeight\n\n  # ths slide image is in landscape orientation\n  else\n    adjustedHeight = boardWidth * originalHeight / originalWidth\n    if boardHeight < adjustedHeight\n      adjustedWidth = boardWidth * boardHeight / adjustedHeight\n      adjustedHeight = boardHeight\n    else\n      adjustedWidth = boardWidth\n\n  { width: adjustedWidth, height: adjustedHeight, boardWidth: boardWidth, boardHeight: boardHeight }\n\nTemplate.slide.helpers\n  updatePointerLocation: (pointer) ->\n    if whiteboardPaperModel?\n      wpm = whiteboardPaperModel\n      wpm?.moveCursor(pointer.x, pointer.y)\n\n#### SHAPE ####\nTemplate.shape.rendered = ->\n  # @data is the shape object coming from the {{#each}} in the html file\n  shapeInfo = @data.shape?.shape or @data.shape\n  shapeType = shapeInfo?.type\n\n  if shapeType isnt \"text\"\n    len = shapeInfo.points.length\n    for num in [0..len] # the coordinates must be in the range 0 to 1\n      shapeInfo.points[num] = shapeInfo.points[num] / 100\n\n  if whiteboardPaperModel?\n    wpm = whiteboardPaperModel\n    wpm?.makeShape(shapeType, shapeInfo)\n    wpm?.updateShape(shapeType, shapeInfo)\n\nTemplate.shape.destroyed = ->\n  if whiteboardPaperModel?\n    wpm = whiteboardPaperModel\n    wpm.clearShapes()\n    manuallyDisplayShapes()\n"]}