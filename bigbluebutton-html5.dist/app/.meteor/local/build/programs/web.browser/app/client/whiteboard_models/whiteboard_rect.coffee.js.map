{"version":3,"sources":["meteor://ðŸ’»app/client/whiteboard_models/whiteboard_rect.coffee"],"names":[],"mappings":"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","file":"/client/whiteboard_models/whiteboard_rect.coffee.js","sourcesContent":["# A rectangle in the whiteboard\nclass @WhiteboardRectModel extends WhiteboardToolModel\n  constructor: (@paper) ->\n    super @paper\n\n    # the defintion of this shape, kept so we can redraw the shape whenever needed\n    # format: x1, y1, x2, y2, stroke color, thickness\n    @definition = [0, 0, 0, 0, \"#000\", \"0px\"]\n    @paper\n\n  # Creates a rectangle in the paper\n  # @param  {number} x         the x value of the top left corner\n  # @param  {number} y         the y value of the top left corner\n  # @param  {string} colour    the colour of the object\n  # @param  {number} thickness the thickness of the object's line(s)\n  make: (startingData) =>\n    x = startingData.points[0]\n    y = startingData.points[1]\n    color = startingData.color\n    thickness = startingData.thickness\n\n    @obj = @paper.rect(x * @gw + @xOffset, y * @gh + @yOffset, 0, 0, 1)\n    @obj.attr \"stroke\", formatColor(color)\n    @obj.attr \"stroke-width\", zoomStroke(formatThickness(thickness))\n    @definition =\n      shape: \"rect\"\n      data: [x, y, 0, 0, @obj.attrs[\"stroke\"], @obj.attrs[\"stroke-width\"]]\n    @obj\n\n  # Update the rectangle dimensions\n  # @param  {number} x1 the x value of the top left corner\n  # @param  {number} y1 the y value of the top left corner\n  # @param  {number} x2 the x value of the bottom right corner\n  # @param  {number} y2 the y value of the bottom right corner\n  # @param  {boolean} square (draw a square or not)\n  update: (startingData) ->\n\n    x1 = startingData.points[0]\n    y1 = startingData.points[1]\n    x2 = startingData.points[2]\n    y2 = startingData.points[3]\n\n    square = startingData.square\n    if @obj?\n      [x1, x2] = [x2, x1] if x2 < x1\n\n      if y2 < y1\n          [y1, y2] = [y2, y1]\n          reversed = true\n\n      if square\n          if reversed #if reveresed, the y1 coordinate gets updated, not the y2 coordinate\n              y1 = y2 - (x2 - x1) * @gw / @gh\n          else\n              y2 = y1 + (x2 - x1) * @gw / @gh\n\n      x = x1 * @gw + @xOffset\n      y = y1 * @gh + @yOffset\n      width = (x2 * @gw + @xOffset) - x\n      height = (y2 * @gh + @yOffset) - y\n      #if !square\n      @obj.attr\n        x: x\n        y: y\n        width: width\n        height: height\n      ###else\n        @obj.attr\n          x: x\n          y: y\n          width: width\n          height: width###\n\n      # we need to update all these values, specially for when shapes are drawn backwards\n      @definition.data[0] = x1\n      @definition.data[1] = y1\n      @definition.data[2] = x2\n      @definition.data[3] = y2\n\n  # Draw a rectangle on the paper\n  # @param  {number} x1        the x value of the top left corner\n  # @param  {number} y1        the y value of the top left corner\n  # @param  {number} x2        the x value of the bottom right corner\n  # @param  {number} y2        the y value of the bottom right corner\n  # @param  {string} colour    the colour of the object\n  # @param  {number} thickness the thickness of the object's line(s)\n  draw: (x1, y1, x2, y2, colour, thickness) ->\n    [x1, x2] = [x2, x1] if x2 < x1\n    [y1, y2] = [y2, y1] if y2 < y1\n\n    x = x1 * @gw\n    y = y1 * @gh\n    r = @paper.rect(x + @xOffset, y + @yOffset, (x2 * @gw) - x, (y2 * @gh) - y, 1)\n    r.attr Meteor.call(\"strokeAndThickness\", colour, thickness)\n    r\n\n  # Creating a rectangle has started\n  # @param  {number} x the x value of cursor at the time in relation to the left side of the browser\n  # @param  {number} y the y value of cursor at the time in relation to the top of the browser\n  # TODO: moved here but not finished\n  dragOnStart: (x, y) ->\n    # sx = (@paperWidth - @gw) / 2\n    # sy = (@paperHeight - @gh) / 2\n    # # find the x and y values in relation to the whiteboard\n    # @cx2 = (x - @containerOffsetLeft - sx + @xOffset) / @paperWidth\n    # @cy2 = (y - @containerOffsetTop - sy + @yOffset) / @paperHeight\n    # globals.connection.emitMakeShape \"rect\",\n    #   [ @cx2, @cy2, @currentColour, @currentThickness ]\n\n  # Adjusting rectangle continues\n  # @param  {number} dx the difference in the x value at the start as opposed to the x value now\n  # @param  {number} dy the difference in the y value at the start as opposed to the y value now\n  # @param  {number} x the x value of cursor at the time in relation to the left side of the browser\n  # @param  {number} y the y value of cursor at the time in relation to the top of the browser\n  # @param  {Event} e  the mouse event\n  # TODO: moved here but not finished\n  dragOnMove: (dx, dy, x, y, e) ->\n    # # if shift is pressed, make it a square\n    # dy = dx if @shiftPressed\n    # dx = dx / @paperWidth\n    # dy = dy / @paperHeight\n    # # adjust for negative values as well\n    # if dx >= 0\n    #   x1 = @cx2\n    # else\n    #   x1 = @cx2 + dx\n    #   dx = -dx\n    # if dy >= 0\n    #   y1 = @cy2\n    # else\n    #   y1 = @cy2 + dy\n    #   dy = -dy\n    # globals.connection.emitUpdateShape \"rect\", [ x1, y1, dx, dy ]\n\n  # When rectangle finished being drawn\n  # @param  {Event} e the mouse event\n  # TODO: moved here but not finished\n  dragOnEnd: (e) ->\n    # if @obj?\n    #   attrs = @obj.attrs\n    #   if attrs?\n    #     globals.connection.emitPublishShape \"rect\",\n    #       [ attrs.x / @gw, attrs.y / @gh, attrs.width / @gw, attrs.height / @gh,\n    #         @currentColour, @currentThickness ]\n    # @obj = null\n"]}