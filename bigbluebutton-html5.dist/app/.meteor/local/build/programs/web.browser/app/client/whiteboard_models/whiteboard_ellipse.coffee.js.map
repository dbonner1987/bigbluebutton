{"version":3,"sources":["meteor://ðŸ’»app/client/whiteboard_models/whiteboard_ellipse.coffee"],"names":[],"mappings":"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","file":"/client/whiteboard_models/whiteboard_ellipse.coffee.js","sourcesContent":["# An ellipse in the whiteboard\nclass @WhiteboardEllipseModel extends WhiteboardToolModel\n\n    constructor: (@paper) ->\n      super @paper\n\n      # the defintion of this shape, kept so we can redraw the shape whenever needed\n      # format: top left x, top left y, bottom right x, bottom right y, stroke color, thickness\n      @definition = [0, 0, 0, 0, \"#000\", \"0px\"]\n\n    # Make an ellipse on the whiteboard\n    # @param    {[type]} x                 the x value of the top left corner\n    # @param    {[type]} y                 the y value of the top left corner\n    # @param    {string} colour        the colour of the object\n    # @param    {number} thickness the thickness of the object's line(s)\n    make: (info) ->\n      #console.log \"Whiteboard - Making ellipse: \"\n      #console.log info\n      if info?.points?\n        x = info.points[0]\n        y = info.points[1]\n        color = info.color\n        thickness = info.thickness\n\n        @obj = @paper.ellipse(x * @gw + @xOffset, y * @gh + @yOffset, 0, 0)\n        @obj.attr \"stroke\", formatColor(color)\n        @obj.attr \"stroke-width\", zoomStroke(formatThickness(thickness))\n        @definition = [x, y, y, x, @obj.attrs[\"stroke\"], @obj.attrs[\"stroke-width\"]]\n\n      @obj\n\n    # Update ellipse drawn\n    # @param    {number} x1 the x value of the top left corner in percent of current slide size\n    # @param    {number} y1 the y value of the top left corner in percent of current slide size\n    # @param    {number} x2 the x value of the bottom right corner in percent of current slide size\n    # @param    {number} y2 the y value of the bottom right corner in percent of current slide size\n    # @param    {boolean} square (draw a circle or not\n    update: (info) ->\n      #console.log info\n      if info?.points?\n        x1 = info.points[0]\n        y1 = info.points[1]\n        x2 = info.points[2]\n        y2 = info.points[3]\n\n        circle = info.square\n\n        if @obj?\n          [x1, x2] = [x2, x1] if x2 < x1\n\n          if y2 < y1\n            [y1, y2] = [y2, y1]\n            reversed = true\n\n          #if the control key is pressed then the width and height of the ellipse are equal (a circle)\n          #we calculate this by making the y2 coord equal to the y1 coord plus the width of x2-x1 and corrected for the slide size\n          if circle\n            if reversed # if reveresed, the y1 coordinate gets updated, not the y2 coordinate\n              y1 = y2 - (x2 - x1) * @gw / @gh\n            else\n              y2 = y1 + (x2 - x1) * @gw / @gh\n\n          coords =\n            x1: x1\n            x2: x2\n            y1: y1\n            y2: y2\n\n          #console.log(coords)\n\n          rx = (x2 - x1) / 2\n          ry = (y2 - y1) / 2\n\n          r =\n            rx: rx * @gw\n            ry: ry * @gh\n            cx: (rx + x1) * @gw + @xOffset\n            cy: (ry + y1) * @gh + @yOffset\n\n          @obj.attr(r)\n\n          #console.log( \"@gw: \" + @gw + \"\\n@gh: \" + @gh + \"\\n@xOffset: \" + @xOffset + \"\\n@yOffset: \" + @yOffset );\n          # we need to update all these values, specially for when shapes are drawn backwards\n          @definition[0] = x1\n          @definition[1] = y1\n          @definition[2] = x2\n          @definition[3] = y2\n\n    # Draw an ellipse on the whiteboard\n    # @param    {number} x1 the x value of the top left corner\n    # @param    {number} y1 the y value of the top left corner\n    # @param    {number} x2 the x value of the bottom right corner\n    # @param    {number} y2 the y value of the bottom right corner\n    # @param    {string} colour        the colour of the object\n    # @param    {number} thickness the thickness of the object's line(s)\n    draw: (x1, y1, x2, y2, colour, thickness) ->\n        [x1, x2] = [x2, x1] if x2 < x1\n        [y1, y2] = [y2, y1] if y2 < y1\n\n        rx = (x2 - x1) / 2\n        ry = (y2 - y1) / 2\n        x = (rx + x1) * @gw + @xOffset\n        y = (ry + y1) * @gh + @yOffset\n        elip = @paper.ellipse(x, y, rx * @gw, ry * @gh)\n        elip.attr Utils.strokeAndThickness(colour, thickness)\n        elip\n\n    # When first starting drawing the ellipse\n    # @param    {number} x the x value of cursor at the time in relation to the left side of the browser\n    # @param    {number} y the y value of cursor at the time in relation to the top of the browser\n    # TODO: moved here but not finished\n    dragOnStart: (x, y) ->\n        # sx = (@paperWidth - @gw) / 2\n        # sy = (@paperHeight - @gh) / 2\n        # # find the x and y values in relation to the whiteboard\n        # @ellipseX = (x - @containerOffsetLeft - sx + @xOffset)\n        # @ellipseY = (y - @containerOffsetTop - sy + @yOffset)\n        # globals.connection.emitMakeShape \"ellipse\",\n        #     [ @ellipseX / @paperWidth, @ellipseY / @paperHeight, @currentColour, @currentThickness ]\n\n    # When first starting to draw an ellipse\n    # @param    {number} dx the difference in the x value at the start as opposed to the x value now\n    # @param    {number} dy the difference in the y value at the start as opposed to the y value now\n    # @param    {number} x the x value of cursor at the time in relation to the left side of the browser\n    # @param    {number} y the y value of cursor at the time in relation to the top of the browser\n    # @param    {Event} e     the mouse event\n    # TODO: moved here but not finished\n    dragOnMove: (dx, dy, x, y, e) ->\n        # # if shift is pressed, draw a circle instead of ellipse\n        # dy = dx if @shiftPressed\n        # dx = dx / 2\n        # dy = dy / 2\n        # # adjust for negative values as well\n        # x = @ellipseX + dx\n        # y = @ellipseY + dy\n        # dx = (if dx < 0 then -dx else dx)\n        # dy = (if dy < 0 then -dy else dy)\n        # globals.connection.emitUpdateShape \"ellipse\",\n        #     [ x / @paperWidth, y / @paperHeight, dx / @paperWidth, dy / @paperHeight ]\n\n    # When releasing the mouse after drawing the ellipse\n    # @param    {Event} e the mouse event\n    # TODO: moved here but not finished\n    dragOnStop: (e) ->\n        # attrs = undefined\n        # attrs = @currentEllipse.attrs if @currentEllipse?\n        # if attrs?\n        #     globals.connection.emitPublishShape \"ellipse\",\n        #         [ attrs.cx / @gw, attrs.cy / @gh, attrs.rx / @gw, attrs.ry / @gh,\n        #             @currentColour, @currentThickness ]\n        # @currentEllipse = null # late updates will be blocked by this\n"]}