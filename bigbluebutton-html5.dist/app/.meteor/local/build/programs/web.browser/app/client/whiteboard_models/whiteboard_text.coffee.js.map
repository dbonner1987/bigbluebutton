{"version":3,"sources":["meteor://ðŸ’»app/client/whiteboard_models/whiteboard_text.coffee"],"names":[],"mappings":";;;;;;;;;AACA;6BAAA;;AAAA,IAAO;AAEL;;AAAA;;AAAa,+BAAC,KAAD;AACX,IADY,IAAC,SAAD,KACZ;AAAA,yDAAM,IAAC,MAAP;AAAA,IAGA,IAAC,WAAD,GAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,MAAb,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,EAA3B,CAHd,CADW;EAAA,CAAb;;AAAA,gCAOA,OAAM,SAAC,YAAD;AAGJ;AAAA,QAAI,YAAY,CAAC,CAAjB;AAAA,IACA,IAAI,YAAY,CAAC,CADjB;AAAA,IAEA,QAAQ,YAAY,CAAC,YAFrB;AAAA,IAGA,SAAS,YAAY,CAAC,aAHtB;AAAA,IAIA,SAAS,YAAY,YAAY,CAAC,SAAzB,CAJT;AAAA,IAKA,WAAW,YAAY,CAAC,QALxB;AAAA,IAMA,eAAe,YAAY,CAAC,cAN5B;AAAA,IAOA,OAAO,YAAY,CAAC,IAPpB;AAAA,IASA,IAAC,WAAD,GACE;AAAA,aAAO,MAAP;AAAA,MACA,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP,EAAc,MAAd,EAAsB,MAAtB,EAA8B,QAA9B,EAAwC,YAAxC,EAAsD,IAAtD,CADN;KAVF;AAAA,IAcA,IAAI,CAAC,IAAI,IAAC,GAAN,IAAY,IAAC,QAdjB;AAAA,IAeA,IAAI,CAAC,IAAI,IAAC,GAAN,IAAY,IAAC,QAAb,GAAuB,YAf3B;AAAA,IAgBA,QAAQ,QAAM,GAAN,GAAY,IAAC,GAhBrB;AAAA,IAkBA,IAAC,IAAD,GAAO,IAAC,MAAK,CAAC,IAAP,CAAY,IAAE,GAAd,EAAmB,IAAE,GAArB,EAA0B,EAA1B,CAlBP;AAAA,IAmBA,IAAC,IAAG,CAAC,IAAL,CACE;AAAA,cAAQ,MAAR;AAAA,MACA,eAAe,OADf;AAAA,MAEA,aAAa,YAFb;KADF,CAnBA;AAAA,IAuBA,IAAC,IAAG,CAAC,IAAI,CAAC,KAAM,eAAhB,GAAiC,OAvBjC;AAAA,IAwBA,IAAC,IAAG,CAAC,IAAI,CAAC,KAAM,cAAhB,GAAgC,OAxBhC;WAyBA,IAAC,KA5BG;EAAA,CAPN;;AAAA,gCAuCA,SAAQ,SAAC,YAAD;AAGN;AAAA,QAAI,YAAY,CAAC,CAAjB;AAAA,IACA,IAAI,YAAY,CAAC,CADjB;AAAA,IAEA,WAAW,YAAY,CAAC,YAFxB;AAAA,IAGA,SAAS,YAAY,CAAC,aAHtB;AAAA,IAIA,SAAS,YAAY,YAAY,CAAC,SAAzB,CAJT;AAAA,IAKA,WAAW,YAAY,CAAC,QALxB;AAAA,IAMA,eAAe,YAAY,CAAC,cAN5B;AAAA,IAOA,SAAS,YAAY,CAAC,IAPtB;AASA,QAAG,gBAAH;AACE,UAAC,WAAU,CAAC,IAAZ,GAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,QAAP,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,QAAjC,EAA2C,YAA3C,EAAyD,MAAzD,CAAnB;AAAA,MAEA,eAAgB,eAAa,GAAb,GAAmB,IAAC,GAFpC;AAAA,MAGA,IAAI,CAAC,IAAI,IAAC,GAAN,IAAU,GAAV,GAAgB,IAAC,QAHrB;AAAA,MAIA,WAAW,WAAS,GAAT,GAAe,IAAC,GAJ3B;AAAA,MAMA,IAAC,IAAG,CAAC,IAAL,CACE;AAAA,gBAAQ,MAAR;AAAA,QACA,eAAe,OADf;AAAA,QAEA,aAAa,YAFb;OADF,CANA;AAAA,MAUA,OAAO,IAAC,IAAG,CAAC,IAVZ;AAWA,aAAM,kBAAU,IAAI,CAAC,aAAL,EAAhB;AACE,YAAI,CAAC,WAAL,CAAiB,IAAI,CAAC,UAAtB,EADF;MAAA,CAXA;AAAA,MAkBA,YAAgB,WAlBhB;AAAA,MAmBA,YAAY,IAnBZ;AAAA,MAoBA,WAAW,CApBX;AAAA,MAqBA,SAAS,CArBT;AAAA,MAsBA,QAAQ,4BAtBR;AAuBA,aAAM,cAAa,IAAnB;AACE,iBAAS,MAAM,CAAC,OAAP,CAAe,GAAf,EAAoB,QAApB,CAAT;AACA,YAAG,WAAU,EAAb;AAEE,sBAAY,KAAZ,CAFF;SAAA;AAIE,mBAAS,CAAC,IAAV,CAAe,MAAf;AAAA,UACA,WAAW,SAAS,CADpB,CAJF;SAFF;MAAA,CAvBA;AAAA,MAgCA,QAAQ,MAAM,CAAC,KAAP,CAAa,OAAb,CAhCR;AAAA,MAiCA,OAAO,EAjCP;AAAA,MAkCA,KAAK,CAlCL;AAAA,MAmCA,cAAc,CAnCd;AAAA,MAoCA,qBAAqB,CApCrB;AAAA,MAqCA,aAAa,MArCb;AAAA,MAsCA,UAAU,MAtCV;AAAA,MAuCA,IAAI,CAvCJ;AAAA,MA0CA,QAAQ,WAAW,KAAX,EAAkB,QAAlB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,IAAnC,CA1CR;AA4CA,aAAM,IAAI,KAAK,CAAC,MAAhB;AACE,eAAO,KAAM,GAAb;AAAA,QACA,eAAe,IAAI,CAAC,MAAL,GAAc,CAD7B;AAEA,YAAG,qBAAqB,QAArB,IAAiC,MAAK,CAAzC;AACE,cAAG,qBAAqB,QAAxB;AACE,uBAAW,OAAO,CAAC,UAAU,CAAC,SAA9B;AAAA,YACA,WAAW,QAAQ,CAAC,KAAT,CAAe,CAAf,EAAmB,QAAQ,CAAC,MAAT,GAAkB,KAAM,KAAI,CAAJ,CAAM,CAAC,MAA/B,GAAwC,CAA3D,CADX;AAAA,YAEA,OAAO,CAAC,UAAU,CAAC,SAAnB,GAA+B,QAF/B,CADF;WAAA;AAKA,cAAG,MAAK,CAAR;AACE,iBAAK,YAAL;AAAA,YACA,UAAU,EADV,CADF;WALA;AAAA,UASA,UAAU,QAAQ,CAAC,eAAT,CAAyB,KAAzB,EAAgC,OAAhC,CATV;AAAA,UAUA,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,GAA7B,EAAkC,CAAlC,CAVA;AAAA,UAWA,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,IAA7B,EAAmC,EAAnC,CAXA;AAAA,UAYA,aAAa,QAAQ,CAAC,cAAT,CAAwB,IAAxB,CAZb;AAAA,UAaA,OAAO,CAAC,WAAR,CAAoB,UAApB,CAbA;AAAA,UAcA,IAAI,CAAC,WAAL,CAAiB,OAAjB,CAdA;AAeA,cAAG,kBAAkB,SAAlB,EAA6B,cAAc,CAA3C,CAAH;AACE,mBAAO,OAAO,GAAd,CADF;WAAA;AAGE,mBAAO,OAAO,GAAd,CAHF;WAfA;AAmBA,cAAyC,MAAK,CAA9C;AAAA,mBAAO,KAAM,KAAI,CAAJ,CAAN,GAAe,GAAf,GAAqB,IAA5B;WAnBA;AAAA,UAoBA,KAAK,YApBL;AAAA,UAqBA,UAAU,EArBV,CADF;SAAA;AAwBE,cAAG,kBAAkB,SAAlB,EAA6B,cAAc,CAA3C,CAAH;AACE,oBAAQ,OAAO,GAAf,CADF;WAAA;AAGE,oBAAQ,OAAO,GAAf,CAHF;WAxBF;SAFA;AAAA,QA8BA,OAAO,CAAC,UAAU,CAAC,SAAnB,GAA+B,IA9B/B;AAAA,QA+BA,qBAAqB,OAAO,CAAC,qBAAR,KAAgC,EA/BrD;AAgCA,YAAG,MAAK,KAAK,CAAC,MAAN,GAAe,CAAvB;AACE,cAAG,qBAAqB,QAAxB;AACE,uBAAW,OAAO,CAAC,UAAU,CAAC,SAA9B;AAAA,YACA,OAAO,CAAC,UAAU,CAAC,SAAnB,GAA+B,QAAQ,CAAC,KAAT,CAAe,CAAf,EAAmB,QAAQ,CAAC,MAAT,GAAkB,KAAM,GAAE,CAAC,MAA3B,GAAoC,CAAvD,CAD/B;AAAA,YAEA,UAAU,QAAQ,CAAC,eAAT,CAAyB,KAAzB,EAAgC,OAAhC,CAFV;AAAA,YAGA,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,GAA7B,EAAkC,CAAlC,CAHA;AAAA,YAIA,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,IAA7B,EAAmC,EAAnC,CAJA;AAAA,YAKA,aAAa,QAAQ,CAAC,cAAT,CAAwB,KAAM,GAA9B,CALb;AAAA,YAMA,OAAO,CAAC,WAAR,CAAoB,UAApB,CANA;AAAA,YAOA,IAAI,CAAC,WAAL,CAAiB,OAAjB,CAPA,CADF;WADF;SAhCA;AAAA,QA0CA,GA1CA,CADF;MAAA,CA5CA;aAwFA,OAzFF;KAZM;EAAA,CAvCR;;AAAA,EAgJA,oBAAoB,SAAC,SAAD,EAAY,GAAZ;AAClB;AAAA,aAAS,KAAT;AAAA,IACA,IAAI,CADJ;AAEA,WAAM,IAAI,SAAS,CAAC,MAApB;AACE,UAAkB,SAAU,GAAV,KAAgB,GAAlC;AAAA,iBAAS,IAAT;OAAA;AAAA,MACA,GADA,CADF;IAAA,CAFA;WAKA,OANkB;EAAA,CAhJpB;;AAAA,EAyJA,aAAa,SAAC,KAAD,EAAQ,QAAR,EAAkB,CAAlB,EAAqB,EAArB,EAAyB,IAAzB;AACX;AAAA,YAAQ,CAAR;AAAA,IACA,OAAO,KADP;AAAA,IAEA,QAAQ,EAFR;AAAA,IAGA,MAAM,EAHN;AAAA,IAKA,SAAS,4BALT;AAAA,IAMA,aAAa,QAAQ,CAAC,eAAT,CAAyB,MAAzB,EAAiC,OAAjC,CANb;AAAA,IAOA,UAAU,CAAC,cAAX,CAA0B,IAA1B,EAAgC,GAAhC,EAAqC,CAArC,CAPA;AAAA,IAQA,UAAU,CAAC,cAAX,CAA0B,IAA1B,EAAgC,IAAhC,EAAsC,EAAtC,CARA;AAAA,IASA,eAAe,QAAQ,CAAC,cAAT,CAAwB,GAAxB,CATf;AAAA,IAUA,UAAU,CAAC,WAAX,CAAuB,YAAvB,CAVA;AAAA,IAYA,MAAM,CAZN;AAaA,WAAM,MAAM,IAAI,CAAC,MAAjB;AAEE,gBAAU,CAAC,UAAU,CAAC,SAAtB,GAAkC,IAAK,KAAvC;AAAA,MACA,IAAI,CAAC,WAAL,CAAiB,UAAjB,CADA;AAGA,UAAG,UAAU,CAAC,qBAAX,KAAmC,EAAnC,GAAwC,QAA3C;AACE,mBAAW,IAAK,KAAhB;AAAA,QACA,IAAI,CAAC,WAAL,CAAiB,IAAI,CAAC,UAAtB,CADA;AAAA,QAIA,QAAQ,CAJR;AAAA,QAKA,QAAQ,CALR;AAAA,QAMA,WAAW,KAAK,QAAS,GANzB;AAAA,QAOA,YAAY,EAPZ;AASA,eAAM,QAAQ,QAAQ,CAAC,MAAvB;AACE,sBAAY,QAAS,OAArB;AAAA,UACA,UAAU,CAAC,UAAU,CAAC,SAAtB,GAAkC,QADlC;AAAA,UAEA,IAAI,CAAC,WAAL,CAAiB,UAAjB,CAFA;AAGA,cAAG,UAAU,CAAC,qBAAX,KAAmC,EAAnC,GAAwC,QAA3C;AACE,iBAAK,CAAC,IAAN,CAAW,QAAQ,CAAC,SAAT,CAAmB,CAAnB,EAAsB,QAAQ,CAAC,MAAT,GAAgB,CAAtC,CAAX;AAAA,YACA,WAAW,EADX;AAAA,YAEA,YAAY,QAAS,OAFrB,CADF;WAHA;AAOA,cAAG,UAAS,QAAQ,CAAC,MAAT,GAAgB,CAA5B;AACE,iBAAK,CAAC,IAAN,CAAW,QAAX,EADF;WAPA;AASA,iBAAM,kBAAU,IAAI,CAAC,aAAL,EAAhB;AACE,gBAAI,CAAC,WAAL,CAAiB,IAAI,CAAC,UAAtB,EADF;UAAA,CATA;AAAA,UAWA,OAXA,CADF;QAAA,CAVF;OAAA;AAwBE,aAAK,CAAC,IAAN,CAAW,IAAK,KAAhB,EAxBF;OAHA;AA4BA,aAAM,kBAAU,IAAI,CAAC,aAAL,EAAhB;AACE,YAAI,CAAC,WAAL,CAAiB,IAAI,CAAC,UAAtB,EADF;MAAA,CA5BA;AAAA,MA8BA,KA9BA,CAFF;IAAA,CAbA;AA+CA,WAAM,kBAAU,IAAI,CAAC,aAAL,EAAhB;AACE,UAAI,CAAC,WAAL,CAAiB,IAAI,CAAC,UAAtB,EADF;IAAA,CA/CA;WAiDA,MAlDW;EAAA,CAzJb;;6BAAA;;GAFiC,oBAAnC","file":"/client/whiteboard_models/whiteboard_text.coffee.js","sourcesContent":["# A text in the whiteboard\nclass @WhiteboardTextModel extends WhiteboardToolModel\n\n  constructor: (@paper) ->\n    super @paper\n    # the defintion of this shape, kept so we can redraw the shape whenever needed\n    # format: x, y, width, height, colour, fontSize, calcFontSize, text\n    @definition = [0, 0, 0, 0, \"#000\", 0, 0, \"\"]\n\n  # Make a text on the whiteboard\n  make: (startingData) ->\n    #console.log \"making text:\" + JSON.stringify startingData\n\n    x = startingData.x\n    y = startingData.y\n    width = startingData.textBoxWidth\n    height = startingData.textBoxHeight\n    colour = formatColor(startingData.fontColor)\n    fontSize = startingData.fontSize\n    calcFontSize = startingData.calcedFontSize\n    text = startingData.text\n\n    @definition =\n      shape: \"text\"\n      data: [x, y, width, height, colour, fontSize, calcFontSize, text]\n\n    #calcFontSize = (calcFontSize/100 * @gh)\n    x = (x * @gw) + @xOffset\n    y = (y * @gh) + @yOffset + calcFontSize\n    width = width/100 * @gw\n\n    @obj = @paper.text(x/100, y/100, \"\")\n    @obj.attr\n      \"fill\": colour\n      \"font-family\": \"Arial\" # TODO: make dynamic\n      \"font-size\": calcFontSize\n    @obj.node.style[\"text-anchor\"] = \"start\" # force left align\n    @obj.node.style[\"textAnchor\"] = \"start\"  # for firefox, 'cause they like to be different\n    @obj\n\n  # Update text shape drawn\n  # @param  {object} the object containing the shape info\n  update: (startingData) ->\n    #console.log \"updating text\" + JSON.stringify startingData\n\n    x = startingData.x\n    y = startingData.y\n    maxWidth = startingData.textBoxWidth\n    height = startingData.textBoxHeight\n    colour = formatColor(startingData.fontColor)\n    fontSize = startingData.fontSize\n    calcFontSize = startingData.calcedFontSize\n    myText = startingData.text\n\n    if @obj?\n      @definition.data = [x, y, maxWidth, height, colour, fontSize, calcFontSize, myText]\n\n      calcFontSize = (calcFontSize/100 * @gh)\n      x = (x * @gw)/100 + @xOffset\n      maxWidth = maxWidth/100 * @gw\n\n      @obj.attr\n        \"fill\": colour\n        \"font-family\": \"Arial\" # TODO: make dynamic\n        \"font-size\": calcFontSize\n      cell = @obj.node\n      while cell? and cell.hasChildNodes()\n        cell.removeChild(cell.firstChild)\n\n      # used code from textFlow lib http://www.carto.net/papers/svg/textFlow/\n      # but had to merge it here because \"cell\" was bigger than what the stack could take\n\n      #extract and add line breaks for start\n      dashArray = new Array()\n      dashFound = true\n      indexPos = 0\n      cumulY = 0\n      svgNS = \"http://www.w3.org/2000/svg\"\n      while dashFound is true\n        result = myText.indexOf(\"-\", indexPos)\n        if result is -1\n          #could not find a dash\n          dashFound = false\n        else\n          dashArray.push result\n          indexPos = result + 1\n      #split the text at all spaces and dashes\n      words = myText.split(/[\\s-]/)\n      line = \"\"\n      dy = 0\n      curNumChars = 0\n      computedTextLength = 0\n      myTextNode = undefined\n      tspanEl = undefined\n      i = 0\n\n      #checking if any of the words exceed the width of a textBox\n      words = checkWidth(words, maxWidth, x, dy, cell)\n\n      while i < words.length\n        word = words[i]\n        curNumChars += word.length + 1\n        if computedTextLength > maxWidth or i is 0\n          if computedTextLength > maxWidth\n            tempText = tspanEl.firstChild.nodeValue\n            tempText = tempText.slice(0, (tempText.length - words[i - 1].length - 2)) #the -2 is because we also strip off white space\n            tspanEl.firstChild.nodeValue = tempText\n          #setting up coordinates for the first line of text\n          if i is 0\n            dy = calcFontSize\n            cumulY += dy\n          #alternatively one could use textLength and lengthAdjust, however, currently this is not too well supported in SVG UA's\n          tspanEl = document.createElementNS(svgNS, \"tspan\")\n          tspanEl.setAttributeNS null, \"x\", x\n          tspanEl.setAttributeNS null, \"dy\", dy\n          myTextNode = document.createTextNode(line)\n          tspanEl.appendChild myTextNode\n          cell.appendChild tspanEl\n          if checkDashPosition(dashArray, curNumChars - 1)\n            line = word + \"-\"\n          else\n            line = word + \" \"\n          line = words[i - 1] + \" \" + line  unless i is 0\n          dy = calcFontSize\n          cumulY += dy\n        else\n          if checkDashPosition(dashArray, curNumChars - 1)\n            line += word + \"-\"\n          else\n            line += word + \" \"\n        tspanEl.firstChild.nodeValue = line\n        computedTextLength = tspanEl.getComputedTextLength()+10\n        if i is words.length - 1\n          if computedTextLength > maxWidth\n            tempText = tspanEl.firstChild.nodeValue\n            tspanEl.firstChild.nodeValue = tempText.slice(0, (tempText.length - words[i].length - 1))\n            tspanEl = document.createElementNS(svgNS, \"tspan\")\n            tspanEl.setAttributeNS null, \"x\", x\n            tspanEl.setAttributeNS null, \"dy\", dy\n            myTextNode = document.createTextNode(words[i])\n            tspanEl.appendChild myTextNode\n            cell.appendChild tspanEl\n        i++\n      cumulY\n\n\n  #this function checks if there should be a dash at the given position, instead of a blank\n  checkDashPosition = (dashArray, pos) ->\n    result = false\n    i = 0\n    while i < dashArray.length\n      result = true  if dashArray[i] is pos\n      i++\n    result\n  #this function checks the width of the word and adds a \" \" if the width of the word exceeds the width of the textbox\n  #in order for the word to be split and shown properly\n  checkWidth = (words, maxWidth, x, dy, cell) ->\n    count = 0\n    temp = words\n    temp3 = []\n    str = \"\"\n\n    svgNSi = \"http://www.w3.org/2000/svg\"\n    tempSpanEl = document.createElementNS(svgNSi, \"tspan\")\n    tempSpanEl.setAttributeNS null, \"x\", x\n    tempSpanEl.setAttributeNS null, \"dy\", dy\n    tempTextNode = document.createTextNode(str)\n    tempSpanEl.appendChild tempTextNode\n\n    num = 0\n    while num < temp.length\n      #creating a textNode and adding it to the cell to check the width\n      tempSpanEl.firstChild.nodeValue = temp[num]\n      cell.appendChild tempSpanEl\n      #if width is bigger than maxWidth + whitespace between textBox borders and a word\n      if tempSpanEl.getComputedTextLength()+10 > maxWidth\n        tempWord = temp[num]\n        cell.removeChild(cell.firstChild)\n\n        #initializing temp variables\n        count = 1\n        start = 0\n        partWord = \"\" + tempWord[0]\n        tempArray = []\n        #check the width by increasing the word character by character\n        while count < tempWord.length\n          partWord += tempWord[count]\n          tempSpanEl.firstChild.nodeValue = partWord\n          cell.appendChild tempSpanEl\n          if tempSpanEl.getComputedTextLength()+10 > maxWidth\n            temp3.push partWord.substring(0, partWord.length-1)\n            partWord = \"\"\n            partWord += tempWord[count]\n          if count is tempWord.length-1\n            temp3.push partWord\n          while cell? and cell.hasChildNodes()\n            cell.removeChild(cell.firstChild)\n          count++\n      else\n        temp3.push temp[num]\n      while cell? and cell.hasChildNodes()\n        cell.removeChild(cell.firstChild)\n      num++\n\n    while cell? and cell.hasChildNodes()\n      cell.removeChild(cell.firstChild)\n    temp3"]}