{"version":3,"sources":["meteor://ðŸ’»app/client/whiteboard_models/whiteboard_poll.coffee"],"names":[],"mappings":"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","file":"/client/whiteboard_models/whiteboard_poll.coffee.js","sourcesContent":["# A poll in the whiteboard\r\nclass @WhiteboardPollModel extends WhiteboardToolModel\r\n  constructor: (@paper) ->\r\n    super @paper\r\n\r\n    # the defintion of this shape, kept so we can redraw the shape whenever needed\r\n    # format: x1, y1, x2, y2, stroke color, thickness, fill\r\n    @definition = [0, 0, 0, 0, \"#333333\", \"2px\", \"#ffffff\"]\r\n    @paper\r\n\r\n  # Creates a polling in the paper\r\n  # @param  {number} x1                the x value of the top left corner\r\n  # @param  {number} y1                the y value of the top left corner\r\n  # @param  {number} x2                the x value of the bottom right corner\r\n  # @param  {number} y2                the y value of the bottom right corner\r\n  # @param  {number} thickness         the thickness of the object's line(s)\r\n  # @param  {string} backgroundColor   the background color of the base poll rectangle\r\n  # @param  {number} calcFontSize      the default font-size of the text objects\r\n  make: (startingData) =>\r\n    #data needed to create the first base rectangle filled with white color\r\n    x1 = startingData.points[0]\r\n    y1 = startingData.points[1]\r\n    x2 = startingData.points[2] + startingData.points[0] - 0.001\r\n    y2 = startingData.points[3] + startingData.points[1] - 0.001\r\n    thickness = 2\r\n    backgroundColor = \"#ffffff\"\r\n    verticalPadding = 0\r\n    horizontalPadding = 0\r\n    calcFontSize = 30\r\n    votesTotal = 0\r\n    maxNumVotes = 0\r\n    textArray = []\r\n\r\n    #creating an array of text objects for the labels, percentages and number inside line bars\r\n    if startingData.result?\r\n      #counting the total number of votes and finding the biggest number of votes\r\n      for i in [0..startingData.result.length-1]\r\n        votesTotal += startingData.result[i].num_votes\r\n        if maxNumVotes < startingData.result[i].num_votes\r\n          maxNumVotes = startingData.result[i].num_votes\r\n        textArray[i] = []\r\n      #filling the array with proper text objects to display\r\n      for i in [0..startingData.result.length-1]\r\n        textArray[i].push(startingData.result[i].key, startingData.result[i].num_votes+\"\")\r\n        if votesTotal is 0\r\n          textArray[i].push(\"0%\")\r\n        else\r\n          percResult = startingData.result[i].num_votes/votesTotal*100;\r\n          textArray[i].push(Math.round(percResult) + \"%\")\r\n\r\n    #if coordinates are reversed - change them back\r\n    if x2 < x1\r\n        [x1, x2] = [x2, x1]\r\n    if y2 < y1\r\n      [y1, y2] = [y2, y1]\r\n\r\n    #Params:\r\n    #x      - the actual calculated x value of the top left corner of the polling area\r\n    #y      - the actual calculated y value of the top left corner of the polling area\r\n    #width  - the width of the polling area\r\n    #height - the height of the polling area\r\n    x = x1 * @gw + @xOffset\r\n    y = y1 * @gh + @yOffset\r\n    width = (x2 * @gw + @xOffset) - x\r\n    height = (y2 * @gh + @yOffset) - y\r\n\r\n    #creating a base outer rectangle\r\n    @obj = @paper.rect(x, y, width, height, 0)\r\n    @obj.attr \"fill\", backgroundColor\r\n    @obj.attr \"stroke-width\", 0\r\n    @definition =\r\n      shape: \"poll_result\"\r\n      data: [x1, y1, x2, y2, @obj.attrs[\"stroke\"], @obj.attrs[\"stroke-width\"], @obj.attrs[\"fill\"]]\r\n\r\n    #recalculated coordinates, width and height for the inner rectangle\r\n    width = width*0.95\r\n    height = height - width*0.05\r\n    x = x+width*0.025\r\n    y = y+width*0.025\r\n\r\n    #creating a base inner rectangle\r\n    @obj1 = @paper.rect(x, y, width, height, 0)\r\n    @obj1.attr \"stroke\", \"#333333\"\r\n    @obj1.attr \"fill\", backgroundColor\r\n    @obj1.attr \"stroke-width\", zoomStroke(formatThickness(thickness))\r\n    @definition =\r\n      shape: \"poll_result\"\r\n      data: [x1, y1, x2, y2, @obj.attrs[\"stroke\"], @obj1.attrs[\"stroke-width\"], @obj1.attrs[\"fill\"]]\r\n\r\n    #Calculating a proper font-size, and the maximum widht and height of the objects\r\n    calculatedData = calculateFontAndWidth(textArray, calcFontSize, width, height, x, y)\r\n    calcFontSize = calculatedData[0]\r\n    maxLeftWidth = calculatedData[1]\r\n    maxRightWidth = calculatedData[2]\r\n    maxLineHeight = calculatedData[3]\r\n    maxDigitWidth = calculatedData[4]\r\n    maxBarWidth = width*0.9-maxLeftWidth-maxRightWidth\r\n    barHeight = height*0.75/textArray.length\r\n    svgNSi = \"http://www.w3.org/2000/svg\"\r\n\r\n    #Initializing a text element for further calculations and for the left column of keys\r\n    @obj2 = @paper.text(x, y, \"\")\r\n    @obj2.attr\r\n      \"fill\": \"#333333\"\r\n      \"font-family\": \"Arial\"\r\n      \"font-size\": calcFontSize\r\n    @obj2.node.style[\"text-anchor\"] = \"start\" # force left align\r\n    @obj2.node.style[\"textAnchor\"] = \"start\"  # for firefox, 'cause they like to be different\r\n    leftCell = @obj2.node\r\n    while leftCell? and leftCell.hasChildNodes()\r\n      leftCell.removeChild(leftCell.firstChild)\r\n\r\n    #Initializing a text element for the right column of percentages\r\n    @obj3 = @paper.text(x, y, \"\")\r\n    @obj3.attr\r\n      \"fill\": \"#333333\"\r\n      \"font-family\": \"Arial\"\r\n      \"font-size\": calcFontSize\r\n    @obj3.node.style[\"text-anchor\"] = \"end\" # force right align\r\n    @obj3.node.style[\"textAnchor\"] = \"end\"  # for firefox, 'cause they like to be different\r\n    rightCell = @obj3.node\r\n    while rightCell? and rightCell.hasChildNodes()\r\n      rightCell.removeChild(rightCell.firstChild)\r\n\r\n\r\n    #setting a font size for the text elements on the left and on the right\r\n    leftCell.style['font-size'] = calcFontSize\r\n    rightCell.style['font-size'] = calcFontSize\r\n    #Horizontal padding\r\n    horizontalPadding = width*0.1/4\r\n    #Vertical padding\r\n    verticalPadding = height*0.25/(textArray.length+1)\r\n\r\n    #*****************************************************************************************************\r\n    #******************************************MAGIC NUMBER***********************************************\r\n    #There is no automatic vertical centering in SVG.\r\n    #To center the text element we have to move it down by the half of its height.\r\n    #But every text element has its own padding by default.\r\n    #The height we receive by calling getBBox() includes padding, but the anchor point doesn't consider it.\r\n    #This way the text element is moved down a little bit too much and we have to move it up a bit.\r\n    #Number 3.5 seems to work fine.\r\n    # Oleksandr Zhurbenko. August 19, 2015\r\n    magicNumber = 3.5\r\n    #*****************************************************************************************************\r\n\r\n    #Initial coordinates of the key column\r\n    yLeft = y+verticalPadding+barHeight/2 - magicNumber\r\n    xLeft = x + horizontalPadding + 1\r\n    #Initial coordinates of the line bar column\r\n    xBar = x+maxLeftWidth+horizontalPadding*2\r\n    yBar = y + verticalPadding\r\n    #Initial coordinates of the percentage column\r\n    yRight = y+verticalPadding+barHeight/2 - magicNumber\r\n    xRight = x + horizontalPadding*3 + maxLeftWidth + maxRightWidth + maxBarWidth + 1\r\n    objects = [@obj, @obj1, @obj2, @obj3]\r\n\r\n    for i in [0..textArray.length-1]\r\n      #Adding an element to the left column\r\n      tempSpanEl = document.createElementNS(svgNSi, \"tspan\")\r\n      tempSpanEl.setAttributeNS null, \"x\", xLeft\r\n      tempSpanEl.setAttributeNS null, \"y\", yLeft\r\n      tempSpanEl.setAttributeNS null, \"dy\", maxLineHeight/2\r\n      tempTextNode = document.createTextNode(textArray[i][0])\r\n      tempSpanEl.appendChild tempTextNode\r\n      leftCell.appendChild tempSpanEl\r\n\r\n      #drawing a black graph bar\r\n      if maxNumVotes is 0 or startingData.result[i].num_votes is 0\r\n        barWidth = 2\r\n      else\r\n        barWidth = startingData.result[i].num_votes / maxNumVotes * maxBarWidth\r\n      @obj4 = @paper.rect(xBar, yBar, barWidth, barHeight, 0)\r\n      @obj4.attr \"stroke\", \"#333333\"\r\n      @obj4.attr \"fill\", \"#333333\"\r\n      @obj4.attr \"stroke-width\", zoomStroke(formatThickness(0))\r\n      objects.push @obj4\r\n\r\n      #Adding an element to the right column\r\n      tempSpanEl = document.createElementNS(svgNSi, \"tspan\")\r\n      tempSpanEl.setAttributeNS null, \"x\", xRight\r\n      tempSpanEl.setAttributeNS null, \"y\", yRight\r\n      tempSpanEl.setAttributeNS null, \"dy\", maxLineHeight/2\r\n      tempTextNode = document.createTextNode(textArray[i][2])\r\n      tempSpanEl.appendChild tempTextNode\r\n      rightCell.appendChild tempSpanEl\r\n\r\n      #changing the Y coordinate for all the objects\r\n      yBar = yBar + barHeight + verticalPadding\r\n      yLeft = yLeft + barHeight + verticalPadding\r\n      yRight = yRight + barHeight + verticalPadding\r\n\r\n    #Initializing a text element for the number of votes text field inside the line bar\r\n    @obj5 = @paper.text(x, y, \"\")\r\n    @obj5.attr\r\n      \"fill\": \"#333333\"\r\n      \"font-family\": \"Arial\"\r\n      \"font-size\": calcFontSize\r\n    centerCell = @obj5.node\r\n    while centerCell? and centerCell.hasChildNodes()\r\n      centerCell.removeChild(centerCell.firstChild)\r\n\r\n    #Initial coordinates of the text inside the bar column\r\n    xNumVotesDefault = x+maxLeftWidth+horizontalPadding*2\r\n    xNumVotesMovedRight = xNumVotesDefault + barWidth/2 + horizontalPadding + maxDigitWidth/2\r\n    yNumVotes = y + verticalPadding - magicNumber\r\n    color = \"white\"\r\n    #Drawing the text element with the number of votes inside of the black line bars\r\n    #Or outside if a line bar is too small\r\n    for i in [0..textArray.length-1]\r\n      if maxNumVotes is 0 or startingData.result[i].num_votes is 0\r\n        barWidth = 2\r\n      else\r\n        barWidth = startingData.result[i].num_votes / maxNumVotes * maxBarWidth\r\n      if barWidth < maxDigitWidth + 8\r\n        xNumVotes = xNumVotesMovedRight\r\n        color = \"#333333\"\r\n      else\r\n        xNumVotes = xNumVotesDefault\r\n        color = \"white\"\r\n\r\n      tempSpanEl = document.createElementNS(svgNSi, \"tspan\")\r\n      tempSpanEl.setAttributeNS null, \"x\", xNumVotes + barWidth/2\r\n      tempSpanEl.setAttributeNS null, \"y\", yNumVotes + barHeight/2\r\n      tempSpanEl.setAttributeNS null, \"dy\", maxLineHeight/2\r\n      tempSpanEl.setAttributeNS null, \"fill\", color\r\n      tempTextNode = document.createTextNode(startingData.result[i].num_votes)\r\n      tempSpanEl.appendChild tempTextNode\r\n      centerCell.appendChild tempSpanEl\r\n      yNumVotes = yNumVotes + barHeight + verticalPadding\r\n\r\n    objects.push @obj5\r\n    objects\r\n\r\n\r\n  # Update the poll dimensions. Does nothing.\r\n  update: (startingData) ->\r\n\r\ncalculateFontAndWidth = (textArray, calcFontSize, width, height, x, y) ->\r\n    calculatedData = []\r\n    #maximum line width can be either 1/3 of the line or 40px\r\n    #maximum line height is 75% of the initial size of the box divided by the number of lines\r\n    maxLineWidth = width/3\r\n    maxLineHeight = height*0.75/textArray?.length\r\n\r\n    #calculating a proper font-size\r\n    flag = true\r\n    while flag\r\n      flag = false\r\n      for i in [0..textArray.length-1]\r\n        for j in [0..textArray[i].length-1]\r\n          test = getRenderedTextSize(textArray[i][j], calcFontSize)\r\n          spanWidth = test[0]\r\n          spanHeight = test[1]\r\n          if spanWidth > maxLineWidth or spanHeight > maxLineHeight\r\n            calcFontSize -= 1\r\n            flag = true\r\n    calculatedData.push calcFontSize\r\n\r\n    #looking for a maximum width and height of the left and right text elements\r\n    maxLeftWidth = 0\r\n    maxRightWidth = 0\r\n    maxLineHeight = 0\r\n    for line in textArray\r\n      test = getRenderedTextSize(line[0], calcFontSize)\r\n      spanWidth = test[0]\r\n      spanHeight = test[1]\r\n      if spanWidth > maxLeftWidth\r\n        maxLeftWidth = spanWidth\r\n      if spanHeight > maxLineHeight\r\n        maxLineHeight = spanHeight\r\n      test = getRenderedTextSize(line[2], calcFontSize)\r\n      spanWidth = test[0]\r\n      spanHeight = test[1]\r\n      if spanWidth > maxRightWidth\r\n        maxRightWidth = spanWidth\r\n      if spanHeight > maxLineHeight\r\n        maxLineHeight = spanHeight\r\n\r\n    test = getRenderedTextSize(\"0\", calcFontSize)\r\n    spanWidth = test[0]\r\n    spanHeight = test[1]\r\n    maxDigitWidth = spanWidth\r\n    calculatedData.push maxLeftWidth, maxRightWidth, maxLineHeight, maxDigitWidth\r\n    calculatedData\r\n\r\n\r\n  getRenderedTextSize = (string, fontSize) ->\r\n    paper = Raphael(0, 0, 0, 0)\r\n    paper.canvas.style.visibility = 'hidden'\r\n    el = paper.text(0, 0, string)\r\n    el.attr \"font-family\", \"Arial\"\r\n    el.attr \"font-size\", fontSize\r\n    bBox = el.getBBox()\r\n    paper.remove()\r\n    arrayTest = []\r\n    arrayTest.push bBox.width\r\n    arrayTest.push bBox.height\r\n    paper.remove()\r\n    arrayTest\r\n"]}