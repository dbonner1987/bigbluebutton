{"version":3,"sources":["meteor://ðŸ’»app/client/views/chat/chat_bar.coffee"],"names":[],"mappings":"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","file":"/client/views/chat/chat_bar.coffee.js","sourcesContent":["# --------------------------------------------------------------------------------------------------------------------\r\n# If a function's last line is the statement false that represents the function returning false\r\n# A function such as a click handler will continue along with the propogation and default behaivour if not stopped\r\n# Returning false stops propogation/prevents default. You cannot always use the event object to call these methods\r\n# Because most Meteor event handlers set the event object to the exact context of the event which does not\r\n# allow you to simply call these methods.\r\n# --------------------------------------------------------------------------------------------------------------------\r\n\r\n@activateBreakLines = (str) ->\r\n  if typeof str is 'string'\r\n    # turn '\\r' carriage return characters into '<br/>' break lines\r\n    res = str.replace(new RegExp(CARRIAGE_RETURN, 'g'), BREAK_LINE)\r\n    res\r\n\r\n@detectUnreadChat = ->\r\n  #if the current tab is not the same as the tab we just published in\r\n  Meteor.Chat.find({}).observe({\r\n    added: (chatMessage) =>\r\n      findDestinationTab = ->\r\n        if chatMessage.message?.chat_type is \"PUBLIC_CHAT\"\r\n          \"PUBLIC_CHAT\"\r\n        else\r\n          chatMessage.message?.from_userid\r\n      Tracker.autorun (comp) ->\r\n        tabsTime = getInSession('userListRenderedTime')\r\n        if tabsTime? and chatMessage.message.from_userid isnt \"SYSTEM_MESSAGE\" and chatMessage.message.from_time - tabsTime > 0\r\n          populateNotifications(chatMessage) # check if we need to show a new notification\r\n          destinationTab = findDestinationTab()\r\n          if destinationTab isnt getInSession \"inChatWith\"\r\n            setInSession 'chats', getInSession('chats').map((tab) ->\r\n              if tab.userId is destinationTab\r\n                tab.gotMail = true\r\n                tab.number++\r\n              tab\r\n            )\r\n        comp.stop()\r\n    })\r\n\r\n# This method returns all messages for the user. It looks at the session to determine whether the user is in\r\n# private or public chat. If true is passed, messages returned are from before the user joined. Else, the messages are from after the user joined\r\n@getFormattedMessagesForChat = ->\r\n  chattingWith = getInSession('inChatWith')\r\n  if chattingWith is 'PUBLIC_CHAT' # find all public and system messages\r\n    return Meteor.Chat.find({'message.chat_type': $in: [\"SYSTEM_MESSAGE\",\"PUBLIC_CHAT\"]},{sort: {'message.from_time': 1}}).fetch()\r\n  else\r\n    return Meteor.Chat.find({'message.chat_type': 'PRIVATE_CHAT', $or: [{'message.to_userid': chattingWith},{'message.from_userid': chattingWith}]}).fetch()\r\n\r\n# Scrolls the message container to the bottom. The number of pixels to scroll down is the height of the container\r\nHandlebars.registerHelper \"autoscroll\", ->\r\n  $('#chatbody').scrollTop($('#chatbody')[0]?.scrollHeight)\r\n  false\r\n\r\n# true if the lock settings limit public chat and the current user is locked\r\nHandlebars.registerHelper \"publicChatDisabled\", ->\r\n  userIsLocked = Meteor.Users.findOne({userId:getInSession 'userId'})?.user.locked\r\n  publicChatIsDisabled = Meteor.Meetings.findOne({})?.roomLockSettings.disablePublicChat\r\n  presenter = Meteor.Users.findOne({userId:getInSession 'userId'})?.user.presenter\r\n  return userIsLocked and publicChatIsDisabled and !presenter\r\n\r\n# true if the lock settings limit private chat and the current user is locked\r\nHandlebars.registerHelper \"privateChatDisabled\", ->\r\n  userIsLocked = Meteor.Users.findOne({userId:getInSession 'userId'})?.user.locked\r\n  privateChatIsDisabled = Meteor.Meetings.findOne({})?.roomLockSettings.disablePrivateChat\r\n  presenter = Meteor.Users.findOne({userId:getInSession 'userId'})?.user.presenter\r\n  return userIsLocked and privateChatIsDisabled and !presenter\r\n\r\n# return whether the user's chat pane is open in Private chat\r\nHandlebars.registerHelper \"inPrivateChat\", ->\r\n  return (getInSession 'inChatWith') isnt 'PUBLIC_CHAT'\r\n\r\n@sendMessage = ->\r\n  message = linkify $('#newMessageInput').val() # get the message from the input box\r\n  unless (message?.length > 0 and (/\\S/.test(message))) # check the message has content and it is not whitespace\r\n    return # do nothing if invalid message\r\n\r\n  color = \"0x000000\" #\"0x#{getInSession(\"messageColor\")}\"\r\n  if (chattingWith = getInSession('inChatWith')) isnt \"PUBLIC_CHAT\"\r\n    toUsername = Meteor.Users.findOne(userId: chattingWith)?.user.name\r\n    BBB.sendPrivateChatMessage(color, \"en\", message, chattingWith, toUsername)\r\n  else\r\n    BBB.sendPublicChatMessage(color, \"en\", message)\r\n\r\n  $('#newMessageInput').val '' # Clear message box\r\n\r\nTemplate.chatbar.helpers\r\n  getCombinedMessagesForChat: ->\r\n    msgs = getFormattedMessagesForChat()\r\n    len = msgs?.length # get length of messages\r\n    i = 0\r\n    while i < len # Must be a do while, for loop compiles and stores the length of array which can change inside the loop!\r\n      if msgs[i].message.from_userid isnt 'System' # skip system messages\r\n        j = i+1 # Start looking at messages right after the current one\r\n\r\n        while j < len\r\n          deleted = false\r\n          if msgs[j].message.from_userid isnt 'System' # Ignore system messages\r\n            # Check if the time discrepancy between the two messages exceeds window for grouping\r\n            if (parseFloat(msgs[j].message.from_time)-parseFloat(msgs[i].message.from_time)) >= 60000 # 60 seconds/1 minute\r\n              break # Messages are too far between, so them seperated and stop joining here\r\n\r\n            if msgs[i].message.from_userid is msgs[j].message.from_userid # Both messages are from the same user\r\n              # insert a '\\r' carriage return character between messages to put them on a new line\r\n              msgs[i].message.message += \"#{CARRIAGE_RETURN}#{msgs[j].message.message}\" # Combine the messages\r\n              msgs.splice(j,1) # Delete the message from the collection\r\n              deleted = true\r\n            else break # Messages are from different people, move on\r\n            #\r\n          else break # This is the break point in the chat, don't merge\r\n          #\r\n          len = msgs.length\r\n          ++j if not deleted\r\n      #\r\n      ++i\r\n      len = msgs.length\r\n\r\n    msgs\r\n\r\n  userExists: ->\r\n    if getInSession('inChatWith') is \"PUBLIC_CHAT\"\r\n      return true\r\n    else\r\n      return Meteor.Users.findOne({userId: getInSession('inChatWith')})?\r\n\r\n# When chatbar gets rendered, launch the auto-check for unread chat\r\nTemplate.chatbar.rendered = ->\r\n  detectUnreadChat()\r\n\r\n# When \"< Public\" is clicked, go to public chat\r\nTemplate.chatbar.events\r\n  'click .toPublic': (event) ->\r\n    setInSession 'inChatWith', 'PUBLIC_CHAT'\r\n    setInSession 'chats', getInSession('chats').map((chat) ->\r\n      if chat.userId is \"PUBLIC_CHAT\"\r\n        chat.gotMail = false\r\n        chat.number = 0\r\n      chat\r\n    )\r\n\r\nTemplate.privateChatTab.rendered = ->\r\n  if isLandscape() or isPortrait()\r\n    $(\"#newMessageInput\").focus()\r\n\r\n# When message gets rendered, scroll to the bottom\r\nTemplate.message.rendered = ->\r\n  $('#chatbody').scrollTop($('#chatbody')[0]?.scrollHeight)\r\n  false\r\n\r\nTemplate.chatInput.rendered = ->\r\n  $('.panel-footer').resizable\r\n    handles: 'n'\r\n    minHeight: 70\r\n    resize: (event, ui) ->\r\n      if $('.panel-footer').css('top') is '0px'\r\n        $('.panel-footer').height(70) # prevents the element from shrinking vertically for 1-2 px\r\n      else\r\n        $('.panel-footer').css('top', parseInt($('.panel-footer').css('top')) + 1 + 'px')\r\n      $('#chatbody').height($('#chat').height() - $('.panel-footer').height() - 45)\r\n      $('#chatbody').scrollTop($('#chatbody')[0]?.scrollHeight)\r\n    start: (event, ui) ->\r\n      $('#newMessageInput').css('overflow', '')\r\n      $('.panel-footer').resizable('option', 'maxHeight', Math.max($('.panel-footer').height(), $('#chat').height() / 2))\r\n    stop: (event, ui) ->\r\n      setInSession 'chatInputMinHeight', $('.panel-footer').height() + 1\r\n\r\nTemplate.chatInput.events\r\n  'click #sendMessageButton': (event) ->\r\n    $('#sendMessageButton').blur()\r\n    sendMessage()\r\n    adjustChatInputHeight()\r\n\r\n  'keypress #newMessageInput': (event) -> # user pressed a button inside the chatbox\r\n    key = (if event.charCode then event.charCode else (if event.keyCode then event.keyCode else 0))\r\n\r\n    if event.shiftKey and (key is 13)\r\n      event.preventDefault()\r\n      # append a '\\r' carriage return character to the input box dropping the cursor to a new line\r\n      document.getElementById(\"newMessageInput\").value += CARRIAGE_RETURN # Change newline character\r\n      return\r\n\r\n    if key is 13 # Check for pressing enter to submit message\r\n      event.preventDefault()\r\n      sendMessage()\r\n      $('#newMessageInput').val(\"\")\r\n      return false\r\n\r\nTemplate.chatInputControls.rendered = ->\r\n  $('#newMessageInput').on('keydown paste cut', () -> setTimeout(() ->\r\n    adjustChatInputHeight()\r\n  , 0))\r\n\r\nTemplate.message.helpers\r\n  sanitizeAndFormat: (str) ->\r\n    if typeof str is 'string'\r\n      # First, replace replace all tags with the ascii equivalent (excluding those involved in anchor tags)\r\n      res = str.replace(/&/g, '&amp;').replace(/<(?![au\\/])/g, '&lt;').replace(/\\/([^au])>/g, '$1&gt;').replace(/([^=])\"(?!>)/g, '$1&quot;');\r\n      res = toClickable res\r\n      res = activateBreakLines res\r\n\r\n  toClockTime: (epochTime) ->\r\n    if epochTime is null\r\n      return \"\"\r\n    local = new Date()\r\n    offset = local.getTimezoneOffset()\r\n    epochTime = epochTime - offset * 60000 # 1 min = 60 s = 60,000 ms\r\n    dateObj = new Date(epochTime)\r\n    hours = dateObj.getUTCHours()\r\n    minutes = dateObj.getUTCMinutes()\r\n    if minutes < 10\r\n      minutes = \"0\" + minutes\r\n    hours + \":\" + minutes\r\n\r\n# make links received from Flash client clickable in HTML\r\n@toClickable = (str) ->\r\n  if typeof str is 'string'\r\n    res = str.replace /<a href='event:/gim, \"<a target='_blank' href='\"\r\n    res = res.replace /<a href=\"event:/gim, '<a target=\"_blank\" href=\"'\r\n"]}