{"version":3,"sources":["meteor://ðŸ’»app/client/whiteboard_models/whiteboard_paper.coffee"],"names":[],"mappings":"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","file":"/client/whiteboard_models/whiteboard_paper.coffee.js","sourcesContent":["# \"Paper\" which is the Raphael term for the entire SVG object on the webpage.\n# This class deals with this SVG component only.\nclass Meteor.WhiteboardPaperModel\n\n  # Container must be a DOM element\n  constructor: (@container) ->\n    # a WhiteboardCursorModel\n    @cursor = null\n\n    # all slides in the presentation indexed by url\n    @slides = {}\n\n    @panX = null\n    @panY = null\n\n    @current = {}\n\n    # the slide being shown\n    @current.slide = null\n\n    # a raphaeljs set with all the shapes in the current slide\n    @current.shapes = null\n    # a list of shapes as passed to this client when it receives `all_slides`\n    # (se we are able to redraw the shapes whenever needed)\n    @current.shapeDefinitions = []\n\n    @zoomLevel = 1\n    @shiftPressed = false\n    @currentPathCount = 0\n\n    @_updateContainerDimensions()\n\n    @zoomObserver = null\n\n    @adjustedWidth = 0\n    @adjustedHeight = 0\n\n    @widthRatio = 100\n    @heightRatio = 100\n\n  # Initializes the paper in the page.\n  # Can't do these things in initialize() because by then some elements\n  # are not yet created in the page.\n  create: ->\n    # paper is embedded within the div#slide of the page.\n    # @raphaelObj ?= ScaleRaphael(@container, \"900\", \"500\")\n\n    h = $(\"#\"+@container).height()\n    w = $(\"#\"+@container).width()\n\n    @raphaelObj ?= ScaleRaphael(@container, w, h)\n    @raphaelObj ?= ScaleRaphael(@container, $container.innerHeight(), $container.innerWidth())\n\n    @raphaelObj.canvas.setAttribute \"preserveAspectRatio\", \"xMinYMin slice\"\n\n    @createCursor()\n\n    if @slides\n      @rebuild()\n    else\n      @slides = {} # if previously loaded\n    unless navigator.userAgent.indexOf(\"Firefox\") is -1\n      @raphaelObj.renderfix()\n\n    @raphaelObj\n\n  # Re-add the images to the paper that are found\n  # in the slides array (an object of urls and dimensions).\n  rebuild: ->\n    @current.slide = null\n    for url of @slides\n      if @slides.hasOwnProperty(url)\n        @addImageToPaper url, @slides[url].getWidth(), @slides[url].getHeight()\n\n  scale: (width, height) ->\n    @raphaelObj?.changeSize(width, height)\n\n  # Add an image to the paper.\n  # @param {string} url the URL of the image to add to the paper\n  # @param {number} width   the width of the image (in pixels)\n  # @param {number} height   the height of the image (in pixels)\n  # @return {Raphael.image} the image object added to the whiteboard\n  addImageToPaper: (url, width, height) ->\n    @_updateContainerDimensions()\n\n    # solve for the ratio of what length is going to fit more than the other\n    max = Math.max(width / @containerWidth, height / @containerHeight)\n    # fit it all in appropriately\n    url = @_slideUrl(url)\n    sw = width / max\n    sh = height / max\n    #cx = (@containerWidth / 2) - (width / 2)\n    #cy = (@containerHeight / 2) - (height / 2)\n    img = @raphaelObj.image(url, cx = 0, cy = 0, width, height)\n\n    # sw slide width as percentage of original width of paper\n    # sh slide height as a percentage of original height of paper\n    # x-offset from top left corner as percentage of original width of paper\n    # y-offset from top left corner as percentage of original height of paper\n    @slides[url] = new WhiteboardSlideModel(img.id, url, img, width, height, sw, sh, cx, cy)\n\n    unless @current.slide?\n      img.toBack()\n      @current.slide = @slides[url]\n    else if @current.slide.url is url\n      img.toBack()\n    else\n      img.hide()\n\n    # TODO: other places might also required an update in these dimensions\n    @_updateContainerDimensions()\n\n    @_updateZoomRatios()\n    if @raphaelObj.w is 100 # on first load: Raphael object is initially tiny\n      @cursor.setRadius(0.65 * @widthRatio / 100)\n    else\n      @cursor.setRadius(6 * @widthRatio / 100)\n\n    img\n\n  # Removes all the images from the Raphael paper.\n  removeAllImagesFromPaper: ->\n    for url of @slides\n      if @slides.hasOwnProperty(url)\n        @raphaelObj.getById(@slides[url]?.getId())?.remove()\n        #@trigger('paper:image:removed', @slides[url].getId()) # Removes the previous image preventing images from being redrawn over each other repeatedly\n    @slides = {}\n    @current.slide = null\n\n\n  # Switches the tool and thus the functions that get\n  # called when certain events are fired from Raphael.\n  # @param  {string} tool the tool to turn on\n  # @return {undefined}\n  setCurrentTool: (tool) ->\n    @currentTool = tool\n    console.log \"setting current tool to\", tool\n    switch tool\n      when \"line\"\n        @cursor.undrag()\n        @current.line = @_createTool(tool)\n        @cursor.drag(@current.line.dragOnMove, @current.line.dragOnStart, @current.line.dragOnEnd)\n      when \"rectangle\"\n        @cursor.undrag()\n        @current.rectangle = @_createTool(tool)\n        @cursor.drag(@current.rectangle.dragOnMove, @current.rectangle.dragOnStart, @current.rectangle.dragOnEnd)\n      else\n        console.log \"ERROR: Cannot set invalid tool:\", tool\n\n  # Clear all shapes from this paper.\n  clearShapes: ->\n    if @current.shapes?\n      @current.shapes.forEach (element) ->\n        element.remove()\n      @current.shapeDefinitions = []\n      @current.shapes.clear()\n    @clearCursor()\n    @createCursor()\n\n  clearCursor: ->\n    @cursor?.remove()\n\n  createCursor: ->\n    if @raphaelObj.w is 100 # on first load: Raphael object is initially tiny\n      @cursor = new WhiteboardCursorModel(@raphaelObj, 0.65)\n      @cursor.setRadius(0.65 * @widthRatio / 100)\n    else\n      @cursor = new WhiteboardCursorModel(@raphaelObj)\n      @cursor.setRadius(6 * @widthRatio / 100)\n    @cursor.draw()\n\n  # Updated a shape `shape` with the data in `data`.\n  # TODO: check if the objects exist before calling update, if they don't they should be created\n  updateShape: (shape, data) ->\n    @current[shape].update(data)\n\n  # Make a shape `shape` with the data in `data`.\n  makeShape: (shape, data) ->\n    data.thickness *= @adjustedWidth / 1000\n\n    tool = null\n    #TODO pay attention to this array, data in this array slows down the whiteboard\n    #console.log @current\n    #console.log @\n    @current[shape] = @_createTool(shape)\n    toolModel = @current[shape]\n    tool = @current[shape].make(data)\n\n    if tool? and shape isnt \"poll_result\"\n      @current.shapes ?= @raphaelObj.set()\n      @current.shapes.push(tool)\n      @current.shapeDefinitions.push(toolModel.getDefinition())\n\n    #We have a separate case for Poll as it returns an array instead of just one object\n    if tool? and shape is \"poll_result\"\n      @current.shapes ?= @raphaelObj.set()\n      for obj in tool\n        @current.shapes.push(obj)\n      @current.shapeDefinitions.push(toolModel.getDefinition())\n\n  # Update the cursor position on screen\n  # @param  {number} x the x value of the cursor as a percentage of the width\n  # @param  {number} y the y value of the cursor as a percentage of the height\n  moveCursor: (x, y) ->\n    [cx, cy] = @_currentSlideOffsets()\n    [slideWidth, slideHeight] = @_currentSlideOriginalDimensions()\n    @cursor.setPosition(x * slideWidth + cx, y * slideHeight + cy)\n\n    #if the slide is zoomed in then move the cursor based on where the viewBox is looking\n    if @viewBoxXpos? && @viewBoxYPos?  && @viewBoxWidth? && @viewBoxHeight?\n      @cursor.setPosition( @viewBoxXpos + x * @viewBoxWidth, @viewBoxYPos + y * @viewBoxHeight )\n\n  zoomAndPan: (widthRatio, heightRatio, xOffset, yOffset) ->\n    # console.log \"zoomAndPan #{widthRatio} #{heightRatio} #{xOffset} #{yOffset}\"\n    newX = - xOffset * 2 * @adjustedWidth / 100\n    newY = - yOffset * 2 * @adjustedHeight / 100\n    newWidth = @adjustedWidth * widthRatio / 100\n    newHeight = @adjustedHeight * heightRatio / 100\n    @raphaelObj.setViewBox(newX, newY, newWidth, newHeight) # zooms and pans\n\n  setAdjustedDimensions: (width, height) ->\n    @adjustedWidth = width\n    @adjustedHeight = height\n\n  # Update the dimensions of the container.\n  _updateContainerDimensions: ->\n    $container = $('#whiteboard-paper')\n\n    containerDimensions = scaleSlide(getInSession('slideOriginalWidth'), getInSession('slideOriginalHeight'))\n    if($container.innerWidth() is 0)\n      @containerWidth = containerDimensions.boardWidth\n    else\n      @containerWidth = $container.innerWidth()\n    if($container.innerHeight() is 0)\n      @containerHeight = containerDimensions.boardHeight\n    else\n      @containerHeight = $container.innerHeight()\n\n    @containerOffsetLeft = $container.offset()?.left\n    @containerOffsetTop = $container.offset()?.top\n\n  _updateZoomRatios: ->\n    currentSlideDoc = getCurrentSlideDoc()\n    @widthRatio = currentSlideDoc.slide.width_ratio\n    @heightRatio = currentSlideDoc.slide.height_ratio\n\n  # Retrieves an image element from the paper.\n  # The url must be in the slides array.\n  # @param  {string} url        the url of the image (must be in slides array)\n  # @return {Raphael.image}     return the image or null if not found\n  _getImageFromPaper: (url) ->\n    if @slides[url]\n      id = @slides[url].getId()\n      return @raphaelObj.getById(id) if id?\n    null\n\n  _currentSlideDimensions: ->\n    if @current.slide? then @current.slide.getDimensions() else [0, 0]\n\n  _currentSlideOriginalDimensions: ->\n    if @current.slide? then @current.slide.getOriginalDimensions() else [0, 0]\n\n  _currentSlideOffsets: ->\n    if @current.slide? then @current.slide.getOffsets() else [0, 0]\n\n  # Wrapper method to create a tool for the whiteboard\n  _createTool: (type) ->\n    switch type\n      when \"pencil\"\n        model = WhiteboardLineModel\n      when \"path\", \"line\"\n        model = WhiteboardLineModel\n      when \"rectangle\"\n        model = WhiteboardRectModel\n      when \"ellipse\"\n        model = WhiteboardEllipseModel\n      when \"triangle\"\n        model = WhiteboardTriangleModel\n      when \"text\"\n        model = WhiteboardTextModel\n      when \"poll_result\"\n        model = WhiteboardPollModel\n\n    if model?\n      [slideWidth, slideHeight] = @_currentSlideOriginalDimensions()\n      [xOffset, yOffset] = @_currentSlideOffsets()\n      [width, height] = @_currentSlideDimensions()\n\n      tool = new model(@raphaelObj)\n      # TODO: why are the parameters inverted and it works?\n      tool.setPaperSize(slideHeight, slideWidth)\n      tool.setOffsets(xOffset, yOffset)\n      tool.setPaperDimensions(width,height)\n      tool\n    else\n      null\n\n  # Adds the base url (the protocol+server part) to `url` if needed.\n  _slideUrl: (url) ->\n    if url?.match(/http[s]?:/)\n      url\n    else\n      console.log \"The url '#{url}'' did not match the expected format of: http/s\"\n      #globals.presentationServer + url\n\n  #Changes the currently displayed page/slide (if any) with this one\n  #@param {data} message object containing the \"presentation\" object\n  _displayPage: (data, originalWidth, originalHeight) ->\n    @removeAllImagesFromPaper()\n\n    @_updateContainerDimensions()\n    boardWidth = @containerWidth\n    boardHeight = @containerHeight\n\n    currentSlide = getCurrentSlideDoc()\n    currentPresentation = Meteor.Presentations.findOne({\"presentation.current\": true})\n    presentationId = currentPresentation?.presentation?.id\n    currentSlideCursor = Meteor.Slides.find({\"presentationId\": presentationId, \"slide.current\": true})\n\n    if @zoomObserver isnt null\n      @zoomObserver.stop()\n    _this = this\n    @zoomObserver = currentSlideCursor.observe # watching the current slide changes\n      changed: (newDoc, oldDoc) ->\n        if originalWidth <= originalHeight\n          @adjustedWidth = boardHeight * originalWidth / originalHeight\n          @adjustedHeight = boardHeight\n        else\n          @adjustedHeight = boardWidth * originalHeight / originalWidth\n          @adjustedWidth = boardWidth\n\n        _this.zoomAndPan(newDoc.slide.width_ratio, newDoc.slide.height_ratio,\n          newDoc.slide.x_offset, newDoc.slide.y_offset)\n\n        oldRatio = (oldDoc.slide.width_ratio + oldDoc.slide.height_ratio) / 2\n        newRatio = (newDoc.slide.width_ratio + newDoc.slide.height_ratio) / 2\n\n        _this?.current?.shapes?.forEach (shape) ->\n          shape.attr \"stroke-width\", shape.attr('stroke-width') * oldRatio  / newRatio\n\n        if _this.raphaelObj is 100 # on first load: Raphael object is initially tiny\n          _this.cursor.setRadius(0.65 * newDoc.slide.width_ratio / 100)\n        else\n          _this.cursor.setRadius(6 * newDoc.slide.width_ratio / 100)\n\n    if originalWidth <= originalHeight\n      # square => boardHeight is the shortest side\n      @adjustedWidth = boardHeight * originalWidth / originalHeight\n      $('#whiteboard-paper').width(@adjustedWidth)\n      @addImageToPaper(data, @adjustedWidth, boardHeight)\n      @adjustedHeight = boardHeight\n    else\n      @adjustedHeight = boardWidth * originalHeight / originalWidth\n      $('#whiteboard-paper').height(@adjustedHeight)\n      @addImageToPaper(data, boardWidth, @adjustedHeight)\n      @adjustedWidth = boardWidth\n\n    @zoomAndPan(currentSlide.slide.width_ratio, currentSlide.slide.height_ratio,\n      currentSlide.slide.x_offset, currentSlide.slide.y_offset)\n"]}