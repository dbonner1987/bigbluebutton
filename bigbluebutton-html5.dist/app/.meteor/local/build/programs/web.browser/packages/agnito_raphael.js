//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;

/* Package-scope variables */
var Raphael;

(function(){

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// packages/agnito_raphael/packages/agnito_raphael.js                         //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
                                                                              //
(function () {                                                                // 1
                                                                              // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/agnito:raphael/raphael.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// ┌────────────────────────────────────────────────────────────────────┐ \\
// │ Raphaël 2.1.2 - JavaScript Vector Library                          │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright © 2008-2012 Dmitry Baranovskiy (http://raphaeljs.com)    │ \\
// │ Copyright © 2008-2012 Sencha Labs (http://sencha.com)              │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Licensed under the MIT (http://raphaeljs.com/license.html) license.│ \\
// └────────────────────────────────────────────────────────────────────┘ \\
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 9
//                                                                                                                     // 10
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11
// you may not use this file except in compliance with the License.                                                    // 12
// You may obtain a copy of the License at                                                                             // 13
//                                                                                                                     // 14
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15
//                                                                                                                     // 16
// Unless required by applicable law or agreed to in writing, software                                                 // 17
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 18
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 19
// See the License for the specific language governing permissions and                                                 // 20
// limitations under the License.                                                                                      // 21
// ┌────────────────────────────────────────────────────────────┐ \\
// │ Eve 0.4.2 - JavaScript Events Library                      │ \\
// ├────────────────────────────────────────────────────────────┤ \\
// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\
// └────────────────────────────────────────────────────────────┘ \\
                                                                                                                       // 27
(function (glob) {                                                                                                     // 28
    var version = "0.4.2",                                                                                             // 29
        has = "hasOwnProperty",                                                                                        // 30
        separator = /[\.\/]/,                                                                                          // 31
        wildcard = "*",                                                                                                // 32
        fun = function () {},                                                                                          // 33
        numsort = function (a, b) {                                                                                    // 34
            return a - b;                                                                                              // 35
        },                                                                                                             // 36
        current_event,                                                                                                 // 37
        stop,                                                                                                          // 38
        events = {n: {}},                                                                                              // 39
    /*\
     * eve                                                                                                             // 41
     [ method ]                                                                                                        // 42
                                                                                                                       // 43
     * Fires event with given `name`, given scope and other parameters.                                                // 44
                                                                                                                       // 45
     > Arguments                                                                                                       // 46
                                                                                                                       // 47
     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated                                           // 48
     - scope (object) context for the event handlers                                                                   // 49
     - varargs (...) the rest of arguments will be sent to event handlers                                              // 50
                                                                                                                       // 51
     = (object) array of returned values from the listeners                                                            // 52
    \*/                                                                                                                // 53
        eve = function (name, scope) {                                                                                 // 54
			name = String(name);                                                                                                // 55
            var e = events,                                                                                            // 56
                oldstop = stop,                                                                                        // 57
                args = Array.prototype.slice.call(arguments, 2),                                                       // 58
                listeners = eve.listeners(name),                                                                       // 59
                z = 0,                                                                                                 // 60
                f = false,                                                                                             // 61
                l,                                                                                                     // 62
                indexed = [],                                                                                          // 63
                queue = {},                                                                                            // 64
                out = [],                                                                                              // 65
                ce = current_event,                                                                                    // 66
                errors = [];                                                                                           // 67
            current_event = name;                                                                                      // 68
            stop = 0;                                                                                                  // 69
            for (var i = 0, ii = listeners.length; i < ii; i++) if ("zIndex" in listeners[i]) {                        // 70
                indexed.push(listeners[i].zIndex);                                                                     // 71
                if (listeners[i].zIndex < 0) {                                                                         // 72
                    queue[listeners[i].zIndex] = listeners[i];                                                         // 73
                }                                                                                                      // 74
            }                                                                                                          // 75
            indexed.sort(numsort);                                                                                     // 76
            while (indexed[z] < 0) {                                                                                   // 77
                l = queue[indexed[z++]];                                                                               // 78
                out.push(l.apply(scope, args));                                                                        // 79
                if (stop) {                                                                                            // 80
                    stop = oldstop;                                                                                    // 81
                    return out;                                                                                        // 82
                }                                                                                                      // 83
            }                                                                                                          // 84
            for (i = 0; i < ii; i++) {                                                                                 // 85
                l = listeners[i];                                                                                      // 86
                if ("zIndex" in l) {                                                                                   // 87
                    if (l.zIndex == indexed[z]) {                                                                      // 88
                        out.push(l.apply(scope, args));                                                                // 89
                        if (stop) {                                                                                    // 90
                            break;                                                                                     // 91
                        }                                                                                              // 92
                        do {                                                                                           // 93
                            z++;                                                                                       // 94
                            l = queue[indexed[z]];                                                                     // 95
                            l && out.push(l.apply(scope, args));                                                       // 96
                            if (stop) {                                                                                // 97
                                break;                                                                                 // 98
                            }                                                                                          // 99
                        } while (l)                                                                                    // 100
                    } else {                                                                                           // 101
                        queue[l.zIndex] = l;                                                                           // 102
                    }                                                                                                  // 103
                } else {                                                                                               // 104
                    out.push(l.apply(scope, args));                                                                    // 105
                    if (stop) {                                                                                        // 106
                        break;                                                                                         // 107
                    }                                                                                                  // 108
                }                                                                                                      // 109
            }                                                                                                          // 110
            stop = oldstop;                                                                                            // 111
            current_event = ce;                                                                                        // 112
            return out.length ? out : null;                                                                            // 113
        };                                                                                                             // 114
		// Undocumented. Debug only.                                                                                         // 115
		eve._events = events;                                                                                                // 116
    /*\
     * eve.listeners                                                                                                   // 118
     [ method ]                                                                                                        // 119
                                                                                                                       // 120
     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.         // 121
                                                                                                                       // 122
     > Arguments                                                                                                       // 123
                                                                                                                       // 124
     - name (string) name of the event, dot (`.`) or slash (`/`) separated                                             // 125
                                                                                                                       // 126
     = (array) array of event handlers                                                                                 // 127
    \*/                                                                                                                // 128
    eve.listeners = function (name) {                                                                                  // 129
        var names = name.split(separator),                                                                             // 130
            e = events,                                                                                                // 131
            item,                                                                                                      // 132
            items,                                                                                                     // 133
            k,                                                                                                         // 134
            i,                                                                                                         // 135
            ii,                                                                                                        // 136
            j,                                                                                                         // 137
            jj,                                                                                                        // 138
            nes,                                                                                                       // 139
            es = [e],                                                                                                  // 140
            out = [];                                                                                                  // 141
        for (i = 0, ii = names.length; i < ii; i++) {                                                                  // 142
            nes = [];                                                                                                  // 143
            for (j = 0, jj = es.length; j < jj; j++) {                                                                 // 144
                e = es[j].n;                                                                                           // 145
                items = [e[names[i]], e[wildcard]];                                                                    // 146
                k = 2;                                                                                                 // 147
                while (k--) {                                                                                          // 148
                    item = items[k];                                                                                   // 149
                    if (item) {                                                                                        // 150
                        nes.push(item);                                                                                // 151
                        out = out.concat(item.f || []);                                                                // 152
                    }                                                                                                  // 153
                }                                                                                                      // 154
            }                                                                                                          // 155
            es = nes;                                                                                                  // 156
        }                                                                                                              // 157
        return out;                                                                                                    // 158
    };                                                                                                                 // 159
                                                                                                                       // 160
    /*\
     * eve.on                                                                                                          // 162
     [ method ]                                                                                                        // 163
     **                                                                                                                // 164
     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:                         // 165
     | eve.on("*.under.*", f);                                                                                         // 166
     | eve("mouse.under.floor"); // triggers f                                                                         // 167
     * Use @eve to trigger the listener.                                                                               // 168
     **                                                                                                                // 169
     > Arguments                                                                                                       // 170
     **                                                                                                                // 171
     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 172
     - f (function) event handler function                                                                             // 173
     **                                                                                                                // 174
     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. 
     > Example:                                                                                                        // 176
     | eve.on("mouse", eatIt)(2);                                                                                      // 177
     | eve.on("mouse", scream);                                                                                        // 178
     | eve.on("mouse", catchIt)(1);                                                                                    // 179
     * This will ensure that `catchIt()` function will be called before `eatIt()`.                                     // 180
	 *                                                                                                                    // 181
     * If you want to put your handler before non-indexed handlers, specify a negative value.                          // 182
     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.
    \*/                                                                                                                // 184
    eve.on = function (name, f) {                                                                                      // 185
		name = String(name);                                                                                                 // 186
		if (typeof f != "function") {                                                                                        // 187
			return function () {};                                                                                              // 188
		}                                                                                                                    // 189
        var names = name.split(separator),                                                                             // 190
            e = events;                                                                                                // 191
        for (var i = 0, ii = names.length; i < ii; i++) {                                                              // 192
            e = e.n;                                                                                                   // 193
            e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});                                  // 194
        }                                                                                                              // 195
        e.f = e.f || [];                                                                                               // 196
        for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {                                                   // 197
            return fun;                                                                                                // 198
        }                                                                                                              // 199
        e.f.push(f);                                                                                                   // 200
        return function (zIndex) {                                                                                     // 201
            if (+zIndex == +zIndex) {                                                                                  // 202
                f.zIndex = +zIndex;                                                                                    // 203
            }                                                                                                          // 204
        };                                                                                                             // 205
    };                                                                                                                 // 206
    /*\
     * eve.f                                                                                                           // 208
     [ method ]                                                                                                        // 209
     **                                                                                                                // 210
     * Returns function that will fire given event with optional arguments.                                            // 211
	 * Arguments that will be passed to the result function will be also                                                  // 212
	 * concated to the list of final arguments.                                                                           // 213
 	 | el.onclick = eve.f("click", 1, 2);                                                                                // 214
 	 | eve.on("click", function (a, b, c) {                                                                              // 215
 	 |     console.log(a, b, c); // 1, 2, [event object]                                                                 // 216
 	 | });                                                                                                               // 217
     > Arguments                                                                                                       // 218
	 - event (string) event name                                                                                          // 219
	 - varargs (…) and any other arguments                                                                                // 220
	 = (function) possible event handler function                                                                         // 221
    \*/                                                                                                                // 222
	eve.f = function (event) {                                                                                            // 223
		var attrs = [].slice.call(arguments, 1);                                                                             // 224
		return function () {                                                                                                 // 225
			eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));                                   // 226
		};                                                                                                                   // 227
	};                                                                                                                    // 228
    /*\
     * eve.stop                                                                                                        // 230
     [ method ]                                                                                                        // 231
     **                                                                                                                // 232
     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.             // 233
    \*/                                                                                                                // 234
    eve.stop = function () {                                                                                           // 235
        stop = 1;                                                                                                      // 236
    };                                                                                                                 // 237
    /*\
     * eve.nt                                                                                                          // 239
     [ method ]                                                                                                        // 240
     **                                                                                                                // 241
     * Could be used inside event handler to figure out actual name of the event.                                      // 242
     **                                                                                                                // 243
     > Arguments                                                                                                       // 244
     **                                                                                                                // 245
     - subname (string) #optional subname of the event                                                                 // 246
     **                                                                                                                // 247
     = (string) name of the event, if `subname` is not specified                                                       // 248
     * or                                                                                                              // 249
     = (boolean) `true`, if current event’s name contains `subname`                                                    // 250
    \*/                                                                                                                // 251
    eve.nt = function (subname) {                                                                                      // 252
        if (subname) {                                                                                                 // 253
            return new RegExp("(?:\\.|\\/|^)" + subname + "(?:\\.|\\/|$)").test(current_event);                        // 254
        }                                                                                                              // 255
        return current_event;                                                                                          // 256
    };                                                                                                                 // 257
    /*\
     * eve.nts                                                                                                         // 259
     [ method ]                                                                                                        // 260
     **                                                                                                                // 261
     * Could be used inside event handler to figure out actual name of the event.                                      // 262
     **                                                                                                                // 263
     **                                                                                                                // 264
     = (array) names of the event                                                                                      // 265
    \*/                                                                                                                // 266
    eve.nts = function () {                                                                                            // 267
        return current_event.split(separator);                                                                         // 268
    };                                                                                                                 // 269
    /*\
     * eve.off                                                                                                         // 271
     [ method ]                                                                                                        // 272
     **                                                                                                                // 273
     * Removes given function from the list of event listeners assigned to given name.                                 // 274
	 * If no arguments specified all the events will be cleared.                                                          // 275
     **                                                                                                                // 276
     > Arguments                                                                                                       // 277
     **                                                                                                                // 278
     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 279
     - f (function) event handler function                                                                             // 280
    \*/                                                                                                                // 281
    /*\
     * eve.unbind                                                                                                      // 283
     [ method ]                                                                                                        // 284
     **                                                                                                                // 285
     * See @eve.off                                                                                                    // 286
    \*/                                                                                                                // 287
    eve.off = eve.unbind = function (name, f) {                                                                        // 288
		if (!name) {                                                                                                         // 289
		    eve._events = events = {n: {}};                                                                                  // 290
			return;                                                                                                             // 291
		}                                                                                                                    // 292
        var names = name.split(separator),                                                                             // 293
            e,                                                                                                         // 294
            key,                                                                                                       // 295
            splice,                                                                                                    // 296
            i, ii, j, jj,                                                                                              // 297
            cur = [events];                                                                                            // 298
        for (i = 0, ii = names.length; i < ii; i++) {                                                                  // 299
            for (j = 0; j < cur.length; j += splice.length - 2) {                                                      // 300
                splice = [j, 1];                                                                                       // 301
                e = cur[j].n;                                                                                          // 302
                if (names[i] != wildcard) {                                                                            // 303
                    if (e[names[i]]) {                                                                                 // 304
                        splice.push(e[names[i]]);                                                                      // 305
                    }                                                                                                  // 306
                } else {                                                                                               // 307
                    for (key in e) if (e[has](key)) {                                                                  // 308
                        splice.push(e[key]);                                                                           // 309
                    }                                                                                                  // 310
                }                                                                                                      // 311
                cur.splice.apply(cur, splice);                                                                         // 312
            }                                                                                                          // 313
        }                                                                                                              // 314
        for (i = 0, ii = cur.length; i < ii; i++) {                                                                    // 315
            e = cur[i];                                                                                                // 316
            while (e.n) {                                                                                              // 317
                if (f) {                                                                                               // 318
                    if (e.f) {                                                                                         // 319
                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {                                   // 320
                            e.f.splice(j, 1);                                                                          // 321
                            break;                                                                                     // 322
                        }                                                                                              // 323
                        !e.f.length && delete e.f;                                                                     // 324
                    }                                                                                                  // 325
                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {                                                // 326
                        var funcs = e.n[key].f;                                                                        // 327
                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {                               // 328
                            funcs.splice(j, 1);                                                                        // 329
                            break;                                                                                     // 330
                        }                                                                                              // 331
                        !funcs.length && delete e.n[key].f;                                                            // 332
                    }                                                                                                  // 333
                } else {                                                                                               // 334
                    delete e.f;                                                                                        // 335
                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {                                                // 336
                        delete e.n[key].f;                                                                             // 337
                    }                                                                                                  // 338
                }                                                                                                      // 339
                e = e.n;                                                                                               // 340
            }                                                                                                          // 341
        }                                                                                                              // 342
    };                                                                                                                 // 343
    /*\
     * eve.once                                                                                                        // 345
     [ method ]                                                                                                        // 346
     **                                                                                                                // 347
     * Binds given event handler with a given name to only run once then unbind itself.                                // 348
     | eve.once("login", f);                                                                                           // 349
     | eve("login"); // triggers f                                                                                     // 350
     | eve("login"); // no listeners                                                                                   // 351
     * Use @eve to trigger the listener.                                                                               // 352
     **                                                                                                                // 353
     > Arguments                                                                                                       // 354
     **                                                                                                                // 355
     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 356
     - f (function) event handler function                                                                             // 357
     **                                                                                                                // 358
     = (function) same return function as @eve.on                                                                      // 359
    \*/                                                                                                                // 360
    eve.once = function (name, f) {                                                                                    // 361
        var f2 = function () {                                                                                         // 362
            eve.unbind(name, f2);                                                                                      // 363
            return f.apply(this, arguments);                                                                           // 364
        };                                                                                                             // 365
        return eve.on(name, f2);                                                                                       // 366
    };                                                                                                                 // 367
    /*\
     * eve.version                                                                                                     // 369
     [ property (string) ]                                                                                             // 370
     **                                                                                                                // 371
     * Current version of the library.                                                                                 // 372
    \*/                                                                                                                // 373
    eve.version = version;                                                                                             // 374
    eve.toString = function () {                                                                                       // 375
        return "You are running Eve " + version;                                                                       // 376
    };                                                                                                                 // 377
    (typeof module != "undefined" && module.exports) ? (module.exports = eve) : (typeof define != "undefined" ? (define("eve", [], function() { return eve; })) : (glob.eve = eve));
})(window || this);                                                                                                    // 379
// ┌─────────────────────────────────────────────────────────────────────┐ \\
// │ "Raphaël 2.1.2" - JavaScript Vector Library                         │ \\
// ├─────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\
// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\
// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\
// └─────────────────────────────────────────────────────────────────────┘ \\
                                                                                                                       // 387
(function (glob, factory) {                                                                                            // 388
    // AMD support                                                                                                     // 389
    if (typeof define === "function" && define.amd) {                                                                  // 390
        // Define as an anonymous module                                                                               // 391
        define(["eve"], function( eve ) {                                                                              // 392
            return factory(glob, eve);                                                                                 // 393
        });                                                                                                            // 394
    } else {                                                                                                           // 395
        // Browser globals (glob is window)                                                                            // 396
        // Raphael adds itself to window                                                                               // 397
        factory(glob, glob.eve);                                                                                       // 398
    }                                                                                                                  // 399
}(this, function (window, eve) {                                                                                       // 400
    /*\
     * Raphael                                                                                                         // 402
     [ method ]                                                                                                        // 403
     **                                                                                                                // 404
     * Creates a canvas object on which to draw.                                                                       // 405
     * You must do this first, as all future calls to drawing methods                                                  // 406
     * from this instance will be bound to this canvas.                                                                // 407
     > Parameters                                                                                                      // 408
     **                                                                                                                // 409
     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface          // 410
     - width (number)                                                                                                  // 411
     - height (number)                                                                                                 // 412
     - callback (function) #optional callback function which is going to be executed in the context of newly created paper
     * or                                                                                                              // 414
     - x (number)                                                                                                      // 415
     - y (number)                                                                                                      // 416
     - width (number)                                                                                                  // 417
     - height (number)                                                                                                 // 418
     - callback (function) #optional callback function which is going to be executed in the context of newly created paper
     * or                                                                                                              // 420
     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.
     - callback (function) #optional callback function which is going to be executed in the context of newly created paper
     * or                                                                                                              // 423
     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.
     = (object) @Paper                                                                                                 // 425
     > Usage                                                                                                           // 426
     | // Each of the following examples create a canvas                                                               // 427
     | // that is 320px wide by 200px high.                                                                            // 428
     | // Canvas is created at the viewport’s 10,50 coordinate.                                                        // 429
     | var paper = Raphael(10, 50, 320, 200);                                                                          // 430
     | // Canvas is created at the top left corner of the #notepad element                                             // 431
     | // (or its top right corner in dir="rtl" elements)                                                              // 432
     | var paper = Raphael(document.getElementById("notepad"), 320, 200);                                              // 433
     | // Same as above                                                                                                // 434
     | var paper = Raphael("notepad", 320, 200);                                                                       // 435
     | // Image dump                                                                                                   // 436
     | var set = Raphael(["notepad", 320, 200, {                                                                       // 437
     |     type: "rect",                                                                                               // 438
     |     x: 10,                                                                                                      // 439
     |     y: 10,                                                                                                      // 440
     |     width: 25,                                                                                                  // 441
     |     height: 25,                                                                                                 // 442
     |     stroke: "#f00"                                                                                              // 443
     | }, {                                                                                                            // 444
     |     type: "text",                                                                                               // 445
     |     x: 30,                                                                                                      // 446
     |     y: 40,                                                                                                      // 447
     |     text: "Dump"                                                                                                // 448
     | }]);                                                                                                            // 449
    \*/                                                                                                                // 450
    function R(first) {                                                                                                // 451
        if (R.is(first, "function")) {                                                                                 // 452
            return loaded ? first() : eve.on("raphael.DOMload", first);                                                // 453
        } else if (R.is(first, array)) {                                                                               // 454
            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);                     // 455
        } else {                                                                                                       // 456
            var args = Array.prototype.slice.call(arguments, 0);                                                       // 457
            if (R.is(args[args.length - 1], "function")) {                                                             // 458
                var f = args.pop();                                                                                    // 459
                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on("raphael.DOMload", function () {     // 460
                    f.call(R._engine.create[apply](R, args));                                                          // 461
                });                                                                                                    // 462
            } else {                                                                                                   // 463
                return R._engine.create[apply](R, arguments);                                                          // 464
            }                                                                                                          // 465
        }                                                                                                              // 466
    }                                                                                                                  // 467
    R.version = "2.1.2";                                                                                               // 468
    R.eve = eve;                                                                                                       // 469
    var loaded,                                                                                                        // 470
        separator = /[, ]+/,                                                                                           // 471
        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},                                       // 472
        formatrg = /\{(\d+)\}/g,                                                                                       // 473
        proto = "prototype",                                                                                           // 474
        has = "hasOwnProperty",                                                                                        // 475
        g = {                                                                                                          // 476
            doc: document,                                                                                             // 477
            win: window                                                                                                // 478
        },                                                                                                             // 479
        oldRaphael = {                                                                                                 // 480
            was: Object.prototype[has].call(g.win, "Raphael"),                                                         // 481
            is: g.win.Raphael                                                                                          // 482
        },                                                                                                             // 483
        Paper = function () {                                                                                          // 484
            /*\
             * Paper.ca                                                                                                // 486
             [ property (object) ]                                                                                     // 487
             **                                                                                                        // 488
             * Shortcut for @Paper.customAttributes                                                                    // 489
            \*/                                                                                                        // 490
            /*\
             * Paper.customAttributes                                                                                  // 492
             [ property (object) ]                                                                                     // 493
             **                                                                                                        // 494
             * If you have a set of attributes that you would like to represent                                        // 495
             * as a function of some number you can do it easily with custom attributes:                               // 496
             > Usage                                                                                                   // 497
             | paper.customAttributes.hue = function (num) {                                                           // 498
             |     num = num % 1;                                                                                      // 499
             |     return {fill: "hsb(" + num + ", 0.75, 1)"};                                                         // 500
             | };                                                                                                      // 501
             | // Custom attribute “hue” will change fill                                                              // 502
             | // to be given hue with fixed saturation and brightness.                                                // 503
             | // Now you can use it like this:                                                                        // 504
             | var c = paper.circle(10, 10, 10).attr({hue: .45});                                                      // 505
             | // or even like this:                                                                                   // 506
             | c.animate({hue: 1}, 1e3);                                                                               // 507
             |                                                                                                         // 508
             | // You could also create custom attribute                                                               // 509
             | // with multiple parameters:                                                                            // 510
             | paper.customAttributes.hsb = function (h, s, b) {                                                       // 511
             |     return {fill: "hsb(" + [h, s, b].join(",") + ")"};                                                  // 512
             | };                                                                                                      // 513
             | c.attr({hsb: "0.5 .8 1"});                                                                              // 514
             | c.animate({hsb: [1, 0, 0.5]}, 1e3);                                                                     // 515
            \*/                                                                                                        // 516
            this.ca = this.customAttributes = {};                                                                      // 517
        },                                                                                                             // 518
        paperproto,                                                                                                    // 519
        appendChild = "appendChild",                                                                                   // 520
        apply = "apply",                                                                                               // 521
        concat = "concat",                                                                                             // 522
        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test
        E = "",                                                                                                        // 524
        S = " ",                                                                                                       // 525
        Str = String,                                                                                                  // 526
        split = "split",                                                                                               // 527
        events = "click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel"[split](S),
        touchMap = {                                                                                                   // 529
            mousedown: "touchstart",                                                                                   // 530
            mousemove: "touchmove",                                                                                    // 531
            mouseup: "touchend"                                                                                        // 532
        },                                                                                                             // 533
        lowerCase = Str.prototype.toLowerCase,                                                                         // 534
        math = Math,                                                                                                   // 535
        mmax = math.max,                                                                                               // 536
        mmin = math.min,                                                                                               // 537
        abs = math.abs,                                                                                                // 538
        pow = math.pow,                                                                                                // 539
        PI = math.PI,                                                                                                  // 540
        nu = "number",                                                                                                 // 541
        string = "string",                                                                                             // 542
        array = "array",                                                                                               // 543
        toString = "toString",                                                                                         // 544
        fillString = "fill",                                                                                           // 545
        objectToString = Object.prototype.toString,                                                                    // 546
        paper = {},                                                                                                    // 547
        push = "push",                                                                                                 // 548
        ISURL = R._ISURL = /^url\(['"]?([^\)]+?)['"]?\)$/i,                                                            // 549
        colourRegExp = /^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i,
        isnan = {"NaN": 1, "Infinity": 1, "-Infinity": 1},                                                             // 551
        bezierrg = /^(?:cubic-)?bezier\(([^,]+),([^,]+),([^,]+),([^\)]+)\)/,                                           // 552
        round = math.round,                                                                                            // 553
        setAttribute = "setAttribute",                                                                                 // 554
        toFloat = parseFloat,                                                                                          // 555
        toInt = parseInt,                                                                                              // 556
        upperCase = Str.prototype.toUpperCase,                                                                         // 557
        availableAttrs = R._availableAttrs = {                                                                         // 558
            "arrow-end": "none",                                                                                       // 559
            "arrow-start": "none",                                                                                     // 560
            blur: 0,                                                                                                   // 561
            "clip-rect": "0 0 1e9 1e9",                                                                                // 562
            cursor: "default",                                                                                         // 563
            cx: 0,                                                                                                     // 564
            cy: 0,                                                                                                     // 565
            fill: "#fff",                                                                                              // 566
            "fill-opacity": 1,                                                                                         // 567
            font: '10px "Arial"',                                                                                      // 568
            "font-family": '"Arial"',                                                                                  // 569
            "font-size": "10",                                                                                         // 570
            "font-style": "normal",                                                                                    // 571
            "font-weight": 400,                                                                                        // 572
            gradient: 0,                                                                                               // 573
            height: 0,                                                                                                 // 574
            href: "http://raphaeljs.com/",                                                                             // 575
            "letter-spacing": 0,                                                                                       // 576
            opacity: 1,                                                                                                // 577
            path: "M0,0",                                                                                              // 578
            r: 0,                                                                                                      // 579
            rx: 0,                                                                                                     // 580
            ry: 0,                                                                                                     // 581
            src: "",                                                                                                   // 582
            stroke: "#000",                                                                                            // 583
            "stroke-dasharray": "",                                                                                    // 584
            "stroke-linecap": "butt",                                                                                  // 585
            "stroke-linejoin": "butt",                                                                                 // 586
            "stroke-miterlimit": 0,                                                                                    // 587
            "stroke-opacity": 1,                                                                                       // 588
            "stroke-width": 1,                                                                                         // 589
            target: "_blank",                                                                                          // 590
            "text-anchor": "middle",                                                                                   // 591
            title: "Raphael",                                                                                          // 592
            transform: "",                                                                                             // 593
            width: 0,                                                                                                  // 594
            x: 0,                                                                                                      // 595
            y: 0                                                                                                       // 596
        },                                                                                                             // 597
        availableAnimAttrs = R._availableAnimAttrs = {                                                                 // 598
            blur: nu,                                                                                                  // 599
            "clip-rect": "csv",                                                                                        // 600
            cx: nu,                                                                                                    // 601
            cy: nu,                                                                                                    // 602
            fill: "colour",                                                                                            // 603
            "fill-opacity": nu,                                                                                        // 604
            "font-size": nu,                                                                                           // 605
            height: nu,                                                                                                // 606
            opacity: nu,                                                                                               // 607
            path: "path",                                                                                              // 608
            r: nu,                                                                                                     // 609
            rx: nu,                                                                                                    // 610
            ry: nu,                                                                                                    // 611
            stroke: "colour",                                                                                          // 612
            "stroke-opacity": nu,                                                                                      // 613
            "stroke-width": nu,                                                                                        // 614
            transform: "transform",                                                                                    // 615
            width: nu,                                                                                                 // 616
            x: nu,                                                                                                     // 617
            y: nu                                                                                                      // 618
        },                                                                                                             // 619
        whitespace = /[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]/g,
        commaSpaces = /[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/,
        hsrg = {hs: 1, rg: 1},                                                                                         // 622
        p2s = /,?([achlmqrstvxz]),?/gi,                                                                                // 623
        pathCommand = /([achlmrqstvz])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/ig,
        tCommand = /([rstm])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/ig,
        pathValues = /(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/ig,
        radial_gradient = R._radial_gradient = /^r(?:\(([^,]+?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*([^\)]+?)\))?/,
        eldata = {},                                                                                                   // 628
        sortByKey = function (a, b) {                                                                                  // 629
            return a.key - b.key;                                                                                      // 630
        },                                                                                                             // 631
        sortByNumber = function (a, b) {                                                                               // 632
            return toFloat(a) - toFloat(b);                                                                            // 633
        },                                                                                                             // 634
        fun = function () {},                                                                                          // 635
        pipe = function (x) {                                                                                          // 636
            return x;                                                                                                  // 637
        },                                                                                                             // 638
        rectPath = R._rectPath = function (x, y, w, h, r) {                                                            // 639
            if (r) {                                                                                                   // 640
                return [["M", x + r, y], ["l", w - r * 2, 0], ["a", r, r, 0, 0, 1, r, r], ["l", 0, h - r * 2], ["a", r, r, 0, 0, 1, -r, r], ["l", r * 2 - w, 0], ["a", r, r, 0, 0, 1, -r, -r], ["l", 0, r * 2 - h], ["a", r, r, 0, 0, 1, r, -r], ["z"]];
            }                                                                                                          // 642
            return [["M", x, y], ["l", w, 0], ["l", 0, h], ["l", -w, 0], ["z"]];                                       // 643
        },                                                                                                             // 644
        ellipsePath = function (x, y, rx, ry) {                                                                        // 645
            if (ry == null) {                                                                                          // 646
                ry = rx;                                                                                               // 647
            }                                                                                                          // 648
            return [["M", x, y], ["m", 0, -ry], ["a", rx, ry, 0, 1, 1, 0, 2 * ry], ["a", rx, ry, 0, 1, 1, 0, -2 * ry], ["z"]];
        },                                                                                                             // 650
        getPath = R._getPath = {                                                                                       // 651
            path: function (el) {                                                                                      // 652
                return el.attr("path");                                                                                // 653
            },                                                                                                         // 654
            circle: function (el) {                                                                                    // 655
                var a = el.attrs;                                                                                      // 656
                return ellipsePath(a.cx, a.cy, a.r);                                                                   // 657
            },                                                                                                         // 658
            ellipse: function (el) {                                                                                   // 659
                var a = el.attrs;                                                                                      // 660
                return ellipsePath(a.cx, a.cy, a.rx, a.ry);                                                            // 661
            },                                                                                                         // 662
            rect: function (el) {                                                                                      // 663
                var a = el.attrs;                                                                                      // 664
                return rectPath(a.x, a.y, a.width, a.height, a.r);                                                     // 665
            },                                                                                                         // 666
            image: function (el) {                                                                                     // 667
                var a = el.attrs;                                                                                      // 668
                return rectPath(a.x, a.y, a.width, a.height);                                                          // 669
            },                                                                                                         // 670
            text: function (el) {                                                                                      // 671
                var bbox = el._getBBox();                                                                              // 672
                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);                                              // 673
            },                                                                                                         // 674
            set : function(el) {                                                                                       // 675
                var bbox = el._getBBox();                                                                              // 676
                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);                                              // 677
            }                                                                                                          // 678
        },                                                                                                             // 679
        /*\
         * Raphael.mapPath                                                                                             // 681
         [ method ]                                                                                                    // 682
         **                                                                                                            // 683
         * Transform the path string with given matrix.                                                                // 684
         > Parameters                                                                                                  // 685
         - path (string) path string                                                                                   // 686
         - matrix (object) see @Matrix                                                                                 // 687
         = (string) transformed path string                                                                            // 688
        \*/                                                                                                            // 689
        mapPath = R.mapPath = function (path, matrix) {                                                                // 690
            if (!matrix) {                                                                                             // 691
                return path;                                                                                           // 692
            }                                                                                                          // 693
            var x, y, i, j, ii, jj, pathi;                                                                             // 694
            path = path2curve(path);                                                                                   // 695
            for (i = 0, ii = path.length; i < ii; i++) {                                                               // 696
                pathi = path[i];                                                                                       // 697
                for (j = 1, jj = pathi.length; j < jj; j += 2) {                                                       // 698
                    x = matrix.x(pathi[j], pathi[j + 1]);                                                              // 699
                    y = matrix.y(pathi[j], pathi[j + 1]);                                                              // 700
                    pathi[j] = x;                                                                                      // 701
                    pathi[j + 1] = y;                                                                                  // 702
                }                                                                                                      // 703
            }                                                                                                          // 704
            return path;                                                                                               // 705
        };                                                                                                             // 706
                                                                                                                       // 707
    R._g = g;                                                                                                          // 708
    /*\
     * Raphael.type                                                                                                    // 710
     [ property (string) ]                                                                                             // 711
     **                                                                                                                // 712
     * Can be “SVG”, “VML” or empty, depending on browser support.                                                     // 713
    \*/                                                                                                                // 714
    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1") ? "SVG" : "VML");
    if (R.type == "VML") {                                                                                             // 716
        var d = g.doc.createElement("div"),                                                                            // 717
            b;                                                                                                         // 718
        d.innerHTML = '<v:shape adj="1"/>';                                                                            // 719
        b = d.firstChild;                                                                                              // 720
        b.style.behavior = "url(#default#VML)";                                                                        // 721
        if (!(b && typeof b.adj == "object")) {                                                                        // 722
            return (R.type = E);                                                                                       // 723
        }                                                                                                              // 724
        d = null;                                                                                                      // 725
    }                                                                                                                  // 726
    /*\
     * Raphael.svg                                                                                                     // 728
     [ property (boolean) ]                                                                                            // 729
     **                                                                                                                // 730
     * `true` if browser supports SVG.                                                                                 // 731
    \*/                                                                                                                // 732
    /*\
     * Raphael.vml                                                                                                     // 734
     [ property (boolean) ]                                                                                            // 735
     **                                                                                                                // 736
     * `true` if browser supports VML.                                                                                 // 737
    \*/                                                                                                                // 738
    R.svg = !(R.vml = R.type == "VML");                                                                                // 739
    R._Paper = Paper;                                                                                                  // 740
    /*\
     * Raphael.fn                                                                                                      // 742
     [ property (object) ]                                                                                             // 743
     **                                                                                                                // 744
     * You can add your own method to the canvas. For example if you want to draw a pie chart,                         // 745
     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this                          // 746
     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a                          // 747
     * Raphaël instance is created, otherwise it will take no effect. Please note that the                             // 748
     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to                            // 749
     * ensure any namespacing ensures proper context.                                                                  // 750
     > Usage                                                                                                           // 751
     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {                                                            // 752
     |     return this.path( ... );                                                                                    // 753
     | };                                                                                                              // 754
     | // or create namespace                                                                                          // 755
     | Raphael.fn.mystuff = {                                                                                          // 756
     |     arrow: function () {…},                                                                                     // 757
     |     star: function () {…},                                                                                      // 758
     |     // etc…                                                                                                     // 759
     | };                                                                                                              // 760
     | var paper = Raphael(10, 10, 630, 480);                                                                          // 761
     | // then use it                                                                                                  // 762
     | paper.arrow(10, 10, 30, 30, 5).attr({fill: "#f00"});                                                            // 763
     | paper.mystuff.arrow();                                                                                          // 764
     | paper.mystuff.star();                                                                                           // 765
    \*/                                                                                                                // 766
    R.fn = paperproto = Paper.prototype = R.prototype;                                                                 // 767
    R._id = 0;                                                                                                         // 768
    R._oid = 0;                                                                                                        // 769
    /*\
     * Raphael.is                                                                                                      // 771
     [ method ]                                                                                                        // 772
     **                                                                                                                // 773
     * Handfull replacement for `typeof` operator.                                                                     // 774
     > Parameters                                                                                                      // 775
     - o (…) any object or primitive                                                                                   // 776
     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.                                       // 777
     = (boolean) is given value is of given type                                                                       // 778
    \*/                                                                                                                // 779
    R.is = function (o, type) {                                                                                        // 780
        type = lowerCase.call(type);                                                                                   // 781
        if (type == "finite") {                                                                                        // 782
            return !isnan[has](+o);                                                                                    // 783
        }                                                                                                              // 784
        if (type == "array") {                                                                                         // 785
            return o instanceof Array;                                                                                 // 786
        }                                                                                                              // 787
        return  (type == "null" && o === null) ||                                                                      // 788
                (type == typeof o && o !== null) ||                                                                    // 789
                (type == "object" && o === Object(o)) ||                                                               // 790
                (type == "array" && Array.isArray && Array.isArray(o)) ||                                              // 791
                objectToString.call(o).slice(8, -1).toLowerCase() == type;                                             // 792
    };                                                                                                                 // 793
                                                                                                                       // 794
    function clone(obj) {                                                                                              // 795
        if (typeof obj == "function" || Object(obj) !== obj) {                                                         // 796
            return obj;                                                                                                // 797
        }                                                                                                              // 798
        var res = new obj.constructor;                                                                                 // 799
        for (var key in obj) if (obj[has](key)) {                                                                      // 800
            res[key] = clone(obj[key]);                                                                                // 801
        }                                                                                                              // 802
        return res;                                                                                                    // 803
    }                                                                                                                  // 804
                                                                                                                       // 805
    /*\
     * Raphael.angle                                                                                                   // 807
     [ method ]                                                                                                        // 808
     **                                                                                                                // 809
     * Returns angle between two or three points                                                                       // 810
     > Parameters                                                                                                      // 811
     - x1 (number) x coord of first point                                                                              // 812
     - y1 (number) y coord of first point                                                                              // 813
     - x2 (number) x coord of second point                                                                             // 814
     - y2 (number) y coord of second point                                                                             // 815
     - x3 (number) #optional x coord of third point                                                                    // 816
     - y3 (number) #optional y coord of third point                                                                    // 817
     = (number) angle in degrees.                                                                                      // 818
    \*/                                                                                                                // 819
    R.angle = function (x1, y1, x2, y2, x3, y3) {                                                                      // 820
        if (x3 == null) {                                                                                              // 821
            var x = x1 - x2,                                                                                           // 822
                y = y1 - y2;                                                                                           // 823
            if (!x && !y) {                                                                                            // 824
                return 0;                                                                                              // 825
            }                                                                                                          // 826
            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;                                                  // 827
        } else {                                                                                                       // 828
            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);                                                  // 829
        }                                                                                                              // 830
    };                                                                                                                 // 831
    /*\
     * Raphael.rad                                                                                                     // 833
     [ method ]                                                                                                        // 834
     **                                                                                                                // 835
     * Transform angle to radians                                                                                      // 836
     > Parameters                                                                                                      // 837
     - deg (number) angle in degrees                                                                                   // 838
     = (number) angle in radians.                                                                                      // 839
    \*/                                                                                                                // 840
    R.rad = function (deg) {                                                                                           // 841
        return deg % 360 * PI / 180;                                                                                   // 842
    };                                                                                                                 // 843
    /*\
     * Raphael.deg                                                                                                     // 845
     [ method ]                                                                                                        // 846
     **                                                                                                                // 847
     * Transform angle to degrees                                                                                      // 848
     > Parameters                                                                                                      // 849
     - deg (number) angle in radians                                                                                   // 850
     = (number) angle in degrees.                                                                                      // 851
    \*/                                                                                                                // 852
    R.deg = function (rad) {                                                                                           // 853
        return rad * 180 / PI % 360;                                                                                   // 854
    };                                                                                                                 // 855
    /*\
     * Raphael.snapTo                                                                                                  // 857
     [ method ]                                                                                                        // 858
     **                                                                                                                // 859
     * Snaps given value to given grid.                                                                                // 860
     > Parameters                                                                                                      // 861
     - values (array|number) given array of values or step of the grid                                                 // 862
     - value (number) value to adjust                                                                                  // 863
     - tolerance (number) #optional tolerance for snapping. Default is `10`.                                           // 864
     = (number) adjusted value.                                                                                        // 865
    \*/                                                                                                                // 866
    R.snapTo = function (values, value, tolerance) {                                                                   // 867
        tolerance = R.is(tolerance, "finite") ? tolerance : 10;                                                        // 868
        if (R.is(values, array)) {                                                                                     // 869
            var i = values.length;                                                                                     // 870
            while (i--) if (abs(values[i] - value) <= tolerance) {                                                     // 871
                return values[i];                                                                                      // 872
            }                                                                                                          // 873
        } else {                                                                                                       // 874
            values = +values;                                                                                          // 875
            var rem = value % values;                                                                                  // 876
            if (rem < tolerance) {                                                                                     // 877
                return value - rem;                                                                                    // 878
            }                                                                                                          // 879
            if (rem > values - tolerance) {                                                                            // 880
                return value - rem + values;                                                                           // 881
            }                                                                                                          // 882
        }                                                                                                              // 883
        return value;                                                                                                  // 884
    };                                                                                                                 // 885
                                                                                                                       // 886
    /*\
     * Raphael.createUUID                                                                                              // 888
     [ method ]                                                                                                        // 889
     **                                                                                                                // 890
     * Returns RFC4122, version 4 ID                                                                                   // 891
    \*/                                                                                                                // 892
    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {                                              // 893
        return function () {                                                                                           // 894
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(uuidRegEx, uuidReplacer).toUpperCase();              // 895
        };                                                                                                             // 896
    })(/[xy]/g, function (c) {                                                                                         // 897
        var r = math.random() * 16 | 0,                                                                                // 898
            v = c == "x" ? r : (r & 3 | 8);                                                                            // 899
        return v.toString(16);                                                                                         // 900
    });                                                                                                                // 901
                                                                                                                       // 902
    /*\
     * Raphael.setWindow                                                                                               // 904
     [ method ]                                                                                                        // 905
     **                                                                                                                // 906
     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.                                 // 907
     > Parameters                                                                                                      // 908
     - newwin (window) new window object                                                                               // 909
    \*/                                                                                                                // 910
    R.setWindow = function (newwin) {                                                                                  // 911
        eve("raphael.setWindow", R, g.win, newwin);                                                                    // 912
        g.win = newwin;                                                                                                // 913
        g.doc = g.win.document;                                                                                        // 914
        if (R._engine.initWin) {                                                                                       // 915
            R._engine.initWin(g.win);                                                                                  // 916
        }                                                                                                              // 917
    };                                                                                                                 // 918
    var toHex = function (color) {                                                                                     // 919
        if (R.vml) {                                                                                                   // 920
            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/                        // 921
            var trim = /^\s+|\s+$/g;                                                                                   // 922
            var bod;                                                                                                   // 923
            try {                                                                                                      // 924
                var docum = new ActiveXObject("htmlfile");                                                             // 925
                docum.write("<body>");                                                                                 // 926
                docum.close();                                                                                         // 927
                bod = docum.body;                                                                                      // 928
            } catch(e) {                                                                                               // 929
                bod = createPopup().document.body;                                                                     // 930
            }                                                                                                          // 931
            var range = bod.createTextRange();                                                                         // 932
            toHex = cacher(function (color) {                                                                          // 933
                try {                                                                                                  // 934
                    bod.style.color = Str(color).replace(trim, E);                                                     // 935
                    var value = range.queryCommandValue("ForeColor");                                                  // 936
                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);                     // 937
                    return "#" + ("000000" + value.toString(16)).slice(-6);                                            // 938
                } catch(e) {                                                                                           // 939
                    return "none";                                                                                     // 940
                }                                                                                                      // 941
            });                                                                                                        // 942
        } else {                                                                                                       // 943
            var i = g.doc.createElement("i");                                                                          // 944
            i.title = "Rapha\xebl Colour Picker";                                                                      // 945
            i.style.display = "none";                                                                                  // 946
            g.doc.body.appendChild(i);                                                                                 // 947
            toHex = cacher(function (color) {                                                                          // 948
                i.style.color = color;                                                                                 // 949
                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue("color");                             // 950
            });                                                                                                        // 951
        }                                                                                                              // 952
        return toHex(color);                                                                                           // 953
    },                                                                                                                 // 954
    hsbtoString = function () {                                                                                        // 955
        return "hsb(" + [this.h, this.s, this.b] + ")";                                                                // 956
    },                                                                                                                 // 957
    hsltoString = function () {                                                                                        // 958
        return "hsl(" + [this.h, this.s, this.l] + ")";                                                                // 959
    },                                                                                                                 // 960
    rgbtoString = function () {                                                                                        // 961
        return this.hex;                                                                                               // 962
    },                                                                                                                 // 963
    prepareRGB = function (r, g, b) {                                                                                  // 964
        if (g == null && R.is(r, "object") && "r" in r && "g" in r && "b" in r) {                                      // 965
            b = r.b;                                                                                                   // 966
            g = r.g;                                                                                                   // 967
            r = r.r;                                                                                                   // 968
        }                                                                                                              // 969
        if (g == null && R.is(r, string)) {                                                                            // 970
            var clr = R.getRGB(r);                                                                                     // 971
            r = clr.r;                                                                                                 // 972
            g = clr.g;                                                                                                 // 973
            b = clr.b;                                                                                                 // 974
        }                                                                                                              // 975
        if (r > 1 || g > 1 || b > 1) {                                                                                 // 976
            r /= 255;                                                                                                  // 977
            g /= 255;                                                                                                  // 978
            b /= 255;                                                                                                  // 979
        }                                                                                                              // 980
                                                                                                                       // 981
        return [r, g, b];                                                                                              // 982
    },                                                                                                                 // 983
    packageRGB = function (r, g, b, o) {                                                                               // 984
        r *= 255;                                                                                                      // 985
        g *= 255;                                                                                                      // 986
        b *= 255;                                                                                                      // 987
        var rgb = {                                                                                                    // 988
            r: r,                                                                                                      // 989
            g: g,                                                                                                      // 990
            b: b,                                                                                                      // 991
            hex: R.rgb(r, g, b),                                                                                       // 992
            toString: rgbtoString                                                                                      // 993
        };                                                                                                             // 994
        R.is(o, "finite") && (rgb.opacity = o);                                                                        // 995
        return rgb;                                                                                                    // 996
    };                                                                                                                 // 997
                                                                                                                       // 998
    /*\
     * Raphael.color                                                                                                   // 1000
     [ method ]                                                                                                        // 1001
     **                                                                                                                // 1002
     * Parses the color string and returns object with all values for the given color.                                 // 1003
     > Parameters                                                                                                      // 1004
     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)                                 // 1005
     = (object) Combined RGB & HSB object in format:                                                                   // 1006
     o {                                                                                                               // 1007
     o     r (number) red,                                                                                             // 1008
     o     g (number) green,                                                                                           // 1009
     o     b (number) blue,                                                                                            // 1010
     o     hex (string) color in HTML/CSS format: #••••••,                                                             // 1011
     o     error (boolean) `true` if string can’t be parsed,                                                           // 1012
     o     h (number) hue,                                                                                             // 1013
     o     s (number) saturation,                                                                                      // 1014
     o     v (number) value (brightness),                                                                              // 1015
     o     l (number) lightness                                                                                        // 1016
     o }                                                                                                               // 1017
    \*/                                                                                                                // 1018
    R.color = function (clr) {                                                                                         // 1019
        var rgb;                                                                                                       // 1020
        if (R.is(clr, "object") && "h" in clr && "s" in clr && "b" in clr) {                                           // 1021
            rgb = R.hsb2rgb(clr);                                                                                      // 1022
            clr.r = rgb.r;                                                                                             // 1023
            clr.g = rgb.g;                                                                                             // 1024
            clr.b = rgb.b;                                                                                             // 1025
            clr.hex = rgb.hex;                                                                                         // 1026
        } else if (R.is(clr, "object") && "h" in clr && "s" in clr && "l" in clr) {                                    // 1027
            rgb = R.hsl2rgb(clr);                                                                                      // 1028
            clr.r = rgb.r;                                                                                             // 1029
            clr.g = rgb.g;                                                                                             // 1030
            clr.b = rgb.b;                                                                                             // 1031
            clr.hex = rgb.hex;                                                                                         // 1032
        } else {                                                                                                       // 1033
            if (R.is(clr, "string")) {                                                                                 // 1034
                clr = R.getRGB(clr);                                                                                   // 1035
            }                                                                                                          // 1036
            if (R.is(clr, "object") && "r" in clr && "g" in clr && "b" in clr) {                                       // 1037
                rgb = R.rgb2hsl(clr);                                                                                  // 1038
                clr.h = rgb.h;                                                                                         // 1039
                clr.s = rgb.s;                                                                                         // 1040
                clr.l = rgb.l;                                                                                         // 1041
                rgb = R.rgb2hsb(clr);                                                                                  // 1042
                clr.v = rgb.b;                                                                                         // 1043
            } else {                                                                                                   // 1044
                clr = {hex: "none"};                                                                                   // 1045
                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;                                            // 1046
            }                                                                                                          // 1047
        }                                                                                                              // 1048
        clr.toString = rgbtoString;                                                                                    // 1049
        return clr;                                                                                                    // 1050
    };                                                                                                                 // 1051
    /*\
     * Raphael.hsb2rgb                                                                                                 // 1053
     [ method ]                                                                                                        // 1054
     **                                                                                                                // 1055
     * Converts HSB values to RGB object.                                                                              // 1056
     > Parameters                                                                                                      // 1057
     - h (number) hue                                                                                                  // 1058
     - s (number) saturation                                                                                           // 1059
     - v (number) value or brightness                                                                                  // 1060
     = (object) RGB object in format:                                                                                  // 1061
     o {                                                                                                               // 1062
     o     r (number) red,                                                                                             // 1063
     o     g (number) green,                                                                                           // 1064
     o     b (number) blue,                                                                                            // 1065
     o     hex (string) color in HTML/CSS format: #••••••                                                              // 1066
     o }                                                                                                               // 1067
    \*/                                                                                                                // 1068
    R.hsb2rgb = function (h, s, v, o) {                                                                                // 1069
        if (this.is(h, "object") && "h" in h && "s" in h && "b" in h) {                                                // 1070
            v = h.b;                                                                                                   // 1071
            s = h.s;                                                                                                   // 1072
            h = h.h;                                                                                                   // 1073
            o = h.o;                                                                                                   // 1074
        }                                                                                                              // 1075
        h *= 360;                                                                                                      // 1076
        var R, G, B, X, C;                                                                                             // 1077
        h = (h % 360) / 60;                                                                                            // 1078
        C = v * s;                                                                                                     // 1079
        X = C * (1 - abs(h % 2 - 1));                                                                                  // 1080
        R = G = B = v - C;                                                                                             // 1081
                                                                                                                       // 1082
        h = ~~h;                                                                                                       // 1083
        R += [C, X, 0, 0, X, C][h];                                                                                    // 1084
        G += [X, C, C, X, 0, 0][h];                                                                                    // 1085
        B += [0, 0, X, C, C, X][h];                                                                                    // 1086
        return packageRGB(R, G, B, o);                                                                                 // 1087
    };                                                                                                                 // 1088
    /*\
     * Raphael.hsl2rgb                                                                                                 // 1090
     [ method ]                                                                                                        // 1091
     **                                                                                                                // 1092
     * Converts HSL values to RGB object.                                                                              // 1093
     > Parameters                                                                                                      // 1094
     - h (number) hue                                                                                                  // 1095
     - s (number) saturation                                                                                           // 1096
     - l (number) luminosity                                                                                           // 1097
     = (object) RGB object in format:                                                                                  // 1098
     o {                                                                                                               // 1099
     o     r (number) red,                                                                                             // 1100
     o     g (number) green,                                                                                           // 1101
     o     b (number) blue,                                                                                            // 1102
     o     hex (string) color in HTML/CSS format: #••••••                                                              // 1103
     o }                                                                                                               // 1104
    \*/                                                                                                                // 1105
    R.hsl2rgb = function (h, s, l, o) {                                                                                // 1106
        if (this.is(h, "object") && "h" in h && "s" in h && "l" in h) {                                                // 1107
            l = h.l;                                                                                                   // 1108
            s = h.s;                                                                                                   // 1109
            h = h.h;                                                                                                   // 1110
        }                                                                                                              // 1111
        if (h > 1 || s > 1 || l > 1) {                                                                                 // 1112
            h /= 360;                                                                                                  // 1113
            s /= 100;                                                                                                  // 1114
            l /= 100;                                                                                                  // 1115
        }                                                                                                              // 1116
        h *= 360;                                                                                                      // 1117
        var R, G, B, X, C;                                                                                             // 1118
        h = (h % 360) / 60;                                                                                            // 1119
        C = 2 * s * (l < .5 ? l : 1 - l);                                                                              // 1120
        X = C * (1 - abs(h % 2 - 1));                                                                                  // 1121
        R = G = B = l - C / 2;                                                                                         // 1122
                                                                                                                       // 1123
        h = ~~h;                                                                                                       // 1124
        R += [C, X, 0, 0, X, C][h];                                                                                    // 1125
        G += [X, C, C, X, 0, 0][h];                                                                                    // 1126
        B += [0, 0, X, C, C, X][h];                                                                                    // 1127
        return packageRGB(R, G, B, o);                                                                                 // 1128
    };                                                                                                                 // 1129
    /*\
     * Raphael.rgb2hsb                                                                                                 // 1131
     [ method ]                                                                                                        // 1132
     **                                                                                                                // 1133
     * Converts RGB values to HSB object.                                                                              // 1134
     > Parameters                                                                                                      // 1135
     - r (number) red                                                                                                  // 1136
     - g (number) green                                                                                                // 1137
     - b (number) blue                                                                                                 // 1138
     = (object) HSB object in format:                                                                                  // 1139
     o {                                                                                                               // 1140
     o     h (number) hue                                                                                              // 1141
     o     s (number) saturation                                                                                       // 1142
     o     b (number) brightness                                                                                       // 1143
     o }                                                                                                               // 1144
    \*/                                                                                                                // 1145
    R.rgb2hsb = function (r, g, b) {                                                                                   // 1146
        b = prepareRGB(r, g, b);                                                                                       // 1147
        r = b[0];                                                                                                      // 1148
        g = b[1];                                                                                                      // 1149
        b = b[2];                                                                                                      // 1150
                                                                                                                       // 1151
        var H, S, V, C;                                                                                                // 1152
        V = mmax(r, g, b);                                                                                             // 1153
        C = V - mmin(r, g, b);                                                                                         // 1154
        H = (C == 0 ? null :                                                                                           // 1155
             V == r ? (g - b) / C :                                                                                    // 1156
             V == g ? (b - r) / C + 2 :                                                                                // 1157
                      (r - g) / C + 4                                                                                  // 1158
            );                                                                                                         // 1159
        H = ((H + 360) % 6) * 60 / 360;                                                                                // 1160
        S = C == 0 ? 0 : C / V;                                                                                        // 1161
        return {h: H, s: S, b: V, toString: hsbtoString};                                                              // 1162
    };                                                                                                                 // 1163
    /*\
     * Raphael.rgb2hsl                                                                                                 // 1165
     [ method ]                                                                                                        // 1166
     **                                                                                                                // 1167
     * Converts RGB values to HSL object.                                                                              // 1168
     > Parameters                                                                                                      // 1169
     - r (number) red                                                                                                  // 1170
     - g (number) green                                                                                                // 1171
     - b (number) blue                                                                                                 // 1172
     = (object) HSL object in format:                                                                                  // 1173
     o {                                                                                                               // 1174
     o     h (number) hue                                                                                              // 1175
     o     s (number) saturation                                                                                       // 1176
     o     l (number) luminosity                                                                                       // 1177
     o }                                                                                                               // 1178
    \*/                                                                                                                // 1179
    R.rgb2hsl = function (r, g, b) {                                                                                   // 1180
        b = prepareRGB(r, g, b);                                                                                       // 1181
        r = b[0];                                                                                                      // 1182
        g = b[1];                                                                                                      // 1183
        b = b[2];                                                                                                      // 1184
                                                                                                                       // 1185
        var H, S, L, M, m, C;                                                                                          // 1186
        M = mmax(r, g, b);                                                                                             // 1187
        m = mmin(r, g, b);                                                                                             // 1188
        C = M - m;                                                                                                     // 1189
        H = (C == 0 ? null :                                                                                           // 1190
             M == r ? (g - b) / C :                                                                                    // 1191
             M == g ? (b - r) / C + 2 :                                                                                // 1192
                      (r - g) / C + 4);                                                                                // 1193
        H = ((H + 360) % 6) * 60 / 360;                                                                                // 1194
        L = (M + m) / 2;                                                                                               // 1195
        S = (C == 0 ? 0 :                                                                                              // 1196
             L < .5 ? C / (2 * L) :                                                                                    // 1197
                      C / (2 - 2 * L));                                                                                // 1198
        return {h: H, s: S, l: L, toString: hsltoString};                                                              // 1199
    };                                                                                                                 // 1200
    R._path2string = function () {                                                                                     // 1201
        return this.join(",").replace(p2s, "$1");                                                                      // 1202
    };                                                                                                                 // 1203
    function repush(array, item) {                                                                                     // 1204
        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {                                       // 1205
            return array.push(array.splice(i, 1)[0]);                                                                  // 1206
        }                                                                                                              // 1207
    }                                                                                                                  // 1208
    function cacher(f, scope, postprocessor) {                                                                         // 1209
        function newf() {                                                                                              // 1210
            var arg = Array.prototype.slice.call(arguments, 0),                                                        // 1211
                args = arg.join("\u2400"),                                                                             // 1212
                cache = newf.cache = newf.cache || {},                                                                 // 1213
                count = newf.count = newf.count || [];                                                                 // 1214
            if (cache[has](args)) {                                                                                    // 1215
                repush(count, args);                                                                                   // 1216
                return postprocessor ? postprocessor(cache[args]) : cache[args];                                       // 1217
            }                                                                                                          // 1218
            count.length >= 1e3 && delete cache[count.shift()];                                                        // 1219
            count.push(args);                                                                                          // 1220
            cache[args] = f[apply](scope, arg);                                                                        // 1221
            return postprocessor ? postprocessor(cache[args]) : cache[args];                                           // 1222
        }                                                                                                              // 1223
        return newf;                                                                                                   // 1224
    }                                                                                                                  // 1225
                                                                                                                       // 1226
    var preload = R._preload = function (src, f) {                                                                     // 1227
        var img = g.doc.createElement("img");                                                                          // 1228
        img.style.cssText = "position:absolute;left:-9999em;top:-9999em";                                              // 1229
        img.onload = function () {                                                                                     // 1230
            f.call(this);                                                                                              // 1231
            this.onload = null;                                                                                        // 1232
            g.doc.body.removeChild(this);                                                                              // 1233
        };                                                                                                             // 1234
        img.onerror = function () {                                                                                    // 1235
            g.doc.body.removeChild(this);                                                                              // 1236
        };                                                                                                             // 1237
        g.doc.body.appendChild(img);                                                                                   // 1238
        img.src = src;                                                                                                 // 1239
    };                                                                                                                 // 1240
                                                                                                                       // 1241
    function clrToString() {                                                                                           // 1242
        return this.hex;                                                                                               // 1243
    }                                                                                                                  // 1244
                                                                                                                       // 1245
    /*\
     * Raphael.getRGB                                                                                                  // 1247
     [ method ]                                                                                                        // 1248
     **                                                                                                                // 1249
     * Parses colour string as RGB object                                                                              // 1250
     > Parameters                                                                                                      // 1251
     - colour (string) colour string in one of formats:                                                                // 1252
     # <ul>                                                                                                            // 1253
     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>         // 1254
     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>                      // 1255
     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>                // 1256
     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>
     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>    // 1258
     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>
     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>                                                    // 1260
     #     <li>hsl(•••, •••, •••) — same as hsb</li>                                                                   // 1261
     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>                                                                // 1262
     # </ul>                                                                                                           // 1263
     = (object) RGB object in format:                                                                                  // 1264
     o {                                                                                                               // 1265
     o     r (number) red,                                                                                             // 1266
     o     g (number) green,                                                                                           // 1267
     o     b (number) blue                                                                                             // 1268
     o     hex (string) color in HTML/CSS format: #••••••,                                                             // 1269
     o     error (boolean) true if string can’t be parsed                                                              // 1270
     o }                                                                                                               // 1271
    \*/                                                                                                                // 1272
    R.getRGB = cacher(function (colour) {                                                                              // 1273
        if (!colour || !!((colour = Str(colour)).indexOf("-") + 1)) {                                                  // 1274
            return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: clrToString};                                // 1275
        }                                                                                                              // 1276
        if (colour == "none") {                                                                                        // 1277
            return {r: -1, g: -1, b: -1, hex: "none", toString: clrToString};                                          // 1278
        }                                                                                                              // 1279
        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == "#") && (colour = toHex(colour));      // 1280
        var res,                                                                                                       // 1281
            red,                                                                                                       // 1282
            green,                                                                                                     // 1283
            blue,                                                                                                      // 1284
            opacity,                                                                                                   // 1285
            t,                                                                                                         // 1286
            values,                                                                                                    // 1287
            rgb = colour.match(colourRegExp);                                                                          // 1288
        if (rgb) {                                                                                                     // 1289
            if (rgb[2]) {                                                                                              // 1290
                blue = toInt(rgb[2].substring(5), 16);                                                                 // 1291
                green = toInt(rgb[2].substring(3, 5), 16);                                                             // 1292
                red = toInt(rgb[2].substring(1, 3), 16);                                                               // 1293
            }                                                                                                          // 1294
            if (rgb[3]) {                                                                                              // 1295
                blue = toInt((t = rgb[3].charAt(3)) + t, 16);                                                          // 1296
                green = toInt((t = rgb[3].charAt(2)) + t, 16);                                                         // 1297
                red = toInt((t = rgb[3].charAt(1)) + t, 16);                                                           // 1298
            }                                                                                                          // 1299
            if (rgb[4]) {                                                                                              // 1300
                values = rgb[4][split](commaSpaces);                                                                   // 1301
                red = toFloat(values[0]);                                                                              // 1302
                values[0].slice(-1) == "%" && (red *= 2.55);                                                           // 1303
                green = toFloat(values[1]);                                                                            // 1304
                values[1].slice(-1) == "%" && (green *= 2.55);                                                         // 1305
                blue = toFloat(values[2]);                                                                             // 1306
                values[2].slice(-1) == "%" && (blue *= 2.55);                                                          // 1307
                rgb[1].toLowerCase().slice(0, 4) == "rgba" && (opacity = toFloat(values[3]));                          // 1308
                values[3] && values[3].slice(-1) == "%" && (opacity /= 100);                                           // 1309
            }                                                                                                          // 1310
            if (rgb[5]) {                                                                                              // 1311
                values = rgb[5][split](commaSpaces);                                                                   // 1312
                red = toFloat(values[0]);                                                                              // 1313
                values[0].slice(-1) == "%" && (red *= 2.55);                                                           // 1314
                green = toFloat(values[1]);                                                                            // 1315
                values[1].slice(-1) == "%" && (green *= 2.55);                                                         // 1316
                blue = toFloat(values[2]);                                                                             // 1317
                values[2].slice(-1) == "%" && (blue *= 2.55);                                                          // 1318
                (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\xb0") && (red /= 360);                       // 1319
                rgb[1].toLowerCase().slice(0, 4) == "hsba" && (opacity = toFloat(values[3]));                          // 1320
                values[3] && values[3].slice(-1) == "%" && (opacity /= 100);                                           // 1321
                return R.hsb2rgb(red, green, blue, opacity);                                                           // 1322
            }                                                                                                          // 1323
            if (rgb[6]) {                                                                                              // 1324
                values = rgb[6][split](commaSpaces);                                                                   // 1325
                red = toFloat(values[0]);                                                                              // 1326
                values[0].slice(-1) == "%" && (red *= 2.55);                                                           // 1327
                green = toFloat(values[1]);                                                                            // 1328
                values[1].slice(-1) == "%" && (green *= 2.55);                                                         // 1329
                blue = toFloat(values[2]);                                                                             // 1330
                values[2].slice(-1) == "%" && (blue *= 2.55);                                                          // 1331
                (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\xb0") && (red /= 360);                       // 1332
                rgb[1].toLowerCase().slice(0, 4) == "hsla" && (opacity = toFloat(values[3]));                          // 1333
                values[3] && values[3].slice(-1) == "%" && (opacity /= 100);                                           // 1334
                return R.hsl2rgb(red, green, blue, opacity);                                                           // 1335
            }                                                                                                          // 1336
            rgb = {r: red, g: green, b: blue, toString: clrToString};                                                  // 1337
            rgb.hex = "#" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);                      // 1338
            R.is(opacity, "finite") && (rgb.opacity = opacity);                                                        // 1339
            return rgb;                                                                                                // 1340
        }                                                                                                              // 1341
        return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: clrToString};                                    // 1342
    }, R);                                                                                                             // 1343
    /*\
     * Raphael.hsb                                                                                                     // 1345
     [ method ]                                                                                                        // 1346
     **                                                                                                                // 1347
     * Converts HSB values to hex representation of the colour.                                                        // 1348
     > Parameters                                                                                                      // 1349
     - h (number) hue                                                                                                  // 1350
     - s (number) saturation                                                                                           // 1351
     - b (number) value or brightness                                                                                  // 1352
     = (string) hex representation of the colour.                                                                      // 1353
    \*/                                                                                                                // 1354
    R.hsb = cacher(function (h, s, b) {                                                                                // 1355
        return R.hsb2rgb(h, s, b).hex;                                                                                 // 1356
    });                                                                                                                // 1357
    /*\
     * Raphael.hsl                                                                                                     // 1359
     [ method ]                                                                                                        // 1360
     **                                                                                                                // 1361
     * Converts HSL values to hex representation of the colour.                                                        // 1362
     > Parameters                                                                                                      // 1363
     - h (number) hue                                                                                                  // 1364
     - s (number) saturation                                                                                           // 1365
     - l (number) luminosity                                                                                           // 1366
     = (string) hex representation of the colour.                                                                      // 1367
    \*/                                                                                                                // 1368
    R.hsl = cacher(function (h, s, l) {                                                                                // 1369
        return R.hsl2rgb(h, s, l).hex;                                                                                 // 1370
    });                                                                                                                // 1371
    /*\
     * Raphael.rgb                                                                                                     // 1373
     [ method ]                                                                                                        // 1374
     **                                                                                                                // 1375
     * Converts RGB values to hex representation of the colour.                                                        // 1376
     > Parameters                                                                                                      // 1377
     - r (number) red                                                                                                  // 1378
     - g (number) green                                                                                                // 1379
     - b (number) blue                                                                                                 // 1380
     = (string) hex representation of the colour.                                                                      // 1381
    \*/                                                                                                                // 1382
    R.rgb = cacher(function (r, g, b) {                                                                                // 1383
        return "#" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);                                      // 1384
    });                                                                                                                // 1385
    /*\
     * Raphael.getColor                                                                                                // 1387
     [ method ]                                                                                                        // 1388
     **                                                                                                                // 1389
     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset          // 1390
     > Parameters                                                                                                      // 1391
     - value (number) #optional brightness, default is `0.75`                                                          // 1392
     = (string) hex representation of the colour.                                                                      // 1393
    \*/                                                                                                                // 1394
    R.getColor = function (value) {                                                                                    // 1395
        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},                        // 1396
            rgb = this.hsb2rgb(start.h, start.s, start.b);                                                             // 1397
        start.h += .075;                                                                                               // 1398
        if (start.h > 1) {                                                                                             // 1399
            start.h = 0;                                                                                               // 1400
            start.s -= .2;                                                                                             // 1401
            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});                                          // 1402
        }                                                                                                              // 1403
        return rgb.hex;                                                                                                // 1404
    };                                                                                                                 // 1405
    /*\
     * Raphael.getColor.reset                                                                                          // 1407
     [ method ]                                                                                                        // 1408
     **                                                                                                                // 1409
     * Resets spectrum position for @Raphael.getColor back to red.                                                     // 1410
    \*/                                                                                                                // 1411
    R.getColor.reset = function () {                                                                                   // 1412
        delete this.start;                                                                                             // 1413
    };                                                                                                                 // 1414
                                                                                                                       // 1415
    // http://schepers.cc/getting-to-the-point                                                                         // 1416
    function catmullRom2bezier(crp, z) {                                                                               // 1417
        var d = [];                                                                                                    // 1418
        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {                                                // 1419
            var p = [                                                                                                  // 1420
                        {x: +crp[i - 2], y: +crp[i - 1]},                                                              // 1421
                        {x: +crp[i],     y: +crp[i + 1]},                                                              // 1422
                        {x: +crp[i + 2], y: +crp[i + 3]},                                                              // 1423
                        {x: +crp[i + 4], y: +crp[i + 5]}                                                               // 1424
                    ];                                                                                                 // 1425
            if (z) {                                                                                                   // 1426
                if (!i) {                                                                                              // 1427
                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};                                                     // 1428
                } else if (iLen - 4 == i) {                                                                            // 1429
                    p[3] = {x: +crp[0], y: +crp[1]};                                                                   // 1430
                } else if (iLen - 2 == i) {                                                                            // 1431
                    p[2] = {x: +crp[0], y: +crp[1]};                                                                   // 1432
                    p[3] = {x: +crp[2], y: +crp[3]};                                                                   // 1433
                }                                                                                                      // 1434
            } else {                                                                                                   // 1435
                if (iLen - 4 == i) {                                                                                   // 1436
                    p[3] = p[2];                                                                                       // 1437
                } else if (!i) {                                                                                       // 1438
                    p[0] = {x: +crp[i], y: +crp[i + 1]};                                                               // 1439
                }                                                                                                      // 1440
            }                                                                                                          // 1441
            d.push(["C",                                                                                               // 1442
                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,                                                                 // 1443
                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,                                                                 // 1444
                  (p[1].x + 6 * p[2].x - p[3].x) / 6,                                                                  // 1445
                  (p[1].y + 6*p[2].y - p[3].y) / 6,                                                                    // 1446
                  p[2].x,                                                                                              // 1447
                  p[2].y                                                                                               // 1448
            ]);                                                                                                        // 1449
        }                                                                                                              // 1450
                                                                                                                       // 1451
        return d;                                                                                                      // 1452
    }                                                                                                                  // 1453
    /*\
     * Raphael.parsePathString                                                                                         // 1455
     [ method ]                                                                                                        // 1456
     **                                                                                                                // 1457
     * Utility method                                                                                                  // 1458
     **                                                                                                                // 1459
     * Parses given path string into an array of arrays of path segments.                                              // 1460
     > Parameters                                                                                                      // 1461
     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away) // 1462
     = (array) array of segments.                                                                                      // 1463
    \*/                                                                                                                // 1464
    R.parsePathString = function (pathString) {                                                                        // 1465
        if (!pathString) {                                                                                             // 1466
            return null;                                                                                               // 1467
        }                                                                                                              // 1468
        var pth = paths(pathString);                                                                                   // 1469
        if (pth.arr) {                                                                                                 // 1470
            return pathClone(pth.arr);                                                                                 // 1471
        }                                                                                                              // 1472
                                                                                                                       // 1473
        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},                          // 1474
            data = [];                                                                                                 // 1475
        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption                               // 1476
            data = pathClone(pathString);                                                                              // 1477
        }                                                                                                              // 1478
        if (!data.length) {                                                                                            // 1479
            Str(pathString).replace(pathCommand, function (a, b, c) {                                                  // 1480
                var params = [],                                                                                       // 1481
                    name = b.toLowerCase();                                                                            // 1482
                c.replace(pathValues, function (a, b) {                                                                // 1483
                    b && params.push(+b);                                                                              // 1484
                });                                                                                                    // 1485
                if (name == "m" && params.length > 2) {                                                                // 1486
                    data.push([b][concat](params.splice(0, 2)));                                                       // 1487
                    name = "l";                                                                                        // 1488
                    b = b == "m" ? "l" : "L";                                                                          // 1489
                }                                                                                                      // 1490
                if (name == "r") {                                                                                     // 1491
                    data.push([b][concat](params));                                                                    // 1492
                } else while (params.length >= paramCounts[name]) {                                                    // 1493
                    data.push([b][concat](params.splice(0, paramCounts[name])));                                       // 1494
                    if (!paramCounts[name]) {                                                                          // 1495
                        break;                                                                                         // 1496
                    }                                                                                                  // 1497
                }                                                                                                      // 1498
            });                                                                                                        // 1499
        }                                                                                                              // 1500
        data.toString = R._path2string;                                                                                // 1501
        pth.arr = pathClone(data);                                                                                     // 1502
        return data;                                                                                                   // 1503
    };                                                                                                                 // 1504
    /*\
     * Raphael.parseTransformString                                                                                    // 1506
     [ method ]                                                                                                        // 1507
     **                                                                                                                // 1508
     * Utility method                                                                                                  // 1509
     **                                                                                                                // 1510
     * Parses given path string into an array of transformations.                                                      // 1511
     > Parameters                                                                                                      // 1512
     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)
     = (array) array of transformations.                                                                               // 1514
    \*/                                                                                                                // 1515
    R.parseTransformString = cacher(function (TString) {                                                               // 1516
        if (!TString) {                                                                                                // 1517
            return null;                                                                                               // 1518
        }                                                                                                              // 1519
        var paramCounts = {r: 3, s: 4, t: 2, m: 6},                                                                    // 1520
            data = [];                                                                                                 // 1521
        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption                                     // 1522
            data = pathClone(TString);                                                                                 // 1523
        }                                                                                                              // 1524
        if (!data.length) {                                                                                            // 1525
            Str(TString).replace(tCommand, function (a, b, c) {                                                        // 1526
                var params = [],                                                                                       // 1527
                    name = lowerCase.call(b);                                                                          // 1528
                c.replace(pathValues, function (a, b) {                                                                // 1529
                    b && params.push(+b);                                                                              // 1530
                });                                                                                                    // 1531
                data.push([b][concat](params));                                                                        // 1532
            });                                                                                                        // 1533
        }                                                                                                              // 1534
        data.toString = R._path2string;                                                                                // 1535
        return data;                                                                                                   // 1536
    });                                                                                                                // 1537
    // PATHS                                                                                                           // 1538
    var paths = function (ps) {                                                                                        // 1539
        var p = paths.ps = paths.ps || {};                                                                             // 1540
        if (p[ps]) {                                                                                                   // 1541
            p[ps].sleep = 100;                                                                                         // 1542
        } else {                                                                                                       // 1543
            p[ps] = {                                                                                                  // 1544
                sleep: 100                                                                                             // 1545
            };                                                                                                         // 1546
        }                                                                                                              // 1547
        setTimeout(function () {                                                                                       // 1548
            for (var key in p) if (p[has](key) && key != ps) {                                                         // 1549
                p[key].sleep--;                                                                                        // 1550
                !p[key].sleep && delete p[key];                                                                        // 1551
            }                                                                                                          // 1552
        });                                                                                                            // 1553
        return p[ps];                                                                                                  // 1554
    };                                                                                                                 // 1555
    /*\
     * Raphael.findDotsAtSegment                                                                                       // 1557
     [ method ]                                                                                                        // 1558
     **                                                                                                                // 1559
     * Utility method                                                                                                  // 1560
     **                                                                                                                // 1561
     * Find dot coordinates on the given cubic bezier curve at the given t.                                            // 1562
     > Parameters                                                                                                      // 1563
     - p1x (number) x of the first point of the curve                                                                  // 1564
     - p1y (number) y of the first point of the curve                                                                  // 1565
     - c1x (number) x of the first anchor of the curve                                                                 // 1566
     - c1y (number) y of the first anchor of the curve                                                                 // 1567
     - c2x (number) x of the second anchor of the curve                                                                // 1568
     - c2y (number) y of the second anchor of the curve                                                                // 1569
     - p2x (number) x of the second point of the curve                                                                 // 1570
     - p2y (number) y of the second point of the curve                                                                 // 1571
     - t (number) position on the curve (0..1)                                                                         // 1572
     = (object) point information in format:                                                                           // 1573
     o {                                                                                                               // 1574
     o     x: (number) x coordinate of the point                                                                       // 1575
     o     y: (number) y coordinate of the point                                                                       // 1576
     o     m: {                                                                                                        // 1577
     o         x: (number) x coordinate of the left anchor                                                             // 1578
     o         y: (number) y coordinate of the left anchor                                                             // 1579
     o     }                                                                                                           // 1580
     o     n: {                                                                                                        // 1581
     o         x: (number) x coordinate of the right anchor                                                            // 1582
     o         y: (number) y coordinate of the right anchor                                                            // 1583
     o     }                                                                                                           // 1584
     o     start: {                                                                                                    // 1585
     o         x: (number) x coordinate of the start of the curve                                                      // 1586
     o         y: (number) y coordinate of the start of the curve                                                      // 1587
     o     }                                                                                                           // 1588
     o     end: {                                                                                                      // 1589
     o         x: (number) x coordinate of the end of the curve                                                        // 1590
     o         y: (number) y coordinate of the end of the curve                                                        // 1591
     o     }                                                                                                           // 1592
     o     alpha: (number) angle of the curve derivative at the point                                                  // 1593
     o }                                                                                                               // 1594
    \*/                                                                                                                // 1595
    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {                                       // 1596
        var t1 = 1 - t,                                                                                                // 1597
            t13 = pow(t1, 3),                                                                                          // 1598
            t12 = pow(t1, 2),                                                                                          // 1599
            t2 = t * t,                                                                                                // 1600
            t3 = t2 * t,                                                                                               // 1601
            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,                                       // 1602
            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,                                       // 1603
            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),                                               // 1604
            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),                                               // 1605
            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),                                               // 1606
            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),                                               // 1607
            ax = t1 * p1x + t * c1x,                                                                                   // 1608
            ay = t1 * p1y + t * c1y,                                                                                   // 1609
            cx = t1 * c2x + t * p2x,                                                                                   // 1610
            cy = t1 * c2y + t * p2y,                                                                                   // 1611
            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);                                                    // 1612
        (mx > nx || my < ny) && (alpha += 180);                                                                        // 1613
        return {                                                                                                       // 1614
            x: x,                                                                                                      // 1615
            y: y,                                                                                                      // 1616
            m: {x: mx, y: my},                                                                                         // 1617
            n: {x: nx, y: ny},                                                                                         // 1618
            start: {x: ax, y: ay},                                                                                     // 1619
            end: {x: cx, y: cy},                                                                                       // 1620
            alpha: alpha                                                                                               // 1621
        };                                                                                                             // 1622
    };                                                                                                                 // 1623
    /*\
     * Raphael.bezierBBox                                                                                              // 1625
     [ method ]                                                                                                        // 1626
     **                                                                                                                // 1627
     * Utility method                                                                                                  // 1628
     **                                                                                                                // 1629
     * Return bounding box of a given cubic bezier curve                                                               // 1630
     > Parameters                                                                                                      // 1631
     - p1x (number) x of the first point of the curve                                                                  // 1632
     - p1y (number) y of the first point of the curve                                                                  // 1633
     - c1x (number) x of the first anchor of the curve                                                                 // 1634
     - c1y (number) y of the first anchor of the curve                                                                 // 1635
     - c2x (number) x of the second anchor of the curve                                                                // 1636
     - c2y (number) y of the second anchor of the curve                                                                // 1637
     - p2x (number) x of the second point of the curve                                                                 // 1638
     - p2y (number) y of the second point of the curve                                                                 // 1639
     * or                                                                                                              // 1640
     - bez (array) array of six points for bezier curve                                                                // 1641
     = (object) point information in format:                                                                           // 1642
     o {                                                                                                               // 1643
     o     min: {                                                                                                      // 1644
     o         x: (number) x coordinate of the left point                                                              // 1645
     o         y: (number) y coordinate of the top point                                                               // 1646
     o     }                                                                                                           // 1647
     o     max: {                                                                                                      // 1648
     o         x: (number) x coordinate of the right point                                                             // 1649
     o         y: (number) y coordinate of the bottom point                                                            // 1650
     o     }                                                                                                           // 1651
     o }                                                                                                               // 1652
    \*/                                                                                                                // 1653
    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {                                                 // 1654
        if (!R.is(p1x, "array")) {                                                                                     // 1655
            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];                                                            // 1656
        }                                                                                                              // 1657
        var bbox = curveDim.apply(null, p1x);                                                                          // 1658
        return {                                                                                                       // 1659
            x: bbox.min.x,                                                                                             // 1660
            y: bbox.min.y,                                                                                             // 1661
            x2: bbox.max.x,                                                                                            // 1662
            y2: bbox.max.y,                                                                                            // 1663
            width: bbox.max.x - bbox.min.x,                                                                            // 1664
            height: bbox.max.y - bbox.min.y                                                                            // 1665
        };                                                                                                             // 1666
    };                                                                                                                 // 1667
    /*\
     * Raphael.isPointInsideBBox                                                                                       // 1669
     [ method ]                                                                                                        // 1670
     **                                                                                                                // 1671
     * Utility method                                                                                                  // 1672
     **                                                                                                                // 1673
     * Returns `true` if given point is inside bounding boxes.                                                         // 1674
     > Parameters                                                                                                      // 1675
     - bbox (string) bounding box                                                                                      // 1676
     - x (string) x coordinate of the point                                                                            // 1677
     - y (string) y coordinate of the point                                                                            // 1678
     = (boolean) `true` if point inside                                                                                // 1679
    \*/                                                                                                                // 1680
    R.isPointInsideBBox = function (bbox, x, y) {                                                                      // 1681
        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;                                             // 1682
    };                                                                                                                 // 1683
    /*\
     * Raphael.isBBoxIntersect                                                                                         // 1685
     [ method ]                                                                                                        // 1686
     **                                                                                                                // 1687
     * Utility method                                                                                                  // 1688
     **                                                                                                                // 1689
     * Returns `true` if two bounding boxes intersect                                                                  // 1690
     > Parameters                                                                                                      // 1691
     - bbox1 (string) first bounding box                                                                               // 1692
     - bbox2 (string) second bounding box                                                                              // 1693
     = (boolean) `true` if they intersect                                                                              // 1694
    \*/                                                                                                                // 1695
    R.isBBoxIntersect = function (bbox1, bbox2) {                                                                      // 1696
        var i = R.isPointInsideBBox;                                                                                   // 1697
        return i(bbox2, bbox1.x, bbox1.y)                                                                              // 1698
            || i(bbox2, bbox1.x2, bbox1.y)                                                                             // 1699
            || i(bbox2, bbox1.x, bbox1.y2)                                                                             // 1700
            || i(bbox2, bbox1.x2, bbox1.y2)                                                                            // 1701
            || i(bbox1, bbox2.x, bbox2.y)                                                                              // 1702
            || i(bbox1, bbox2.x2, bbox2.y)                                                                             // 1703
            || i(bbox1, bbox2.x, bbox2.y2)                                                                             // 1704
            || i(bbox1, bbox2.x2, bbox2.y2)                                                                            // 1705
            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)                    // 1706
            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);                   // 1707
    };                                                                                                                 // 1708
    function base3(t, p1, p2, p3, p4) {                                                                                // 1709
        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,                                                                   // 1710
            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;                                                                   // 1711
        return t * t2 - 3 * p1 + 3 * p2;                                                                               // 1712
    }                                                                                                                  // 1713
    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {                                                               // 1714
        if (z == null) {                                                                                               // 1715
            z = 1;                                                                                                     // 1716
        }                                                                                                              // 1717
        z = z > 1 ? 1 : z < 0 ? 0 : z;                                                                                 // 1718
        var z2 = z / 2,                                                                                                // 1719
            n = 12,                                                                                                    // 1720
            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],     // 1721
            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],           // 1722
            sum = 0;                                                                                                   // 1723
        for (var i = 0; i < n; i++) {                                                                                  // 1724
            var ct = z2 * Tvalues[i] + z2,                                                                             // 1725
                xbase = base3(ct, x1, x2, x3, x4),                                                                     // 1726
                ybase = base3(ct, y1, y2, y3, y4),                                                                     // 1727
                comb = xbase * xbase + ybase * ybase;                                                                  // 1728
            sum += Cvalues[i] * math.sqrt(comb);                                                                       // 1729
        }                                                                                                              // 1730
        return z2 * sum;                                                                                               // 1731
    }                                                                                                                  // 1732
    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {                                                           // 1733
        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {                                                   // 1734
            return;                                                                                                    // 1735
        }                                                                                                              // 1736
        var t = 1,                                                                                                     // 1737
            step = t / 2,                                                                                              // 1738
            t2 = t - step,                                                                                             // 1739
            l,                                                                                                         // 1740
            e = .01;                                                                                                   // 1741
        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);                                                                // 1742
        while (abs(l - ll) > e) {                                                                                      // 1743
            step /= 2;                                                                                                 // 1744
            t2 += (l < ll ? 1 : -1) * step;                                                                            // 1745
            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);                                                            // 1746
        }                                                                                                              // 1747
        return t2;                                                                                                     // 1748
    }                                                                                                                  // 1749
    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {                                                               // 1750
        if (                                                                                                           // 1751
            mmax(x1, x2) < mmin(x3, x4) ||                                                                             // 1752
            mmin(x1, x2) > mmax(x3, x4) ||                                                                             // 1753
            mmax(y1, y2) < mmin(y3, y4) ||                                                                             // 1754
            mmin(y1, y2) > mmax(y3, y4)                                                                                // 1755
        ) {                                                                                                            // 1756
            return;                                                                                                    // 1757
        }                                                                                                              // 1758
        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),                                    // 1759
            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),                                    // 1760
            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);                                               // 1761
                                                                                                                       // 1762
        if (!denominator) {                                                                                            // 1763
            return;                                                                                                    // 1764
        }                                                                                                              // 1765
        var px = nx / denominator,                                                                                     // 1766
            py = ny / denominator,                                                                                     // 1767
            px2 = +px.toFixed(2),                                                                                      // 1768
            py2 = +py.toFixed(2);                                                                                      // 1769
        if (                                                                                                           // 1770
            px2 < +mmin(x1, x2).toFixed(2) ||                                                                          // 1771
            px2 > +mmax(x1, x2).toFixed(2) ||                                                                          // 1772
            px2 < +mmin(x3, x4).toFixed(2) ||                                                                          // 1773
            px2 > +mmax(x3, x4).toFixed(2) ||                                                                          // 1774
            py2 < +mmin(y1, y2).toFixed(2) ||                                                                          // 1775
            py2 > +mmax(y1, y2).toFixed(2) ||                                                                          // 1776
            py2 < +mmin(y3, y4).toFixed(2) ||                                                                          // 1777
            py2 > +mmax(y3, y4).toFixed(2)                                                                             // 1778
        ) {                                                                                                            // 1779
            return;                                                                                                    // 1780
        }                                                                                                              // 1781
        return {x: px, y: py};                                                                                         // 1782
    }                                                                                                                  // 1783
    function inter(bez1, bez2) {                                                                                       // 1784
        return interHelper(bez1, bez2);                                                                                // 1785
    }                                                                                                                  // 1786
    function interCount(bez1, bez2) {                                                                                  // 1787
        return interHelper(bez1, bez2, 1);                                                                             // 1788
    }                                                                                                                  // 1789
    function interHelper(bez1, bez2, justCount) {                                                                      // 1790
        var bbox1 = R.bezierBBox(bez1),                                                                                // 1791
            bbox2 = R.bezierBBox(bez2);                                                                                // 1792
        if (!R.isBBoxIntersect(bbox1, bbox2)) {                                                                        // 1793
            return justCount ? 0 : [];                                                                                 // 1794
        }                                                                                                              // 1795
        var l1 = bezlen.apply(0, bez1),                                                                                // 1796
            l2 = bezlen.apply(0, bez2),                                                                                // 1797
            n1 = mmax(~~(l1 / 5), 1),                                                                                  // 1798
            n2 = mmax(~~(l2 / 5), 1),                                                                                  // 1799
            dots1 = [],                                                                                                // 1800
            dots2 = [],                                                                                                // 1801
            xy = {},                                                                                                   // 1802
            res = justCount ? 0 : [];                                                                                  // 1803
        for (var i = 0; i < n1 + 1; i++) {                                                                             // 1804
            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));                                                 // 1805
            dots1.push({x: p.x, y: p.y, t: i / n1});                                                                   // 1806
        }                                                                                                              // 1807
        for (i = 0; i < n2 + 1; i++) {                                                                                 // 1808
            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));                                                     // 1809
            dots2.push({x: p.x, y: p.y, t: i / n2});                                                                   // 1810
        }                                                                                                              // 1811
        for (i = 0; i < n1; i++) {                                                                                     // 1812
            for (var j = 0; j < n2; j++) {                                                                             // 1813
                var di = dots1[i],                                                                                     // 1814
                    di1 = dots1[i + 1],                                                                                // 1815
                    dj = dots2[j],                                                                                     // 1816
                    dj1 = dots2[j + 1],                                                                                // 1817
                    ci = abs(di1.x - di.x) < .001 ? "y" : "x",                                                         // 1818
                    cj = abs(dj1.x - dj.x) < .001 ? "y" : "x",                                                         // 1819
                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);                                // 1820
                if (is) {                                                                                              // 1821
                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {                                                      // 1822
                        continue;                                                                                      // 1823
                    }                                                                                                  // 1824
                    xy[is.x.toFixed(4)] = is.y.toFixed(4);                                                             // 1825
                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),                      // 1826
                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);                      // 1827
                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {                                            // 1828
                        if (justCount) {                                                                               // 1829
                            res++;                                                                                     // 1830
                        } else {                                                                                       // 1831
                            res.push({                                                                                 // 1832
                                x: is.x,                                                                               // 1833
                                y: is.y,                                                                               // 1834
                                t1: mmin(t1, 1),                                                                       // 1835
                                t2: mmin(t2, 1)                                                                        // 1836
                            });                                                                                        // 1837
                        }                                                                                              // 1838
                    }                                                                                                  // 1839
                }                                                                                                      // 1840
            }                                                                                                          // 1841
        }                                                                                                              // 1842
        return res;                                                                                                    // 1843
    }                                                                                                                  // 1844
    /*\
     * Raphael.pathIntersection                                                                                        // 1846
     [ method ]                                                                                                        // 1847
     **                                                                                                                // 1848
     * Utility method                                                                                                  // 1849
     **                                                                                                                // 1850
     * Finds intersections of two paths                                                                                // 1851
     > Parameters                                                                                                      // 1852
     - path1 (string) path string                                                                                      // 1853
     - path2 (string) path string                                                                                      // 1854
     = (array) dots of intersection                                                                                    // 1855
     o [                                                                                                               // 1856
     o     {                                                                                                           // 1857
     o         x: (number) x coordinate of the point                                                                   // 1858
     o         y: (number) y coordinate of the point                                                                   // 1859
     o         t1: (number) t value for segment of path1                                                               // 1860
     o         t2: (number) t value for segment of path2                                                               // 1861
     o         segment1: (number) order number for segment of path1                                                    // 1862
     o         segment2: (number) order number for segment of path2                                                    // 1863
     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1                      // 1864
     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2                      // 1865
     o     }                                                                                                           // 1866
     o ]                                                                                                               // 1867
    \*/                                                                                                                // 1868
    R.pathIntersection = function (path1, path2) {                                                                     // 1869
        return interPathHelper(path1, path2);                                                                          // 1870
    };                                                                                                                 // 1871
    R.pathIntersectionNumber = function (path1, path2) {                                                               // 1872
        return interPathHelper(path1, path2, 1);                                                                       // 1873
    };                                                                                                                 // 1874
    function interPathHelper(path1, path2, justCount) {                                                                // 1875
        path1 = R._path2curve(path1);                                                                                  // 1876
        path2 = R._path2curve(path2);                                                                                  // 1877
        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,                                                            // 1878
            res = justCount ? 0 : [];                                                                                  // 1879
        for (var i = 0, ii = path1.length; i < ii; i++) {                                                              // 1880
            var pi = path1[i];                                                                                         // 1881
            if (pi[0] == "M") {                                                                                        // 1882
                x1 = x1m = pi[1];                                                                                      // 1883
                y1 = y1m = pi[2];                                                                                      // 1884
            } else {                                                                                                   // 1885
                if (pi[0] == "C") {                                                                                    // 1886
                    bez1 = [x1, y1].concat(pi.slice(1));                                                               // 1887
                    x1 = bez1[6];                                                                                      // 1888
                    y1 = bez1[7];                                                                                      // 1889
                } else {                                                                                               // 1890
                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];                                                       // 1891
                    x1 = x1m;                                                                                          // 1892
                    y1 = y1m;                                                                                          // 1893
                }                                                                                                      // 1894
                for (var j = 0, jj = path2.length; j < jj; j++) {                                                      // 1895
                    var pj = path2[j];                                                                                 // 1896
                    if (pj[0] == "M") {                                                                                // 1897
                        x2 = x2m = pj[1];                                                                              // 1898
                        y2 = y2m = pj[2];                                                                              // 1899
                    } else {                                                                                           // 1900
                        if (pj[0] == "C") {                                                                            // 1901
                            bez2 = [x2, y2].concat(pj.slice(1));                                                       // 1902
                            x2 = bez2[6];                                                                              // 1903
                            y2 = bez2[7];                                                                              // 1904
                        } else {                                                                                       // 1905
                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];                                               // 1906
                            x2 = x2m;                                                                                  // 1907
                            y2 = y2m;                                                                                  // 1908
                        }                                                                                              // 1909
                        var intr = interHelper(bez1, bez2, justCount);                                                 // 1910
                        if (justCount) {                                                                               // 1911
                            res += intr;                                                                               // 1912
                        } else {                                                                                       // 1913
                            for (var k = 0, kk = intr.length; k < kk; k++) {                                           // 1914
                                intr[k].segment1 = i;                                                                  // 1915
                                intr[k].segment2 = j;                                                                  // 1916
                                intr[k].bez1 = bez1;                                                                   // 1917
                                intr[k].bez2 = bez2;                                                                   // 1918
                            }                                                                                          // 1919
                            res = res.concat(intr);                                                                    // 1920
                        }                                                                                              // 1921
                    }                                                                                                  // 1922
                }                                                                                                      // 1923
            }                                                                                                          // 1924
        }                                                                                                              // 1925
        return res;                                                                                                    // 1926
    }                                                                                                                  // 1927
    /*\
     * Raphael.isPointInsidePath                                                                                       // 1929
     [ method ]                                                                                                        // 1930
     **                                                                                                                // 1931
     * Utility method                                                                                                  // 1932
     **                                                                                                                // 1933
     * Returns `true` if given point is inside a given closed path.                                                    // 1934
     > Parameters                                                                                                      // 1935
     - path (string) path string                                                                                       // 1936
     - x (number) x of the point                                                                                       // 1937
     - y (number) y of the point                                                                                       // 1938
     = (boolean) true, if point is inside the path                                                                     // 1939
    \*/                                                                                                                // 1940
    R.isPointInsidePath = function (path, x, y) {                                                                      // 1941
        var bbox = R.pathBBox(path);                                                                                   // 1942
        return R.isPointInsideBBox(bbox, x, y) &&                                                                      // 1943
               interPathHelper(path, [["M", x, y], ["H", bbox.x2 + 10]], 1) % 2 == 1;                                  // 1944
    };                                                                                                                 // 1945
    R._removedFactory = function (methodname) {                                                                        // 1946
        return function () {                                                                                           // 1947
            eve("raphael.log", null, "Rapha\xebl: you are calling to method \u201c" + methodname + "\u201d of removed object", methodname);
        };                                                                                                             // 1949
    };                                                                                                                 // 1950
    /*\
     * Raphael.pathBBox                                                                                                // 1952
     [ method ]                                                                                                        // 1953
     **                                                                                                                // 1954
     * Utility method                                                                                                  // 1955
     **                                                                                                                // 1956
     * Return bounding box of a given path                                                                             // 1957
     > Parameters                                                                                                      // 1958
     - path (string) path string                                                                                       // 1959
     = (object) bounding box                                                                                           // 1960
     o {                                                                                                               // 1961
     o     x: (number) x coordinate of the left top point of the box                                                   // 1962
     o     y: (number) y coordinate of the left top point of the box                                                   // 1963
     o     x2: (number) x coordinate of the right bottom point of the box                                              // 1964
     o     y2: (number) y coordinate of the right bottom point of the box                                              // 1965
     o     width: (number) width of the box                                                                            // 1966
     o     height: (number) height of the box                                                                          // 1967
     o     cx: (number) x coordinate of the center of the box                                                          // 1968
     o     cy: (number) y coordinate of the center of the box                                                          // 1969
     o }                                                                                                               // 1970
    \*/                                                                                                                // 1971
    var pathDimensions = R.pathBBox = function (path) {                                                                // 1972
        var pth = paths(path);                                                                                         // 1973
        if (pth.bbox) {                                                                                                // 1974
            return clone(pth.bbox);                                                                                    // 1975
        }                                                                                                              // 1976
        if (!path) {                                                                                                   // 1977
            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};                                                    // 1978
        }                                                                                                              // 1979
        path = path2curve(path);                                                                                       // 1980
        var x = 0,                                                                                                     // 1981
            y = 0,                                                                                                     // 1982
            X = [],                                                                                                    // 1983
            Y = [],                                                                                                    // 1984
            p;                                                                                                         // 1985
        for (var i = 0, ii = path.length; i < ii; i++) {                                                               // 1986
            p = path[i];                                                                                               // 1987
            if (p[0] == "M") {                                                                                         // 1988
                x = p[1];                                                                                              // 1989
                y = p[2];                                                                                              // 1990
                X.push(x);                                                                                             // 1991
                Y.push(y);                                                                                             // 1992
            } else {                                                                                                   // 1993
                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);                                          // 1994
                X = X[concat](dim.min.x, dim.max.x);                                                                   // 1995
                Y = Y[concat](dim.min.y, dim.max.y);                                                                   // 1996
                x = p[5];                                                                                              // 1997
                y = p[6];                                                                                              // 1998
            }                                                                                                          // 1999
        }                                                                                                              // 2000
        var xmin = mmin[apply](0, X),                                                                                  // 2001
            ymin = mmin[apply](0, Y),                                                                                  // 2002
            xmax = mmax[apply](0, X),                                                                                  // 2003
            ymax = mmax[apply](0, Y),                                                                                  // 2004
            width = xmax - xmin,                                                                                       // 2005
            height = ymax - ymin,                                                                                      // 2006
                bb = {                                                                                                 // 2007
                x: xmin,                                                                                               // 2008
                y: ymin,                                                                                               // 2009
                x2: xmax,                                                                                              // 2010
                y2: ymax,                                                                                              // 2011
                width: width,                                                                                          // 2012
                height: height,                                                                                        // 2013
                cx: xmin + width / 2,                                                                                  // 2014
                cy: ymin + height / 2                                                                                  // 2015
            };                                                                                                         // 2016
        pth.bbox = clone(bb);                                                                                          // 2017
        return bb;                                                                                                     // 2018
    },                                                                                                                 // 2019
        pathClone = function (pathArray) {                                                                             // 2020
            var res = clone(pathArray);                                                                                // 2021
            res.toString = R._path2string;                                                                             // 2022
            return res;                                                                                                // 2023
        },                                                                                                             // 2024
        pathToRelative = R._pathToRelative = function (pathArray) {                                                    // 2025
            var pth = paths(pathArray);                                                                                // 2026
            if (pth.rel) {                                                                                             // 2027
                return pathClone(pth.rel);                                                                             // 2028
            }                                                                                                          // 2029
            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption              // 2030
                pathArray = R.parsePathString(pathArray);                                                              // 2031
            }                                                                                                          // 2032
            var res = [],                                                                                              // 2033
                x = 0,                                                                                                 // 2034
                y = 0,                                                                                                 // 2035
                mx = 0,                                                                                                // 2036
                my = 0,                                                                                                // 2037
                start = 0;                                                                                             // 2038
            if (pathArray[0][0] == "M") {                                                                              // 2039
                x = pathArray[0][1];                                                                                   // 2040
                y = pathArray[0][2];                                                                                   // 2041
                mx = x;                                                                                                // 2042
                my = y;                                                                                                // 2043
                start++;                                                                                               // 2044
                res.push(["M", x, y]);                                                                                 // 2045
            }                                                                                                          // 2046
            for (var i = start, ii = pathArray.length; i < ii; i++) {                                                  // 2047
                var r = res[i] = [],                                                                                   // 2048
                    pa = pathArray[i];                                                                                 // 2049
                if (pa[0] != lowerCase.call(pa[0])) {                                                                  // 2050
                    r[0] = lowerCase.call(pa[0]);                                                                      // 2051
                    switch (r[0]) {                                                                                    // 2052
                        case "a":                                                                                      // 2053
                            r[1] = pa[1];                                                                              // 2054
                            r[2] = pa[2];                                                                              // 2055
                            r[3] = pa[3];                                                                              // 2056
                            r[4] = pa[4];                                                                              // 2057
                            r[5] = pa[5];                                                                              // 2058
                            r[6] = +(pa[6] - x).toFixed(3);                                                            // 2059
                            r[7] = +(pa[7] - y).toFixed(3);                                                            // 2060
                            break;                                                                                     // 2061
                        case "v":                                                                                      // 2062
                            r[1] = +(pa[1] - y).toFixed(3);                                                            // 2063
                            break;                                                                                     // 2064
                        case "m":                                                                                      // 2065
                            mx = pa[1];                                                                                // 2066
                            my = pa[2];                                                                                // 2067
                        default:                                                                                       // 2068
                            for (var j = 1, jj = pa.length; j < jj; j++) {                                             // 2069
                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);                                        // 2070
                            }                                                                                          // 2071
                    }                                                                                                  // 2072
                } else {                                                                                               // 2073
                    r = res[i] = [];                                                                                   // 2074
                    if (pa[0] == "m") {                                                                                // 2075
                        mx = pa[1] + x;                                                                                // 2076
                        my = pa[2] + y;                                                                                // 2077
                    }                                                                                                  // 2078
                    for (var k = 0, kk = pa.length; k < kk; k++) {                                                     // 2079
                        res[i][k] = pa[k];                                                                             // 2080
                    }                                                                                                  // 2081
                }                                                                                                      // 2082
                var len = res[i].length;                                                                               // 2083
                switch (res[i][0]) {                                                                                   // 2084
                    case "z":                                                                                          // 2085
                        x = mx;                                                                                        // 2086
                        y = my;                                                                                        // 2087
                        break;                                                                                         // 2088
                    case "h":                                                                                          // 2089
                        x += +res[i][len - 1];                                                                         // 2090
                        break;                                                                                         // 2091
                    case "v":                                                                                          // 2092
                        y += +res[i][len - 1];                                                                         // 2093
                        break;                                                                                         // 2094
                    default:                                                                                           // 2095
                        x += +res[i][len - 2];                                                                         // 2096
                        y += +res[i][len - 1];                                                                         // 2097
                }                                                                                                      // 2098
            }                                                                                                          // 2099
            res.toString = R._path2string;                                                                             // 2100
            pth.rel = pathClone(res);                                                                                  // 2101
            return res;                                                                                                // 2102
        },                                                                                                             // 2103
        pathToAbsolute = R._pathToAbsolute = function (pathArray) {                                                    // 2104
            var pth = paths(pathArray);                                                                                // 2105
            if (pth.abs) {                                                                                             // 2106
                return pathClone(pth.abs);                                                                             // 2107
            }                                                                                                          // 2108
            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption              // 2109
                pathArray = R.parsePathString(pathArray);                                                              // 2110
            }                                                                                                          // 2111
            if (!pathArray || !pathArray.length) {                                                                     // 2112
                return [["M", 0, 0]];                                                                                  // 2113
            }                                                                                                          // 2114
            var res = [],                                                                                              // 2115
                x = 0,                                                                                                 // 2116
                y = 0,                                                                                                 // 2117
                mx = 0,                                                                                                // 2118
                my = 0,                                                                                                // 2119
                start = 0;                                                                                             // 2120
            if (pathArray[0][0] == "M") {                                                                              // 2121
                x = +pathArray[0][1];                                                                                  // 2122
                y = +pathArray[0][2];                                                                                  // 2123
                mx = x;                                                                                                // 2124
                my = y;                                                                                                // 2125
                start++;                                                                                               // 2126
                res[0] = ["M", x, y];                                                                                  // 2127
            }                                                                                                          // 2128
            var crz = pathArray.length == 3 && pathArray[0][0] == "M" && pathArray[1][0].toUpperCase() == "R" && pathArray[2][0].toUpperCase() == "Z";
            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {                                           // 2130
                res.push(r = []);                                                                                      // 2131
                pa = pathArray[i];                                                                                     // 2132
                if (pa[0] != upperCase.call(pa[0])) {                                                                  // 2133
                    r[0] = upperCase.call(pa[0]);                                                                      // 2134
                    switch (r[0]) {                                                                                    // 2135
                        case "A":                                                                                      // 2136
                            r[1] = pa[1];                                                                              // 2137
                            r[2] = pa[2];                                                                              // 2138
                            r[3] = pa[3];                                                                              // 2139
                            r[4] = pa[4];                                                                              // 2140
                            r[5] = pa[5];                                                                              // 2141
                            r[6] = +(pa[6] + x);                                                                       // 2142
                            r[7] = +(pa[7] + y);                                                                       // 2143
                            break;                                                                                     // 2144
                        case "V":                                                                                      // 2145
                            r[1] = +pa[1] + y;                                                                         // 2146
                            break;                                                                                     // 2147
                        case "H":                                                                                      // 2148
                            r[1] = +pa[1] + x;                                                                         // 2149
                            break;                                                                                     // 2150
                        case "R":                                                                                      // 2151
                            var dots = [x, y][concat](pa.slice(1));                                                    // 2152
                            for (var j = 2, jj = dots.length; j < jj; j++) {                                           // 2153
                                dots[j] = +dots[j] + x;                                                                // 2154
                                dots[++j] = +dots[j] + y;                                                              // 2155
                            }                                                                                          // 2156
                            res.pop();                                                                                 // 2157
                            res = res[concat](catmullRom2bezier(dots, crz));                                           // 2158
                            break;                                                                                     // 2159
                        case "M":                                                                                      // 2160
                            mx = +pa[1] + x;                                                                           // 2161
                            my = +pa[2] + y;                                                                           // 2162
                        default:                                                                                       // 2163
                            for (j = 1, jj = pa.length; j < jj; j++) {                                                 // 2164
                                r[j] = +pa[j] + ((j % 2) ? x : y);                                                     // 2165
                            }                                                                                          // 2166
                    }                                                                                                  // 2167
                } else if (pa[0] == "R") {                                                                             // 2168
                    dots = [x, y][concat](pa.slice(1));                                                                // 2169
                    res.pop();                                                                                         // 2170
                    res = res[concat](catmullRom2bezier(dots, crz));                                                   // 2171
                    r = ["R"][concat](pa.slice(-2));                                                                   // 2172
                } else {                                                                                               // 2173
                    for (var k = 0, kk = pa.length; k < kk; k++) {                                                     // 2174
                        r[k] = pa[k];                                                                                  // 2175
                    }                                                                                                  // 2176
                }                                                                                                      // 2177
                switch (r[0]) {                                                                                        // 2178
                    case "Z":                                                                                          // 2179
                        x = mx;                                                                                        // 2180
                        y = my;                                                                                        // 2181
                        break;                                                                                         // 2182
                    case "H":                                                                                          // 2183
                        x = r[1];                                                                                      // 2184
                        break;                                                                                         // 2185
                    case "V":                                                                                          // 2186
                        y = r[1];                                                                                      // 2187
                        break;                                                                                         // 2188
                    case "M":                                                                                          // 2189
                        mx = r[r.length - 2];                                                                          // 2190
                        my = r[r.length - 1];                                                                          // 2191
                    default:                                                                                           // 2192
                        x = r[r.length - 2];                                                                           // 2193
                        y = r[r.length - 1];                                                                           // 2194
                }                                                                                                      // 2195
            }                                                                                                          // 2196
            res.toString = R._path2string;                                                                             // 2197
            pth.abs = pathClone(res);                                                                                  // 2198
            return res;                                                                                                // 2199
        },                                                                                                             // 2200
        l2c = function (x1, y1, x2, y2) {                                                                              // 2201
            return [x1, y1, x2, y2, x2, y2];                                                                           // 2202
        },                                                                                                             // 2203
        q2c = function (x1, y1, ax, ay, x2, y2) {                                                                      // 2204
            var _13 = 1 / 3,                                                                                           // 2205
                _23 = 2 / 3;                                                                                           // 2206
            return [                                                                                                   // 2207
                    _13 * x1 + _23 * ax,                                                                               // 2208
                    _13 * y1 + _23 * ay,                                                                               // 2209
                    _13 * x2 + _23 * ax,                                                                               // 2210
                    _13 * y2 + _23 * ay,                                                                               // 2211
                    x2,                                                                                                // 2212
                    y2                                                                                                 // 2213
                ];                                                                                                     // 2214
        },                                                                                                             // 2215
        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {                        // 2216
            // for more information of where this math came from visit:                                                // 2217
            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes                                         // 2218
            var _120 = PI * 120 / 180,                                                                                 // 2219
                rad = PI / 180 * (+angle || 0),                                                                        // 2220
                res = [],                                                                                              // 2221
                xy,                                                                                                    // 2222
                rotate = cacher(function (x, y, rad) {                                                                 // 2223
                    var X = x * math.cos(rad) - y * math.sin(rad),                                                     // 2224
                        Y = x * math.sin(rad) + y * math.cos(rad);                                                     // 2225
                    return {x: X, y: Y};                                                                               // 2226
                });                                                                                                    // 2227
            if (!recursive) {                                                                                          // 2228
                xy = rotate(x1, y1, -rad);                                                                             // 2229
                x1 = xy.x;                                                                                             // 2230
                y1 = xy.y;                                                                                             // 2231
                xy = rotate(x2, y2, -rad);                                                                             // 2232
                x2 = xy.x;                                                                                             // 2233
                y2 = xy.y;                                                                                             // 2234
                var cos = math.cos(PI / 180 * angle),                                                                  // 2235
                    sin = math.sin(PI / 180 * angle),                                                                  // 2236
                    x = (x1 - x2) / 2,                                                                                 // 2237
                    y = (y1 - y2) / 2;                                                                                 // 2238
                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);                                                     // 2239
                if (h > 1) {                                                                                           // 2240
                    h = math.sqrt(h);                                                                                  // 2241
                    rx = h * rx;                                                                                       // 2242
                    ry = h * ry;                                                                                       // 2243
                }                                                                                                      // 2244
                var rx2 = rx * rx,                                                                                     // 2245
                    ry2 = ry * ry,                                                                                     // 2246
                    k = (large_arc_flag == sweep_flag ? -1 : 1) *                                                      // 2247
                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),         // 2248
                    cx = k * rx * y / ry + (x1 + x2) / 2,                                                              // 2249
                    cy = k * -ry * x / rx + (y1 + y2) / 2,                                                             // 2250
                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),                                                       // 2251
                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));                                                       // 2252
                                                                                                                       // 2253
                f1 = x1 < cx ? PI - f1 : f1;                                                                           // 2254
                f2 = x2 < cx ? PI - f2 : f2;                                                                           // 2255
                f1 < 0 && (f1 = PI * 2 + f1);                                                                          // 2256
                f2 < 0 && (f2 = PI * 2 + f2);                                                                          // 2257
                if (sweep_flag && f1 > f2) {                                                                           // 2258
                    f1 = f1 - PI * 2;                                                                                  // 2259
                }                                                                                                      // 2260
                if (!sweep_flag && f2 > f1) {                                                                          // 2261
                    f2 = f2 - PI * 2;                                                                                  // 2262
                }                                                                                                      // 2263
            } else {                                                                                                   // 2264
                f1 = recursive[0];                                                                                     // 2265
                f2 = recursive[1];                                                                                     // 2266
                cx = recursive[2];                                                                                     // 2267
                cy = recursive[3];                                                                                     // 2268
            }                                                                                                          // 2269
            var df = f2 - f1;                                                                                          // 2270
            if (abs(df) > _120) {                                                                                      // 2271
                var f2old = f2,                                                                                        // 2272
                    x2old = x2,                                                                                        // 2273
                    y2old = y2;                                                                                        // 2274
                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);                                                     // 2275
                x2 = cx + rx * math.cos(f2);                                                                           // 2276
                y2 = cy + ry * math.sin(f2);                                                                           // 2277
                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);                    // 2278
            }                                                                                                          // 2279
            df = f2 - f1;                                                                                              // 2280
            var c1 = math.cos(f1),                                                                                     // 2281
                s1 = math.sin(f1),                                                                                     // 2282
                c2 = math.cos(f2),                                                                                     // 2283
                s2 = math.sin(f2),                                                                                     // 2284
                t = math.tan(df / 4),                                                                                  // 2285
                hx = 4 / 3 * rx * t,                                                                                   // 2286
                hy = 4 / 3 * ry * t,                                                                                   // 2287
                m1 = [x1, y1],                                                                                         // 2288
                m2 = [x1 + hx * s1, y1 - hy * c1],                                                                     // 2289
                m3 = [x2 + hx * s2, y2 - hy * c2],                                                                     // 2290
                m4 = [x2, y2];                                                                                         // 2291
            m2[0] = 2 * m1[0] - m2[0];                                                                                 // 2292
            m2[1] = 2 * m1[1] - m2[1];                                                                                 // 2293
            if (recursive) {                                                                                           // 2294
                return [m2, m3, m4][concat](res);                                                                      // 2295
            } else {                                                                                                   // 2296
                res = [m2, m3, m4][concat](res).join()[split](",");                                                    // 2297
                var newres = [];                                                                                       // 2298
                for (var i = 0, ii = res.length; i < ii; i++) {                                                        // 2299
                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;         // 2300
                }                                                                                                      // 2301
                return newres;                                                                                         // 2302
            }                                                                                                          // 2303
        },                                                                                                             // 2304
        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {                                      // 2305
            var t1 = 1 - t;                                                                                            // 2306
            return {                                                                                                   // 2307
                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,               // 2308
                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y                // 2309
            };                                                                                                         // 2310
        },                                                                                                             // 2311
        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {                                          // 2312
            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),                                                     // 2313
                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),                                                                 // 2314
                c = p1x - c1x,                                                                                         // 2315
                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,                                                      // 2316
                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,                                                      // 2317
                y = [p1y, p2y],                                                                                        // 2318
                x = [p1x, p2x],                                                                                        // 2319
                dot;                                                                                                   // 2320
            abs(t1) > "1e12" && (t1 = .5);                                                                             // 2321
            abs(t2) > "1e12" && (t2 = .5);                                                                             // 2322
            if (t1 > 0 && t1 < 1) {                                                                                    // 2323
                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);                                    // 2324
                x.push(dot.x);                                                                                         // 2325
                y.push(dot.y);                                                                                         // 2326
            }                                                                                                          // 2327
            if (t2 > 0 && t2 < 1) {                                                                                    // 2328
                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);                                    // 2329
                x.push(dot.x);                                                                                         // 2330
                y.push(dot.y);                                                                                         // 2331
            }                                                                                                          // 2332
            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);                                                         // 2333
            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);                                                                     // 2334
            c = p1y - c1y;                                                                                             // 2335
            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;                                                          // 2336
            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;                                                          // 2337
            abs(t1) > "1e12" && (t1 = .5);                                                                             // 2338
            abs(t2) > "1e12" && (t2 = .5);                                                                             // 2339
            if (t1 > 0 && t1 < 1) {                                                                                    // 2340
                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);                                    // 2341
                x.push(dot.x);                                                                                         // 2342
                y.push(dot.y);                                                                                         // 2343
            }                                                                                                          // 2344
            if (t2 > 0 && t2 < 1) {                                                                                    // 2345
                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);                                    // 2346
                x.push(dot.x);                                                                                         // 2347
                y.push(dot.y);                                                                                         // 2348
            }                                                                                                          // 2349
            return {                                                                                                   // 2350
                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},                                                     // 2351
                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}                                                      // 2352
            };                                                                                                         // 2353
        }),                                                                                                            // 2354
        path2curve = R._path2curve = cacher(function (path, path2) {                                                   // 2355
            var pth = !path2 && paths(path);                                                                           // 2356
            if (!path2 && pth.curve) {                                                                                 // 2357
                return pathClone(pth.curve);                                                                           // 2358
            }                                                                                                          // 2359
            var p = pathToAbsolute(path),                                                                              // 2360
                p2 = path2 && pathToAbsolute(path2),                                                                   // 2361
                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},                                    // 2362
                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},                                   // 2363
                processPath = function (path, d, pcom) {                                                               // 2364
                    var nx, ny, tq = {T:1, Q:1};                                                                       // 2365
                    if (!path) {                                                                                       // 2366
                        return ["C", d.x, d.y, d.x, d.y, d.x, d.y];                                                    // 2367
                    }                                                                                                  // 2368
                    !(path[0] in tq) && (d.qx = d.qy = null);                                                          // 2369
                    switch (path[0]) {                                                                                 // 2370
                        case "M":                                                                                      // 2371
                            d.X = path[1];                                                                             // 2372
                            d.Y = path[2];                                                                             // 2373
                            break;                                                                                     // 2374
                        case "A":                                                                                      // 2375
                            path = ["C"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));                    // 2376
                            break;                                                                                     // 2377
                        case "S":                                                                                      // 2378
                            if (pcom == "C" || pcom == "S") { // In "S" case we have to take into account, if the previous command is C/S.
                                nx = d.x * 2 - d.bx;          // And reflect the previous                              // 2380
                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.
                            }                                                                                          // 2382
                            else {                            // or some else or nothing                               // 2383
                                nx = d.x;                                                                              // 2384
                                ny = d.y;                                                                              // 2385
                            }                                                                                          // 2386
                            path = ["C", nx, ny][concat](path.slice(1));                                               // 2387
                            break;                                                                                     // 2388
                        case "T":                                                                                      // 2389
                            if (pcom == "Q" || pcom == "T") { // In "T" case we have to take into account, if the previous command is Q/T.
                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar                         // 2391
                                d.qy = d.y * 2 - d.qy;        // to case "S".                                          // 2392
                            }                                                                                          // 2393
                            else {                            // or something else or nothing                          // 2394
                                d.qx = d.x;                                                                            // 2395
                                d.qy = d.y;                                                                            // 2396
                            }                                                                                          // 2397
                            path = ["C"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));                         // 2398
                            break;                                                                                     // 2399
                        case "Q":                                                                                      // 2400
                            d.qx = path[1];                                                                            // 2401
                            d.qy = path[2];                                                                            // 2402
                            path = ["C"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));                   // 2403
                            break;                                                                                     // 2404
                        case "L":                                                                                      // 2405
                            path = ["C"][concat](l2c(d.x, d.y, path[1], path[2]));                                     // 2406
                            break;                                                                                     // 2407
                        case "H":                                                                                      // 2408
                            path = ["C"][concat](l2c(d.x, d.y, path[1], d.y));                                         // 2409
                            break;                                                                                     // 2410
                        case "V":                                                                                      // 2411
                            path = ["C"][concat](l2c(d.x, d.y, d.x, path[1]));                                         // 2412
                            break;                                                                                     // 2413
                        case "Z":                                                                                      // 2414
                            path = ["C"][concat](l2c(d.x, d.y, d.X, d.Y));                                             // 2415
                            break;                                                                                     // 2416
                    }                                                                                                  // 2417
                    return path;                                                                                       // 2418
                },                                                                                                     // 2419
                fixArc = function (pp, i) {                                                                            // 2420
                    if (pp[i].length > 7) {                                                                            // 2421
                        pp[i].shift();                                                                                 // 2422
                        var pi = pp[i];                                                                                // 2423
                        while (pi.length) {                                                                            // 2424
                            pp.splice(i++, 0, ["C"][concat](pi.splice(0, 6)));                                         // 2425
                        }                                                                                              // 2426
                        pp.splice(i, 1);                                                                               // 2427
                        ii = mmax(p.length, p2 && p2.length || 0);                                                     // 2428
                    }                                                                                                  // 2429
                },                                                                                                     // 2430
                fixM = function (path1, path2, a1, a2, i) {                                                            // 2431
                    if (path1 && path2 && path1[i][0] == "M" && path2[i][0] != "M") {                                  // 2432
                        path2.splice(i, 0, ["M", a2.x, a2.y]);                                                         // 2433
                        a1.bx = 0;                                                                                     // 2434
                        a1.by = 0;                                                                                     // 2435
                        a1.x = path1[i][1];                                                                            // 2436
                        a1.y = path1[i][2];                                                                            // 2437
                        ii = mmax(p.length, p2 && p2.length || 0);                                                     // 2438
                    }                                                                                                  // 2439
                };                                                                                                     // 2440
            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {                                  // 2441
                p[i] = processPath(p[i], attrs);                                                                       // 2442
                fixArc(p, i);                                                                                          // 2443
                p2 && (p2[i] = processPath(p2[i], attrs2));                                                            // 2444
                p2 && fixArc(p2, i);                                                                                   // 2445
                fixM(p, p2, attrs, attrs2, i);                                                                         // 2446
                fixM(p2, p, attrs2, attrs, i);                                                                         // 2447
                var seg = p[i],                                                                                        // 2448
                    seg2 = p2 && p2[i],                                                                                // 2449
                    seglen = seg.length,                                                                               // 2450
                    seg2len = p2 && seg2.length;                                                                       // 2451
                attrs.x = seg[seglen - 2];                                                                             // 2452
                attrs.y = seg[seglen - 1];                                                                             // 2453
                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;                                                        // 2454
                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;                                                        // 2455
                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);                                            // 2456
                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);                                            // 2457
                attrs2.x = p2 && seg2[seg2len - 2];                                                                    // 2458
                attrs2.y = p2 && seg2[seg2len - 1];                                                                    // 2459
            }                                                                                                          // 2460
            if (!p2) {                                                                                                 // 2461
                pth.curve = pathClone(p);                                                                              // 2462
            }                                                                                                          // 2463
            return p2 ? [p, p2] : p;                                                                                   // 2464
        }, null, pathClone),                                                                                           // 2465
        parseDots = R._parseDots = cacher(function (gradient) {                                                        // 2466
            var dots = [];                                                                                             // 2467
            for (var i = 0, ii = gradient.length; i < ii; i++) {                                                       // 2468
                var dot = {},                                                                                          // 2469
                    par = gradient[i].match(/^([^:]*):?([\d\.]*)/);                                                    // 2470
                dot.color = R.getRGB(par[1]);                                                                          // 2471
                if (dot.color.error) {                                                                                 // 2472
                    return null;                                                                                       // 2473
                }                                                                                                      // 2474
                dot.color = dot.color.hex;                                                                             // 2475
                par[2] && (dot.offset = par[2] + "%");                                                                 // 2476
                dots.push(dot);                                                                                        // 2477
            }                                                                                                          // 2478
            for (i = 1, ii = dots.length - 1; i < ii; i++) {                                                           // 2479
                if (!dots[i].offset) {                                                                                 // 2480
                    var start = toFloat(dots[i - 1].offset || 0),                                                      // 2481
                        end = 0;                                                                                       // 2482
                    for (var j = i + 1; j < ii; j++) {                                                                 // 2483
                        if (dots[j].offset) {                                                                          // 2484
                            end = dots[j].offset;                                                                      // 2485
                            break;                                                                                     // 2486
                        }                                                                                              // 2487
                    }                                                                                                  // 2488
                    if (!end) {                                                                                        // 2489
                        end = 100;                                                                                     // 2490
                        j = ii;                                                                                        // 2491
                    }                                                                                                  // 2492
                    end = toFloat(end);                                                                                // 2493
                    var d = (end - start) / (j - i + 1);                                                               // 2494
                    for (; i < j; i++) {                                                                               // 2495
                        start += d;                                                                                    // 2496
                        dots[i].offset = start + "%";                                                                  // 2497
                    }                                                                                                  // 2498
                }                                                                                                      // 2499
            }                                                                                                          // 2500
            return dots;                                                                                               // 2501
        }),                                                                                                            // 2502
        tear = R._tear = function (el, paper) {                                                                        // 2503
            el == paper.top && (paper.top = el.prev);                                                                  // 2504
            el == paper.bottom && (paper.bottom = el.next);                                                            // 2505
            el.next && (el.next.prev = el.prev);                                                                       // 2506
            el.prev && (el.prev.next = el.next);                                                                       // 2507
        },                                                                                                             // 2508
        tofront = R._tofront = function (el, paper) {                                                                  // 2509
            if (paper.top === el) {                                                                                    // 2510
                return;                                                                                                // 2511
            }                                                                                                          // 2512
            tear(el, paper);                                                                                           // 2513
            el.next = null;                                                                                            // 2514
            el.prev = paper.top;                                                                                       // 2515
            paper.top.next = el;                                                                                       // 2516
            paper.top = el;                                                                                            // 2517
        },                                                                                                             // 2518
        toback = R._toback = function (el, paper) {                                                                    // 2519
            if (paper.bottom === el) {                                                                                 // 2520
                return;                                                                                                // 2521
            }                                                                                                          // 2522
            tear(el, paper);                                                                                           // 2523
            el.next = paper.bottom;                                                                                    // 2524
            el.prev = null;                                                                                            // 2525
            paper.bottom.prev = el;                                                                                    // 2526
            paper.bottom = el;                                                                                         // 2527
        },                                                                                                             // 2528
        insertafter = R._insertafter = function (el, el2, paper) {                                                     // 2529
            tear(el, paper);                                                                                           // 2530
            el2 == paper.top && (paper.top = el);                                                                      // 2531
            el2.next && (el2.next.prev = el);                                                                          // 2532
            el.next = el2.next;                                                                                        // 2533
            el.prev = el2;                                                                                             // 2534
            el2.next = el;                                                                                             // 2535
        },                                                                                                             // 2536
        insertbefore = R._insertbefore = function (el, el2, paper) {                                                   // 2537
            tear(el, paper);                                                                                           // 2538
            el2 == paper.bottom && (paper.bottom = el);                                                                // 2539
            el2.prev && (el2.prev.next = el);                                                                          // 2540
            el.prev = el2.prev;                                                                                        // 2541
            el2.prev = el;                                                                                             // 2542
            el.next = el2;                                                                                             // 2543
        },                                                                                                             // 2544
        /*\
         * Raphael.toMatrix                                                                                            // 2546
         [ method ]                                                                                                    // 2547
         **                                                                                                            // 2548
         * Utility method                                                                                              // 2549
         **                                                                                                            // 2550
         * Returns matrix of transformations applied to a given path                                                   // 2551
         > Parameters                                                                                                  // 2552
         - path (string) path string                                                                                   // 2553
         - transform (string|array) transformation string                                                              // 2554
         = (object) @Matrix                                                                                            // 2555
        \*/                                                                                                            // 2556
        toMatrix = R.toMatrix = function (path, transform) {                                                           // 2557
            var bb = pathDimensions(path),                                                                             // 2558
                el = {                                                                                                 // 2559
                    _: {                                                                                               // 2560
                        transform: E                                                                                   // 2561
                    },                                                                                                 // 2562
                    getBBox: function () {                                                                             // 2563
                        return bb;                                                                                     // 2564
                    }                                                                                                  // 2565
                };                                                                                                     // 2566
            extractTransform(el, transform);                                                                           // 2567
            return el.matrix;                                                                                          // 2568
        },                                                                                                             // 2569
        /*\
         * Raphael.transformPath                                                                                       // 2571
         [ method ]                                                                                                    // 2572
         **                                                                                                            // 2573
         * Utility method                                                                                              // 2574
         **                                                                                                            // 2575
         * Returns path transformed by a given transformation                                                          // 2576
         > Parameters                                                                                                  // 2577
         - path (string) path string                                                                                   // 2578
         - transform (string|array) transformation string                                                              // 2579
         = (string) path                                                                                               // 2580
        \*/                                                                                                            // 2581
        transformPath = R.transformPath = function (path, transform) {                                                 // 2582
            return mapPath(path, toMatrix(path, transform));                                                           // 2583
        },                                                                                                             // 2584
        extractTransform = R._extractTransform = function (el, tstr) {                                                 // 2585
            if (tstr == null) {                                                                                        // 2586
                return el._.transform;                                                                                 // 2587
            }                                                                                                          // 2588
            tstr = Str(tstr).replace(/\.{3}|\u2026/g, el._.transform || E);                                            // 2589
            var tdata = R.parseTransformString(tstr),                                                                  // 2590
                deg = 0,                                                                                               // 2591
                dx = 0,                                                                                                // 2592
                dy = 0,                                                                                                // 2593
                sx = 1,                                                                                                // 2594
                sy = 1,                                                                                                // 2595
                _ = el._,                                                                                              // 2596
                m = new Matrix;                                                                                        // 2597
            _.transform = tdata || [];                                                                                 // 2598
            if (tdata) {                                                                                               // 2599
                for (var i = 0, ii = tdata.length; i < ii; i++) {                                                      // 2600
                    var t = tdata[i],                                                                                  // 2601
                        tlen = t.length,                                                                               // 2602
                        command = Str(t[0]).toLowerCase(),                                                             // 2603
                        absolute = t[0] != command,                                                                    // 2604
                        inver = absolute ? m.invert() : 0,                                                             // 2605
                        x1,                                                                                            // 2606
                        y1,                                                                                            // 2607
                        x2,                                                                                            // 2608
                        y2,                                                                                            // 2609
                        bb;                                                                                            // 2610
                    if (command == "t" && tlen == 3) {                                                                 // 2611
                        if (absolute) {                                                                                // 2612
                            x1 = inver.x(0, 0);                                                                        // 2613
                            y1 = inver.y(0, 0);                                                                        // 2614
                            x2 = inver.x(t[1], t[2]);                                                                  // 2615
                            y2 = inver.y(t[1], t[2]);                                                                  // 2616
                            m.translate(x2 - x1, y2 - y1);                                                             // 2617
                        } else {                                                                                       // 2618
                            m.translate(t[1], t[2]);                                                                   // 2619
                        }                                                                                              // 2620
                    } else if (command == "r") {                                                                       // 2621
                        if (tlen == 2) {                                                                               // 2622
                            bb = bb || el.getBBox(1);                                                                  // 2623
                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);                                 // 2624
                            deg += t[1];                                                                               // 2625
                        } else if (tlen == 4) {                                                                        // 2626
                            if (absolute) {                                                                            // 2627
                                x2 = inver.x(t[2], t[3]);                                                              // 2628
                                y2 = inver.y(t[2], t[3]);                                                              // 2629
                                m.rotate(t[1], x2, y2);                                                                // 2630
                            } else {                                                                                   // 2631
                                m.rotate(t[1], t[2], t[3]);                                                            // 2632
                            }                                                                                          // 2633
                            deg += t[1];                                                                               // 2634
                        }                                                                                              // 2635
                    } else if (command == "s") {                                                                       // 2636
                        if (tlen == 2 || tlen == 3) {                                                                  // 2637
                            bb = bb || el.getBBox(1);                                                                  // 2638
                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);                     // 2639
                            sx *= t[1];                                                                                // 2640
                            sy *= t[tlen - 1];                                                                         // 2641
                        } else if (tlen == 5) {                                                                        // 2642
                            if (absolute) {                                                                            // 2643
                                x2 = inver.x(t[3], t[4]);                                                              // 2644
                                y2 = inver.y(t[3], t[4]);                                                              // 2645
                                m.scale(t[1], t[2], x2, y2);                                                           // 2646
                            } else {                                                                                   // 2647
                                m.scale(t[1], t[2], t[3], t[4]);                                                       // 2648
                            }                                                                                          // 2649
                            sx *= t[1];                                                                                // 2650
                            sy *= t[2];                                                                                // 2651
                        }                                                                                              // 2652
                    } else if (command == "m" && tlen == 7) {                                                          // 2653
                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);                                                     // 2654
                    }                                                                                                  // 2655
                    _.dirtyT = 1;                                                                                      // 2656
                    el.matrix = m;                                                                                     // 2657
                }                                                                                                      // 2658
            }                                                                                                          // 2659
                                                                                                                       // 2660
            /*\
             * Element.matrix                                                                                          // 2662
             [ property (object) ]                                                                                     // 2663
             **                                                                                                        // 2664
             * Keeps @Matrix object, which represents element transformation                                           // 2665
            \*/                                                                                                        // 2666
            el.matrix = m;                                                                                             // 2667
                                                                                                                       // 2668
            _.sx = sx;                                                                                                 // 2669
            _.sy = sy;                                                                                                 // 2670
            _.deg = deg;                                                                                               // 2671
            _.dx = dx = m.e;                                                                                           // 2672
            _.dy = dy = m.f;                                                                                           // 2673
                                                                                                                       // 2674
            if (sx == 1 && sy == 1 && !deg && _.bbox) {                                                                // 2675
                _.bbox.x += +dx;                                                                                       // 2676
                _.bbox.y += +dy;                                                                                       // 2677
            } else {                                                                                                   // 2678
                _.dirtyT = 1;                                                                                          // 2679
            }                                                                                                          // 2680
        },                                                                                                             // 2681
        getEmpty = function (item) {                                                                                   // 2682
            var l = item[0];                                                                                           // 2683
            switch (l.toLowerCase()) {                                                                                 // 2684
                case "t": return [l, 0, 0];                                                                            // 2685
                case "m": return [l, 1, 0, 0, 1, 0, 0];                                                                // 2686
                case "r": if (item.length == 4) {                                                                      // 2687
                    return [l, 0, item[2], item[3]];                                                                   // 2688
                } else {                                                                                               // 2689
                    return [l, 0];                                                                                     // 2690
                }                                                                                                      // 2691
                case "s": if (item.length == 5) {                                                                      // 2692
                    return [l, 1, 1, item[3], item[4]];                                                                // 2693
                } else if (item.length == 3) {                                                                         // 2694
                    return [l, 1, 1];                                                                                  // 2695
                } else {                                                                                               // 2696
                    return [l, 1];                                                                                     // 2697
                }                                                                                                      // 2698
            }                                                                                                          // 2699
        },                                                                                                             // 2700
        equaliseTransform = R._equaliseTransform = function (t1, t2) {                                                 // 2701
            t2 = Str(t2).replace(/\.{3}|\u2026/g, t1);                                                                 // 2702
            t1 = R.parseTransformString(t1) || [];                                                                     // 2703
            t2 = R.parseTransformString(t2) || [];                                                                     // 2704
            var maxlength = mmax(t1.length, t2.length),                                                                // 2705
                from = [],                                                                                             // 2706
                to = [],                                                                                               // 2707
                i = 0, j, jj,                                                                                          // 2708
                tt1, tt2;                                                                                              // 2709
            for (; i < maxlength; i++) {                                                                               // 2710
                tt1 = t1[i] || getEmpty(t2[i]);                                                                        // 2711
                tt2 = t2[i] || getEmpty(tt1);                                                                          // 2712
                if ((tt1[0] != tt2[0]) ||                                                                              // 2713
                    (tt1[0].toLowerCase() == "r" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||                         // 2714
                    (tt1[0].toLowerCase() == "s" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))                            // 2715
                    ) {                                                                                                // 2716
                    return;                                                                                            // 2717
                }                                                                                                      // 2718
                from[i] = [];                                                                                          // 2719
                to[i] = [];                                                                                            // 2720
                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {                                          // 2721
                    j in tt1 && (from[i][j] = tt1[j]);                                                                 // 2722
                    j in tt2 && (to[i][j] = tt2[j]);                                                                   // 2723
                }                                                                                                      // 2724
            }                                                                                                          // 2725
            return {                                                                                                   // 2726
                from: from,                                                                                            // 2727
                to: to                                                                                                 // 2728
            };                                                                                                         // 2729
        };                                                                                                             // 2730
    R._getContainer = function (x, y, w, h) {                                                                          // 2731
        var container;                                                                                                 // 2732
        container = h == null && !R.is(x, "object") ? g.doc.getElementById(x) : x;                                     // 2733
        if (container == null) {                                                                                       // 2734
            return;                                                                                                    // 2735
        }                                                                                                              // 2736
        if (container.tagName) {                                                                                       // 2737
            if (y == null) {                                                                                           // 2738
                return {                                                                                               // 2739
                    container: container,                                                                              // 2740
                    width: container.style.pixelWidth || container.offsetWidth,                                        // 2741
                    height: container.style.pixelHeight || container.offsetHeight                                      // 2742
                };                                                                                                     // 2743
            } else {                                                                                                   // 2744
                return {                                                                                               // 2745
                    container: container,                                                                              // 2746
                    width: y,                                                                                          // 2747
                    height: w                                                                                          // 2748
                };                                                                                                     // 2749
            }                                                                                                          // 2750
        }                                                                                                              // 2751
        return {                                                                                                       // 2752
            container: 1,                                                                                              // 2753
            x: x,                                                                                                      // 2754
            y: y,                                                                                                      // 2755
            width: w,                                                                                                  // 2756
            height: h                                                                                                  // 2757
        };                                                                                                             // 2758
    };                                                                                                                 // 2759
    /*\
     * Raphael.pathToRelative                                                                                          // 2761
     [ method ]                                                                                                        // 2762
     **                                                                                                                // 2763
     * Utility method                                                                                                  // 2764
     **                                                                                                                // 2765
     * Converts path to relative form                                                                                  // 2766
     > Parameters                                                                                                      // 2767
     - pathString (string|array) path string or array of segments                                                      // 2768
     = (array) array of segments.                                                                                      // 2769
    \*/                                                                                                                // 2770
    R.pathToRelative = pathToRelative;                                                                                 // 2771
    R._engine = {};                                                                                                    // 2772
    /*\
     * Raphael.path2curve                                                                                              // 2774
     [ method ]                                                                                                        // 2775
     **                                                                                                                // 2776
     * Utility method                                                                                                  // 2777
     **                                                                                                                // 2778
     * Converts path to a new path where all segments are cubic bezier curves.                                         // 2779
     > Parameters                                                                                                      // 2780
     - pathString (string|array) path string or array of segments                                                      // 2781
     = (array) array of segments.                                                                                      // 2782
    \*/                                                                                                                // 2783
    R.path2curve = path2curve;                                                                                         // 2784
    /*\
     * Raphael.matrix                                                                                                  // 2786
     [ method ]                                                                                                        // 2787
     **                                                                                                                // 2788
     * Utility method                                                                                                  // 2789
     **                                                                                                                // 2790
     * Returns matrix based on given parameters.                                                                       // 2791
     > Parameters                                                                                                      // 2792
     - a (number)                                                                                                      // 2793
     - b (number)                                                                                                      // 2794
     - c (number)                                                                                                      // 2795
     - d (number)                                                                                                      // 2796
     - e (number)                                                                                                      // 2797
     - f (number)                                                                                                      // 2798
     = (object) @Matrix                                                                                                // 2799
    \*/                                                                                                                // 2800
    R.matrix = function (a, b, c, d, e, f) {                                                                           // 2801
        return new Matrix(a, b, c, d, e, f);                                                                           // 2802
    };                                                                                                                 // 2803
    function Matrix(a, b, c, d, e, f) {                                                                                // 2804
        if (a != null) {                                                                                               // 2805
            this.a = +a;                                                                                               // 2806
            this.b = +b;                                                                                               // 2807
            this.c = +c;                                                                                               // 2808
            this.d = +d;                                                                                               // 2809
            this.e = +e;                                                                                               // 2810
            this.f = +f;                                                                                               // 2811
        } else {                                                                                                       // 2812
            this.a = 1;                                                                                                // 2813
            this.b = 0;                                                                                                // 2814
            this.c = 0;                                                                                                // 2815
            this.d = 1;                                                                                                // 2816
            this.e = 0;                                                                                                // 2817
            this.f = 0;                                                                                                // 2818
        }                                                                                                              // 2819
    }                                                                                                                  // 2820
    (function (matrixproto) {                                                                                          // 2821
        /*\
         * Matrix.add                                                                                                  // 2823
         [ method ]                                                                                                    // 2824
         **                                                                                                            // 2825
         * Adds given matrix to existing one.                                                                          // 2826
         > Parameters                                                                                                  // 2827
         - a (number)                                                                                                  // 2828
         - b (number)                                                                                                  // 2829
         - c (number)                                                                                                  // 2830
         - d (number)                                                                                                  // 2831
         - e (number)                                                                                                  // 2832
         - f (number)                                                                                                  // 2833
         or                                                                                                            // 2834
         - matrix (object) @Matrix                                                                                     // 2835
        \*/                                                                                                            // 2836
        matrixproto.add = function (a, b, c, d, e, f) {                                                                // 2837
            var out = [[], [], []],                                                                                    // 2838
                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],                                   // 2839
                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],                                                            // 2840
                x, y, z, res;                                                                                          // 2841
                                                                                                                       // 2842
            if (a && a instanceof Matrix) {                                                                            // 2843
                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];                                                // 2844
            }                                                                                                          // 2845
                                                                                                                       // 2846
            for (x = 0; x < 3; x++) {                                                                                  // 2847
                for (y = 0; y < 3; y++) {                                                                              // 2848
                    res = 0;                                                                                           // 2849
                    for (z = 0; z < 3; z++) {                                                                          // 2850
                        res += m[x][z] * matrix[z][y];                                                                 // 2851
                    }                                                                                                  // 2852
                    out[x][y] = res;                                                                                   // 2853
                }                                                                                                      // 2854
            }                                                                                                          // 2855
            this.a = out[0][0];                                                                                        // 2856
            this.b = out[1][0];                                                                                        // 2857
            this.c = out[0][1];                                                                                        // 2858
            this.d = out[1][1];                                                                                        // 2859
            this.e = out[0][2];                                                                                        // 2860
            this.f = out[1][2];                                                                                        // 2861
        };                                                                                                             // 2862
        /*\
         * Matrix.invert                                                                                               // 2864
         [ method ]                                                                                                    // 2865
         **                                                                                                            // 2866
         * Returns inverted version of the matrix                                                                      // 2867
         = (object) @Matrix                                                                                            // 2868
        \*/                                                                                                            // 2869
        matrixproto.invert = function () {                                                                             // 2870
            var me = this,                                                                                             // 2871
                x = me.a * me.d - me.b * me.c;                                                                         // 2872
            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);
        };                                                                                                             // 2874
        /*\
         * Matrix.clone                                                                                                // 2876
         [ method ]                                                                                                    // 2877
         **                                                                                                            // 2878
         * Returns copy of the matrix                                                                                  // 2879
         = (object) @Matrix                                                                                            // 2880
        \*/                                                                                                            // 2881
        matrixproto.clone = function () {                                                                              // 2882
            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);                                         // 2883
        };                                                                                                             // 2884
        /*\
         * Matrix.translate                                                                                            // 2886
         [ method ]                                                                                                    // 2887
         **                                                                                                            // 2888
         * Translate the matrix                                                                                        // 2889
         > Parameters                                                                                                  // 2890
         - x (number)                                                                                                  // 2891
         - y (number)                                                                                                  // 2892
        \*/                                                                                                            // 2893
        matrixproto.translate = function (x, y) {                                                                      // 2894
            this.add(1, 0, 0, 1, x, y);                                                                                // 2895
        };                                                                                                             // 2896
        /*\
         * Matrix.scale                                                                                                // 2898
         [ method ]                                                                                                    // 2899
         **                                                                                                            // 2900
         * Scales the matrix                                                                                           // 2901
         > Parameters                                                                                                  // 2902
         - x (number)                                                                                                  // 2903
         - y (number) #optional                                                                                        // 2904
         - cx (number) #optional                                                                                       // 2905
         - cy (number) #optional                                                                                       // 2906
        \*/                                                                                                            // 2907
        matrixproto.scale = function (x, y, cx, cy) {                                                                  // 2908
            y == null && (y = x);                                                                                      // 2909
            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);                                                                // 2910
            this.add(x, 0, 0, y, 0, 0);                                                                                // 2911
            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);                                                              // 2912
        };                                                                                                             // 2913
        /*\
         * Matrix.rotate                                                                                               // 2915
         [ method ]                                                                                                    // 2916
         **                                                                                                            // 2917
         * Rotates the matrix                                                                                          // 2918
         > Parameters                                                                                                  // 2919
         - a (number)                                                                                                  // 2920
         - x (number)                                                                                                  // 2921
         - y (number)                                                                                                  // 2922
        \*/                                                                                                            // 2923
        matrixproto.rotate = function (a, x, y) {                                                                      // 2924
            a = R.rad(a);                                                                                              // 2925
            x = x || 0;                                                                                                // 2926
            y = y || 0;                                                                                                // 2927
            var cos = +math.cos(a).toFixed(9),                                                                         // 2928
                sin = +math.sin(a).toFixed(9);                                                                         // 2929
            this.add(cos, sin, -sin, cos, x, y);                                                                       // 2930
            this.add(1, 0, 0, 1, -x, -y);                                                                              // 2931
        };                                                                                                             // 2932
        /*\
         * Matrix.x                                                                                                    // 2934
         [ method ]                                                                                                    // 2935
         **                                                                                                            // 2936
         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y        // 2937
         > Parameters                                                                                                  // 2938
         - x (number)                                                                                                  // 2939
         - y (number)                                                                                                  // 2940
         = (number) x                                                                                                  // 2941
        \*/                                                                                                            // 2942
        matrixproto.x = function (x, y) {                                                                              // 2943
            return x * this.a + y * this.c + this.e;                                                                   // 2944
        };                                                                                                             // 2945
        /*\
         * Matrix.y                                                                                                    // 2947
         [ method ]                                                                                                    // 2948
         **                                                                                                            // 2949
         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x        // 2950
         > Parameters                                                                                                  // 2951
         - x (number)                                                                                                  // 2952
         - y (number)                                                                                                  // 2953
         = (number) y                                                                                                  // 2954
        \*/                                                                                                            // 2955
        matrixproto.y = function (x, y) {                                                                              // 2956
            return x * this.b + y * this.d + this.f;                                                                   // 2957
        };                                                                                                             // 2958
        matrixproto.get = function (i) {                                                                               // 2959
            return +this[Str.fromCharCode(97 + i)].toFixed(4);                                                         // 2960
        };                                                                                                             // 2961
        matrixproto.toString = function () {                                                                           // 2962
            return R.svg ?                                                                                             // 2963
                "matrix(" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + ")" :
                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();                                     // 2965
        };                                                                                                             // 2966
        matrixproto.toFilter = function () {                                                                           // 2967
            return "progid:DXImageTransform.Microsoft.Matrix(M11=" + this.get(0) +                                     // 2968
                ", M12=" + this.get(2) + ", M21=" + this.get(1) + ", M22=" + this.get(3) +                             // 2969
                ", Dx=" + this.get(4) + ", Dy=" + this.get(5) + ", sizingmethod='auto expand')";                       // 2970
        };                                                                                                             // 2971
        matrixproto.offset = function () {                                                                             // 2972
            return [this.e.toFixed(4), this.f.toFixed(4)];                                                             // 2973
        };                                                                                                             // 2974
        function norm(a) {                                                                                             // 2975
            return a[0] * a[0] + a[1] * a[1];                                                                          // 2976
        }                                                                                                              // 2977
        function normalize(a) {                                                                                        // 2978
            var mag = math.sqrt(norm(a));                                                                              // 2979
            a[0] && (a[0] /= mag);                                                                                     // 2980
            a[1] && (a[1] /= mag);                                                                                     // 2981
        }                                                                                                              // 2982
        /*\
         * Matrix.split                                                                                                // 2984
         [ method ]                                                                                                    // 2985
         **                                                                                                            // 2986
         * Splits matrix into primitive transformations                                                                // 2987
         = (object) in format:                                                                                         // 2988
         o dx (number) translation by x                                                                                // 2989
         o dy (number) translation by y                                                                                // 2990
         o scalex (number) scale by x                                                                                  // 2991
         o scaley (number) scale by y                                                                                  // 2992
         o shear (number) shear                                                                                        // 2993
         o rotate (number) rotation in deg                                                                             // 2994
         o isSimple (boolean) could it be represented via simple transformations                                       // 2995
        \*/                                                                                                            // 2996
        matrixproto.split = function () {                                                                              // 2997
            var out = {};                                                                                              // 2998
            // translation                                                                                             // 2999
            out.dx = this.e;                                                                                           // 3000
            out.dy = this.f;                                                                                           // 3001
                                                                                                                       // 3002
            // scale and shear                                                                                         // 3003
            var row = [[this.a, this.c], [this.b, this.d]];                                                            // 3004
            out.scalex = math.sqrt(norm(row[0]));                                                                      // 3005
            normalize(row[0]);                                                                                         // 3006
                                                                                                                       // 3007
            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];                                                 // 3008
            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];                           // 3009
                                                                                                                       // 3010
            out.scaley = math.sqrt(norm(row[1]));                                                                      // 3011
            normalize(row[1]);                                                                                         // 3012
            out.shear /= out.scaley;                                                                                   // 3013
                                                                                                                       // 3014
            // rotation                                                                                                // 3015
            var sin = -row[0][1],                                                                                      // 3016
                cos = row[1][1];                                                                                       // 3017
            if (cos < 0) {                                                                                             // 3018
                out.rotate = R.deg(math.acos(cos));                                                                    // 3019
                if (sin < 0) {                                                                                         // 3020
                    out.rotate = 360 - out.rotate;                                                                     // 3021
                }                                                                                                      // 3022
            } else {                                                                                                   // 3023
                out.rotate = R.deg(math.asin(sin));                                                                    // 3024
            }                                                                                                          // 3025
                                                                                                                       // 3026
            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);  // 3027
            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;
            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;                                                    // 3029
            return out;                                                                                                // 3030
        };                                                                                                             // 3031
        /*\
         * Matrix.toTransformString                                                                                    // 3033
         [ method ]                                                                                                    // 3034
         **                                                                                                            // 3035
         * Return transform string that represents given matrix                                                        // 3036
         = (string) transform string                                                                                   // 3037
        \*/                                                                                                            // 3038
        matrixproto.toTransformString = function (shorter) {                                                           // 3039
            var s = shorter || this[split]();                                                                          // 3040
            if (s.isSimple) {                                                                                          // 3041
                s.scalex = +s.scalex.toFixed(4);                                                                       // 3042
                s.scaley = +s.scaley.toFixed(4);                                                                       // 3043
                s.rotate = +s.rotate.toFixed(4);                                                                       // 3044
                return  (s.dx || s.dy ? "t" + [s.dx, s.dy] : E) +                                                      // 3045
                        (s.scalex != 1 || s.scaley != 1 ? "s" + [s.scalex, s.scaley, 0, 0] : E) +                      // 3046
                        (s.rotate ? "r" + [s.rotate, 0, 0] : E);                                                       // 3047
            } else {                                                                                                   // 3048
                return "m" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];           // 3049
            }                                                                                                          // 3050
        };                                                                                                             // 3051
    })(Matrix.prototype);                                                                                              // 3052
                                                                                                                       // 3053
    // WebKit rendering bug workaround method                                                                          // 3054
    var version = navigator.userAgent.match(/Version\/(.*?)\s/) || navigator.userAgent.match(/Chrome\/(\d+)/);         // 3055
    if ((navigator.vendor == "Apple Computer, Inc.") && (version && version[1] < 4 || navigator.platform.slice(0, 2) == "iP") ||
        (navigator.vendor == "Google Inc." && version && version[1] < 8)) {                                            // 3057
        /*\
         * Paper.safari                                                                                                // 3059
         [ method ]                                                                                                    // 3060
         **                                                                                                            // 3061
         * There is an inconvenient rendering bug in Safari (WebKit):                                                  // 3062
         * sometimes the rendering should be forced.                                                                   // 3063
         * This method should help with dealing with this bug.                                                         // 3064
        \*/                                                                                                            // 3065
        paperproto.safari = function () {                                                                              // 3066
            var rect = this.rect(-99, -99, this.width + 99, this.height + 99).attr({stroke: "none"});                  // 3067
            setTimeout(function () {rect.remove();});                                                                  // 3068
        };                                                                                                             // 3069
    } else {                                                                                                           // 3070
        paperproto.safari = fun;                                                                                       // 3071
    }                                                                                                                  // 3072
                                                                                                                       // 3073
    var preventDefault = function () {                                                                                 // 3074
        this.returnValue = false;                                                                                      // 3075
    },                                                                                                                 // 3076
    preventTouch = function () {                                                                                       // 3077
        return this.originalEvent.preventDefault();                                                                    // 3078
    },                                                                                                                 // 3079
    stopPropagation = function () {                                                                                    // 3080
        this.cancelBubble = true;                                                                                      // 3081
    },                                                                                                                 // 3082
    stopTouch = function () {                                                                                          // 3083
        return this.originalEvent.stopPropagation();                                                                   // 3084
    },                                                                                                                 // 3085
    getEventPosition = function (e) {                                                                                  // 3086
        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,                                         // 3087
            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;                                       // 3088
                                                                                                                       // 3089
        return {                                                                                                       // 3090
            x: e.clientX + scrollX,                                                                                    // 3091
            y: e.clientY + scrollY                                                                                     // 3092
        };                                                                                                             // 3093
    },                                                                                                                 // 3094
    addEvent = (function () {                                                                                          // 3095
        if (g.doc.addEventListener) {                                                                                  // 3096
            return function (obj, type, fn, element) {                                                                 // 3097
                var f = function (e) {                                                                                 // 3098
                    var pos = getEventPosition(e);                                                                     // 3099
                    return fn.call(element, e, pos.x, pos.y);                                                          // 3100
                };                                                                                                     // 3101
                obj.addEventListener(type, f, false);                                                                  // 3102
                                                                                                                       // 3103
                if (supportsTouch && touchMap[type]) {                                                                 // 3104
                    var _f = function (e) {                                                                            // 3105
                        var pos = getEventPosition(e),                                                                 // 3106
                            olde = e;                                                                                  // 3107
                                                                                                                       // 3108
                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {                 // 3109
                            if (e.targetTouches[i].target == obj) {                                                    // 3110
                                e = e.targetTouches[i];                                                                // 3111
                                e.originalEvent = olde;                                                                // 3112
                                e.preventDefault = preventTouch;                                                       // 3113
                                e.stopPropagation = stopTouch;                                                         // 3114
                                break;                                                                                 // 3115
                            }                                                                                          // 3116
                        }                                                                                              // 3117
                                                                                                                       // 3118
                        return fn.call(element, e, pos.x, pos.y);                                                      // 3119
                    };                                                                                                 // 3120
                    obj.addEventListener(touchMap[type], _f, false);                                                   // 3121
                }                                                                                                      // 3122
                                                                                                                       // 3123
                return function () {                                                                                   // 3124
                    obj.removeEventListener(type, f, false);                                                           // 3125
                                                                                                                       // 3126
                    if (supportsTouch && touchMap[type])                                                               // 3127
                        obj.removeEventListener(touchMap[type], f, false);                                             // 3128
                                                                                                                       // 3129
                    return true;                                                                                       // 3130
                };                                                                                                     // 3131
            };                                                                                                         // 3132
        } else if (g.doc.attachEvent) {                                                                                // 3133
            return function (obj, type, fn, element) {                                                                 // 3134
                var f = function (e) {                                                                                 // 3135
                    e = e || g.win.event;                                                                              // 3136
                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,                             // 3137
                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,                           // 3138
                        x = e.clientX + scrollX,                                                                       // 3139
                        y = e.clientY + scrollY;                                                                       // 3140
                    e.preventDefault = e.preventDefault || preventDefault;                                             // 3141
                    e.stopPropagation = e.stopPropagation || stopPropagation;                                          // 3142
                    return fn.call(element, e, x, y);                                                                  // 3143
                };                                                                                                     // 3144
                obj.attachEvent("on" + type, f);                                                                       // 3145
                var detacher = function () {                                                                           // 3146
                    obj.detachEvent("on" + type, f);                                                                   // 3147
                    return true;                                                                                       // 3148
                };                                                                                                     // 3149
                return detacher;                                                                                       // 3150
            };                                                                                                         // 3151
        }                                                                                                              // 3152
    })(),                                                                                                              // 3153
    drag = [],                                                                                                         // 3154
    dragMove = function (e) {                                                                                          // 3155
        var x = e.clientX,                                                                                             // 3156
            y = e.clientY,                                                                                             // 3157
            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,                                         // 3158
            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,                                       // 3159
            dragi,                                                                                                     // 3160
            j = drag.length;                                                                                           // 3161
        while (j--) {                                                                                                  // 3162
            dragi = drag[j];                                                                                           // 3163
            if (supportsTouch && e.touches) {                                                                          // 3164
                var i = e.touches.length,                                                                              // 3165
                    touch;                                                                                             // 3166
                while (i--) {                                                                                          // 3167
                    touch = e.touches[i];                                                                              // 3168
                    if (touch.identifier == dragi.el._drag.id) {                                                       // 3169
                        x = touch.clientX;                                                                             // 3170
                        y = touch.clientY;                                                                             // 3171
                        (e.originalEvent ? e.originalEvent : e).preventDefault();                                      // 3172
                        break;                                                                                         // 3173
                    }                                                                                                  // 3174
                }                                                                                                      // 3175
            } else {                                                                                                   // 3176
                e.preventDefault();                                                                                    // 3177
            }                                                                                                          // 3178
            var node = dragi.el.node,                                                                                  // 3179
                o,                                                                                                     // 3180
                next = node.nextSibling,                                                                               // 3181
                parent = node.parentNode,                                                                              // 3182
                display = node.style.display;                                                                          // 3183
            g.win.opera && parent.removeChild(node);                                                                   // 3184
            node.style.display = "none";                                                                               // 3185
            o = dragi.el.paper.getElementByPoint(x, y);                                                                // 3186
            node.style.display = display;                                                                              // 3187
            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));                        // 3188
            o && eve("raphael.drag.over." + dragi.el.id, dragi.el, o);                                                 // 3189
            x += scrollX;                                                                                              // 3190
            y += scrollY;                                                                                              // 3191
            eve("raphael.drag.move." + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);
        }                                                                                                              // 3193
    },                                                                                                                 // 3194
    dragUp = function (e) {                                                                                            // 3195
        R.unmousemove(dragMove).unmouseup(dragUp);                                                                     // 3196
        var i = drag.length,                                                                                           // 3197
            dragi;                                                                                                     // 3198
        while (i--) {                                                                                                  // 3199
            dragi = drag[i];                                                                                           // 3200
            dragi.el._drag = {};                                                                                       // 3201
            eve("raphael.drag.end." + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);
        }                                                                                                              // 3203
        drag = [];                                                                                                     // 3204
    },                                                                                                                 // 3205
    /*\
     * Raphael.el                                                                                                      // 3207
     [ property (object) ]                                                                                             // 3208
     **                                                                                                                // 3209
     * You can add your own method to elements. This is usefull when you want to hack default functionality or         // 3210
     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,           // 3211
     * you can redefine element method at any time. Expending element methods wouldn’t affect set.                     // 3212
     > Usage                                                                                                           // 3213
     | Raphael.el.red = function () {                                                                                  // 3214
     |     this.attr({fill: "#f00"});                                                                                  // 3215
     | };                                                                                                              // 3216
     | // then use it                                                                                                  // 3217
     | paper.circle(100, 100, 20).red();                                                                               // 3218
    \*/                                                                                                                // 3219
    elproto = R.el = {};                                                                                               // 3220
    /*\
     * Element.click                                                                                                   // 3222
     [ method ]                                                                                                        // 3223
     **                                                                                                                // 3224
     * Adds event handler for click for the element.                                                                   // 3225
     > Parameters                                                                                                      // 3226
     - handler (function) handler for the event                                                                        // 3227
     = (object) @Element                                                                                               // 3228
    \*/                                                                                                                // 3229
    /*\
     * Element.unclick                                                                                                 // 3231
     [ method ]                                                                                                        // 3232
     **                                                                                                                // 3233
     * Removes event handler for click for the element.                                                                // 3234
     > Parameters                                                                                                      // 3235
     - handler (function) #optional handler for the event                                                              // 3236
     = (object) @Element                                                                                               // 3237
    \*/                                                                                                                // 3238
                                                                                                                       // 3239
    /*\
     * Element.dblclick                                                                                                // 3241
     [ method ]                                                                                                        // 3242
     **                                                                                                                // 3243
     * Adds event handler for double click for the element.                                                            // 3244
     > Parameters                                                                                                      // 3245
     - handler (function) handler for the event                                                                        // 3246
     = (object) @Element                                                                                               // 3247
    \*/                                                                                                                // 3248
    /*\
     * Element.undblclick                                                                                              // 3250
     [ method ]                                                                                                        // 3251
     **                                                                                                                // 3252
     * Removes event handler for double click for the element.                                                         // 3253
     > Parameters                                                                                                      // 3254
     - handler (function) #optional handler for the event                                                              // 3255
     = (object) @Element                                                                                               // 3256
    \*/                                                                                                                // 3257
                                                                                                                       // 3258
    /*\
     * Element.mousedown                                                                                               // 3260
     [ method ]                                                                                                        // 3261
     **                                                                                                                // 3262
     * Adds event handler for mousedown for the element.                                                               // 3263
     > Parameters                                                                                                      // 3264
     - handler (function) handler for the event                                                                        // 3265
     = (object) @Element                                                                                               // 3266
    \*/                                                                                                                // 3267
    /*\
     * Element.unmousedown                                                                                             // 3269
     [ method ]                                                                                                        // 3270
     **                                                                                                                // 3271
     * Removes event handler for mousedown for the element.                                                            // 3272
     > Parameters                                                                                                      // 3273
     - handler (function) #optional handler for the event                                                              // 3274
     = (object) @Element                                                                                               // 3275
    \*/                                                                                                                // 3276
                                                                                                                       // 3277
    /*\
     * Element.mousemove                                                                                               // 3279
     [ method ]                                                                                                        // 3280
     **                                                                                                                // 3281
     * Adds event handler for mousemove for the element.                                                               // 3282
     > Parameters                                                                                                      // 3283
     - handler (function) handler for the event                                                                        // 3284
     = (object) @Element                                                                                               // 3285
    \*/                                                                                                                // 3286
    /*\
     * Element.unmousemove                                                                                             // 3288
     [ method ]                                                                                                        // 3289
     **                                                                                                                // 3290
     * Removes event handler for mousemove for the element.                                                            // 3291
     > Parameters                                                                                                      // 3292
     - handler (function) #optional handler for the event                                                              // 3293
     = (object) @Element                                                                                               // 3294
    \*/                                                                                                                // 3295
                                                                                                                       // 3296
    /*\
     * Element.mouseout                                                                                                // 3298
     [ method ]                                                                                                        // 3299
     **                                                                                                                // 3300
     * Adds event handler for mouseout for the element.                                                                // 3301
     > Parameters                                                                                                      // 3302
     - handler (function) handler for the event                                                                        // 3303
     = (object) @Element                                                                                               // 3304
    \*/                                                                                                                // 3305
    /*\
     * Element.unmouseout                                                                                              // 3307
     [ method ]                                                                                                        // 3308
     **                                                                                                                // 3309
     * Removes event handler for mouseout for the element.                                                             // 3310
     > Parameters                                                                                                      // 3311
     - handler (function) #optional handler for the event                                                              // 3312
     = (object) @Element                                                                                               // 3313
    \*/                                                                                                                // 3314
                                                                                                                       // 3315
    /*\
     * Element.mouseover                                                                                               // 3317
     [ method ]                                                                                                        // 3318
     **                                                                                                                // 3319
     * Adds event handler for mouseover for the element.                                                               // 3320
     > Parameters                                                                                                      // 3321
     - handler (function) handler for the event                                                                        // 3322
     = (object) @Element                                                                                               // 3323
    \*/                                                                                                                // 3324
    /*\
     * Element.unmouseover                                                                                             // 3326
     [ method ]                                                                                                        // 3327
     **                                                                                                                // 3328
     * Removes event handler for mouseover for the element.                                                            // 3329
     > Parameters                                                                                                      // 3330
     - handler (function) #optional handler for the event                                                              // 3331
     = (object) @Element                                                                                               // 3332
    \*/                                                                                                                // 3333
                                                                                                                       // 3334
    /*\
     * Element.mouseup                                                                                                 // 3336
     [ method ]                                                                                                        // 3337
     **                                                                                                                // 3338
     * Adds event handler for mouseup for the element.                                                                 // 3339
     > Parameters                                                                                                      // 3340
     - handler (function) handler for the event                                                                        // 3341
     = (object) @Element                                                                                               // 3342
    \*/                                                                                                                // 3343
    /*\
     * Element.unmouseup                                                                                               // 3345
     [ method ]                                                                                                        // 3346
     **                                                                                                                // 3347
     * Removes event handler for mouseup for the element.                                                              // 3348
     > Parameters                                                                                                      // 3349
     - handler (function) #optional handler for the event                                                              // 3350
     = (object) @Element                                                                                               // 3351
    \*/                                                                                                                // 3352
                                                                                                                       // 3353
    /*\
     * Element.touchstart                                                                                              // 3355
     [ method ]                                                                                                        // 3356
     **                                                                                                                // 3357
     * Adds event handler for touchstart for the element.                                                              // 3358
     > Parameters                                                                                                      // 3359
     - handler (function) handler for the event                                                                        // 3360
     = (object) @Element                                                                                               // 3361
    \*/                                                                                                                // 3362
    /*\
     * Element.untouchstart                                                                                            // 3364
     [ method ]                                                                                                        // 3365
     **                                                                                                                // 3366
     * Removes event handler for touchstart for the element.                                                           // 3367
     > Parameters                                                                                                      // 3368
     - handler (function) #optional handler for the event                                                              // 3369
     = (object) @Element                                                                                               // 3370
    \*/                                                                                                                // 3371
                                                                                                                       // 3372
    /*\
     * Element.touchmove                                                                                               // 3374
     [ method ]                                                                                                        // 3375
     **                                                                                                                // 3376
     * Adds event handler for touchmove for the element.                                                               // 3377
     > Parameters                                                                                                      // 3378
     - handler (function) handler for the event                                                                        // 3379
     = (object) @Element                                                                                               // 3380
    \*/                                                                                                                // 3381
    /*\
     * Element.untouchmove                                                                                             // 3383
     [ method ]                                                                                                        // 3384
     **                                                                                                                // 3385
     * Removes event handler for touchmove for the element.                                                            // 3386
     > Parameters                                                                                                      // 3387
     - handler (function) #optional handler for the event                                                              // 3388
     = (object) @Element                                                                                               // 3389
    \*/                                                                                                                // 3390
                                                                                                                       // 3391
    /*\
     * Element.touchend                                                                                                // 3393
     [ method ]                                                                                                        // 3394
     **                                                                                                                // 3395
     * Adds event handler for touchend for the element.                                                                // 3396
     > Parameters                                                                                                      // 3397
     - handler (function) handler for the event                                                                        // 3398
     = (object) @Element                                                                                               // 3399
    \*/                                                                                                                // 3400
    /*\
     * Element.untouchend                                                                                              // 3402
     [ method ]                                                                                                        // 3403
     **                                                                                                                // 3404
     * Removes event handler for touchend for the element.                                                             // 3405
     > Parameters                                                                                                      // 3406
     - handler (function) #optional handler for the event                                                              // 3407
     = (object) @Element                                                                                               // 3408
    \*/                                                                                                                // 3409
                                                                                                                       // 3410
    /*\
     * Element.touchcancel                                                                                             // 3412
     [ method ]                                                                                                        // 3413
     **                                                                                                                // 3414
     * Adds event handler for touchcancel for the element.                                                             // 3415
     > Parameters                                                                                                      // 3416
     - handler (function) handler for the event                                                                        // 3417
     = (object) @Element                                                                                               // 3418
    \*/                                                                                                                // 3419
    /*\
     * Element.untouchcancel                                                                                           // 3421
     [ method ]                                                                                                        // 3422
     **                                                                                                                // 3423
     * Removes event handler for touchcancel for the element.                                                          // 3424
     > Parameters                                                                                                      // 3425
     - handler (function) #optional handler for the event                                                              // 3426
     = (object) @Element                                                                                               // 3427
    \*/                                                                                                                // 3428
    for (var i = events.length; i--;) {                                                                                // 3429
        (function (eventName) {                                                                                        // 3430
            R[eventName] = elproto[eventName] = function (fn, scope) {                                                 // 3431
                if (R.is(fn, "function")) {                                                                            // 3432
                    this.events = this.events || [];                                                                   // 3433
                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});
                }                                                                                                      // 3435
                return this;                                                                                           // 3436
            };                                                                                                         // 3437
            R["un" + eventName] = elproto["un" + eventName] = function (fn) {                                          // 3438
                var events = this.events || [],                                                                        // 3439
                    l = events.length;                                                                                 // 3440
                while (l--){                                                                                           // 3441
                    if (events[l].name == eventName && (R.is(fn, "undefined") || events[l].f == fn)) {                 // 3442
                        events[l].unbind();                                                                            // 3443
                        events.splice(l, 1);                                                                           // 3444
                        !events.length && delete this.events;                                                          // 3445
                    }                                                                                                  // 3446
                }                                                                                                      // 3447
                return this;                                                                                           // 3448
            };                                                                                                         // 3449
        })(events[i]);                                                                                                 // 3450
    }                                                                                                                  // 3451
                                                                                                                       // 3452
    /*\
     * Element.data                                                                                                    // 3454
     [ method ]                                                                                                        // 3455
     **                                                                                                                // 3456
     * Adds or retrieves given value asociated with given key.                                                         // 3457
     **                                                                                                                // 3458
     * See also @Element.removeData                                                                                    // 3459
     > Parameters                                                                                                      // 3460
     - key (string) key to store data                                                                                  // 3461
     - value (any) #optional value to store                                                                            // 3462
     = (object) @Element                                                                                               // 3463
     * or, if value is not specified:                                                                                  // 3464
     = (any) value                                                                                                     // 3465
     * or, if key and value are not specified:                                                                         // 3466
     = (object) Key/value pairs for all the data associated with the element.                                          // 3467
     > Usage                                                                                                           // 3468
     | for (var i = 0, i < 5, i++) {                                                                                   // 3469
     |     paper.circle(10 + 15 * i, 10, 10)                                                                           // 3470
     |          .attr({fill: "#000"})                                                                                  // 3471
     |          .data("i", i)                                                                                          // 3472
     |          .click(function () {                                                                                   // 3473
     |             alert(this.data("i"));                                                                              // 3474
     |          });                                                                                                    // 3475
     | }                                                                                                               // 3476
    \*/                                                                                                                // 3477
    elproto.data = function (key, value) {                                                                             // 3478
        var data = eldata[this.id] = eldata[this.id] || {};                                                            // 3479
        if (arguments.length == 0) {                                                                                   // 3480
            return data;                                                                                               // 3481
        }                                                                                                              // 3482
        if (arguments.length == 1) {                                                                                   // 3483
            if (R.is(key, "object")) {                                                                                 // 3484
                for (var i in key) if (key[has](i)) {                                                                  // 3485
                    this.data(i, key[i]);                                                                              // 3486
                }                                                                                                      // 3487
                return this;                                                                                           // 3488
            }                                                                                                          // 3489
            eve("raphael.data.get." + this.id, this, data[key], key);                                                  // 3490
            return data[key];                                                                                          // 3491
        }                                                                                                              // 3492
        data[key] = value;                                                                                             // 3493
        eve("raphael.data.set." + this.id, this, value, key);                                                          // 3494
        return this;                                                                                                   // 3495
    };                                                                                                                 // 3496
    /*\
     * Element.removeData                                                                                              // 3498
     [ method ]                                                                                                        // 3499
     **                                                                                                                // 3500
     * Removes value associated with an element by given key.                                                          // 3501
     * If key is not provided, removes all the data of the element.                                                    // 3502
     > Parameters                                                                                                      // 3503
     - key (string) #optional key                                                                                      // 3504
     = (object) @Element                                                                                               // 3505
    \*/                                                                                                                // 3506
    elproto.removeData = function (key) {                                                                              // 3507
        if (key == null) {                                                                                             // 3508
            eldata[this.id] = {};                                                                                      // 3509
        } else {                                                                                                       // 3510
            eldata[this.id] && delete eldata[this.id][key];                                                            // 3511
        }                                                                                                              // 3512
        return this;                                                                                                   // 3513
    };                                                                                                                 // 3514
     /*\
     * Element.getData                                                                                                 // 3516
     [ method ]                                                                                                        // 3517
     **                                                                                                                // 3518
     * Retrieves the element data                                                                                      // 3519
     = (object) data                                                                                                   // 3520
    \*/                                                                                                                // 3521
    elproto.getData = function () {                                                                                    // 3522
        return clone(eldata[this.id] || {});                                                                           // 3523
    };                                                                                                                 // 3524
    /*\
     * Element.hover                                                                                                   // 3526
     [ method ]                                                                                                        // 3527
     **                                                                                                                // 3528
     * Adds event handlers for hover for the element.                                                                  // 3529
     > Parameters                                                                                                      // 3530
     - f_in (function) handler for hover in                                                                            // 3531
     - f_out (function) handler for hover out                                                                          // 3532
     - icontext (object) #optional context for hover in handler                                                        // 3533
     - ocontext (object) #optional context for hover out handler                                                       // 3534
     = (object) @Element                                                                                               // 3535
    \*/                                                                                                                // 3536
    elproto.hover = function (f_in, f_out, scope_in, scope_out) {                                                      // 3537
        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);                                  // 3538
    };                                                                                                                 // 3539
    /*\
     * Element.unhover                                                                                                 // 3541
     [ method ]                                                                                                        // 3542
     **                                                                                                                // 3543
     * Removes event handlers for hover for the element.                                                               // 3544
     > Parameters                                                                                                      // 3545
     - f_in (function) handler for hover in                                                                            // 3546
     - f_out (function) handler for hover out                                                                          // 3547
     = (object) @Element                                                                                               // 3548
    \*/                                                                                                                // 3549
    elproto.unhover = function (f_in, f_out) {                                                                         // 3550
        return this.unmouseover(f_in).unmouseout(f_out);                                                               // 3551
    };                                                                                                                 // 3552
    var draggable = [];                                                                                                // 3553
    /*\
     * Element.drag                                                                                                    // 3555
     [ method ]                                                                                                        // 3556
     **                                                                                                                // 3557
     * Adds event handlers for drag of the element.                                                                    // 3558
     > Parameters                                                                                                      // 3559
     - onmove (function) handler for moving                                                                            // 3560
     - onstart (function) handler for drag start                                                                       // 3561
     - onend (function) handler for drag end                                                                           // 3562
     - mcontext (object) #optional context for moving handler                                                          // 3563
     - scontext (object) #optional context for drag start handler                                                      // 3564
     - econtext (object) #optional context for drag end handler                                                        // 3565
     * Additionaly following `drag` events will be triggered: `drag.start.<id>` on start,                              // 3566
     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element    // 3567
     * `drag.over.<id>` will be fired as well.                                                                         // 3568
     *                                                                                                                 // 3569
     * Start event and start handler will be called in specified context or in context of the element with following parameters:
     o x (number) x position of the mouse                                                                              // 3571
     o y (number) y position of the mouse                                                                              // 3572
     o event (object) DOM event object                                                                                 // 3573
     * Move event and move handler will be called in specified context or in context of the element with following parameters:
     o dx (number) shift by x from the start point                                                                     // 3575
     o dy (number) shift by y from the start point                                                                     // 3576
     o x (number) x position of the mouse                                                                              // 3577
     o y (number) y position of the mouse                                                                              // 3578
     o event (object) DOM event object                                                                                 // 3579
     * End event and end handler will be called in specified context or in context of the element with following parameters:
     o event (object) DOM event object                                                                                 // 3581
     = (object) @Element                                                                                               // 3582
    \*/                                                                                                                // 3583
    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {                             // 3584
        function start(e) {                                                                                            // 3585
            (e.originalEvent || e).preventDefault();                                                                   // 3586
            var x = e.clientX,                                                                                         // 3587
                y = e.clientY,                                                                                         // 3588
                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,                                     // 3589
                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;                                   // 3590
            this._drag.id = e.identifier;                                                                              // 3591
            if (supportsTouch && e.touches) {                                                                          // 3592
                var i = e.touches.length, touch;                                                                       // 3593
                while (i--) {                                                                                          // 3594
                    touch = e.touches[i];                                                                              // 3595
                    this._drag.id = touch.identifier;                                                                  // 3596
                    if (touch.identifier == this._drag.id) {                                                           // 3597
                        x = touch.clientX;                                                                             // 3598
                        y = touch.clientY;                                                                             // 3599
                        break;                                                                                         // 3600
                    }                                                                                                  // 3601
                }                                                                                                      // 3602
            }                                                                                                          // 3603
            this._drag.x = x + scrollX;                                                                                // 3604
            this._drag.y = y + scrollY;                                                                                // 3605
            !drag.length && R.mousemove(dragMove).mouseup(dragUp);                                                     // 3606
            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});             // 3607
            onstart && eve.on("raphael.drag.start." + this.id, onstart);                                               // 3608
            onmove && eve.on("raphael.drag.move." + this.id, onmove);                                                  // 3609
            onend && eve.on("raphael.drag.end." + this.id, onend);                                                     // 3610
            eve("raphael.drag.start." + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);
        }                                                                                                              // 3612
        this._drag = {};                                                                                               // 3613
        draggable.push({el: this, start: start});                                                                      // 3614
        this.mousedown(start);                                                                                         // 3615
        return this;                                                                                                   // 3616
    };                                                                                                                 // 3617
    /*\
     * Element.onDragOver                                                                                              // 3619
     [ method ]                                                                                                        // 3620
     **                                                                                                                // 3621
     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).
     > Parameters                                                                                                      // 3623
     - f (function) handler for event, first argument would be the element you are dragging over                       // 3624
    \*/                                                                                                                // 3625
    elproto.onDragOver = function (f) {                                                                                // 3626
        f ? eve.on("raphael.drag.over." + this.id, f) : eve.unbind("raphael.drag.over." + this.id);                    // 3627
    };                                                                                                                 // 3628
    /*\
     * Element.undrag                                                                                                  // 3630
     [ method ]                                                                                                        // 3631
     **                                                                                                                // 3632
     * Removes all drag event handlers from given element.                                                             // 3633
    \*/                                                                                                                // 3634
    elproto.undrag = function () {                                                                                     // 3635
        var i = draggable.length;                                                                                      // 3636
        while (i--) if (draggable[i].el == this) {                                                                     // 3637
            this.unmousedown(draggable[i].start);                                                                      // 3638
            draggable.splice(i, 1);                                                                                    // 3639
            eve.unbind("raphael.drag.*." + this.id);                                                                   // 3640
        }                                                                                                              // 3641
        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);                                                // 3642
        drag = [];                                                                                                     // 3643
    };                                                                                                                 // 3644
    /*\
     * Paper.circle                                                                                                    // 3646
     [ method ]                                                                                                        // 3647
     **                                                                                                                // 3648
     * Draws a circle.                                                                                                 // 3649
     **                                                                                                                // 3650
     > Parameters                                                                                                      // 3651
     **                                                                                                                // 3652
     - x (number) x coordinate of the centre                                                                           // 3653
     - y (number) y coordinate of the centre                                                                           // 3654
     - r (number) radius                                                                                               // 3655
     = (object) Raphaël element object with type “circle”                                                              // 3656
     **                                                                                                                // 3657
     > Usage                                                                                                           // 3658
     | var c = paper.circle(50, 50, 40);                                                                               // 3659
    \*/                                                                                                                // 3660
    paperproto.circle = function (x, y, r) {                                                                           // 3661
        var out = R._engine.circle(this, x || 0, y || 0, r || 0);                                                      // 3662
        this.__set__ && this.__set__.push(out);                                                                        // 3663
        return out;                                                                                                    // 3664
    };                                                                                                                 // 3665
    /*\
     * Paper.rect                                                                                                      // 3667
     [ method ]                                                                                                        // 3668
     *                                                                                                                 // 3669
     * Draws a rectangle.                                                                                              // 3670
     **                                                                                                                // 3671
     > Parameters                                                                                                      // 3672
     **                                                                                                                // 3673
     - x (number) x coordinate of the top left corner                                                                  // 3674
     - y (number) y coordinate of the top left corner                                                                  // 3675
     - width (number) width                                                                                            // 3676
     - height (number) height                                                                                          // 3677
     - r (number) #optional radius for rounded corners, default is 0                                                   // 3678
     = (object) Raphaël element object with type “rect”                                                                // 3679
     **                                                                                                                // 3680
     > Usage                                                                                                           // 3681
     | // regular rectangle                                                                                            // 3682
     | var c = paper.rect(10, 10, 50, 50);                                                                             // 3683
     | // rectangle with rounded corners                                                                               // 3684
     | var c = paper.rect(40, 40, 50, 50, 10);                                                                         // 3685
    \*/                                                                                                                // 3686
    paperproto.rect = function (x, y, w, h, r) {                                                                       // 3687
        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);                                        // 3688
        this.__set__ && this.__set__.push(out);                                                                        // 3689
        return out;                                                                                                    // 3690
    };                                                                                                                 // 3691
    /*\
     * Paper.ellipse                                                                                                   // 3693
     [ method ]                                                                                                        // 3694
     **                                                                                                                // 3695
     * Draws an ellipse.                                                                                               // 3696
     **                                                                                                                // 3697
     > Parameters                                                                                                      // 3698
     **                                                                                                                // 3699
     - x (number) x coordinate of the centre                                                                           // 3700
     - y (number) y coordinate of the centre                                                                           // 3701
     - rx (number) horizontal radius                                                                                   // 3702
     - ry (number) vertical radius                                                                                     // 3703
     = (object) Raphaël element object with type “ellipse”                                                             // 3704
     **                                                                                                                // 3705
     > Usage                                                                                                           // 3706
     | var c = paper.ellipse(50, 50, 40, 20);                                                                          // 3707
    \*/                                                                                                                // 3708
    paperproto.ellipse = function (x, y, rx, ry) {                                                                     // 3709
        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);                                           // 3710
        this.__set__ && this.__set__.push(out);                                                                        // 3711
        return out;                                                                                                    // 3712
    };                                                                                                                 // 3713
    /*\
     * Paper.path                                                                                                      // 3715
     [ method ]                                                                                                        // 3716
     **                                                                                                                // 3717
     * Creates a path element by given path data string.                                                               // 3718
     > Parameters                                                                                                      // 3719
     - pathString (string) #optional path string in SVG format.                                                        // 3720
     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:  // 3721
     | "M10,20L30,40"                                                                                                  // 3722
     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.
     *                                                                                                                 // 3724
     # <p>Here is short list of commands available, for more details see <a href="http://www.w3.org/TR/SVG/paths.html#PathData" title="Details of a path's data attribute's format are described in the SVG specification.">SVG path string format</a>.</p>
     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>                          // 3726
     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>                                                               // 3727
     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>                                                            // 3728
     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>                                                               // 3729
     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>                                                        // 3730
     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>                                                          // 3731
     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>                                                  // 3732
     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>                                                 // 3733
     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>                                       // 3734
     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>                                      // 3735
     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>       // 3736
     # <tr><td>R</td><td><a href="http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>
     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.                     // 3738
     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.
     > Usage                                                                                                           // 3740
     | var c = paper.path("M10 10L90 90");                                                                             // 3741
     | // draw a diagonal line:                                                                                        // 3742
     | // move to 10,10, line to 90,90                                                                                 // 3743
     * For example of path strings, check out these icons: http://raphaeljs.com/icons/                                 // 3744
    \*/                                                                                                                // 3745
    paperproto.path = function (pathString) {                                                                          // 3746
        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);                   // 3747
        var out = R._engine.path(R.format[apply](R, arguments), this);                                                 // 3748
        this.__set__ && this.__set__.push(out);                                                                        // 3749
        return out;                                                                                                    // 3750
    };                                                                                                                 // 3751
    /*\
     * Paper.image                                                                                                     // 3753
     [ method ]                                                                                                        // 3754
     **                                                                                                                // 3755
     * Embeds an image into the surface.                                                                               // 3756
     **                                                                                                                // 3757
     > Parameters                                                                                                      // 3758
     **                                                                                                                // 3759
     - src (string) URI of the source image                                                                            // 3760
     - x (number) x coordinate position                                                                                // 3761
     - y (number) y coordinate position                                                                                // 3762
     - width (number) width of the image                                                                               // 3763
     - height (number) height of the image                                                                             // 3764
     = (object) Raphaël element object with type “image”                                                               // 3765
     **                                                                                                                // 3766
     > Usage                                                                                                           // 3767
     | var c = paper.image("apple.png", 10, 10, 80, 80);                                                               // 3768
    \*/                                                                                                                // 3769
    paperproto.image = function (src, x, y, w, h) {                                                                    // 3770
        var out = R._engine.image(this, src || "about:blank", x || 0, y || 0, w || 0, h || 0);                         // 3771
        this.__set__ && this.__set__.push(out);                                                                        // 3772
        return out;                                                                                                    // 3773
    };                                                                                                                 // 3774
    /*\
     * Paper.text                                                                                                      // 3776
     [ method ]                                                                                                        // 3777
     **                                                                                                                // 3778
     * Draws a text string. If you need line breaks, put “\n” in the string.                                           // 3779
     **                                                                                                                // 3780
     > Parameters                                                                                                      // 3781
     **                                                                                                                // 3782
     - x (number) x coordinate position                                                                                // 3783
     - y (number) y coordinate position                                                                                // 3784
     - text (string) The text string to draw                                                                           // 3785
     = (object) Raphaël element object with type “text”                                                                // 3786
     **                                                                                                                // 3787
     > Usage                                                                                                           // 3788
     | var t = paper.text(50, 50, "Raphaël\nkicks\nbutt!");                                                            // 3789
    \*/                                                                                                                // 3790
    paperproto.text = function (x, y, text) {                                                                          // 3791
        var out = R._engine.text(this, x || 0, y || 0, Str(text));                                                     // 3792
        this.__set__ && this.__set__.push(out);                                                                        // 3793
        return out;                                                                                                    // 3794
    };                                                                                                                 // 3795
    /*\
     * Paper.set                                                                                                       // 3797
     [ method ]                                                                                                        // 3798
     **                                                                                                                // 3799
     * Creates array-like object to keep and operate several elements at once.                                         // 3800
     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.               // 3801
     * Sets act as pseudo elements — all methods available to an element can be used on a set.                         // 3802
     = (object) array-like object that represents set of elements                                                      // 3803
     **                                                                                                                // 3804
     > Usage                                                                                                           // 3805
     | var st = paper.set();                                                                                           // 3806
     | st.push(                                                                                                        // 3807
     |     paper.circle(10, 10, 5),                                                                                    // 3808
     |     paper.circle(30, 10, 5)                                                                                     // 3809
     | );                                                                                                              // 3810
     | st.attr({fill: "red"}); // changes the fill of both circles                                                     // 3811
    \*/                                                                                                                // 3812
    paperproto.set = function (itemsArray) {                                                                           // 3813
        !R.is(itemsArray, "array") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));      // 3814
        var out = new Set(itemsArray);                                                                                 // 3815
        this.__set__ && this.__set__.push(out);                                                                        // 3816
        out["paper"] = this;                                                                                           // 3817
        out["type"] = "set";                                                                                           // 3818
        return out;                                                                                                    // 3819
    };                                                                                                                 // 3820
    /*\
     * Paper.setStart                                                                                                  // 3822
     [ method ]                                                                                                        // 3823
     **                                                                                                                // 3824
     * Creates @Paper.set. All elements that will be created after calling this method and before calling              // 3825
     * @Paper.setFinish will be added to the set.                                                                      // 3826
     **                                                                                                                // 3827
     > Usage                                                                                                           // 3828
     | paper.setStart();                                                                                               // 3829
     | paper.circle(10, 10, 5),                                                                                        // 3830
     | paper.circle(30, 10, 5)                                                                                         // 3831
     | var st = paper.setFinish();                                                                                     // 3832
     | st.attr({fill: "red"}); // changes the fill of both circles                                                     // 3833
    \*/                                                                                                                // 3834
    paperproto.setStart = function (set) {                                                                             // 3835
        this.__set__ = set || this.set();                                                                              // 3836
    };                                                                                                                 // 3837
    /*\
     * Paper.setFinish                                                                                                 // 3839
     [ method ]                                                                                                        // 3840
     **                                                                                                                // 3841
     * See @Paper.setStart. This method finishes catching and returns resulting set.                                   // 3842
     **                                                                                                                // 3843
     = (object) set                                                                                                    // 3844
    \*/                                                                                                                // 3845
    paperproto.setFinish = function (set) {                                                                            // 3846
        var out = this.__set__;                                                                                        // 3847
        delete this.__set__;                                                                                           // 3848
        return out;                                                                                                    // 3849
    };                                                                                                                 // 3850
    /*\
     * Paper.setSize                                                                                                   // 3852
     [ method ]                                                                                                        // 3853
     **                                                                                                                // 3854
     * If you need to change dimensions of the canvas call this method                                                 // 3855
     **                                                                                                                // 3856
     > Parameters                                                                                                      // 3857
     **                                                                                                                // 3858
     - width (number) new width of the canvas                                                                          // 3859
     - height (number) new height of the canvas                                                                        // 3860
    \*/                                                                                                                // 3861
    paperproto.setSize = function (width, height) {                                                                    // 3862
        return R._engine.setSize.call(this, width, height);                                                            // 3863
    };                                                                                                                 // 3864
    /*\
     * Paper.setViewBox                                                                                                // 3866
     [ method ]                                                                                                        // 3867
     **                                                                                                                // 3868
     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by         // 3869
     * specifying new boundaries.                                                                                      // 3870
     **                                                                                                                // 3871
     > Parameters                                                                                                      // 3872
     **                                                                                                                // 3873
     - x (number) new x position, default is `0`                                                                       // 3874
     - y (number) new y position, default is `0`                                                                       // 3875
     - w (number) new width of the canvas                                                                              // 3876
     - h (number) new height of the canvas                                                                             // 3877
     - fit (boolean) `true` if you want graphics to fit into new boundary box                                          // 3878
    \*/                                                                                                                // 3879
    paperproto.setViewBox = function (x, y, w, h, fit) {                                                               // 3880
        return R._engine.setViewBox.call(this, x, y, w, h, fit);                                                       // 3881
    };                                                                                                                 // 3882
    /*\
     * Paper.top                                                                                                       // 3884
     [ property ]                                                                                                      // 3885
     **                                                                                                                // 3886
     * Points to the topmost element on the paper                                                                      // 3887
    \*/                                                                                                                // 3888
    /*\
     * Paper.bottom                                                                                                    // 3890
     [ property ]                                                                                                      // 3891
     **                                                                                                                // 3892
     * Points to the bottom element on the paper                                                                       // 3893
    \*/                                                                                                                // 3894
    paperproto.top = paperproto.bottom = null;                                                                         // 3895
    /*\
     * Paper.raphael                                                                                                   // 3897
     [ property ]                                                                                                      // 3898
     **                                                                                                                // 3899
     * Points to the @Raphael object/function                                                                          // 3900
    \*/                                                                                                                // 3901
    paperproto.raphael = R;                                                                                            // 3902
    var getOffset = function (elem) {                                                                                  // 3903
        var box = elem.getBoundingClientRect(),                                                                        // 3904
            doc = elem.ownerDocument,                                                                                  // 3905
            body = doc.body,                                                                                           // 3906
            docElem = doc.documentElement,                                                                             // 3907
            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,
            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,                 // 3909
            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;               // 3910
        return {                                                                                                       // 3911
            y: top,                                                                                                    // 3912
            x: left                                                                                                    // 3913
        };                                                                                                             // 3914
    };                                                                                                                 // 3915
    /*\
     * Paper.getElementByPoint                                                                                         // 3917
     [ method ]                                                                                                        // 3918
     **                                                                                                                // 3919
     * Returns you topmost element under given point.                                                                  // 3920
     **                                                                                                                // 3921
     = (object) Raphaël element object                                                                                 // 3922
     > Parameters                                                                                                      // 3923
     **                                                                                                                // 3924
     - x (number) x coordinate from the top left corner of the window                                                  // 3925
     - y (number) y coordinate from the top left corner of the window                                                  // 3926
     > Usage                                                                                                           // 3927
     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: "#f00"});                                                 // 3928
    \*/                                                                                                                // 3929
    paperproto.getElementByPoint = function (x, y) {                                                                   // 3930
        var paper = this,                                                                                              // 3931
            svg = paper.canvas,                                                                                        // 3932
            target = g.doc.elementFromPoint(x, y);                                                                     // 3933
        if (g.win.opera && target.tagName == "svg") {                                                                  // 3934
            var so = getOffset(svg),                                                                                   // 3935
                sr = svg.createSVGRect();                                                                              // 3936
            sr.x = x - so.x;                                                                                           // 3937
            sr.y = y - so.y;                                                                                           // 3938
            sr.width = sr.height = 1;                                                                                  // 3939
            var hits = svg.getIntersectionList(sr, null);                                                              // 3940
            if (hits.length) {                                                                                         // 3941
                target = hits[hits.length - 1];                                                                        // 3942
            }                                                                                                          // 3943
        }                                                                                                              // 3944
        if (!target) {                                                                                                 // 3945
            return null;                                                                                               // 3946
        }                                                                                                              // 3947
        while (target.parentNode && target != svg.parentNode && !target.raphael) {                                     // 3948
            target = target.parentNode;                                                                                // 3949
        }                                                                                                              // 3950
        target == paper.canvas.parentNode && (target = svg);                                                           // 3951
        target = target && target.raphael ? paper.getById(target.raphaelid) : null;                                    // 3952
        return target;                                                                                                 // 3953
    };                                                                                                                 // 3954
                                                                                                                       // 3955
    /*\
     * Paper.getElementsByBBox                                                                                         // 3957
     [ method ]                                                                                                        // 3958
     **                                                                                                                // 3959
     * Returns set of elements that have an intersecting bounding box                                                  // 3960
     **                                                                                                                // 3961
     > Parameters                                                                                                      // 3962
     **                                                                                                                // 3963
     - bbox (object) bbox to check with                                                                                // 3964
     = (object) @Set                                                                                                   // 3965
     \*/                                                                                                               // 3966
    paperproto.getElementsByBBox = function (bbox) {                                                                   // 3967
        var set = this.set();                                                                                          // 3968
        this.forEach(function (el) {                                                                                   // 3969
            if (R.isBBoxIntersect(el.getBBox(), bbox)) {                                                               // 3970
                set.push(el);                                                                                          // 3971
            }                                                                                                          // 3972
        });                                                                                                            // 3973
        return set;                                                                                                    // 3974
    };                                                                                                                 // 3975
                                                                                                                       // 3976
    /*\
     * Paper.getById                                                                                                   // 3978
     [ method ]                                                                                                        // 3979
     **                                                                                                                // 3980
     * Returns you element by its internal ID.                                                                         // 3981
     **                                                                                                                // 3982
     > Parameters                                                                                                      // 3983
     **                                                                                                                // 3984
     - id (number) id                                                                                                  // 3985
     = (object) Raphaël element object                                                                                 // 3986
    \*/                                                                                                                // 3987
    paperproto.getById = function (id) {                                                                               // 3988
        var bot = this.bottom;                                                                                         // 3989
        while (bot) {                                                                                                  // 3990
            if (bot.id == id) {                                                                                        // 3991
                return bot;                                                                                            // 3992
            }                                                                                                          // 3993
            bot = bot.next;                                                                                            // 3994
        }                                                                                                              // 3995
        return null;                                                                                                   // 3996
    };                                                                                                                 // 3997
    /*\
     * Paper.forEach                                                                                                   // 3999
     [ method ]                                                                                                        // 4000
     **                                                                                                                // 4001
     * Executes given function for each element on the paper                                                           // 4002
     *                                                                                                                 // 4003
     * If callback function returns `false` it will stop loop running.                                                 // 4004
     **                                                                                                                // 4005
     > Parameters                                                                                                      // 4006
     **                                                                                                                // 4007
     - callback (function) function to run                                                                             // 4008
     - thisArg (object) context object for the callback                                                                // 4009
     = (object) Paper object                                                                                           // 4010
     > Usage                                                                                                           // 4011
     | paper.forEach(function (el) {                                                                                   // 4012
     |     el.attr({ stroke: "blue" });                                                                                // 4013
     | });                                                                                                             // 4014
    \*/                                                                                                                // 4015
    paperproto.forEach = function (callback, thisArg) {                                                                // 4016
        var bot = this.bottom;                                                                                         // 4017
        while (bot) {                                                                                                  // 4018
            if (callback.call(thisArg, bot) === false) {                                                               // 4019
                return this;                                                                                           // 4020
            }                                                                                                          // 4021
            bot = bot.next;                                                                                            // 4022
        }                                                                                                              // 4023
        return this;                                                                                                   // 4024
    };                                                                                                                 // 4025
    /*\
     * Paper.getElementsByPoint                                                                                        // 4027
     [ method ]                                                                                                        // 4028
     **                                                                                                                // 4029
     * Returns set of elements that have common point inside                                                           // 4030
     **                                                                                                                // 4031
     > Parameters                                                                                                      // 4032
     **                                                                                                                // 4033
     - x (number) x coordinate of the point                                                                            // 4034
     - y (number) y coordinate of the point                                                                            // 4035
     = (object) @Set                                                                                                   // 4036
    \*/                                                                                                                // 4037
    paperproto.getElementsByPoint = function (x, y) {                                                                  // 4038
        var set = this.set();                                                                                          // 4039
        this.forEach(function (el) {                                                                                   // 4040
            if (el.isPointInside(x, y)) {                                                                              // 4041
                set.push(el);                                                                                          // 4042
            }                                                                                                          // 4043
        });                                                                                                            // 4044
        return set;                                                                                                    // 4045
    };                                                                                                                 // 4046
    function x_y() {                                                                                                   // 4047
        return this.x + S + this.y;                                                                                    // 4048
    }                                                                                                                  // 4049
    function x_y_w_h() {                                                                                               // 4050
        return this.x + S + this.y + S + this.width + " \xd7 " + this.height;                                          // 4051
    }                                                                                                                  // 4052
    /*\
     * Element.isPointInside                                                                                           // 4054
     [ method ]                                                                                                        // 4055
     **                                                                                                                // 4056
     * Determine if given point is inside this element’s shape                                                         // 4057
     **                                                                                                                // 4058
     > Parameters                                                                                                      // 4059
     **                                                                                                                // 4060
     - x (number) x coordinate of the point                                                                            // 4061
     - y (number) y coordinate of the point                                                                            // 4062
     = (boolean) `true` if point inside the shape                                                                      // 4063
    \*/                                                                                                                // 4064
    elproto.isPointInside = function (x, y) {                                                                          // 4065
        var rp = this.realPath = getPath[this.type](this);                                                             // 4066
        if (this.attr('transform') && this.attr('transform').length) {                                                 // 4067
            rp = R.transformPath(rp, this.attr('transform'));                                                          // 4068
        }                                                                                                              // 4069
        return R.isPointInsidePath(rp, x, y);                                                                          // 4070
    };                                                                                                                 // 4071
    /*\
     * Element.getBBox                                                                                                 // 4073
     [ method ]                                                                                                        // 4074
     **                                                                                                                // 4075
     * Return bounding box for a given element                                                                         // 4076
     **                                                                                                                // 4077
     > Parameters                                                                                                      // 4078
     **                                                                                                                // 4079
     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.
     = (object) Bounding box object:                                                                                   // 4081
     o {                                                                                                               // 4082
     o     x: (number) top left corner x                                                                               // 4083
     o     y: (number) top left corner y                                                                               // 4084
     o     x2: (number) bottom right corner x                                                                          // 4085
     o     y2: (number) bottom right corner y                                                                          // 4086
     o     width: (number) width                                                                                       // 4087
     o     height: (number) height                                                                                     // 4088
     o }                                                                                                               // 4089
    \*/                                                                                                                // 4090
    elproto.getBBox = function (isWithoutTransform) {                                                                  // 4091
        if (this.removed) {                                                                                            // 4092
            return {};                                                                                                 // 4093
        }                                                                                                              // 4094
        var _ = this._;                                                                                                // 4095
        if (isWithoutTransform) {                                                                                      // 4096
            if (_.dirty || !_.bboxwt) {                                                                                // 4097
                this.realPath = getPath[this.type](this);                                                              // 4098
                _.bboxwt = pathDimensions(this.realPath);                                                              // 4099
                _.bboxwt.toString = x_y_w_h;                                                                           // 4100
                _.dirty = 0;                                                                                           // 4101
            }                                                                                                          // 4102
            return _.bboxwt;                                                                                           // 4103
        }                                                                                                              // 4104
        if (_.dirty || _.dirtyT || !_.bbox) {                                                                          // 4105
            if (_.dirty || !this.realPath) {                                                                           // 4106
                _.bboxwt = 0;                                                                                          // 4107
                this.realPath = getPath[this.type](this);                                                              // 4108
            }                                                                                                          // 4109
            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));                                              // 4110
            _.bbox.toString = x_y_w_h;                                                                                 // 4111
            _.dirty = _.dirtyT = 0;                                                                                    // 4112
        }                                                                                                              // 4113
        return _.bbox;                                                                                                 // 4114
    };                                                                                                                 // 4115
    /*\
     * Element.clone                                                                                                   // 4117
     [ method ]                                                                                                        // 4118
     **                                                                                                                // 4119
     = (object) clone of a given element                                                                               // 4120
     **                                                                                                                // 4121
    \*/                                                                                                                // 4122
    elproto.clone = function () {                                                                                      // 4123
        if (this.removed) {                                                                                            // 4124
            return null;                                                                                               // 4125
        }                                                                                                              // 4126
        var out = this.paper[this.type]().attr(this.attr());                                                           // 4127
        this.__set__ && this.__set__.push(out);                                                                        // 4128
        return out;                                                                                                    // 4129
    };                                                                                                                 // 4130
    /*\
     * Element.glow                                                                                                    // 4132
     [ method ]                                                                                                        // 4133
     **                                                                                                                // 4134
     * Return set of elements that create glow-like effect around given element. See @Paper.set.                       // 4135
     *                                                                                                                 // 4136
     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.            // 4137
     **                                                                                                                // 4138
     > Parameters                                                                                                      // 4139
     **                                                                                                                // 4140
     - glow (object) #optional parameters object with all properties optional:                                         // 4141
     o {                                                                                                               // 4142
     o     width (number) size of the glow, default is `10`                                                            // 4143
     o     fill (boolean) will it be filled, default is `false`                                                        // 4144
     o     opacity (number) opacity, default is `0.5`                                                                  // 4145
     o     offsetx (number) horizontal offset, default is `0`                                                          // 4146
     o     offsety (number) vertical offset, default is `0`                                                            // 4147
     o     color (string) glow colour, default is `black`                                                              // 4148
     o }                                                                                                               // 4149
     = (object) @Paper.set of elements that represents glow                                                            // 4150
    \*/                                                                                                                // 4151
    elproto.glow = function (glow) {                                                                                   // 4152
        if (this.type == "text") {                                                                                     // 4153
            return null;                                                                                               // 4154
        }                                                                                                              // 4155
        glow = glow || {};                                                                                             // 4156
        var s = {                                                                                                      // 4157
            width: (glow.width || 10) + (+this.attr("stroke-width") || 1),                                             // 4158
            fill: glow.fill || false,                                                                                  // 4159
            opacity: glow.opacity || .5,                                                                               // 4160
            offsetx: glow.offsetx || 0,                                                                                // 4161
            offsety: glow.offsety || 0,                                                                                // 4162
            color: glow.color || "#000"                                                                                // 4163
        },                                                                                                             // 4164
            c = s.width / 2,                                                                                           // 4165
            r = this.paper,                                                                                            // 4166
            out = r.set(),                                                                                             // 4167
            path = this.realPath || getPath[this.type](this);                                                          // 4168
        path = this.matrix ? mapPath(path, this.matrix) : path;                                                        // 4169
        for (var i = 1; i < c + 1; i++) {                                                                              // 4170
            out.push(r.path(path).attr({                                                                               // 4171
                stroke: s.color,                                                                                       // 4172
                fill: s.fill ? s.color : "none",                                                                       // 4173
                "stroke-linejoin": "round",                                                                            // 4174
                "stroke-linecap": "round",                                                                             // 4175
                "stroke-width": +(s.width / c * i).toFixed(3),                                                         // 4176
                opacity: +(s.opacity / c).toFixed(3)                                                                   // 4177
            }));                                                                                                       // 4178
        }                                                                                                              // 4179
        return out.insertBefore(this).translate(s.offsetx, s.offsety);                                                 // 4180
    };                                                                                                                 // 4181
    var curveslengths = {},                                                                                            // 4182
    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {                              // 4183
        if (length == null) {                                                                                          // 4184
            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);                                                     // 4185
        } else {                                                                                                       // 4186
            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));
        }                                                                                                              // 4188
    },                                                                                                                 // 4189
    getLengthFactory = function (istotal, subpath) {                                                                   // 4190
        return function (path, length, onlystart) {                                                                    // 4191
            path = path2curve(path);                                                                                   // 4192
            var x, y, p, l, sp = "", subpaths = {}, point,                                                             // 4193
                len = 0;                                                                                               // 4194
            for (var i = 0, ii = path.length; i < ii; i++) {                                                           // 4195
                p = path[i];                                                                                           // 4196
                if (p[0] == "M") {                                                                                     // 4197
                    x = +p[1];                                                                                         // 4198
                    y = +p[2];                                                                                         // 4199
                } else {                                                                                               // 4200
                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);                             // 4201
                    if (len + l > length) {                                                                            // 4202
                        if (subpath && !subpaths.start) {                                                              // 4203
                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);   // 4204
                            sp += ["C" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];        // 4205
                            if (onlystart) {return sp;}                                                                // 4206
                            subpaths.start = sp;                                                                       // 4207
                            sp = ["M" + point.x, point.y + "C" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();
                            len += l;                                                                                  // 4209
                            x = +p[5];                                                                                 // 4210
                            y = +p[6];                                                                                 // 4211
                            continue;                                                                                  // 4212
                        }                                                                                              // 4213
                        if (!istotal && !subpath) {                                                                    // 4214
                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);   // 4215
                            return {x: point.x, y: point.y, alpha: point.alpha};                                       // 4216
                        }                                                                                              // 4217
                    }                                                                                                  // 4218
                    len += l;                                                                                          // 4219
                    x = +p[5];                                                                                         // 4220
                    y = +p[6];                                                                                         // 4221
                }                                                                                                      // 4222
                sp += p.shift() + p;                                                                                   // 4223
            }                                                                                                          // 4224
            subpaths.end = sp;                                                                                         // 4225
            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);
            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});                                     // 4227
            return point;                                                                                              // 4228
        };                                                                                                             // 4229
    };                                                                                                                 // 4230
    var getTotalLength = getLengthFactory(1),                                                                          // 4231
        getPointAtLength = getLengthFactory(),                                                                         // 4232
        getSubpathsAtLength = getLengthFactory(0, 1);                                                                  // 4233
    /*\
     * Raphael.getTotalLength                                                                                          // 4235
     [ method ]                                                                                                        // 4236
     **                                                                                                                // 4237
     * Returns length of the given path in pixels.                                                                     // 4238
     **                                                                                                                // 4239
     > Parameters                                                                                                      // 4240
     **                                                                                                                // 4241
     - path (string) SVG path string.                                                                                  // 4242
     **                                                                                                                // 4243
     = (number) length.                                                                                                // 4244
    \*/                                                                                                                // 4245
    R.getTotalLength = getTotalLength;                                                                                 // 4246
    /*\
     * Raphael.getPointAtLength                                                                                        // 4248
     [ method ]                                                                                                        // 4249
     **                                                                                                                // 4250
     * Return coordinates of the point located at the given length on the given path.                                  // 4251
     **                                                                                                                // 4252
     > Parameters                                                                                                      // 4253
     **                                                                                                                // 4254
     - path (string) SVG path string                                                                                   // 4255
     - length (number)                                                                                                 // 4256
     **                                                                                                                // 4257
     = (object) representation of the point:                                                                           // 4258
     o {                                                                                                               // 4259
     o     x: (number) x coordinate                                                                                    // 4260
     o     y: (number) y coordinate                                                                                    // 4261
     o     alpha: (number) angle of derivative                                                                         // 4262
     o }                                                                                                               // 4263
    \*/                                                                                                                // 4264
    R.getPointAtLength = getPointAtLength;                                                                             // 4265
    /*\
     * Raphael.getSubpath                                                                                              // 4267
     [ method ]                                                                                                        // 4268
     **                                                                                                                // 4269
     * Return subpath of a given path from given length to given length.                                               // 4270
     **                                                                                                                // 4271
     > Parameters                                                                                                      // 4272
     **                                                                                                                // 4273
     - path (string) SVG path string                                                                                   // 4274
     - from (number) position of the start of the segment                                                              // 4275
     - to (number) position of the end of the segment                                                                  // 4276
     **                                                                                                                // 4277
     = (string) pathstring for the segment                                                                             // 4278
    \*/                                                                                                                // 4279
    R.getSubpath = function (path, from, to) {                                                                         // 4280
        if (this.getTotalLength(path) - to < 1e-6) {                                                                   // 4281
            return getSubpathsAtLength(path, from).end;                                                                // 4282
        }                                                                                                              // 4283
        var a = getSubpathsAtLength(path, to, 1);                                                                      // 4284
        return from ? getSubpathsAtLength(a, from).end : a;                                                            // 4285
    };                                                                                                                 // 4286
    /*\
     * Element.getTotalLength                                                                                          // 4288
     [ method ]                                                                                                        // 4289
     **                                                                                                                // 4290
     * Returns length of the path in pixels. Only works for element of “path” type.                                    // 4291
     = (number) length.                                                                                                // 4292
    \*/                                                                                                                // 4293
    elproto.getTotalLength = function () {                                                                             // 4294
        var path = this.getPath();                                                                                     // 4295
        if (!path) {                                                                                                   // 4296
            return;                                                                                                    // 4297
        }                                                                                                              // 4298
                                                                                                                       // 4299
        if (this.node.getTotalLength) {                                                                                // 4300
            return this.node.getTotalLength();                                                                         // 4301
        }                                                                                                              // 4302
                                                                                                                       // 4303
        return getTotalLength(path);                                                                                   // 4304
    };                                                                                                                 // 4305
    /*\
     * Element.getPointAtLength                                                                                        // 4307
     [ method ]                                                                                                        // 4308
     **                                                                                                                // 4309
     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.
     **                                                                                                                // 4311
     > Parameters                                                                                                      // 4312
     **                                                                                                                // 4313
     - length (number)                                                                                                 // 4314
     **                                                                                                                // 4315
     = (object) representation of the point:                                                                           // 4316
     o {                                                                                                               // 4317
     o     x: (number) x coordinate                                                                                    // 4318
     o     y: (number) y coordinate                                                                                    // 4319
     o     alpha: (number) angle of derivative                                                                         // 4320
     o }                                                                                                               // 4321
    \*/                                                                                                                // 4322
    elproto.getPointAtLength = function (length) {                                                                     // 4323
        var path = this.getPath();                                                                                     // 4324
        if (!path) {                                                                                                   // 4325
            return;                                                                                                    // 4326
        }                                                                                                              // 4327
                                                                                                                       // 4328
        return getPointAtLength(path, length);                                                                         // 4329
    };                                                                                                                 // 4330
    /*\
     * Element.getPath                                                                                                 // 4332
     [ method ]                                                                                                        // 4333
     **                                                                                                                // 4334
     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.            // 4335
     = (object) path                                                                                                   // 4336
     **                                                                                                                // 4337
    \*/                                                                                                                // 4338
    elproto.getPath = function () {                                                                                    // 4339
        var path,                                                                                                      // 4340
            getPath = R._getPath[this.type];                                                                           // 4341
                                                                                                                       // 4342
        if (this.type == "text" || this.type == "set") {                                                               // 4343
            return;                                                                                                    // 4344
        }                                                                                                              // 4345
                                                                                                                       // 4346
        if (getPath) {                                                                                                 // 4347
            path = getPath(this);                                                                                      // 4348
        }                                                                                                              // 4349
                                                                                                                       // 4350
        return path;                                                                                                   // 4351
    };                                                                                                                 // 4352
    /*\
     * Element.getSubpath                                                                                              // 4354
     [ method ]                                                                                                        // 4355
     **                                                                                                                // 4356
     * Return subpath of a given element from given length to given length. Only works for element of “path” type.     // 4357
     **                                                                                                                // 4358
     > Parameters                                                                                                      // 4359
     **                                                                                                                // 4360
     - from (number) position of the start of the segment                                                              // 4361
     - to (number) position of the end of the segment                                                                  // 4362
     **                                                                                                                // 4363
     = (string) pathstring for the segment                                                                             // 4364
    \*/                                                                                                                // 4365
    elproto.getSubpath = function (from, to) {                                                                         // 4366
        var path = this.getPath();                                                                                     // 4367
        if (!path) {                                                                                                   // 4368
            return;                                                                                                    // 4369
        }                                                                                                              // 4370
                                                                                                                       // 4371
        return R.getSubpath(path, from, to);                                                                           // 4372
    };                                                                                                                 // 4373
    /*\
     * Raphael.easing_formulas                                                                                         // 4375
     [ property ]                                                                                                      // 4376
     **                                                                                                                // 4377
     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:
     # <ul>                                                                                                            // 4379
     #     <li>“linear”</li>                                                                                           // 4380
     #     <li>“&lt;” or “easeIn” or “ease-in”</li>                                                                    // 4381
     #     <li>“>” or “easeOut” or “ease-out”</li>                                                                     // 4382
     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>                                                            // 4383
     #     <li>“backIn” or “back-in”</li>                                                                              // 4384
     #     <li>“backOut” or “back-out”</li>                                                                            // 4385
     #     <li>“elastic”</li>                                                                                          // 4386
     #     <li>“bounce”</li>                                                                                           // 4387
     # </ul>                                                                                                           // 4388
     # <p>See also <a href="http://raphaeljs.com/easing.html">Easing demo</a>.</p>                                     // 4389
    \*/                                                                                                                // 4390
    var ef = R.easing_formulas = {                                                                                     // 4391
        linear: function (n) {                                                                                         // 4392
            return n;                                                                                                  // 4393
        },                                                                                                             // 4394
        "<": function (n) {                                                                                            // 4395
            return pow(n, 1.7);                                                                                        // 4396
        },                                                                                                             // 4397
        ">": function (n) {                                                                                            // 4398
            return pow(n, .48);                                                                                        // 4399
        },                                                                                                             // 4400
        "<>": function (n) {                                                                                           // 4401
            var q = .48 - n / 1.04,                                                                                    // 4402
                Q = math.sqrt(.1734 + q * q),                                                                          // 4403
                x = Q - q,                                                                                             // 4404
                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),                                                             // 4405
                y = -Q - q,                                                                                            // 4406
                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),                                                             // 4407
                t = X + Y + .5;                                                                                        // 4408
            return (1 - t) * 3 * t * t + t * t * t;                                                                    // 4409
        },                                                                                                             // 4410
        backIn: function (n) {                                                                                         // 4411
            var s = 1.70158;                                                                                           // 4412
            return n * n * ((s + 1) * n - s);                                                                          // 4413
        },                                                                                                             // 4414
        backOut: function (n) {                                                                                        // 4415
            n = n - 1;                                                                                                 // 4416
            var s = 1.70158;                                                                                           // 4417
            return n * n * ((s + 1) * n + s) + 1;                                                                      // 4418
        },                                                                                                             // 4419
        elastic: function (n) {                                                                                        // 4420
            if (n == !!n) {                                                                                            // 4421
                return n;                                                                                              // 4422
            }                                                                                                          // 4423
            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;                                         // 4424
        },                                                                                                             // 4425
        bounce: function (n) {                                                                                         // 4426
            var s = 7.5625,                                                                                            // 4427
                p = 2.75,                                                                                              // 4428
                l;                                                                                                     // 4429
            if (n < (1 / p)) {                                                                                         // 4430
                l = s * n * n;                                                                                         // 4431
            } else {                                                                                                   // 4432
                if (n < (2 / p)) {                                                                                     // 4433
                    n -= (1.5 / p);                                                                                    // 4434
                    l = s * n * n + .75;                                                                               // 4435
                } else {                                                                                               // 4436
                    if (n < (2.5 / p)) {                                                                               // 4437
                        n -= (2.25 / p);                                                                               // 4438
                        l = s * n * n + .9375;                                                                         // 4439
                    } else {                                                                                           // 4440
                        n -= (2.625 / p);                                                                              // 4441
                        l = s * n * n + .984375;                                                                       // 4442
                    }                                                                                                  // 4443
                }                                                                                                      // 4444
            }                                                                                                          // 4445
            return l;                                                                                                  // 4446
        }                                                                                                              // 4447
    };                                                                                                                 // 4448
    ef.easeIn = ef["ease-in"] = ef["<"];                                                                               // 4449
    ef.easeOut = ef["ease-out"] = ef[">"];                                                                             // 4450
    ef.easeInOut = ef["ease-in-out"] = ef["<>"];                                                                       // 4451
    ef["back-in"] = ef.backIn;                                                                                         // 4452
    ef["back-out"] = ef.backOut;                                                                                       // 4453
                                                                                                                       // 4454
    var animationElements = [],                                                                                        // 4455
        requestAnimFrame = window.requestAnimationFrame       ||                                                       // 4456
                           window.webkitRequestAnimationFrame ||                                                       // 4457
                           window.mozRequestAnimationFrame    ||                                                       // 4458
                           window.oRequestAnimationFrame      ||                                                       // 4459
                           window.msRequestAnimationFrame     ||                                                       // 4460
                           function (callback) {                                                                       // 4461
                               setTimeout(callback, 16);                                                               // 4462
                           },                                                                                          // 4463
        animation = function () {                                                                                      // 4464
            var Now = +new Date,                                                                                       // 4465
                l = 0;                                                                                                 // 4466
            for (; l < animationElements.length; l++) {                                                                // 4467
                var e = animationElements[l];                                                                          // 4468
                if (e.el.removed || e.paused) {                                                                        // 4469
                    continue;                                                                                          // 4470
                }                                                                                                      // 4471
                var time = Now - e.start,                                                                              // 4472
                    ms = e.ms,                                                                                         // 4473
                    easing = e.easing,                                                                                 // 4474
                    from = e.from,                                                                                     // 4475
                    diff = e.diff,                                                                                     // 4476
                    to = e.to,                                                                                         // 4477
                    t = e.t,                                                                                           // 4478
                    that = e.el,                                                                                       // 4479
                    set = {},                                                                                          // 4480
                    now,                                                                                               // 4481
                    init = {},                                                                                         // 4482
                    key;                                                                                               // 4483
                if (e.initstatus) {                                                                                    // 4484
                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;                           // 4485
                    e.status = e.initstatus;                                                                           // 4486
                    delete e.initstatus;                                                                               // 4487
                    e.stop && animationElements.splice(l--, 1);                                                        // 4488
                } else {                                                                                               // 4489
                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;                             // 4490
                }                                                                                                      // 4491
                if (time < 0) {                                                                                        // 4492
                    continue;                                                                                          // 4493
                }                                                                                                      // 4494
                if (time < ms) {                                                                                       // 4495
                    var pos = easing(time / ms);                                                                       // 4496
                    for (var attr in from) if (from[has](attr)) {                                                      // 4497
                        switch (availableAnimAttrs[attr]) {                                                            // 4498
                            case nu:                                                                                   // 4499
                                now = +from[attr] + pos * ms * diff[attr];                                             // 4500
                                break;                                                                                 // 4501
                            case "colour":                                                                             // 4502
                                now = "rgb(" + [                                                                       // 4503
                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),                            // 4504
                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),                            // 4505
                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))                             // 4506
                                ].join(",") + ")";                                                                     // 4507
                                break;                                                                                 // 4508
                            case "path":                                                                               // 4509
                                now = [];                                                                              // 4510
                                for (var i = 0, ii = from[attr].length; i < ii; i++) {                                 // 4511
                                    now[i] = [from[attr][i][0]];                                                       // 4512
                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {                          // 4513
                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];                   // 4514
                                    }                                                                                  // 4515
                                    now[i] = now[i].join(S);                                                           // 4516
                                }                                                                                      // 4517
                                now = now.join(S);                                                                     // 4518
                                break;                                                                                 // 4519
                            case "transform":                                                                          // 4520
                                if (diff[attr].real) {                                                                 // 4521
                                    now = [];                                                                          // 4522
                                    for (i = 0, ii = from[attr].length; i < ii; i++) {                                 // 4523
                                        now[i] = [from[attr][i][0]];                                                   // 4524
                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {                          // 4525
                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];                // 4526
                                        }                                                                              // 4527
                                    }                                                                                  // 4528
                                } else {                                                                               // 4529
                                    var get = function (i) {                                                           // 4530
                                        return +from[attr][i] + pos * ms * diff[attr][i];                              // 4531
                                    };                                                                                 // 4532
                                    // now = [["r", get(2), 0, 0], ["t", get(3), get(4)], ["s", get(0), get(1), 0, 0]];
                                    now = [["m", get(0), get(1), get(2), get(3), get(4), get(5)]];                     // 4534
                                }                                                                                      // 4535
                                break;                                                                                 // 4536
                            case "csv":                                                                                // 4537
                                if (attr == "clip-rect") {                                                             // 4538
                                    now = [];                                                                          // 4539
                                    i = 4;                                                                             // 4540
                                    while (i--) {                                                                      // 4541
                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];                            // 4542
                                    }                                                                                  // 4543
                                }                                                                                      // 4544
                                break;                                                                                 // 4545
                            default:                                                                                   // 4546
                                var from2 = [][concat](from[attr]);                                                    // 4547
                                now = [];                                                                              // 4548
                                i = that.paper.customAttributes[attr].length;                                          // 4549
                                while (i--) {                                                                          // 4550
                                    now[i] = +from2[i] + pos * ms * diff[attr][i];                                     // 4551
                                }                                                                                      // 4552
                                break;                                                                                 // 4553
                        }                                                                                              // 4554
                        set[attr] = now;                                                                               // 4555
                    }                                                                                                  // 4556
                    that.attr(set);                                                                                    // 4557
                    (function (id, that, anim) {                                                                       // 4558
                        setTimeout(function () {                                                                       // 4559
                            eve("raphael.anim.frame." + id, that, anim);                                               // 4560
                        });                                                                                            // 4561
                    })(that.id, that, e.anim);                                                                         // 4562
                } else {                                                                                               // 4563
                    (function(f, el, a) {                                                                              // 4564
                        setTimeout(function() {                                                                        // 4565
                            eve("raphael.anim.frame." + el.id, el, a);                                                 // 4566
                            eve("raphael.anim.finish." + el.id, el, a);                                                // 4567
                            R.is(f, "function") && f.call(el);                                                         // 4568
                        });                                                                                            // 4569
                    })(e.callback, that, e.anim);                                                                      // 4570
                    that.attr(to);                                                                                     // 4571
                    animationElements.splice(l--, 1);                                                                  // 4572
                    if (e.repeat > 1 && !e.next) {                                                                     // 4573
                        for (key in to) if (to[has](key)) {                                                            // 4574
                            init[key] = e.totalOrigin[key];                                                            // 4575
                        }                                                                                              // 4576
                        e.el.attr(init);                                                                               // 4577
                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);             // 4578
                    }                                                                                                  // 4579
                    if (e.next && !e.stop) {                                                                           // 4580
                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);                             // 4581
                    }                                                                                                  // 4582
                }                                                                                                      // 4583
            }                                                                                                          // 4584
            R.svg && that && that.paper && that.paper.safari();                                                        // 4585
            animationElements.length && requestAnimFrame(animation);                                                   // 4586
        },                                                                                                             // 4587
        upto255 = function (color) {                                                                                   // 4588
            return color > 255 ? 255 : color < 0 ? 0 : color;                                                          // 4589
        };                                                                                                             // 4590
    /*\
     * Element.animateWith                                                                                             // 4592
     [ method ]                                                                                                        // 4593
     **                                                                                                                // 4594
     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.      // 4595
     **                                                                                                                // 4596
     > Parameters                                                                                                      // 4597
     **                                                                                                                // 4598
     - el (object) element to sync with                                                                                // 4599
     - anim (object) animation to sync with                                                                            // 4600
     - params (object) #optional final attributes for the element, see also @Element.attr                              // 4601
     - ms (number) #optional number of milliseconds for animation to run                                               // 4602
     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`
     - callback (function) #optional callback function. Will be called at the end of animation.                        // 4604
     * or                                                                                                              // 4605
     - element (object) element to sync with                                                                           // 4606
     - anim (object) animation to sync with                                                                            // 4607
     - animation (object) #optional animation object, see @Raphael.animation                                           // 4608
     **                                                                                                                // 4609
     = (object) original element                                                                                       // 4610
    \*/                                                                                                                // 4611
    elproto.animateWith = function (el, anim, params, ms, easing, callback) {                                          // 4612
        var element = this;                                                                                            // 4613
        if (element.removed) {                                                                                         // 4614
            callback && callback.call(element);                                                                        // 4615
            return element;                                                                                            // 4616
        }                                                                                                              // 4617
        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),                      // 4618
            x, y;                                                                                                      // 4619
        runAnimation(a, element, a.percents[0], null, element.attr());                                                 // 4620
        for (var i = 0, ii = animationElements.length; i < ii; i++) {                                                  // 4621
            if (animationElements[i].anim == anim && animationElements[i].el == el) {                                  // 4622
                animationElements[ii - 1].start = animationElements[i].start;                                          // 4623
                break;                                                                                                 // 4624
            }                                                                                                          // 4625
        }                                                                                                              // 4626
        return element;                                                                                                // 4627
        //                                                                                                             // 4628
        //                                                                                                             // 4629
        // var a = params ? R.animation(params, ms, easing, callback) : anim,                                          // 4630
        //     status = element.status(anim);                                                                          // 4631
        // return this.animate(a).status(a, status * anim.ms / a.ms);                                                  // 4632
    };                                                                                                                 // 4633
    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {                                                      // 4634
        var cx = 3 * p1x,                                                                                              // 4635
            bx = 3 * (p2x - p1x) - cx,                                                                                 // 4636
            ax = 1 - cx - bx,                                                                                          // 4637
            cy = 3 * p1y,                                                                                              // 4638
            by = 3 * (p2y - p1y) - cy,                                                                                 // 4639
            ay = 1 - cy - by;                                                                                          // 4640
        function sampleCurveX(t) {                                                                                     // 4641
            return ((ax * t + bx) * t + cx) * t;                                                                       // 4642
        }                                                                                                              // 4643
        function solve(x, epsilon) {                                                                                   // 4644
            var t = solveCurveX(x, epsilon);                                                                           // 4645
            return ((ay * t + by) * t + cy) * t;                                                                       // 4646
        }                                                                                                              // 4647
        function solveCurveX(x, epsilon) {                                                                             // 4648
            var t0, t1, t2, x2, d2, i;                                                                                 // 4649
            for(t2 = x, i = 0; i < 8; i++) {                                                                           // 4650
                x2 = sampleCurveX(t2) - x;                                                                             // 4651
                if (abs(x2) < epsilon) {                                                                               // 4652
                    return t2;                                                                                         // 4653
                }                                                                                                      // 4654
                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;                                                                 // 4655
                if (abs(d2) < 1e-6) {                                                                                  // 4656
                    break;                                                                                             // 4657
                }                                                                                                      // 4658
                t2 = t2 - x2 / d2;                                                                                     // 4659
            }                                                                                                          // 4660
            t0 = 0;                                                                                                    // 4661
            t1 = 1;                                                                                                    // 4662
            t2 = x;                                                                                                    // 4663
            if (t2 < t0) {                                                                                             // 4664
                return t0;                                                                                             // 4665
            }                                                                                                          // 4666
            if (t2 > t1) {                                                                                             // 4667
                return t1;                                                                                             // 4668
            }                                                                                                          // 4669
            while (t0 < t1) {                                                                                          // 4670
                x2 = sampleCurveX(t2);                                                                                 // 4671
                if (abs(x2 - x) < epsilon) {                                                                           // 4672
                    return t2;                                                                                         // 4673
                }                                                                                                      // 4674
                if (x > x2) {                                                                                          // 4675
                    t0 = t2;                                                                                           // 4676
                } else {                                                                                               // 4677
                    t1 = t2;                                                                                           // 4678
                }                                                                                                      // 4679
                t2 = (t1 - t0) / 2 + t0;                                                                               // 4680
            }                                                                                                          // 4681
            return t2;                                                                                                 // 4682
        }                                                                                                              // 4683
        return solve(t, 1 / (200 * duration));                                                                         // 4684
    }                                                                                                                  // 4685
    elproto.onAnimation = function (f) {                                                                               // 4686
        f ? eve.on("raphael.anim.frame." + this.id, f) : eve.unbind("raphael.anim.frame." + this.id);                  // 4687
        return this;                                                                                                   // 4688
    };                                                                                                                 // 4689
    function Animation(anim, ms) {                                                                                     // 4690
        var percents = [],                                                                                             // 4691
            newAnim = {};                                                                                              // 4692
        this.ms = ms;                                                                                                  // 4693
        this.times = 1;                                                                                                // 4694
        if (anim) {                                                                                                    // 4695
            for (var attr in anim) if (anim[has](attr)) {                                                              // 4696
                newAnim[toFloat(attr)] = anim[attr];                                                                   // 4697
                percents.push(toFloat(attr));                                                                          // 4698
            }                                                                                                          // 4699
            percents.sort(sortByNumber);                                                                               // 4700
        }                                                                                                              // 4701
        this.anim = newAnim;                                                                                           // 4702
        this.top = percents[percents.length - 1];                                                                      // 4703
        this.percents = percents;                                                                                      // 4704
    }                                                                                                                  // 4705
    /*\
     * Animation.delay                                                                                                 // 4707
     [ method ]                                                                                                        // 4708
     **                                                                                                                // 4709
     * Creates a copy of existing animation object with given delay.                                                   // 4710
     **                                                                                                                // 4711
     > Parameters                                                                                                      // 4712
     **                                                                                                                // 4713
     - delay (number) number of ms to pass between animation start and actual animation                                // 4714
     **                                                                                                                // 4715
     = (object) new altered Animation object                                                                           // 4716
     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);                                                            // 4717
     | circle1.animate(anim); // run the given animation immediately                                                   // 4718
     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms                                       // 4719
    \*/                                                                                                                // 4720
    Animation.prototype.delay = function (delay) {                                                                     // 4721
        var a = new Animation(this.anim, this.ms);                                                                     // 4722
        a.times = this.times;                                                                                          // 4723
        a.del = +delay || 0;                                                                                           // 4724
        return a;                                                                                                      // 4725
    };                                                                                                                 // 4726
    /*\
     * Animation.repeat                                                                                                // 4728
     [ method ]                                                                                                        // 4729
     **                                                                                                                // 4730
     * Creates a copy of existing animation object with given repetition.                                              // 4731
     **                                                                                                                // 4732
     > Parameters                                                                                                      // 4733
     **                                                                                                                // 4734
     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`                          // 4735
     **                                                                                                                // 4736
     = (object) new altered Animation object                                                                           // 4737
    \*/                                                                                                                // 4738
    Animation.prototype.repeat = function (times) {                                                                    // 4739
        var a = new Animation(this.anim, this.ms);                                                                     // 4740
        a.del = this.del;                                                                                              // 4741
        a.times = math.floor(mmax(times, 0)) || 1;                                                                     // 4742
        return a;                                                                                                      // 4743
    };                                                                                                                 // 4744
    function runAnimation(anim, element, percent, status, totalOrigin, times) {                                        // 4745
        percent = toFloat(percent);                                                                                    // 4746
        var params,                                                                                                    // 4747
            isInAnim,                                                                                                  // 4748
            isInAnimSet,                                                                                               // 4749
            percents = [],                                                                                             // 4750
            next,                                                                                                      // 4751
            prev,                                                                                                      // 4752
            timestamp,                                                                                                 // 4753
            ms = anim.ms,                                                                                              // 4754
            from = {},                                                                                                 // 4755
            to = {},                                                                                                   // 4756
            diff = {};                                                                                                 // 4757
        if (status) {                                                                                                  // 4758
            for (i = 0, ii = animationElements.length; i < ii; i++) {                                                  // 4759
                var e = animationElements[i];                                                                          // 4760
                if (e.el.id == element.id && e.anim == anim) {                                                         // 4761
                    if (e.percent != percent) {                                                                        // 4762
                        animationElements.splice(i, 1);                                                                // 4763
                        isInAnimSet = 1;                                                                               // 4764
                    } else {                                                                                           // 4765
                        isInAnim = e;                                                                                  // 4766
                    }                                                                                                  // 4767
                    element.attr(e.totalOrigin);                                                                       // 4768
                    break;                                                                                             // 4769
                }                                                                                                      // 4770
            }                                                                                                          // 4771
        } else {                                                                                                       // 4772
            status = +to; // NaN                                                                                       // 4773
        }                                                                                                              // 4774
        for (var i = 0, ii = anim.percents.length; i < ii; i++) {                                                      // 4775
            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {                                 // 4776
                percent = anim.percents[i];                                                                            // 4777
                prev = anim.percents[i - 1] || 0;                                                                      // 4778
                ms = ms / anim.top * (percent - prev);                                                                 // 4779
                next = anim.percents[i + 1];                                                                           // 4780
                params = anim.anim[percent];                                                                           // 4781
                break;                                                                                                 // 4782
            } else if (status) {                                                                                       // 4783
                element.attr(anim.anim[anim.percents[i]]);                                                             // 4784
            }                                                                                                          // 4785
        }                                                                                                              // 4786
        if (!params) {                                                                                                 // 4787
            return;                                                                                                    // 4788
        }                                                                                                              // 4789
        if (!isInAnim) {                                                                                               // 4790
            for (var attr in params) if (params[has](attr)) {                                                          // 4791
                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {                      // 4792
                    from[attr] = element.attr(attr);                                                                   // 4793
                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);                                       // 4794
                    to[attr] = params[attr];                                                                           // 4795
                    switch (availableAnimAttrs[attr]) {                                                                // 4796
                        case nu:                                                                                       // 4797
                            diff[attr] = (to[attr] - from[attr]) / ms;                                                 // 4798
                            break;                                                                                     // 4799
                        case "colour":                                                                                 // 4800
                            from[attr] = R.getRGB(from[attr]);                                                         // 4801
                            var toColour = R.getRGB(to[attr]);                                                         // 4802
                            diff[attr] = {                                                                             // 4803
                                r: (toColour.r - from[attr].r) / ms,                                                   // 4804
                                g: (toColour.g - from[attr].g) / ms,                                                   // 4805
                                b: (toColour.b - from[attr].b) / ms                                                    // 4806
                            };                                                                                         // 4807
                            break;                                                                                     // 4808
                        case "path":                                                                                   // 4809
                            var pathes = path2curve(from[attr], to[attr]),                                             // 4810
                                toPath = pathes[1];                                                                    // 4811
                            from[attr] = pathes[0];                                                                    // 4812
                            diff[attr] = [];                                                                           // 4813
                            for (i = 0, ii = from[attr].length; i < ii; i++) {                                         // 4814
                                diff[attr][i] = [0];                                                                   // 4815
                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {                              // 4816
                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;                         // 4817
                                }                                                                                      // 4818
                            }                                                                                          // 4819
                            break;                                                                                     // 4820
                        case "transform":                                                                              // 4821
                            var _ = element._,                                                                         // 4822
                                eq = equaliseTransform(_[attr], to[attr]);                                             // 4823
                            if (eq) {                                                                                  // 4824
                                from[attr] = eq.from;                                                                  // 4825
                                to[attr] = eq.to;                                                                      // 4826
                                diff[attr] = [];                                                                       // 4827
                                diff[attr].real = true;                                                                // 4828
                                for (i = 0, ii = from[attr].length; i < ii; i++) {                                     // 4829
                                    diff[attr][i] = [from[attr][i][0]];                                                // 4830
                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {                              // 4831
                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;                   // 4832
                                    }                                                                                  // 4833
                                }                                                                                      // 4834
                            } else {                                                                                   // 4835
                                var m = (element.matrix || new Matrix),                                                // 4836
                                    to2 = {                                                                            // 4837
                                        _: {transform: _.transform},                                                   // 4838
                                        getBBox: function () {                                                         // 4839
                                            return element.getBBox(1);                                                 // 4840
                                        }                                                                              // 4841
                                    };                                                                                 // 4842
                                from[attr] = [                                                                         // 4843
                                    m.a,                                                                               // 4844
                                    m.b,                                                                               // 4845
                                    m.c,                                                                               // 4846
                                    m.d,                                                                               // 4847
                                    m.e,                                                                               // 4848
                                    m.f                                                                                // 4849
                                ];                                                                                     // 4850
                                extractTransform(to2, to[attr]);                                                       // 4851
                                to[attr] = to2._.transform;                                                            // 4852
                                diff[attr] = [                                                                         // 4853
                                    (to2.matrix.a - m.a) / ms,                                                         // 4854
                                    (to2.matrix.b - m.b) / ms,                                                         // 4855
                                    (to2.matrix.c - m.c) / ms,                                                         // 4856
                                    (to2.matrix.d - m.d) / ms,                                                         // 4857
                                    (to2.matrix.e - m.e) / ms,                                                         // 4858
                                    (to2.matrix.f - m.f) / ms                                                          // 4859
                                ];                                                                                     // 4860
                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];                                       // 4861
                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};               // 4862
                                // extractTransform(to2, to[attr]);                                                    // 4863
                                // diff[attr] = [                                                                      // 4864
                                //     (to2._.sx - _.sx) / ms,                                                         // 4865
                                //     (to2._.sy - _.sy) / ms,                                                         // 4866
                                //     (to2._.deg - _.deg) / ms,                                                       // 4867
                                //     (to2._.dx - _.dx) / ms,                                                         // 4868
                                //     (to2._.dy - _.dy) / ms                                                          // 4869
                                // ];                                                                                  // 4870
                            }                                                                                          // 4871
                            break;                                                                                     // 4872
                        case "csv":                                                                                    // 4873
                            var values = Str(params[attr])[split](separator),                                          // 4874
                                from2 = Str(from[attr])[split](separator);                                             // 4875
                            if (attr == "clip-rect") {                                                                 // 4876
                                from[attr] = from2;                                                                    // 4877
                                diff[attr] = [];                                                                       // 4878
                                i = from2.length;                                                                      // 4879
                                while (i--) {                                                                          // 4880
                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;                                  // 4881
                                }                                                                                      // 4882
                            }                                                                                          // 4883
                            to[attr] = values;                                                                         // 4884
                            break;                                                                                     // 4885
                        default:                                                                                       // 4886
                            values = [][concat](params[attr]);                                                         // 4887
                            from2 = [][concat](from[attr]);                                                            // 4888
                            diff[attr] = [];                                                                           // 4889
                            i = element.paper.customAttributes[attr].length;                                           // 4890
                            while (i--) {                                                                              // 4891
                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;                             // 4892
                            }                                                                                          // 4893
                            break;                                                                                     // 4894
                    }                                                                                                  // 4895
                }                                                                                                      // 4896
            }                                                                                                          // 4897
            var easing = params.easing,                                                                                // 4898
                easyeasy = R.easing_formulas[easing];                                                                  // 4899
            if (!easyeasy) {                                                                                           // 4900
                easyeasy = Str(easing).match(bezierrg);                                                                // 4901
                if (easyeasy && easyeasy.length == 5) {                                                                // 4902
                    var curve = easyeasy;                                                                              // 4903
                    easyeasy = function (t) {                                                                          // 4904
                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);                   // 4905
                    };                                                                                                 // 4906
                } else {                                                                                               // 4907
                    easyeasy = pipe;                                                                                   // 4908
                }                                                                                                      // 4909
            }                                                                                                          // 4910
            timestamp = params.start || anim.start || +new Date;                                                       // 4911
            e = {                                                                                                      // 4912
                anim: anim,                                                                                            // 4913
                percent: percent,                                                                                      // 4914
                timestamp: timestamp,                                                                                  // 4915
                start: timestamp + (anim.del || 0),                                                                    // 4916
                status: 0,                                                                                             // 4917
                initstatus: status || 0,                                                                               // 4918
                stop: false,                                                                                           // 4919
                ms: ms,                                                                                                // 4920
                easing: easyeasy,                                                                                      // 4921
                from: from,                                                                                            // 4922
                diff: diff,                                                                                            // 4923
                to: to,                                                                                                // 4924
                el: element,                                                                                           // 4925
                callback: params.callback,                                                                             // 4926
                prev: prev,                                                                                            // 4927
                next: next,                                                                                            // 4928
                repeat: times || anim.times,                                                                           // 4929
                origin: element.attr(),                                                                                // 4930
                totalOrigin: totalOrigin                                                                               // 4931
            };                                                                                                         // 4932
            animationElements.push(e);                                                                                 // 4933
            if (status && !isInAnim && !isInAnimSet) {                                                                 // 4934
                e.stop = true;                                                                                         // 4935
                e.start = new Date - ms * status;                                                                      // 4936
                if (animationElements.length == 1) {                                                                   // 4937
                    return animation();                                                                                // 4938
                }                                                                                                      // 4939
            }                                                                                                          // 4940
            if (isInAnimSet) {                                                                                         // 4941
                e.start = new Date - e.ms * status;                                                                    // 4942
            }                                                                                                          // 4943
            animationElements.length == 1 && requestAnimFrame(animation);                                              // 4944
        } else {                                                                                                       // 4945
            isInAnim.initstatus = status;                                                                              // 4946
            isInAnim.start = new Date - isInAnim.ms * status;                                                          // 4947
        }                                                                                                              // 4948
        eve("raphael.anim.start." + element.id, element, anim);                                                        // 4949
    }                                                                                                                  // 4950
    /*\
     * Raphael.animation                                                                                               // 4952
     [ method ]                                                                                                        // 4953
     **                                                                                                                // 4954
     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.         // 4955
     * See also @Animation.delay and @Animation.repeat methods.                                                        // 4956
     **                                                                                                                // 4957
     > Parameters                                                                                                      // 4958
     **                                                                                                                // 4959
     - params (object) final attributes for the element, see also @Element.attr                                        // 4960
     - ms (number) number of milliseconds for animation to run                                                         // 4961
     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`
     - callback (function) #optional callback function. Will be called at the end of animation.                        // 4963
     **                                                                                                                // 4964
     = (object) @Animation                                                                                             // 4965
    \*/                                                                                                                // 4966
    R.animation = function (params, ms, easing, callback) {                                                            // 4967
        if (params instanceof Animation) {                                                                             // 4968
            return params;                                                                                             // 4969
        }                                                                                                              // 4970
        if (R.is(easing, "function") || !easing) {                                                                     // 4971
            callback = callback || easing || null;                                                                     // 4972
            easing = null;                                                                                             // 4973
        }                                                                                                              // 4974
        params = Object(params);                                                                                       // 4975
        ms = +ms || 0;                                                                                                 // 4976
        var p = {},                                                                                                    // 4977
            json,                                                                                                      // 4978
            attr;                                                                                                      // 4979
        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + "%" != attr) {          // 4980
            json = true;                                                                                               // 4981
            p[attr] = params[attr];                                                                                    // 4982
        }                                                                                                              // 4983
        if (!json) {                                                                                                   // 4984
            return new Animation(params, ms);                                                                          // 4985
        } else {                                                                                                       // 4986
            easing && (p.easing = easing);                                                                             // 4987
            callback && (p.callback = callback);                                                                       // 4988
            return new Animation({100: p}, ms);                                                                        // 4989
        }                                                                                                              // 4990
    };                                                                                                                 // 4991
    /*\
     * Element.animate                                                                                                 // 4993
     [ method ]                                                                                                        // 4994
     **                                                                                                                // 4995
     * Creates and starts animation for given element.                                                                 // 4996
     **                                                                                                                // 4997
     > Parameters                                                                                                      // 4998
     **                                                                                                                // 4999
     - params (object) final attributes for the element, see also @Element.attr                                        // 5000
     - ms (number) number of milliseconds for animation to run                                                         // 5001
     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`
     - callback (function) #optional callback function. Will be called at the end of animation.                        // 5003
     * or                                                                                                              // 5004
     - animation (object) animation object, see @Raphael.animation                                                     // 5005
     **                                                                                                                // 5006
     = (object) original element                                                                                       // 5007
    \*/                                                                                                                // 5008
    elproto.animate = function (params, ms, easing, callback) {                                                        // 5009
        var element = this;                                                                                            // 5010
        if (element.removed) {                                                                                         // 5011
            callback && callback.call(element);                                                                        // 5012
            return element;                                                                                            // 5013
        }                                                                                                              // 5014
        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);                   // 5015
        runAnimation(anim, element, anim.percents[0], null, element.attr());                                           // 5016
        return element;                                                                                                // 5017
    };                                                                                                                 // 5018
    /*\
     * Element.setTime                                                                                                 // 5020
     [ method ]                                                                                                        // 5021
     **                                                                                                                // 5022
     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.                 // 5023
     **                                                                                                                // 5024
     > Parameters                                                                                                      // 5025
     **                                                                                                                // 5026
     - anim (object) animation object                                                                                  // 5027
     - value (number) number of milliseconds from the beginning of the animation                                       // 5028
     **                                                                                                                // 5029
     = (object) original element if `value` is specified                                                               // 5030
     * Note, that during animation following events are triggered:                                                     // 5031
     *                                                                                                                 // 5032
     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.      // 5033
    \*/                                                                                                                // 5034
    elproto.setTime = function (anim, value) {                                                                         // 5035
        if (anim && value != null) {                                                                                   // 5036
            this.status(anim, mmin(value, anim.ms) / anim.ms);                                                         // 5037
        }                                                                                                              // 5038
        return this;                                                                                                   // 5039
    };                                                                                                                 // 5040
    /*\
     * Element.status                                                                                                  // 5042
     [ method ]                                                                                                        // 5043
     **                                                                                                                // 5044
     * Gets or sets the status of animation of the element.                                                            // 5045
     **                                                                                                                // 5046
     > Parameters                                                                                                      // 5047
     **                                                                                                                // 5048
     - anim (object) #optional animation object                                                                        // 5049
     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.
     **                                                                                                                // 5051
     = (number) status                                                                                                 // 5052
     * or                                                                                                              // 5053
     = (array) status if `anim` is not specified. Array of objects in format:                                          // 5054
     o {                                                                                                               // 5055
     o     anim: (object) animation object                                                                             // 5056
     o     status: (number) status                                                                                     // 5057
     o }                                                                                                               // 5058
     * or                                                                                                              // 5059
     = (object) original element if `value` is specified                                                               // 5060
    \*/                                                                                                                // 5061
    elproto.status = function (anim, value) {                                                                          // 5062
        var out = [],                                                                                                  // 5063
            i = 0,                                                                                                     // 5064
            len,                                                                                                       // 5065
            e;                                                                                                         // 5066
        if (value != null) {                                                                                           // 5067
            runAnimation(anim, this, -1, mmin(value, 1));                                                              // 5068
            return this;                                                                                               // 5069
        } else {                                                                                                       // 5070
            len = animationElements.length;                                                                            // 5071
            for (; i < len; i++) {                                                                                     // 5072
                e = animationElements[i];                                                                              // 5073
                if (e.el.id == this.id && (!anim || e.anim == anim)) {                                                 // 5074
                    if (anim) {                                                                                        // 5075
                        return e.status;                                                                               // 5076
                    }                                                                                                  // 5077
                    out.push({                                                                                         // 5078
                        anim: e.anim,                                                                                  // 5079
                        status: e.status                                                                               // 5080
                    });                                                                                                // 5081
                }                                                                                                      // 5082
            }                                                                                                          // 5083
            if (anim) {                                                                                                // 5084
                return 0;                                                                                              // 5085
            }                                                                                                          // 5086
            return out;                                                                                                // 5087
        }                                                                                                              // 5088
    };                                                                                                                 // 5089
    /*\
     * Element.pause                                                                                                   // 5091
     [ method ]                                                                                                        // 5092
     **                                                                                                                // 5093
     * Stops animation of the element with ability to resume it later on.                                              // 5094
     **                                                                                                                // 5095
     > Parameters                                                                                                      // 5096
     **                                                                                                                // 5097
     - anim (object) #optional animation object                                                                        // 5098
     **                                                                                                                // 5099
     = (object) original element                                                                                       // 5100
    \*/                                                                                                                // 5101
    elproto.pause = function (anim) {                                                                                  // 5102
        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {
            if (eve("raphael.anim.pause." + this.id, this, animationElements[i].anim) !== false) {                     // 5104
                animationElements[i].paused = true;                                                                    // 5105
            }                                                                                                          // 5106
        }                                                                                                              // 5107
        return this;                                                                                                   // 5108
    };                                                                                                                 // 5109
    /*\
     * Element.resume                                                                                                  // 5111
     [ method ]                                                                                                        // 5112
     **                                                                                                                // 5113
     * Resumes animation if it was paused with @Element.pause method.                                                  // 5114
     **                                                                                                                // 5115
     > Parameters                                                                                                      // 5116
     **                                                                                                                // 5117
     - anim (object) #optional animation object                                                                        // 5118
     **                                                                                                                // 5119
     = (object) original element                                                                                       // 5120
    \*/                                                                                                                // 5121
    elproto.resume = function (anim) {                                                                                 // 5122
        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {
            var e = animationElements[i];                                                                              // 5124
            if (eve("raphael.anim.resume." + this.id, this, e.anim) !== false) {                                       // 5125
                delete e.paused;                                                                                       // 5126
                this.status(e.anim, e.status);                                                                         // 5127
            }                                                                                                          // 5128
        }                                                                                                              // 5129
        return this;                                                                                                   // 5130
    };                                                                                                                 // 5131
    /*\
     * Element.stop                                                                                                    // 5133
     [ method ]                                                                                                        // 5134
     **                                                                                                                // 5135
     * Stops animation of the element.                                                                                 // 5136
     **                                                                                                                // 5137
     > Parameters                                                                                                      // 5138
     **                                                                                                                // 5139
     - anim (object) #optional animation object                                                                        // 5140
     **                                                                                                                // 5141
     = (object) original element                                                                                       // 5142
    \*/                                                                                                                // 5143
    elproto.stop = function (anim) {                                                                                   // 5144
        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {
            if (eve("raphael.anim.stop." + this.id, this, animationElements[i].anim) !== false) {                      // 5146
                animationElements.splice(i--, 1);                                                                      // 5147
            }                                                                                                          // 5148
        }                                                                                                              // 5149
        return this;                                                                                                   // 5150
    };                                                                                                                 // 5151
    function stopAnimation(paper) {                                                                                    // 5152
        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {               // 5153
            animationElements.splice(i--, 1);                                                                          // 5154
        }                                                                                                              // 5155
    }                                                                                                                  // 5156
    eve.on("raphael.remove", stopAnimation);                                                                           // 5157
    eve.on("raphael.clear", stopAnimation);                                                                            // 5158
    elproto.toString = function () {                                                                                   // 5159
        return "Rapha\xebl\u2019s object";                                                                             // 5160
    };                                                                                                                 // 5161
                                                                                                                       // 5162
    // Set                                                                                                             // 5163
    var Set = function (items) {                                                                                       // 5164
        this.items = [];                                                                                               // 5165
        this.length = 0;                                                                                               // 5166
        this.type = "set";                                                                                             // 5167
        if (items) {                                                                                                   // 5168
            for (var i = 0, ii = items.length; i < ii; i++) {                                                          // 5169
                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {        // 5170
                    this[this.items.length] = this.items[this.items.length] = items[i];                                // 5171
                    this.length++;                                                                                     // 5172
                }                                                                                                      // 5173
            }                                                                                                          // 5174
        }                                                                                                              // 5175
    },                                                                                                                 // 5176
    setproto = Set.prototype;                                                                                          // 5177
    /*\
     * Set.push                                                                                                        // 5179
     [ method ]                                                                                                        // 5180
     **                                                                                                                // 5181
     * Adds each argument to the current set.                                                                          // 5182
     = (object) original element                                                                                       // 5183
    \*/                                                                                                                // 5184
    setproto.push = function () {                                                                                      // 5185
        var item,                                                                                                      // 5186
            len;                                                                                                       // 5187
        for (var i = 0, ii = arguments.length; i < ii; i++) {                                                          // 5188
            item = arguments[i];                                                                                       // 5189
            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {                        // 5190
                len = this.items.length;                                                                               // 5191
                this[len] = this.items[len] = item;                                                                    // 5192
                this.length++;                                                                                         // 5193
            }                                                                                                          // 5194
        }                                                                                                              // 5195
        return this;                                                                                                   // 5196
    };                                                                                                                 // 5197
    /*\
     * Set.pop                                                                                                         // 5199
     [ method ]                                                                                                        // 5200
     **                                                                                                                // 5201
     * Removes last element and returns it.                                                                            // 5202
     = (object) element                                                                                                // 5203
    \*/                                                                                                                // 5204
    setproto.pop = function () {                                                                                       // 5205
        this.length && delete this[this.length--];                                                                     // 5206
        return this.items.pop();                                                                                       // 5207
    };                                                                                                                 // 5208
    /*\
     * Set.forEach                                                                                                     // 5210
     [ method ]                                                                                                        // 5211
     **                                                                                                                // 5212
     * Executes given function for each element in the set.                                                            // 5213
     *                                                                                                                 // 5214
     * If function returns `false` it will stop loop running.                                                          // 5215
     **                                                                                                                // 5216
     > Parameters                                                                                                      // 5217
     **                                                                                                                // 5218
     - callback (function) function to run                                                                             // 5219
     - thisArg (object) context object for the callback                                                                // 5220
     = (object) Set object                                                                                             // 5221
    \*/                                                                                                                // 5222
    setproto.forEach = function (callback, thisArg) {                                                                  // 5223
        for (var i = 0, ii = this.items.length; i < ii; i++) {                                                         // 5224
            if (callback.call(thisArg, this.items[i], i) === false) {                                                  // 5225
                return this;                                                                                           // 5226
            }                                                                                                          // 5227
        }                                                                                                              // 5228
        return this;                                                                                                   // 5229
    };                                                                                                                 // 5230
    for (var method in elproto) if (elproto[has](method)) {                                                            // 5231
        setproto[method] = (function (methodname) {                                                                    // 5232
            return function () {                                                                                       // 5233
                var arg = arguments;                                                                                   // 5234
                return this.forEach(function (el) {                                                                    // 5235
                    el[methodname][apply](el, arg);                                                                    // 5236
                });                                                                                                    // 5237
            };                                                                                                         // 5238
        })(method);                                                                                                    // 5239
    }                                                                                                                  // 5240
    setproto.attr = function (name, value) {                                                                           // 5241
        if (name && R.is(name, array) && R.is(name[0], "object")) {                                                    // 5242
            for (var j = 0, jj = name.length; j < jj; j++) {                                                           // 5243
                this.items[j].attr(name[j]);                                                                           // 5244
            }                                                                                                          // 5245
        } else {                                                                                                       // 5246
            for (var i = 0, ii = this.items.length; i < ii; i++) {                                                     // 5247
                this.items[i].attr(name, value);                                                                       // 5248
            }                                                                                                          // 5249
        }                                                                                                              // 5250
        return this;                                                                                                   // 5251
    };                                                                                                                 // 5252
    /*\
     * Set.clear                                                                                                       // 5254
     [ method ]                                                                                                        // 5255
     **                                                                                                                // 5256
     * Removeds all elements from the set                                                                              // 5257
    \*/                                                                                                                // 5258
    setproto.clear = function () {                                                                                     // 5259
        while (this.length) {                                                                                          // 5260
            this.pop();                                                                                                // 5261
        }                                                                                                              // 5262
    };                                                                                                                 // 5263
    /*\
     * Set.splice                                                                                                      // 5265
     [ method ]                                                                                                        // 5266
     **                                                                                                                // 5267
     * Removes given element from the set                                                                              // 5268
     **                                                                                                                // 5269
     > Parameters                                                                                                      // 5270
     **                                                                                                                // 5271
     - index (number) position of the deletion                                                                         // 5272
     - count (number) number of element to remove                                                                      // 5273
     - insertion… (object) #optional elements to insert                                                                // 5274
     = (object) set elements that were deleted                                                                         // 5275
    \*/                                                                                                                // 5276
    setproto.splice = function (index, count, insertion) {                                                             // 5277
        index = index < 0 ? mmax(this.length + index, 0) : index;                                                      // 5278
        count = mmax(0, mmin(this.length - index, count));                                                             // 5279
        var tail = [],                                                                                                 // 5280
            todel = [],                                                                                                // 5281
            args = [],                                                                                                 // 5282
            i;                                                                                                         // 5283
        for (i = 2; i < arguments.length; i++) {                                                                       // 5284
            args.push(arguments[i]);                                                                                   // 5285
        }                                                                                                              // 5286
        for (i = 0; i < count; i++) {                                                                                  // 5287
            todel.push(this[index + i]);                                                                               // 5288
        }                                                                                                              // 5289
        for (; i < this.length - index; i++) {                                                                         // 5290
            tail.push(this[index + i]);                                                                                // 5291
        }                                                                                                              // 5292
        var arglen = args.length;                                                                                      // 5293
        for (i = 0; i < arglen + tail.length; i++) {                                                                   // 5294
            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];                         // 5295
        }                                                                                                              // 5296
        i = this.items.length = this.length -= count - arglen;                                                         // 5297
        while (this[i]) {                                                                                              // 5298
            delete this[i++];                                                                                          // 5299
        }                                                                                                              // 5300
        return new Set(todel);                                                                                         // 5301
    };                                                                                                                 // 5302
    /*\
     * Set.exclude                                                                                                     // 5304
     [ method ]                                                                                                        // 5305
     **                                                                                                                // 5306
     * Removes given element from the set                                                                              // 5307
     **                                                                                                                // 5308
     > Parameters                                                                                                      // 5309
     **                                                                                                                // 5310
     - element (object) element to remove                                                                              // 5311
     = (boolean) `true` if object was found & removed from the set                                                     // 5312
    \*/                                                                                                                // 5313
    setproto.exclude = function (el) {                                                                                 // 5314
        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {                                            // 5315
            this.splice(i, 1);                                                                                         // 5316
            return true;                                                                                               // 5317
        }                                                                                                              // 5318
    };                                                                                                                 // 5319
    setproto.animate = function (params, ms, easing, callback) {                                                       // 5320
        (R.is(easing, "function") || !easing) && (callback = easing || null);                                          // 5321
        var len = this.items.length,                                                                                   // 5322
            i = len,                                                                                                   // 5323
            item,                                                                                                      // 5324
            set = this,                                                                                                // 5325
            collector;                                                                                                 // 5326
        if (!len) {                                                                                                    // 5327
            return this;                                                                                               // 5328
        }                                                                                                              // 5329
        callback && (collector = function () {                                                                         // 5330
            !--len && callback.call(set);                                                                              // 5331
        });                                                                                                            // 5332
        easing = R.is(easing, string) ? easing : collector;                                                            // 5333
        var anim = R.animation(params, ms, easing, collector);                                                         // 5334
        item = this.items[--i].animate(anim);                                                                          // 5335
        while (i--) {                                                                                                  // 5336
            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);                    // 5337
            (this.items[i] && !this.items[i].removed) || len--;                                                        // 5338
        }                                                                                                              // 5339
        return this;                                                                                                   // 5340
    };                                                                                                                 // 5341
    setproto.insertAfter = function (el) {                                                                             // 5342
        var i = this.items.length;                                                                                     // 5343
        while (i--) {                                                                                                  // 5344
            this.items[i].insertAfter(el);                                                                             // 5345
        }                                                                                                              // 5346
        return this;                                                                                                   // 5347
    };                                                                                                                 // 5348
    setproto.getBBox = function () {                                                                                   // 5349
        var x = [],                                                                                                    // 5350
            y = [],                                                                                                    // 5351
            x2 = [],                                                                                                   // 5352
            y2 = [];                                                                                                   // 5353
        for (var i = this.items.length; i--;) if (!this.items[i].removed) {                                            // 5354
            var box = this.items[i].getBBox();                                                                         // 5355
            x.push(box.x);                                                                                             // 5356
            y.push(box.y);                                                                                             // 5357
            x2.push(box.x + box.width);                                                                                // 5358
            y2.push(box.y + box.height);                                                                               // 5359
        }                                                                                                              // 5360
        x = mmin[apply](0, x);                                                                                         // 5361
        y = mmin[apply](0, y);                                                                                         // 5362
        x2 = mmax[apply](0, x2);                                                                                       // 5363
        y2 = mmax[apply](0, y2);                                                                                       // 5364
        return {                                                                                                       // 5365
            x: x,                                                                                                      // 5366
            y: y,                                                                                                      // 5367
            x2: x2,                                                                                                    // 5368
            y2: y2,                                                                                                    // 5369
            width: x2 - x,                                                                                             // 5370
            height: y2 - y                                                                                             // 5371
        };                                                                                                             // 5372
    };                                                                                                                 // 5373
    setproto.clone = function (s) {                                                                                    // 5374
        s = this.paper.set();                                                                                          // 5375
        for (var i = 0, ii = this.items.length; i < ii; i++) {                                                         // 5376
            s.push(this.items[i].clone());                                                                             // 5377
        }                                                                                                              // 5378
        return s;                                                                                                      // 5379
    };                                                                                                                 // 5380
    setproto.toString = function () {                                                                                  // 5381
        return "Rapha\xebl\u2018s set";                                                                                // 5382
    };                                                                                                                 // 5383
                                                                                                                       // 5384
    setproto.glow = function(glowConfig) {                                                                             // 5385
        var ret = this.paper.set();                                                                                    // 5386
        this.forEach(function(shape, index){                                                                           // 5387
            var g = shape.glow(glowConfig);                                                                            // 5388
            if(g != null){                                                                                             // 5389
                g.forEach(function(shape2, index2){                                                                    // 5390
                    ret.push(shape2);                                                                                  // 5391
                });                                                                                                    // 5392
            }                                                                                                          // 5393
        });                                                                                                            // 5394
        return ret;                                                                                                    // 5395
    };                                                                                                                 // 5396
                                                                                                                       // 5397
                                                                                                                       // 5398
    /*\
     * Set.isPointInside                                                                                               // 5400
     [ method ]                                                                                                        // 5401
     **                                                                                                                // 5402
     * Determine if given point is inside this set’s elements                                                          // 5403
     **                                                                                                                // 5404
     > Parameters                                                                                                      // 5405
     **                                                                                                                // 5406
     - x (number) x coordinate of the point                                                                            // 5407
     - y (number) y coordinate of the point                                                                            // 5408
     = (boolean) `true` if point is inside any of the set's elements                                                   // 5409
     \*/                                                                                                               // 5410
    setproto.isPointInside = function (x, y) {                                                                         // 5411
        var isPointInside = false;                                                                                     // 5412
        this.forEach(function (el) {                                                                                   // 5413
            if (el.isPointInside(x, y)) {                                                                              // 5414
                isPointInside = true;                                                                                  // 5415
                return false; // stop loop                                                                             // 5416
            }                                                                                                          // 5417
        });                                                                                                            // 5418
        return isPointInside;                                                                                          // 5419
    };                                                                                                                 // 5420
                                                                                                                       // 5421
    /*\
     * Raphael.registerFont                                                                                            // 5423
     [ method ]                                                                                                        // 5424
     **                                                                                                                // 5425
     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.
     * Returns original parameter, so it could be used with chaining.                                                  // 5427
     # <a href="http://wiki.github.com/sorccu/cufon/about">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>
     **                                                                                                                // 5429
     > Parameters                                                                                                      // 5430
     **                                                                                                                // 5431
     - font (object) the font to register                                                                              // 5432
     = (object) the font you passed in                                                                                 // 5433
     > Usage                                                                                                           // 5434
     | Cufon.registerFont(Raphael.registerFont({…}));                                                                  // 5435
    \*/                                                                                                                // 5436
    R.registerFont = function (font) {                                                                                 // 5437
        if (!font.face) {                                                                                              // 5438
            return font;                                                                                               // 5439
        }                                                                                                              // 5440
        this.fonts = this.fonts || {};                                                                                 // 5441
        var fontcopy = {                                                                                               // 5442
                w: font.w,                                                                                             // 5443
                face: {},                                                                                              // 5444
                glyphs: {}                                                                                             // 5445
            },                                                                                                         // 5446
            family = font.face["font-family"];                                                                         // 5447
        for (var prop in font.face) if (font.face[has](prop)) {                                                        // 5448
            fontcopy.face[prop] = font.face[prop];                                                                     // 5449
        }                                                                                                              // 5450
        if (this.fonts[family]) {                                                                                      // 5451
            this.fonts[family].push(fontcopy);                                                                         // 5452
        } else {                                                                                                       // 5453
            this.fonts[family] = [fontcopy];                                                                           // 5454
        }                                                                                                              // 5455
        if (!font.svg) {                                                                                               // 5456
            fontcopy.face["units-per-em"] = toInt(font.face["units-per-em"], 10);                                      // 5457
            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {                                              // 5458
                var path = font.glyphs[glyph];                                                                         // 5459
                fontcopy.glyphs[glyph] = {                                                                             // 5460
                    w: path.w,                                                                                         // 5461
                    k: {},                                                                                             // 5462
                    d: path.d && "M" + path.d.replace(/[mlcxtrv]/g, function (command) {                               // 5463
                            return {l: "L", c: "C", x: "z", t: "m", r: "l", v: "c"}[command] || "M";                   // 5464
                        }) + "z"                                                                                       // 5465
                };                                                                                                     // 5466
                if (path.k) {                                                                                          // 5467
                    for (var k in path.k) if (path[has](k)) {                                                          // 5468
                        fontcopy.glyphs[glyph].k[k] = path.k[k];                                                       // 5469
                    }                                                                                                  // 5470
                }                                                                                                      // 5471
            }                                                                                                          // 5472
        }                                                                                                              // 5473
        return font;                                                                                                   // 5474
    };                                                                                                                 // 5475
    /*\
     * Paper.getFont                                                                                                   // 5477
     [ method ]                                                                                                        // 5478
     **                                                                                                                // 5479
     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.
     **                                                                                                                // 5481
     > Parameters                                                                                                      // 5482
     **                                                                                                                // 5483
     - family (string) font family name or any word from it                                                            // 5484
     - weight (string) #optional font weight                                                                           // 5485
     - style (string) #optional font style                                                                             // 5486
     - stretch (string) #optional font stretch                                                                         // 5487
     = (object) the font object                                                                                        // 5488
     > Usage                                                                                                           // 5489
     | paper.print(100, 100, "Test string", paper.getFont("Times", 800), 30);                                          // 5490
    \*/                                                                                                                // 5491
    paperproto.getFont = function (family, weight, style, stretch) {                                                   // 5492
        stretch = stretch || "normal";                                                                                 // 5493
        style = style || "normal";                                                                                     // 5494
        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;                        // 5495
        if (!R.fonts) {                                                                                                // 5496
            return;                                                                                                    // 5497
        }                                                                                                              // 5498
        var font = R.fonts[family];                                                                                    // 5499
        if (!font) {                                                                                                   // 5500
            var name = new RegExp("(^|\\s)" + family.replace(/[^\w\d\s+!~.:_-]/g, E) + "(\\s|$)", "i");                // 5501
            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {                                                // 5502
                if (name.test(fontName)) {                                                                             // 5503
                    font = R.fonts[fontName];                                                                          // 5504
                    break;                                                                                             // 5505
                }                                                                                                      // 5506
            }                                                                                                          // 5507
        }                                                                                                              // 5508
        var thefont;                                                                                                   // 5509
        if (font) {                                                                                                    // 5510
            for (var i = 0, ii = font.length; i < ii; i++) {                                                           // 5511
                thefont = font[i];                                                                                     // 5512
                if (thefont.face["font-weight"] == weight && (thefont.face["font-style"] == style || !thefont.face["font-style"]) && thefont.face["font-stretch"] == stretch) {
                    break;                                                                                             // 5514
                }                                                                                                      // 5515
            }                                                                                                          // 5516
        }                                                                                                              // 5517
        return thefont;                                                                                                // 5518
    };                                                                                                                 // 5519
    /*\
     * Paper.print                                                                                                     // 5521
     [ method ]                                                                                                        // 5522
     **                                                                                                                // 5523
     * Creates path that represent given text written using given font at given position with given size.              // 5524
     * Result of the method is path element that contains whole text as a separate path.                               // 5525
     **                                                                                                                // 5526
     > Parameters                                                                                                      // 5527
     **                                                                                                                // 5528
     - x (number) x position of the text                                                                               // 5529
     - y (number) y position of the text                                                                               // 5530
     - string (string) text to print                                                                                   // 5531
     - font (object) font object, see @Paper.getFont                                                                   // 5532
     - size (number) #optional size of the font, default is `16`                                                       // 5533
     - origin (string) #optional could be `"baseline"` or `"middle"`, default is `"middle"`                            // 5534
     - letter_spacing (number) #optional number in range `-1..1`, default is `0`                                       // 5535
     - line_spacing (number) #optional number in range `1..3`, default is `1`                                          // 5536
     = (object) resulting path element, which consist of all letters                                                   // 5537
     > Usage                                                                                                           // 5538
     | var txt = r.print(10, 50, "print", r.getFont("Museo"), 30).attr({fill: "#fff"});                                // 5539
    \*/                                                                                                                // 5540
    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {                     // 5541
        origin = origin || "middle"; // baseline|middle                                                                // 5542
        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);                                                       // 5543
        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);                                                            // 5544
        var letters = Str(string)[split](E),                                                                           // 5545
            shift = 0,                                                                                                 // 5546
            notfirst = 0,                                                                                              // 5547
            path = E,                                                                                                  // 5548
            scale;                                                                                                     // 5549
        R.is(font, "string") && (font = this.getFont(font));                                                           // 5550
        if (font) {                                                                                                    // 5551
            scale = (size || 16) / font.face["units-per-em"];                                                          // 5552
            var bb = font.face.bbox[split](separator),                                                                 // 5553
                top = +bb[0],                                                                                          // 5554
                lineHeight = bb[3] - bb[1],                                                                            // 5555
                shifty = 0,                                                                                            // 5556
                height = +bb[1] + (origin == "baseline" ? lineHeight + (+font.face.descent) : lineHeight / 2);         // 5557
            for (var i = 0, ii = letters.length; i < ii; i++) {                                                        // 5558
                if (letters[i] == "\n") {                                                                              // 5559
                    shift = 0;                                                                                         // 5560
                    curr = 0;                                                                                          // 5561
                    notfirst = 0;                                                                                      // 5562
                    shifty += lineHeight * line_spacing;                                                               // 5563
                } else {                                                                                               // 5564
                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},                                          // 5565
                        curr = font.glyphs[letters[i]];                                                                // 5566
                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;
                    notfirst = 1;                                                                                      // 5568
                }                                                                                                      // 5569
                if (curr && curr.d) {                                                                                  // 5570
                    path += R.transformPath(curr.d, ["t", shift * scale, shifty * scale, "s", scale, scale, top, height, "t", (x - top) / scale, (y - height) / scale]);
                }                                                                                                      // 5572
            }                                                                                                          // 5573
        }                                                                                                              // 5574
        return this.path(path).attr({                                                                                  // 5575
            fill: "#000",                                                                                              // 5576
            stroke: "none"                                                                                             // 5577
        });                                                                                                            // 5578
    };                                                                                                                 // 5579
                                                                                                                       // 5580
    /*\
     * Paper.add                                                                                                       // 5582
     [ method ]                                                                                                        // 5583
     **                                                                                                                // 5584
     * Imports elements in JSON array in format `{type: type, <attributes>}`                                           // 5585
     **                                                                                                                // 5586
     > Parameters                                                                                                      // 5587
     **                                                                                                                // 5588
     - json (array)                                                                                                    // 5589
     = (object) resulting set of imported elements                                                                     // 5590
     > Usage                                                                                                           // 5591
     | paper.add([                                                                                                     // 5592
     |     {                                                                                                           // 5593
     |         type: "circle",                                                                                         // 5594
     |         cx: 10,                                                                                                 // 5595
     |         cy: 10,                                                                                                 // 5596
     |         r: 5                                                                                                    // 5597
     |     },                                                                                                          // 5598
     |     {                                                                                                           // 5599
     |         type: "rect",                                                                                           // 5600
     |         x: 10,                                                                                                  // 5601
     |         y: 10,                                                                                                  // 5602
     |         width: 10,                                                                                              // 5603
     |         height: 10,                                                                                             // 5604
     |         fill: "#fc0"                                                                                            // 5605
     |     }                                                                                                           // 5606
     | ]);                                                                                                             // 5607
    \*/                                                                                                                // 5608
    paperproto.add = function (json) {                                                                                 // 5609
        if (R.is(json, "array")) {                                                                                     // 5610
            var res = this.set(),                                                                                      // 5611
                i = 0,                                                                                                 // 5612
                ii = json.length,                                                                                      // 5613
                j;                                                                                                     // 5614
            for (; i < ii; i++) {                                                                                      // 5615
                j = json[i] || {};                                                                                     // 5616
                elements[has](j.type) && res.push(this[j.type]().attr(j));                                             // 5617
            }                                                                                                          // 5618
        }                                                                                                              // 5619
        return res;                                                                                                    // 5620
    };                                                                                                                 // 5621
                                                                                                                       // 5622
    /*\
     * Raphael.format                                                                                                  // 5624
     [ method ]                                                                                                        // 5625
     **                                                                                                                // 5626
     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.             // 5627
     **                                                                                                                // 5628
     > Parameters                                                                                                      // 5629
     **                                                                                                                // 5630
     - token (string) string to format                                                                                 // 5631
     - … (string) rest of arguments will be treated as parameters for replacement                                      // 5632
     = (string) formated string                                                                                        // 5633
     > Usage                                                                                                           // 5634
     | var x = 10,                                                                                                     // 5635
     |     y = 20,                                                                                                     // 5636
     |     width = 40,                                                                                                 // 5637
     |     height = 50;                                                                                                // 5638
     | // this will draw a rectangular shape equivalent to "M10,20h40v50h-40z"                                         // 5639
     | paper.path(Raphael.format("M{0},{1}h{2}v{3}h{4}z", x, y, width, height, -width));                               // 5640
    \*/                                                                                                                // 5641
    R.format = function (token, params) {                                                                              // 5642
        var args = R.is(params, array) ? [0][concat](params) : arguments;                                              // 5643
        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {        // 5644
            return args[++i] == null ? E : args[i];                                                                    // 5645
        }));                                                                                                           // 5646
        return token || E;                                                                                             // 5647
    };                                                                                                                 // 5648
    /*\
     * Raphael.fullfill                                                                                                // 5650
     [ method ]                                                                                                        // 5651
     **                                                                                                                // 5652
     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.
     **                                                                                                                // 5654
     > Parameters                                                                                                      // 5655
     **                                                                                                                // 5656
     - token (string) string to format                                                                                 // 5657
     - json (object) object which properties will be used as a replacement                                             // 5658
     = (string) formated string                                                                                        // 5659
     > Usage                                                                                                           // 5660
     | // this will draw a rectangular shape equivalent to "M10,20h40v50h-40z"                                         // 5661
     | paper.path(Raphael.fullfill("M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z", {                     // 5662
     |     x: 10,                                                                                                      // 5663
     |     y: 20,                                                                                                      // 5664
     |     dim: {                                                                                                      // 5665
     |         width: 40,                                                                                              // 5666
     |         height: 50,                                                                                             // 5667
     |         "negative width": -40                                                                                   // 5668
     |     }                                                                                                           // 5669
     | }));                                                                                                            // 5670
    \*/                                                                                                                // 5671
    R.fullfill = (function () {                                                                                        // 5672
        var tokenRegex = /\{([^\}]+)\}/g,                                                                              // 5673
            objNotationRegex = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g, // matches .xxxxx or ["xxxxx"] to run over object properties
            replacer = function (all, key, obj) {                                                                      // 5675
                var res = obj;                                                                                         // 5676
                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {                        // 5677
                    name = name || quotedName;                                                                         // 5678
                    if (res) {                                                                                         // 5679
                        if (name in res) {                                                                             // 5680
                            res = res[name];                                                                           // 5681
                        }                                                                                              // 5682
                        typeof res == "function" && isFunc && (res = res());                                           // 5683
                    }                                                                                                  // 5684
                });                                                                                                    // 5685
                res = (res == null || res == obj ? all : res) + "";                                                    // 5686
                return res;                                                                                            // 5687
            };                                                                                                         // 5688
        return function (str, obj) {                                                                                   // 5689
            return String(str).replace(tokenRegex, function (all, key) {                                               // 5690
                return replacer(all, key, obj);                                                                        // 5691
            });                                                                                                        // 5692
        };                                                                                                             // 5693
    })();                                                                                                              // 5694
    /*\
     * Raphael.ninja                                                                                                   // 5696
     [ method ]                                                                                                        // 5697
     **                                                                                                                // 5698
     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.
     * Beware, that in this case plugins could stop working, because they are depending on global variable existance.  // 5700
     **                                                                                                                // 5701
     = (object) Raphael object                                                                                         // 5702
     > Usage                                                                                                           // 5703
     | (function (local_raphael) {                                                                                     // 5704
     |     var paper = local_raphael(10, 10, 320, 200);                                                                // 5705
     |     …                                                                                                           // 5706
     | })(Raphael.ninja());                                                                                            // 5707
    \*/                                                                                                                // 5708
    R.ninja = function () {                                                                                            // 5709
        oldRaphael.was ? (g.win.Raphael = oldRaphael.is) : delete Raphael;                                             // 5710
        return R;                                                                                                      // 5711
    };                                                                                                                 // 5712
    /*\
     * Raphael.st                                                                                                      // 5714
     [ property (object) ]                                                                                             // 5715
     **                                                                                                                // 5716
     * You can add your own method to elements and sets. It is wise to add a set method for each element method        // 5717
     * you added, so you will be able to call the same method on sets too.                                             // 5718
     **                                                                                                                // 5719
     * See also @Raphael.el.                                                                                           // 5720
     > Usage                                                                                                           // 5721
     | Raphael.el.red = function () {                                                                                  // 5722
     |     this.attr({fill: "#f00"});                                                                                  // 5723
     | };                                                                                                              // 5724
     | Raphael.st.red = function () {                                                                                  // 5725
     |     this.forEach(function (el) {                                                                                // 5726
     |         el.red();                                                                                               // 5727
     |     });                                                                                                         // 5728
     | };                                                                                                              // 5729
     | // then use it                                                                                                  // 5730
     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();                                        // 5731
    \*/                                                                                                                // 5732
    R.st = setproto;                                                                                                   // 5733
    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html                 // 5734
    (function (doc, loaded, f) {                                                                                       // 5735
        if (doc.readyState == null && doc.addEventListener){                                                           // 5736
            doc.addEventListener(loaded, f = function () {                                                             // 5737
                doc.removeEventListener(loaded, f, false);                                                             // 5738
                doc.readyState = "complete";                                                                           // 5739
            }, false);                                                                                                 // 5740
            doc.readyState = "loading";                                                                                // 5741
        }                                                                                                              // 5742
        function isLoaded() {                                                                                          // 5743
            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve("raphael.DOMload");                          // 5744
        }                                                                                                              // 5745
        isLoaded();                                                                                                    // 5746
    })(document, "DOMContentLoaded");                                                                                  // 5747
                                                                                                                       // 5748
    eve.on("raphael.DOMload", function () {                                                                            // 5749
        loaded = true;                                                                                                 // 5750
    });                                                                                                                // 5751
                                                                                                                       // 5752
// ┌─────────────────────────────────────────────────────────────────────┐ \\
// │ Raphaël - JavaScript Vector Library                                 │ \\
// ├─────────────────────────────────────────────────────────────────────┤ \\
// │ SVG Module                                                          │ \\
// ├─────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\
// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\
// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\
// └─────────────────────────────────────────────────────────────────────┘ \\
                                                                                                                       // 5762
(function(){                                                                                                           // 5763
    if (!R.svg) {                                                                                                      // 5764
        return;                                                                                                        // 5765
    }                                                                                                                  // 5766
    var has = "hasOwnProperty",                                                                                        // 5767
        Str = String,                                                                                                  // 5768
        toFloat = parseFloat,                                                                                          // 5769
        toInt = parseInt,                                                                                              // 5770
        math = Math,                                                                                                   // 5771
        mmax = math.max,                                                                                               // 5772
        abs = math.abs,                                                                                                // 5773
        pow = math.pow,                                                                                                // 5774
        separator = /[, ]+/,                                                                                           // 5775
        eve = R.eve,                                                                                                   // 5776
        E = "",                                                                                                        // 5777
        S = " ";                                                                                                       // 5778
    var xlink = "http://www.w3.org/1999/xlink",                                                                        // 5779
        markers = {                                                                                                    // 5780
            block: "M5,0 0,2.5 5,5z",                                                                                  // 5781
            classic: "M5,0 0,2.5 5,5 3.5,3 3.5,2z",                                                                    // 5782
            diamond: "M2.5,0 5,2.5 2.5,5 0,2.5z",                                                                      // 5783
            open: "M6,1 1,3.5 6,6",                                                                                    // 5784
            oval: "M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z"                                                    // 5785
        },                                                                                                             // 5786
        markerCounter = {};                                                                                            // 5787
    R.toString = function () {                                                                                         // 5788
        return  "Your browser supports SVG.\nYou are running Rapha\xebl " + this.version;                              // 5789
    };                                                                                                                 // 5790
    var $ = function (el, attr) {                                                                                      // 5791
        if (attr) {                                                                                                    // 5792
            if (typeof el == "string") {                                                                               // 5793
                el = $(el);                                                                                            // 5794
            }                                                                                                          // 5795
            for (var key in attr) if (attr[has](key)) {                                                                // 5796
                if (key.substring(0, 6) == "xlink:") {                                                                 // 5797
                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));                                        // 5798
                } else {                                                                                               // 5799
                    el.setAttribute(key, Str(attr[key]));                                                              // 5800
                }                                                                                                      // 5801
            }                                                                                                          // 5802
        } else {                                                                                                       // 5803
            el = R._g.doc.createElementNS("http://www.w3.org/2000/svg", el);                                           // 5804
            el.style && (el.style.webkitTapHighlightColor = "rgba(0,0,0,0)");                                          // 5805
        }                                                                                                              // 5806
        return el;                                                                                                     // 5807
    },                                                                                                                 // 5808
    addGradientFill = function (element, gradient) {                                                                   // 5809
        var type = "linear",                                                                                           // 5810
            id = element.id + gradient,                                                                                // 5811
            fx = .5, fy = .5,                                                                                          // 5812
            o = element.node,                                                                                          // 5813
            SVG = element.paper,                                                                                       // 5814
            s = o.style,                                                                                               // 5815
            el = R._g.doc.getElementById(id);                                                                          // 5816
        if (!el) {                                                                                                     // 5817
            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {                            // 5818
                type = "radial";                                                                                       // 5819
                if (_fx && _fy) {                                                                                      // 5820
                    fx = toFloat(_fx);                                                                                 // 5821
                    fy = toFloat(_fy);                                                                                 // 5822
                    var dir = ((fy > .5) * 2 - 1);                                                                     // 5823
                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&                                                         // 5824
                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&                                          // 5825
                        fy != .5 &&                                                                                    // 5826
                        (fy = fy.toFixed(5) - 1e-5 * dir);                                                             // 5827
                }                                                                                                      // 5828
                return E;                                                                                              // 5829
            });                                                                                                        // 5830
            gradient = gradient.split(/\s*\-\s*/);                                                                     // 5831
            if (type == "linear") {                                                                                    // 5832
                var angle = gradient.shift();                                                                          // 5833
                angle = -toFloat(angle);                                                                               // 5834
                if (isNaN(angle)) {                                                                                    // 5835
                    return null;                                                                                       // 5836
                }                                                                                                      // 5837
                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],                                   // 5838
                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);                                             // 5839
                vector[2] *= max;                                                                                      // 5840
                vector[3] *= max;                                                                                      // 5841
                if (vector[2] < 0) {                                                                                   // 5842
                    vector[0] = -vector[2];                                                                            // 5843
                    vector[2] = 0;                                                                                     // 5844
                }                                                                                                      // 5845
                if (vector[3] < 0) {                                                                                   // 5846
                    vector[1] = -vector[3];                                                                            // 5847
                    vector[3] = 0;                                                                                     // 5848
                }                                                                                                      // 5849
            }                                                                                                          // 5850
            var dots = R._parseDots(gradient);                                                                         // 5851
            if (!dots) {                                                                                               // 5852
                return null;                                                                                           // 5853
            }                                                                                                          // 5854
            id = id.replace(/[\(\)\s,\xb0#]/g, "_");                                                                   // 5855
                                                                                                                       // 5856
            if (element.gradient && id != element.gradient.id) {                                                       // 5857
                SVG.defs.removeChild(element.gradient);                                                                // 5858
                delete element.gradient;                                                                               // 5859
            }                                                                                                          // 5860
                                                                                                                       // 5861
            if (!element.gradient) {                                                                                   // 5862
                el = $(type + "Gradient", {id: id});                                                                   // 5863
                element.gradient = el;                                                                                 // 5864
                $(el, type == "radial" ? {                                                                             // 5865
                    fx: fx,                                                                                            // 5866
                    fy: fy                                                                                             // 5867
                } : {                                                                                                  // 5868
                    x1: vector[0],                                                                                     // 5869
                    y1: vector[1],                                                                                     // 5870
                    x2: vector[2],                                                                                     // 5871
                    y2: vector[3],                                                                                     // 5872
                    gradientTransform: element.matrix.invert()                                                         // 5873
                });                                                                                                    // 5874
                SVG.defs.appendChild(el);                                                                              // 5875
                for (var i = 0, ii = dots.length; i < ii; i++) {                                                       // 5876
                    el.appendChild($("stop", {                                                                         // 5877
                        offset: dots[i].offset ? dots[i].offset : i ? "100%" : "0%",                                   // 5878
                        "stop-color": dots[i].color || "#fff"                                                          // 5879
                    }));                                                                                               // 5880
                }                                                                                                      // 5881
            }                                                                                                          // 5882
        }                                                                                                              // 5883
        $(o, {                                                                                                         // 5884
            fill: "url(#" + id + ")",                                                                                  // 5885
            opacity: 1,                                                                                                // 5886
            "fill-opacity": 1                                                                                          // 5887
        });                                                                                                            // 5888
        s.fill = E;                                                                                                    // 5889
        s.opacity = 1;                                                                                                 // 5890
        s.fillOpacity = 1;                                                                                             // 5891
        return 1;                                                                                                      // 5892
    },                                                                                                                 // 5893
    updatePosition = function (o) {                                                                                    // 5894
        var bbox = o.getBBox(1);                                                                                       // 5895
        $(o.pattern, {patternTransform: o.matrix.invert() + " translate(" + bbox.x + "," + bbox.y + ")"});             // 5896
    },                                                                                                                 // 5897
    addArrow = function (o, value, isEnd) {                                                                            // 5898
        if (o.type == "path") {                                                                                        // 5899
            var values = Str(value).toLowerCase().split("-"),                                                          // 5900
                p = o.paper,                                                                                           // 5901
                se = isEnd ? "end" : "start",                                                                          // 5902
                node = o.node,                                                                                         // 5903
                attrs = o.attrs,                                                                                       // 5904
                stroke = attrs["stroke-width"],                                                                        // 5905
                i = values.length,                                                                                     // 5906
                type = "classic",                                                                                      // 5907
                from,                                                                                                  // 5908
                to,                                                                                                    // 5909
                dx,                                                                                                    // 5910
                refX,                                                                                                  // 5911
                attr,                                                                                                  // 5912
                w = 3,                                                                                                 // 5913
                h = 3,                                                                                                 // 5914
                t = 5;                                                                                                 // 5915
            while (i--) {                                                                                              // 5916
                switch (values[i]) {                                                                                   // 5917
                    case "block":                                                                                      // 5918
                    case "classic":                                                                                    // 5919
                    case "oval":                                                                                       // 5920
                    case "diamond":                                                                                    // 5921
                    case "open":                                                                                       // 5922
                    case "none":                                                                                       // 5923
                        type = values[i];                                                                              // 5924
                        break;                                                                                         // 5925
                    case "wide": h = 5; break;                                                                         // 5926
                    case "narrow": h = 2; break;                                                                       // 5927
                    case "long": w = 5; break;                                                                         // 5928
                    case "short": w = 2; break;                                                                        // 5929
                }                                                                                                      // 5930
            }                                                                                                          // 5931
            if (type == "open") {                                                                                      // 5932
                w += 2;                                                                                                // 5933
                h += 2;                                                                                                // 5934
                t += 2;                                                                                                // 5935
                dx = 1;                                                                                                // 5936
                refX = isEnd ? 4 : 1;                                                                                  // 5937
                attr = {                                                                                               // 5938
                    fill: "none",                                                                                      // 5939
                    stroke: attrs.stroke                                                                               // 5940
                };                                                                                                     // 5941
            } else {                                                                                                   // 5942
                refX = dx = w / 2;                                                                                     // 5943
                attr = {                                                                                               // 5944
                    fill: attrs.stroke,                                                                                // 5945
                    stroke: "none"                                                                                     // 5946
                };                                                                                                     // 5947
            }                                                                                                          // 5948
            if (o._.arrows) {                                                                                          // 5949
                if (isEnd) {                                                                                           // 5950
                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;                                         // 5951
                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;                                     // 5952
                } else {                                                                                               // 5953
                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;                                     // 5954
                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;                                 // 5955
                }                                                                                                      // 5956
            } else {                                                                                                   // 5957
                o._.arrows = {};                                                                                       // 5958
            }                                                                                                          // 5959
            if (type != "none") {                                                                                      // 5960
                var pathId = "raphael-marker-" + type,                                                                 // 5961
                    markerId = "raphael-marker-" + se + type + w + h;                                                  // 5962
                if (!R._g.doc.getElementById(pathId)) {                                                                // 5963
                    p.defs.appendChild($($("path"), {                                                                  // 5964
                        "stroke-linecap": "round",                                                                     // 5965
                        d: markers[type],                                                                              // 5966
                        id: pathId                                                                                     // 5967
                    }));                                                                                               // 5968
                    markerCounter[pathId] = 1;                                                                         // 5969
                } else {                                                                                               // 5970
                    markerCounter[pathId]++;                                                                           // 5971
                }                                                                                                      // 5972
                var marker = R._g.doc.getElementById(markerId),                                                        // 5973
                    use;                                                                                               // 5974
                if (!marker) {                                                                                         // 5975
                    marker = $($("marker"), {                                                                          // 5976
                        id: markerId,                                                                                  // 5977
                        markerHeight: h,                                                                               // 5978
                        markerWidth: w,                                                                                // 5979
                        orient: "auto",                                                                                // 5980
                        refX: refX,                                                                                    // 5981
                        refY: h / 2                                                                                    // 5982
                    });                                                                                                // 5983
                    use = $($("use"), {                                                                                // 5984
                        "xlink:href": "#" + pathId,                                                                    // 5985
                        transform: (isEnd ? "rotate(180 " + w / 2 + " " + h / 2 + ") " : E) + "scale(" + w / t + "," + h / t + ")",
                        "stroke-width": (1 / ((w / t + h / t) / 2)).toFixed(4)                                         // 5987
                    });                                                                                                // 5988
                    marker.appendChild(use);                                                                           // 5989
                    p.defs.appendChild(marker);                                                                        // 5990
                    markerCounter[markerId] = 1;                                                                       // 5991
                } else {                                                                                               // 5992
                    markerCounter[markerId]++;                                                                         // 5993
                    use = marker.getElementsByTagName("use")[0];                                                       // 5994
                }                                                                                                      // 5995
                $(use, attr);                                                                                          // 5996
                var delta = dx * (type != "diamond" && type != "oval");                                                // 5997
                if (isEnd) {                                                                                           // 5998
                    from = o._.arrows.startdx * stroke || 0;                                                           // 5999
                    to = R.getTotalLength(attrs.path) - delta * stroke;                                                // 6000
                } else {                                                                                               // 6001
                    from = delta * stroke;                                                                             // 6002
                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);                              // 6003
                }                                                                                                      // 6004
                attr = {};                                                                                             // 6005
                attr["marker-" + se] = "url(#" + markerId + ")";                                                       // 6006
                if (to || from) {                                                                                      // 6007
                    attr.d = R.getSubpath(attrs.path, from, to);                                                       // 6008
                }                                                                                                      // 6009
                $(node, attr);                                                                                         // 6010
                o._.arrows[se + "Path"] = pathId;                                                                      // 6011
                o._.arrows[se + "Marker"] = markerId;                                                                  // 6012
                o._.arrows[se + "dx"] = delta;                                                                         // 6013
                o._.arrows[se + "Type"] = type;                                                                        // 6014
                o._.arrows[se + "String"] = value;                                                                     // 6015
            } else {                                                                                                   // 6016
                if (isEnd) {                                                                                           // 6017
                    from = o._.arrows.startdx * stroke || 0;                                                           // 6018
                    to = R.getTotalLength(attrs.path) - from;                                                          // 6019
                } else {                                                                                               // 6020
                    from = 0;                                                                                          // 6021
                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);                              // 6022
                }                                                                                                      // 6023
                o._.arrows[se + "Path"] && $(node, {d: R.getSubpath(attrs.path, from, to)});                           // 6024
                delete o._.arrows[se + "Path"];                                                                        // 6025
                delete o._.arrows[se + "Marker"];                                                                      // 6026
                delete o._.arrows[se + "dx"];                                                                          // 6027
                delete o._.arrows[se + "Type"];                                                                        // 6028
                delete o._.arrows[se + "String"];                                                                      // 6029
            }                                                                                                          // 6030
            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {                        // 6031
                var item = R._g.doc.getElementById(attr);                                                              // 6032
                item && item.parentNode.removeChild(item);                                                             // 6033
            }                                                                                                          // 6034
        }                                                                                                              // 6035
    },                                                                                                                 // 6036
    dasharray = {                                                                                                      // 6037
        "": [0],                                                                                                       // 6038
        "none": [0],                                                                                                   // 6039
        "-": [3, 1],                                                                                                   // 6040
        ".": [1, 1],                                                                                                   // 6041
        "-.": [3, 1, 1, 1],                                                                                            // 6042
        "-..": [3, 1, 1, 1, 1, 1],                                                                                     // 6043
        ". ": [1, 3],                                                                                                  // 6044
        "- ": [4, 3],                                                                                                  // 6045
        "--": [8, 3],                                                                                                  // 6046
        "- .": [4, 3, 1, 3],                                                                                           // 6047
        "--.": [8, 3, 1, 3],                                                                                           // 6048
        "--..": [8, 3, 1, 3, 1, 3]                                                                                     // 6049
    },                                                                                                                 // 6050
    addDashes = function (o, value, params) {                                                                          // 6051
        value = dasharray[Str(value).toLowerCase()];                                                                   // 6052
        if (value) {                                                                                                   // 6053
            var width = o.attrs["stroke-width"] || "1",                                                                // 6054
                butt = {round: width, square: width, butt: 0}[o.attrs["stroke-linecap"] || params["stroke-linecap"]] || 0,
                dashes = [],                                                                                           // 6056
                i = value.length;                                                                                      // 6057
            while (i--) {                                                                                              // 6058
                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;                                              // 6059
            }                                                                                                          // 6060
            $(o.node, {"stroke-dasharray": dashes.join(",")});                                                         // 6061
        }                                                                                                              // 6062
    },                                                                                                                 // 6063
    setFillAndStroke = function (o, params) {                                                                          // 6064
        var node = o.node,                                                                                             // 6065
            attrs = o.attrs,                                                                                           // 6066
            vis = node.style.visibility;                                                                               // 6067
        node.style.visibility = "hidden";                                                                              // 6068
        for (var att in params) {                                                                                      // 6069
            if (params[has](att)) {                                                                                    // 6070
                if (!R._availableAttrs[has](att)) {                                                                    // 6071
                    continue;                                                                                          // 6072
                }                                                                                                      // 6073
                var value = params[att];                                                                               // 6074
                attrs[att] = value;                                                                                    // 6075
                switch (att) {                                                                                         // 6076
                    case "blur":                                                                                       // 6077
                        o.blur(value);                                                                                 // 6078
                        break;                                                                                         // 6079
                    case "title":                                                                                      // 6080
                        var title = node.getElementsByTagName("title");                                                // 6081
                                                                                                                       // 6082
                        // Use the existing <title>.                                                                   // 6083
                        if (title.length && (title = title[0])) {                                                      // 6084
                          title.firstChild.nodeValue = value;                                                          // 6085
                        } else {                                                                                       // 6086
                          title = $("title");                                                                          // 6087
                          var val = R._g.doc.createTextNode(value);                                                    // 6088
                          title.appendChild(val);                                                                      // 6089
                          node.appendChild(title);                                                                     // 6090
                        }                                                                                              // 6091
                        break;                                                                                         // 6092
                    case "href":                                                                                       // 6093
                    case "target":                                                                                     // 6094
                        var pn = node.parentNode;                                                                      // 6095
                        if (pn.tagName.toLowerCase() != "a") {                                                         // 6096
                            var hl = $("a");                                                                           // 6097
                            pn.insertBefore(hl, node);                                                                 // 6098
                            hl.appendChild(node);                                                                      // 6099
                            pn = hl;                                                                                   // 6100
                        }                                                                                              // 6101
                        if (att == "target") {                                                                         // 6102
                            pn.setAttributeNS(xlink, "show", value == "blank" ? "new" : value);                        // 6103
                        } else {                                                                                       // 6104
                            pn.setAttributeNS(xlink, att, value);                                                      // 6105
                        }                                                                                              // 6106
                        break;                                                                                         // 6107
                    case "cursor":                                                                                     // 6108
                        node.style.cursor = value;                                                                     // 6109
                        break;                                                                                         // 6110
                    case "transform":                                                                                  // 6111
                        o.transform(value);                                                                            // 6112
                        break;                                                                                         // 6113
                    case "arrow-start":                                                                                // 6114
                        addArrow(o, value);                                                                            // 6115
                        break;                                                                                         // 6116
                    case "arrow-end":                                                                                  // 6117
                        addArrow(o, value, 1);                                                                         // 6118
                        break;                                                                                         // 6119
                    case "clip-rect":                                                                                  // 6120
                        var rect = Str(value).split(separator);                                                        // 6121
                        if (rect.length == 4) {                                                                        // 6122
                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);                     // 6123
                            var el = $("clipPath"),                                                                    // 6124
                                rc = $("rect");                                                                        // 6125
                            el.id = R.createUUID();                                                                    // 6126
                            $(rc, {                                                                                    // 6127
                                x: rect[0],                                                                            // 6128
                                y: rect[1],                                                                            // 6129
                                width: rect[2],                                                                        // 6130
                                height: rect[3]                                                                        // 6131
                            });                                                                                        // 6132
                            el.appendChild(rc);                                                                        // 6133
                            o.paper.defs.appendChild(el);                                                              // 6134
                            $(node, {"clip-path": "url(#" + el.id + ")"});                                             // 6135
                            o.clip = rc;                                                                               // 6136
                        }                                                                                              // 6137
                        if (!value) {                                                                                  // 6138
                            var path = node.getAttribute("clip-path");                                                 // 6139
                            if (path) {                                                                                // 6140
                                var clip = R._g.doc.getElementById(path.replace(/(^url\(#|\)$)/g, E));                 // 6141
                                clip && clip.parentNode.removeChild(clip);                                             // 6142
                                $(node, {"clip-path": E});                                                             // 6143
                                delete o.clip;                                                                         // 6144
                            }                                                                                          // 6145
                        }                                                                                              // 6146
                    break;                                                                                             // 6147
                    case "path":                                                                                       // 6148
                        if (o.type == "path") {                                                                        // 6149
                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : "M0,0"});                      // 6150
                            o._.dirty = 1;                                                                             // 6151
                            if (o._.arrows) {                                                                          // 6152
                                "startString" in o._.arrows && addArrow(o, o._.arrows.startString);                    // 6153
                                "endString" in o._.arrows && addArrow(o, o._.arrows.endString, 1);                     // 6154
                            }                                                                                          // 6155
                        }                                                                                              // 6156
                        break;                                                                                         // 6157
                    case "width":                                                                                      // 6158
                        node.setAttribute(att, value);                                                                 // 6159
                        o._.dirty = 1;                                                                                 // 6160
                        if (attrs.fx) {                                                                                // 6161
                            att = "x";                                                                                 // 6162
                            value = attrs.x;                                                                           // 6163
                        } else {                                                                                       // 6164
                            break;                                                                                     // 6165
                        }                                                                                              // 6166
                    case "x":                                                                                          // 6167
                        if (attrs.fx) {                                                                                // 6168
                            value = -attrs.x - (attrs.width || 0);                                                     // 6169
                        }                                                                                              // 6170
                    case "rx":                                                                                         // 6171
                        if (att == "rx" && o.type == "rect") {                                                         // 6172
                            break;                                                                                     // 6173
                        }                                                                                              // 6174
                    case "cx":                                                                                         // 6175
                        node.setAttribute(att, value);                                                                 // 6176
                        o.pattern && updatePosition(o);                                                                // 6177
                        o._.dirty = 1;                                                                                 // 6178
                        break;                                                                                         // 6179
                    case "height":                                                                                     // 6180
                        node.setAttribute(att, value);                                                                 // 6181
                        o._.dirty = 1;                                                                                 // 6182
                        if (attrs.fy) {                                                                                // 6183
                            att = "y";                                                                                 // 6184
                            value = attrs.y;                                                                           // 6185
                        } else {                                                                                       // 6186
                            break;                                                                                     // 6187
                        }                                                                                              // 6188
                    case "y":                                                                                          // 6189
                        if (attrs.fy) {                                                                                // 6190
                            value = -attrs.y - (attrs.height || 0);                                                    // 6191
                        }                                                                                              // 6192
                    case "ry":                                                                                         // 6193
                        if (att == "ry" && o.type == "rect") {                                                         // 6194
                            break;                                                                                     // 6195
                        }                                                                                              // 6196
                    case "cy":                                                                                         // 6197
                        node.setAttribute(att, value);                                                                 // 6198
                        o.pattern && updatePosition(o);                                                                // 6199
                        o._.dirty = 1;                                                                                 // 6200
                        break;                                                                                         // 6201
                    case "r":                                                                                          // 6202
                        if (o.type == "rect") {                                                                        // 6203
                            $(node, {rx: value, ry: value});                                                           // 6204
                        } else {                                                                                       // 6205
                            node.setAttribute(att, value);                                                             // 6206
                        }                                                                                              // 6207
                        o._.dirty = 1;                                                                                 // 6208
                        break;                                                                                         // 6209
                    case "src":                                                                                        // 6210
                        if (o.type == "image") {                                                                       // 6211
                            node.setAttributeNS(xlink, "href", value);                                                 // 6212
                        }                                                                                              // 6213
                        break;                                                                                         // 6214
                    case "stroke-width":                                                                               // 6215
                        if (o._.sx != 1 || o._.sy != 1) {                                                              // 6216
                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;                                              // 6217
                        }                                                                                              // 6218
                        if (o.paper._vbSize) {                                                                         // 6219
                            value *= o.paper._vbSize;                                                                  // 6220
                        }                                                                                              // 6221
                        node.setAttribute(att, value);                                                                 // 6222
                        if (attrs["stroke-dasharray"]) {                                                               // 6223
                            addDashes(o, attrs["stroke-dasharray"], params);                                           // 6224
                        }                                                                                              // 6225
                        if (o._.arrows) {                                                                              // 6226
                            "startString" in o._.arrows && addArrow(o, o._.arrows.startString);                        // 6227
                            "endString" in o._.arrows && addArrow(o, o._.arrows.endString, 1);                         // 6228
                        }                                                                                              // 6229
                        break;                                                                                         // 6230
                    case "stroke-dasharray":                                                                           // 6231
                        addDashes(o, value, params);                                                                   // 6232
                        break;                                                                                         // 6233
                    case "fill":                                                                                       // 6234
                        var isURL = Str(value).match(R._ISURL);                                                        // 6235
                        if (isURL) {                                                                                   // 6236
                            el = $("pattern");                                                                         // 6237
                            var ig = $("image");                                                                       // 6238
                            el.id = R.createUUID();                                                                    // 6239
                            $(el, {x: 0, y: 0, patternUnits: "userSpaceOnUse", height: 1, width: 1});                  // 6240
                            $(ig, {x: 0, y: 0, "xlink:href": isURL[1]});                                               // 6241
                            el.appendChild(ig);                                                                        // 6242
                                                                                                                       // 6243
                            (function (el) {                                                                           // 6244
                                R._preload(isURL[1], function () {                                                     // 6245
                                    var w = this.offsetWidth,                                                          // 6246
                                        h = this.offsetHeight;                                                         // 6247
                                    $(el, {width: w, height: h});                                                      // 6248
                                    $(ig, {width: w, height: h});                                                      // 6249
                                    o.paper.safari();                                                                  // 6250
                                });                                                                                    // 6251
                            })(el);                                                                                    // 6252
                            o.paper.defs.appendChild(el);                                                              // 6253
                            $(node, {fill: "url(#" + el.id + ")"});                                                    // 6254
                            o.pattern = el;                                                                            // 6255
                            o.pattern && updatePosition(o);                                                            // 6256
                            break;                                                                                     // 6257
                        }                                                                                              // 6258
                        var clr = R.getRGB(value);                                                                     // 6259
                        if (!clr.error) {                                                                              // 6260
                            delete params.gradient;                                                                    // 6261
                            delete attrs.gradient;                                                                     // 6262
                            !R.is(attrs.opacity, "undefined") &&                                                       // 6263
                                R.is(params.opacity, "undefined") &&                                                   // 6264
                                $(node, {opacity: attrs.opacity});                                                     // 6265
                            !R.is(attrs["fill-opacity"], "undefined") &&                                               // 6266
                                R.is(params["fill-opacity"], "undefined") &&                                           // 6267
                                $(node, {"fill-opacity": attrs["fill-opacity"]});                                      // 6268
                        } else if ((o.type == "circle" || o.type == "ellipse" || Str(value).charAt() != "r") && addGradientFill(o, value)) {
                            if ("opacity" in attrs || "fill-opacity" in attrs) {                                       // 6270
                                var gradient = R._g.doc.getElementById(node.getAttribute("fill").replace(/^url\(#|\)$/g, E));
                                if (gradient) {                                                                        // 6272
                                    var stops = gradient.getElementsByTagName("stop");                                 // 6273
                                    $(stops[stops.length - 1], {"stop-opacity": ("opacity" in attrs ? attrs.opacity : 1) * ("fill-opacity" in attrs ? attrs["fill-opacity"] : 1)});
                                }                                                                                      // 6275
                            }                                                                                          // 6276
                            attrs.gradient = value;                                                                    // 6277
                            attrs.fill = "none";                                                                       // 6278
                            break;                                                                                     // 6279
                        }                                                                                              // 6280
                        clr[has]("opacity") && $(node, {"fill-opacity": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});
                    case "stroke":                                                                                     // 6282
                        clr = R.getRGB(value);                                                                         // 6283
                        node.setAttribute(att, clr.hex);                                                               // 6284
                        att == "stroke" && clr[has]("opacity") && $(node, {"stroke-opacity": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});
                        if (att == "stroke" && o._.arrows) {                                                           // 6286
                            "startString" in o._.arrows && addArrow(o, o._.arrows.startString);                        // 6287
                            "endString" in o._.arrows && addArrow(o, o._.arrows.endString, 1);                         // 6288
                        }                                                                                              // 6289
                        break;                                                                                         // 6290
                    case "gradient":                                                                                   // 6291
                        (o.type == "circle" || o.type == "ellipse" || Str(value).charAt() != "r") && addGradientFill(o, value);
                        break;                                                                                         // 6293
                    case "opacity":                                                                                    // 6294
                        if (attrs.gradient && !attrs[has]("stroke-opacity")) {                                         // 6295
                            $(node, {"stroke-opacity": value > 1 ? value / 100 : value});                              // 6296
                        }                                                                                              // 6297
                        // fall                                                                                        // 6298
                    case "fill-opacity":                                                                               // 6299
                        if (attrs.gradient) {                                                                          // 6300
                            gradient = R._g.doc.getElementById(node.getAttribute("fill").replace(/^url\(#|\)$/g, E));  // 6301
                            if (gradient) {                                                                            // 6302
                                stops = gradient.getElementsByTagName("stop");                                         // 6303
                                $(stops[stops.length - 1], {"stop-opacity": value});                                   // 6304
                            }                                                                                          // 6305
                            break;                                                                                     // 6306
                        }                                                                                              // 6307
                    default:                                                                                           // 6308
                        att == "font-size" && (value = toInt(value, 10) + "px");                                       // 6309
                        var cssrule = att.replace(/(\-.)/g, function (w) {                                             // 6310
                            return w.substring(1).toUpperCase();                                                       // 6311
                        });                                                                                            // 6312
                        node.style[cssrule] = value;                                                                   // 6313
                        o._.dirty = 1;                                                                                 // 6314
                        node.setAttribute(att, value);                                                                 // 6315
                        break;                                                                                         // 6316
                }                                                                                                      // 6317
            }                                                                                                          // 6318
        }                                                                                                              // 6319
                                                                                                                       // 6320
        tuneText(o, params);                                                                                           // 6321
        node.style.visibility = vis;                                                                                   // 6322
    },                                                                                                                 // 6323
    leading = 1.2,                                                                                                     // 6324
    tuneText = function (el, params) {                                                                                 // 6325
        if (el.type != "text" || !(params[has]("text") || params[has]("font") || params[has]("font-size") || params[has]("x") || params[has]("y"))) {
            return;                                                                                                    // 6327
        }                                                                                                              // 6328
        var a = el.attrs,                                                                                              // 6329
            node = el.node,                                                                                            // 6330
            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue("font-size"), 10) : 10;
                                                                                                                       // 6332
        if (params[has]("text")) {                                                                                     // 6333
            a.text = params.text;                                                                                      // 6334
            while (node.firstChild) {                                                                                  // 6335
                node.removeChild(node.firstChild);                                                                     // 6336
            }                                                                                                          // 6337
            var texts = Str(params.text).split("\n"),                                                                  // 6338
                tspans = [],                                                                                           // 6339
                tspan;                                                                                                 // 6340
            for (var i = 0, ii = texts.length; i < ii; i++) {                                                          // 6341
                tspan = $("tspan");                                                                                    // 6342
                i && $(tspan, {dy: fontSize * leading, x: a.x});                                                       // 6343
                tspan.appendChild(R._g.doc.createTextNode(texts[i]));                                                  // 6344
                node.appendChild(tspan);                                                                               // 6345
                tspans[i] = tspan;                                                                                     // 6346
            }                                                                                                          // 6347
        } else {                                                                                                       // 6348
            tspans = node.getElementsByTagName("tspan");                                                               // 6349
            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {                                                      // 6350
                $(tspans[i], {dy: fontSize * leading, x: a.x});                                                        // 6351
            } else {                                                                                                   // 6352
                $(tspans[0], {dy: 0});                                                                                 // 6353
            }                                                                                                          // 6354
        }                                                                                                              // 6355
        $(node, {x: a.x, y: a.y});                                                                                     // 6356
        el._.dirty = 1;                                                                                                // 6357
        var bb = el._getBBox(),                                                                                        // 6358
            dif = a.y - (bb.y + bb.height / 2);                                                                        // 6359
        dif && R.is(dif, "finite") && $(tspans[0], {dy: dif});                                                         // 6360
    },                                                                                                                 // 6361
    Element = function (node, svg) {                                                                                   // 6362
        var X = 0,                                                                                                     // 6363
            Y = 0;                                                                                                     // 6364
        /*\
         * Element.node                                                                                                // 6366
         [ property (object) ]                                                                                         // 6367
         **                                                                                                            // 6368
         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.              // 6369
         **                                                                                                            // 6370
         * Note: Don’t mess with it.                                                                                   // 6371
         > Usage                                                                                                       // 6372
         | // draw a circle at coordinate 10,10 with radius of 10                                                      // 6373
         | var c = paper.circle(10, 10, 10);                                                                           // 6374
         | c.node.onclick = function () {                                                                              // 6375
         |     c.attr("fill", "red");                                                                                  // 6376
         | };                                                                                                          // 6377
        \*/                                                                                                            // 6378
        this[0] = this.node = node;                                                                                    // 6379
        /*\
         * Element.raphael                                                                                             // 6381
         [ property (object) ]                                                                                         // 6382
         **                                                                                                            // 6383
         * Internal reference to @Raphael object. In case it is not available.                                         // 6384
         > Usage                                                                                                       // 6385
         | Raphael.el.red = function () {                                                                              // 6386
         |     var hsb = this.paper.raphael.rgb2hsb(this.attr("fill"));                                                // 6387
         |     hsb.h = 1;                                                                                              // 6388
         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});                                                 // 6389
         | }                                                                                                           // 6390
        \*/                                                                                                            // 6391
        node.raphael = true;                                                                                           // 6392
        /*\
         * Element.id                                                                                                  // 6394
         [ property (number) ]                                                                                         // 6395
         **                                                                                                            // 6396
         * Unique id of the element. Especially usesful when you want to listen to events of the element,              // 6397
         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.     // 6398
        \*/                                                                                                            // 6399
        this.id = R._oid++;                                                                                            // 6400
        node.raphaelid = this.id;                                                                                      // 6401
        this.matrix = R.matrix();                                                                                      // 6402
        this.realPath = null;                                                                                          // 6403
        /*\
         * Element.paper                                                                                               // 6405
         [ property (object) ]                                                                                         // 6406
         **                                                                                                            // 6407
         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.         // 6408
         > Usage                                                                                                       // 6409
         | Raphael.el.cross = function () {                                                                            // 6410
         |     this.attr({fill: "red"});                                                                               // 6411
         |     this.paper.path("M10,10L50,50M50,10L10,50")                                                             // 6412
         |         .attr({stroke: "red"});                                                                             // 6413
         | }                                                                                                           // 6414
        \*/                                                                                                            // 6415
        this.paper = svg;                                                                                              // 6416
        this.attrs = this.attrs || {};                                                                                 // 6417
        this._ = {                                                                                                     // 6418
            transform: [],                                                                                             // 6419
            sx: 1,                                                                                                     // 6420
            sy: 1,                                                                                                     // 6421
            deg: 0,                                                                                                    // 6422
            dx: 0,                                                                                                     // 6423
            dy: 0,                                                                                                     // 6424
            dirty: 1                                                                                                   // 6425
        };                                                                                                             // 6426
        !svg.bottom && (svg.bottom = this);                                                                            // 6427
        /*\
         * Element.prev                                                                                                // 6429
         [ property (object) ]                                                                                         // 6430
         **                                                                                                            // 6431
         * Reference to the previous element in the hierarchy.                                                         // 6432
        \*/                                                                                                            // 6433
        this.prev = svg.top;                                                                                           // 6434
        svg.top && (svg.top.next = this);                                                                              // 6435
        svg.top = this;                                                                                                // 6436
        /*\
         * Element.next                                                                                                // 6438
         [ property (object) ]                                                                                         // 6439
         **                                                                                                            // 6440
         * Reference to the next element in the hierarchy.                                                             // 6441
        \*/                                                                                                            // 6442
        this.next = null;                                                                                              // 6443
    },                                                                                                                 // 6444
    elproto = R.el;                                                                                                    // 6445
                                                                                                                       // 6446
    Element.prototype = elproto;                                                                                       // 6447
    elproto.constructor = Element;                                                                                     // 6448
                                                                                                                       // 6449
    R._engine.path = function (pathString, SVG) {                                                                      // 6450
        var el = $("path");                                                                                            // 6451
        SVG.canvas && SVG.canvas.appendChild(el);                                                                      // 6452
        var p = new Element(el, SVG);                                                                                  // 6453
        p.type = "path";                                                                                               // 6454
        setFillAndStroke(p, {                                                                                          // 6455
            fill: "none",                                                                                              // 6456
            stroke: "#000",                                                                                            // 6457
            path: pathString                                                                                           // 6458
        });                                                                                                            // 6459
        return p;                                                                                                      // 6460
    };                                                                                                                 // 6461
    /*\
     * Element.rotate                                                                                                  // 6463
     [ method ]                                                                                                        // 6464
     **                                                                                                                // 6465
     * Deprecated! Use @Element.transform instead.                                                                     // 6466
     * Adds rotation by given angle around given point to the list of                                                  // 6467
     * transformations of the element.                                                                                 // 6468
     > Parameters                                                                                                      // 6469
     - deg (number) angle in degrees                                                                                   // 6470
     - cx (number) #optional x coordinate of the centre of rotation                                                    // 6471
     - cy (number) #optional y coordinate of the centre of rotation                                                    // 6472
     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.                                 // 6473
     = (object) @Element                                                                                               // 6474
    \*/                                                                                                                // 6475
    elproto.rotate = function (deg, cx, cy) {                                                                          // 6476
        if (this.removed) {                                                                                            // 6477
            return this;                                                                                               // 6478
        }                                                                                                              // 6479
        deg = Str(deg).split(separator);                                                                               // 6480
        if (deg.length - 1) {                                                                                          // 6481
            cx = toFloat(deg[1]);                                                                                      // 6482
            cy = toFloat(deg[2]);                                                                                      // 6483
        }                                                                                                              // 6484
        deg = toFloat(deg[0]);                                                                                         // 6485
        (cy == null) && (cx = cy);                                                                                     // 6486
        if (cx == null || cy == null) {                                                                                // 6487
            var bbox = this.getBBox(1);                                                                                // 6488
            cx = bbox.x + bbox.width / 2;                                                                              // 6489
            cy = bbox.y + bbox.height / 2;                                                                             // 6490
        }                                                                                                              // 6491
        this.transform(this._.transform.concat([["r", deg, cx, cy]]));                                                 // 6492
        return this;                                                                                                   // 6493
    };                                                                                                                 // 6494
    /*\
     * Element.scale                                                                                                   // 6496
     [ method ]                                                                                                        // 6497
     **                                                                                                                // 6498
     * Deprecated! Use @Element.transform instead.                                                                     // 6499
     * Adds scale by given amount relative to given point to the list of                                               // 6500
     * transformations of the element.                                                                                 // 6501
     > Parameters                                                                                                      // 6502
     - sx (number) horisontal scale amount                                                                             // 6503
     - sy (number) vertical scale amount                                                                               // 6504
     - cx (number) #optional x coordinate of the centre of scale                                                       // 6505
     - cy (number) #optional y coordinate of the centre of scale                                                       // 6506
     * If cx & cy aren’t specified centre of the shape is used instead.                                                // 6507
     = (object) @Element                                                                                               // 6508
    \*/                                                                                                                // 6509
    elproto.scale = function (sx, sy, cx, cy) {                                                                        // 6510
        if (this.removed) {                                                                                            // 6511
            return this;                                                                                               // 6512
        }                                                                                                              // 6513
        sx = Str(sx).split(separator);                                                                                 // 6514
        if (sx.length - 1) {                                                                                           // 6515
            sy = toFloat(sx[1]);                                                                                       // 6516
            cx = toFloat(sx[2]);                                                                                       // 6517
            cy = toFloat(sx[3]);                                                                                       // 6518
        }                                                                                                              // 6519
        sx = toFloat(sx[0]);                                                                                           // 6520
        (sy == null) && (sy = sx);                                                                                     // 6521
        (cy == null) && (cx = cy);                                                                                     // 6522
        if (cx == null || cy == null) {                                                                                // 6523
            var bbox = this.getBBox(1);                                                                                // 6524
        }                                                                                                              // 6525
        cx = cx == null ? bbox.x + bbox.width / 2 : cx;                                                                // 6526
        cy = cy == null ? bbox.y + bbox.height / 2 : cy;                                                               // 6527
        this.transform(this._.transform.concat([["s", sx, sy, cx, cy]]));                                              // 6528
        return this;                                                                                                   // 6529
    };                                                                                                                 // 6530
    /*\
     * Element.translate                                                                                               // 6532
     [ method ]                                                                                                        // 6533
     **                                                                                                                // 6534
     * Deprecated! Use @Element.transform instead.                                                                     // 6535
     * Adds translation by given amount to the list of transformations of the element.                                 // 6536
     > Parameters                                                                                                      // 6537
     - dx (number) horisontal shift                                                                                    // 6538
     - dy (number) vertical shift                                                                                      // 6539
     = (object) @Element                                                                                               // 6540
    \*/                                                                                                                // 6541
    elproto.translate = function (dx, dy) {                                                                            // 6542
        if (this.removed) {                                                                                            // 6543
            return this;                                                                                               // 6544
        }                                                                                                              // 6545
        dx = Str(dx).split(separator);                                                                                 // 6546
        if (dx.length - 1) {                                                                                           // 6547
            dy = toFloat(dx[1]);                                                                                       // 6548
        }                                                                                                              // 6549
        dx = toFloat(dx[0]) || 0;                                                                                      // 6550
        dy = +dy || 0;                                                                                                 // 6551
        this.transform(this._.transform.concat([["t", dx, dy]]));                                                      // 6552
        return this;                                                                                                   // 6553
    };                                                                                                                 // 6554
    /*\
     * Element.transform                                                                                               // 6556
     [ method ]                                                                                                        // 6557
     **                                                                                                                // 6558
     * Adds transformation to the element which is separate to other attributes,                                       // 6559
     * i.e. translation doesn’t change `x` or `y` of the rectange. The format                                          // 6560
     * of transformation string is similar to the path string syntax:                                                  // 6561
     | "t100,100r30,100,100s2,2,100,100r45s1.5"                                                                        // 6562
     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for          // 6563
     * scale and `m` is for matrix.                                                                                    // 6564
     *                                                                                                                 // 6565
     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.
     *                                                                                                                 // 6567
     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;
     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin
     * coordinates as optional parameters, the default is the centre point of the element.                             // 6570
     * Matrix accepts six parameters.                                                                                  // 6571
     > Usage                                                                                                           // 6572
     | var el = paper.rect(10, 20, 300, 200);                                                                          // 6573
     | // translate 100, 100, rotate 45°, translate -100, 0                                                            // 6574
     | el.transform("t100,100r45t-100,0");                                                                             // 6575
     | // if you want you can append or prepend transformations                                                        // 6576
     | el.transform("...t50,50");                                                                                      // 6577
     | el.transform("s2...");                                                                                          // 6578
     | // or even wrap                                                                                                 // 6579
     | el.transform("t50,50...t-50-50");                                                                               // 6580
     | // to reset transformation call method with empty string                                                        // 6581
     | el.transform("");                                                                                               // 6582
     | // to get current value call it without parameters                                                              // 6583
     | console.log(el.transform());                                                                                    // 6584
     > Parameters                                                                                                      // 6585
     - tstr (string) #optional transformation string                                                                   // 6586
     * If tstr isn’t specified                                                                                         // 6587
     = (string) current transformation string                                                                          // 6588
     * else                                                                                                            // 6589
     = (object) @Element                                                                                               // 6590
    \*/                                                                                                                // 6591
    elproto.transform = function (tstr) {                                                                              // 6592
        var _ = this._;                                                                                                // 6593
        if (tstr == null) {                                                                                            // 6594
            return _.transform;                                                                                        // 6595
        }                                                                                                              // 6596
        R._extractTransform(this, tstr);                                                                               // 6597
                                                                                                                       // 6598
        this.clip && $(this.clip, {transform: this.matrix.invert()});                                                  // 6599
        this.pattern && updatePosition(this);                                                                          // 6600
        this.node && $(this.node, {transform: this.matrix});                                                           // 6601
                                                                                                                       // 6602
        if (_.sx != 1 || _.sy != 1) {                                                                                  // 6603
            var sw = this.attrs[has]("stroke-width") ? this.attrs["stroke-width"] : 1;                                 // 6604
            this.attr({"stroke-width": sw});                                                                           // 6605
        }                                                                                                              // 6606
                                                                                                                       // 6607
        return this;                                                                                                   // 6608
    };                                                                                                                 // 6609
    /*\
     * Element.hide                                                                                                    // 6611
     [ method ]                                                                                                        // 6612
     **                                                                                                                // 6613
     * Makes element invisible. See @Element.show.                                                                     // 6614
     = (object) @Element                                                                                               // 6615
    \*/                                                                                                                // 6616
    elproto.hide = function () {                                                                                       // 6617
        !this.removed && this.paper.safari(this.node.style.display = "none");                                          // 6618
        return this;                                                                                                   // 6619
    };                                                                                                                 // 6620
    /*\
     * Element.show                                                                                                    // 6622
     [ method ]                                                                                                        // 6623
     **                                                                                                                // 6624
     * Makes element visible. See @Element.hide.                                                                       // 6625
     = (object) @Element                                                                                               // 6626
    \*/                                                                                                                // 6627
    elproto.show = function () {                                                                                       // 6628
        !this.removed && this.paper.safari(this.node.style.display = "");                                              // 6629
        return this;                                                                                                   // 6630
    };                                                                                                                 // 6631
    /*\
     * Element.remove                                                                                                  // 6633
     [ method ]                                                                                                        // 6634
     **                                                                                                                // 6635
     * Removes element from the paper.                                                                                 // 6636
    \*/                                                                                                                // 6637
    elproto.remove = function () {                                                                                     // 6638
        if (this.removed || !this.node.parentNode) {                                                                   // 6639
            return;                                                                                                    // 6640
        }                                                                                                              // 6641
        var paper = this.paper;                                                                                        // 6642
        paper.__set__ && paper.__set__.exclude(this);                                                                  // 6643
        eve.unbind("raphael.*.*." + this.id);                                                                          // 6644
        if (this.gradient) {                                                                                           // 6645
            paper.defs.removeChild(this.gradient);                                                                     // 6646
        }                                                                                                              // 6647
        R._tear(this, paper);                                                                                          // 6648
        if (this.node.parentNode.tagName.toLowerCase() == "a") {                                                       // 6649
            this.node.parentNode.parentNode.removeChild(this.node.parentNode);                                         // 6650
        } else {                                                                                                       // 6651
            this.node.parentNode.removeChild(this.node);                                                               // 6652
        }                                                                                                              // 6653
        for (var i in this) {                                                                                          // 6654
            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;                                      // 6655
        }                                                                                                              // 6656
        this.removed = true;                                                                                           // 6657
    };                                                                                                                 // 6658
    elproto._getBBox = function () {                                                                                   // 6659
        if (this.node.style.display == "none") {                                                                       // 6660
            this.show();                                                                                               // 6661
            var hide = true;                                                                                           // 6662
        }                                                                                                              // 6663
        var bbox = {};                                                                                                 // 6664
        try {                                                                                                          // 6665
            bbox = this.node.getBBox();                                                                                // 6666
        } catch(e) {                                                                                                   // 6667
            // Firefox 3.0.x plays badly here                                                                          // 6668
        } finally {                                                                                                    // 6669
            bbox = bbox || {};                                                                                         // 6670
        }                                                                                                              // 6671
        hide && this.hide();                                                                                           // 6672
        return bbox;                                                                                                   // 6673
    };                                                                                                                 // 6674
    /*\
     * Element.attr                                                                                                    // 6676
     [ method ]                                                                                                        // 6677
     **                                                                                                                // 6678
     * Sets the attributes of the element.                                                                             // 6679
     > Parameters                                                                                                      // 6680
     - attrName (string) attribute’s name                                                                              // 6681
     - value (string) value                                                                                            // 6682
     * or                                                                                                              // 6683
     - params (object) object of name/value pairs                                                                      // 6684
     * or                                                                                                              // 6685
     - attrName (string) attribute’s name                                                                              // 6686
     * or                                                                                                              // 6687
     - attrNames (array) in this case method returns array of current values for given attribute names                 // 6688
     = (object) @Element if attrsName & value or params are passed in.                                                 // 6689
     = (...) value of the attribute if only attrsName is passed in.                                                    // 6690
     = (array) array of values of the attribute if attrsNames is passed in.                                            // 6691
     = (object) object of attributes if nothing is passed in.                                                          // 6692
     > Possible parameters                                                                                             // 6693
     # <p>Please refer to the <a href="http://www.w3.org/TR/SVG/" title="The W3C Recommendation for the SVG language describes these properties in detail.">SVG specification</a> for an explanation of these parameters.</p>
     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.
     o clip-rect (string) comma or space separated values: x, y, width and height                                      // 6696
     o cursor (string) CSS type of the cursor                                                                          // 6697
     o cx (number) the x-axis coordinate of the center of the circle, or ellipse                                       // 6698
     o cy (number) the y-axis coordinate of the center of the circle, or ellipse                                       // 6699
     o fill (string) colour, gradient or image                                                                         // 6700
     o fill-opacity (number)                                                                                           // 6701
     o font (string)                                                                                                   // 6702
     o font-family (string)                                                                                            // 6703
     o font-size (number) font size in pixels                                                                          // 6704
     o font-weight (string)                                                                                            // 6705
     o height (number)                                                                                                 // 6706
     o href (string) URL, if specified element behaves as hyperlink                                                    // 6707
     o opacity (number)                                                                                                // 6708
     o path (string) SVG path string format                                                                            // 6709
     o r (number) radius of the circle, ellipse or rounded corner on the rect                                          // 6710
     o rx (number) horisontal radius of the ellipse                                                                    // 6711
     o ry (number) vertical radius of the ellipse                                                                      // 6712
     o src (string) image URL, only works for @Element.image element                                                   // 6713
     o stroke (string) stroke colour                                                                                   // 6714
     o stroke-dasharray (string) [“”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]
     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]                                                       // 6716
     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]                                                      // 6717
     o stroke-miterlimit (number)                                                                                      // 6718
     o stroke-opacity (number)                                                                                         // 6719
     o stroke-width (number) stroke width in pixels, default is '1'                                                    // 6720
     o target (string) used with href                                                                                  // 6721
     o text (string) contents of the text element. Use `\n` for multiline text                                         // 6722
     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”                                    // 6723
     o title (string) will create tooltip with a given text                                                            // 6724
     o transform (string) see @Element.transform                                                                       // 6725
     o width (number)                                                                                                  // 6726
     o x (number)                                                                                                      // 6727
     o y (number)                                                                                                      // 6728
     > Gradients                                                                                                       // 6729
     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°   // 6730
     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.     // 6731
     *                                                                                                                 // 6732
     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –         // 6733
     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point      // 6734
     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.
     > Path String                                                                                                     // 6736
     # <p>Please refer to <a href="http://www.w3.org/TR/SVG/paths.html#PathData" title="Details of a path’s data attribute’s format are described in the SVG specification.">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>
     > Colour Parsing                                                                                                  // 6738
     # <ul>                                                                                                            // 6739
     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>         // 6740
     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>                      // 6741
     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>                // 6742
     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>
     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>    // 6744
     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>
     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>
     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>
     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>                                                    // 6748
     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>                                         // 6749
     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href="http://en.wikipedia.org/wiki/HSL_and_HSV" title="HSL and HSV - Wikipedia, the free encyclopedia">Wikipedia page</a></li>
     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>                                                    // 6751
     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>                                         // 6752
     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>
     # </ul>                                                                                                           // 6754
    \*/                                                                                                                // 6755
    elproto.attr = function (name, value) {                                                                            // 6756
        if (this.removed) {                                                                                            // 6757
            return this;                                                                                               // 6758
        }                                                                                                              // 6759
        if (name == null) {                                                                                            // 6760
            var res = {};                                                                                              // 6761
            for (var a in this.attrs) if (this.attrs[has](a)) {                                                        // 6762
                res[a] = this.attrs[a];                                                                                // 6763
            }                                                                                                          // 6764
            res.gradient && res.fill == "none" && (res.fill = res.gradient) && delete res.gradient;                    // 6765
            res.transform = this._.transform;                                                                          // 6766
            return res;                                                                                                // 6767
        }                                                                                                              // 6768
        if (value == null && R.is(name, "string")) {                                                                   // 6769
            if (name == "fill" && this.attrs.fill == "none" && this.attrs.gradient) {                                  // 6770
                return this.attrs.gradient;                                                                            // 6771
            }                                                                                                          // 6772
            if (name == "transform") {                                                                                 // 6773
                return this._.transform;                                                                               // 6774
            }                                                                                                          // 6775
            var names = name.split(separator),                                                                         // 6776
                out = {};                                                                                              // 6777
            for (var i = 0, ii = names.length; i < ii; i++) {                                                          // 6778
                name = names[i];                                                                                       // 6779
                if (name in this.attrs) {                                                                              // 6780
                    out[name] = this.attrs[name];                                                                      // 6781
                } else if (R.is(this.paper.customAttributes[name], "function")) {                                      // 6782
                    out[name] = this.paper.customAttributes[name].def;                                                 // 6783
                } else {                                                                                               // 6784
                    out[name] = R._availableAttrs[name];                                                               // 6785
                }                                                                                                      // 6786
            }                                                                                                          // 6787
            return ii - 1 ? out : out[names[0]];                                                                       // 6788
        }                                                                                                              // 6789
        if (value == null && R.is(name, "array")) {                                                                    // 6790
            out = {};                                                                                                  // 6791
            for (i = 0, ii = name.length; i < ii; i++) {                                                               // 6792
                out[name[i]] = this.attr(name[i]);                                                                     // 6793
            }                                                                                                          // 6794
            return out;                                                                                                // 6795
        }                                                                                                              // 6796
        if (value != null) {                                                                                           // 6797
            var params = {};                                                                                           // 6798
            params[name] = value;                                                                                      // 6799
        } else if (name != null && R.is(name, "object")) {                                                             // 6800
            params = name;                                                                                             // 6801
        }                                                                                                              // 6802
        for (var key in params) {                                                                                      // 6803
            eve("raphael.attr." + key + "." + this.id, this, params[key]);                                             // 6804
        }                                                                                                              // 6805
        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], "function")) {
            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));                            // 6807
            this.attrs[key] = params[key];                                                                             // 6808
            for (var subkey in par) if (par[has](subkey)) {                                                            // 6809
                params[subkey] = par[subkey];                                                                          // 6810
            }                                                                                                          // 6811
        }                                                                                                              // 6812
        setFillAndStroke(this, params);                                                                                // 6813
        return this;                                                                                                   // 6814
    };                                                                                                                 // 6815
    /*\
     * Element.toFront                                                                                                 // 6817
     [ method ]                                                                                                        // 6818
     **                                                                                                                // 6819
     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.                          // 6820
     = (object) @Element                                                                                               // 6821
    \*/                                                                                                                // 6822
    elproto.toFront = function () {                                                                                    // 6823
        if (this.removed) {                                                                                            // 6824
            return this;                                                                                               // 6825
        }                                                                                                              // 6826
        if (this.node.parentNode.tagName.toLowerCase() == "a") {                                                       // 6827
            this.node.parentNode.parentNode.appendChild(this.node.parentNode);                                         // 6828
        } else {                                                                                                       // 6829
            this.node.parentNode.appendChild(this.node);                                                               // 6830
        }                                                                                                              // 6831
        var svg = this.paper;                                                                                          // 6832
        svg.top != this && R._tofront(this, svg);                                                                      // 6833
        return this;                                                                                                   // 6834
    };                                                                                                                 // 6835
    /*\
     * Element.toBack                                                                                                  // 6837
     [ method ]                                                                                                        // 6838
     **                                                                                                                // 6839
     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.                          // 6840
     = (object) @Element                                                                                               // 6841
    \*/                                                                                                                // 6842
    elproto.toBack = function () {                                                                                     // 6843
        if (this.removed) {                                                                                            // 6844
            return this;                                                                                               // 6845
        }                                                                                                              // 6846
        var parent = this.node.parentNode;                                                                             // 6847
        if (parent.tagName.toLowerCase() == "a") {                                                                     // 6848
            parent.parentNode.insertBefore(this.node.parentNode, this.node.parentNode.parentNode.firstChild);          // 6849
        } else if (parent.firstChild != this.node) {                                                                   // 6850
            parent.insertBefore(this.node, this.node.parentNode.firstChild);                                           // 6851
        }                                                                                                              // 6852
        R._toback(this, this.paper);                                                                                   // 6853
        var svg = this.paper;                                                                                          // 6854
        return this;                                                                                                   // 6855
    };                                                                                                                 // 6856
    /*\
     * Element.insertAfter                                                                                             // 6858
     [ method ]                                                                                                        // 6859
     **                                                                                                                // 6860
     * Inserts current object after the given one.                                                                     // 6861
     = (object) @Element                                                                                               // 6862
    \*/                                                                                                                // 6863
    elproto.insertAfter = function (element) {                                                                         // 6864
        if (this.removed) {                                                                                            // 6865
            return this;                                                                                               // 6866
        }                                                                                                              // 6867
        var node = element.node || element[element.length - 1].node;                                                   // 6868
        if (node.nextSibling) {                                                                                        // 6869
            node.parentNode.insertBefore(this.node, node.nextSibling);                                                 // 6870
        } else {                                                                                                       // 6871
            node.parentNode.appendChild(this.node);                                                                    // 6872
        }                                                                                                              // 6873
        R._insertafter(this, element, this.paper);                                                                     // 6874
        return this;                                                                                                   // 6875
    };                                                                                                                 // 6876
    /*\
     * Element.insertBefore                                                                                            // 6878
     [ method ]                                                                                                        // 6879
     **                                                                                                                // 6880
     * Inserts current object before the given one.                                                                    // 6881
     = (object) @Element                                                                                               // 6882
    \*/                                                                                                                // 6883
    elproto.insertBefore = function (element) {                                                                        // 6884
        if (this.removed) {                                                                                            // 6885
            return this;                                                                                               // 6886
        }                                                                                                              // 6887
        var node = element.node || element[0].node;                                                                    // 6888
        node.parentNode.insertBefore(this.node, node);                                                                 // 6889
        R._insertbefore(this, element, this.paper);                                                                    // 6890
        return this;                                                                                                   // 6891
    };                                                                                                                 // 6892
    elproto.blur = function (size) {                                                                                   // 6893
        // Experimental. No Safari support. Use it on your own risk.                                                   // 6894
        var t = this;                                                                                                  // 6895
        if (+size !== 0) {                                                                                             // 6896
            var fltr = $("filter"),                                                                                    // 6897
                blur = $("feGaussianBlur");                                                                            // 6898
            t.attrs.blur = size;                                                                                       // 6899
            fltr.id = R.createUUID();                                                                                  // 6900
            $(blur, {stdDeviation: +size || 1.5});                                                                     // 6901
            fltr.appendChild(blur);                                                                                    // 6902
            t.paper.defs.appendChild(fltr);                                                                            // 6903
            t._blur = fltr;                                                                                            // 6904
            $(t.node, {filter: "url(#" + fltr.id + ")"});                                                              // 6905
        } else {                                                                                                       // 6906
            if (t._blur) {                                                                                             // 6907
                t._blur.parentNode.removeChild(t._blur);                                                               // 6908
                delete t._blur;                                                                                        // 6909
                delete t.attrs.blur;                                                                                   // 6910
            }                                                                                                          // 6911
            t.node.removeAttribute("filter");                                                                          // 6912
        }                                                                                                              // 6913
        return t;                                                                                                      // 6914
    };                                                                                                                 // 6915
    R._engine.circle = function (svg, x, y, r) {                                                                       // 6916
        var el = $("circle");                                                                                          // 6917
        svg.canvas && svg.canvas.appendChild(el);                                                                      // 6918
        var res = new Element(el, svg);                                                                                // 6919
        res.attrs = {cx: x, cy: y, r: r, fill: "none", stroke: "#000"};                                                // 6920
        res.type = "circle";                                                                                           // 6921
        $(el, res.attrs);                                                                                              // 6922
        return res;                                                                                                    // 6923
    };                                                                                                                 // 6924
    R._engine.rect = function (svg, x, y, w, h, r) {                                                                   // 6925
        var el = $("rect");                                                                                            // 6926
        svg.canvas && svg.canvas.appendChild(el);                                                                      // 6927
        var res = new Element(el, svg);                                                                                // 6928
        res.attrs = {x: x, y: y, width: w, height: h, r: r || 0, rx: r || 0, ry: r || 0, fill: "none", stroke: "#000"};
        res.type = "rect";                                                                                             // 6930
        $(el, res.attrs);                                                                                              // 6931
        return res;                                                                                                    // 6932
    };                                                                                                                 // 6933
    R._engine.ellipse = function (svg, x, y, rx, ry) {                                                                 // 6934
        var el = $("ellipse");                                                                                         // 6935
        svg.canvas && svg.canvas.appendChild(el);                                                                      // 6936
        var res = new Element(el, svg);                                                                                // 6937
        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: "none", stroke: "#000"};                                      // 6938
        res.type = "ellipse";                                                                                          // 6939
        $(el, res.attrs);                                                                                              // 6940
        return res;                                                                                                    // 6941
    };                                                                                                                 // 6942
    R._engine.image = function (svg, src, x, y, w, h) {                                                                // 6943
        var el = $("image");                                                                                           // 6944
        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: "none"});                                         // 6945
        el.setAttributeNS(xlink, "href", src);                                                                         // 6946
        svg.canvas && svg.canvas.appendChild(el);                                                                      // 6947
        var res = new Element(el, svg);                                                                                // 6948
        res.attrs = {x: x, y: y, width: w, height: h, src: src};                                                       // 6949
        res.type = "image";                                                                                            // 6950
        return res;                                                                                                    // 6951
    };                                                                                                                 // 6952
    R._engine.text = function (svg, x, y, text) {                                                                      // 6953
        var el = $("text");                                                                                            // 6954
        svg.canvas && svg.canvas.appendChild(el);                                                                      // 6955
        var res = new Element(el, svg);                                                                                // 6956
        res.attrs = {                                                                                                  // 6957
            x: x,                                                                                                      // 6958
            y: y,                                                                                                      // 6959
            "text-anchor": "middle",                                                                                   // 6960
            text: text,                                                                                                // 6961
            font: R._availableAttrs.font,                                                                              // 6962
            stroke: "none",                                                                                            // 6963
            fill: "#000"                                                                                               // 6964
        };                                                                                                             // 6965
        res.type = "text";                                                                                             // 6966
        setFillAndStroke(res, res.attrs);                                                                              // 6967
        return res;                                                                                                    // 6968
    };                                                                                                                 // 6969
    R._engine.setSize = function (width, height) {                                                                     // 6970
        this.width = width || this.width;                                                                              // 6971
        this.height = height || this.height;                                                                           // 6972
        this.canvas.setAttribute("width", this.width);                                                                 // 6973
        this.canvas.setAttribute("height", this.height);                                                               // 6974
        if (this._viewBox) {                                                                                           // 6975
            this.setViewBox.apply(this, this._viewBox);                                                                // 6976
        }                                                                                                              // 6977
        return this;                                                                                                   // 6978
    };                                                                                                                 // 6979
    R._engine.create = function () {                                                                                   // 6980
        var con = R._getContainer.apply(0, arguments),                                                                 // 6981
            container = con && con.container,                                                                          // 6982
            x = con.x,                                                                                                 // 6983
            y = con.y,                                                                                                 // 6984
            width = con.width,                                                                                         // 6985
            height = con.height;                                                                                       // 6986
        if (!container) {                                                                                              // 6987
            throw new Error("SVG container not found.");                                                               // 6988
        }                                                                                                              // 6989
        var cnvs = $("svg"),                                                                                           // 6990
            css = "overflow:hidden;",                                                                                  // 6991
            isFloating;                                                                                                // 6992
        x = x || 0;                                                                                                    // 6993
        y = y || 0;                                                                                                    // 6994
        width = width || 512;                                                                                          // 6995
        height = height || 342;                                                                                        // 6996
        $(cnvs, {                                                                                                      // 6997
            height: height,                                                                                            // 6998
            version: 1.1,                                                                                              // 6999
            width: width,                                                                                              // 7000
            xmlns: "http://www.w3.org/2000/svg"                                                                        // 7001
        });                                                                                                            // 7002
        if (container == 1) {                                                                                          // 7003
            cnvs.style.cssText = css + "position:absolute;left:" + x + "px;top:" + y + "px";                           // 7004
            R._g.doc.body.appendChild(cnvs);                                                                           // 7005
            isFloating = 1;                                                                                            // 7006
        } else {                                                                                                       // 7007
            cnvs.style.cssText = css + "position:relative";                                                            // 7008
            if (container.firstChild) {                                                                                // 7009
                container.insertBefore(cnvs, container.firstChild);                                                    // 7010
            } else {                                                                                                   // 7011
                container.appendChild(cnvs);                                                                           // 7012
            }                                                                                                          // 7013
        }                                                                                                              // 7014
        container = new R._Paper;                                                                                      // 7015
        container.width = width;                                                                                       // 7016
        container.height = height;                                                                                     // 7017
        container.canvas = cnvs;                                                                                       // 7018
        container.clear();                                                                                             // 7019
        container._left = container._top = 0;                                                                          // 7020
        isFloating && (container.renderfix = function () {});                                                          // 7021
        container.renderfix();                                                                                         // 7022
        return container;                                                                                              // 7023
    };                                                                                                                 // 7024
    R._engine.setViewBox = function (x, y, w, h, fit) {                                                                // 7025
        eve("raphael.setViewBox", this, this._viewBox, [x, y, w, h, fit]);                                             // 7026
        var size = mmax(w / this.width, h / this.height),                                                              // 7027
            top = this.top,                                                                                            // 7028
            aspectRatio = fit ? "xMidYMid meet" : "xMinYMin",                                                          // 7029
            vb,                                                                                                        // 7030
            sw;                                                                                                        // 7031
        if (x == null) {                                                                                               // 7032
            if (this._vbSize) {                                                                                        // 7033
                size = 1;                                                                                              // 7034
            }                                                                                                          // 7035
            delete this._vbSize;                                                                                       // 7036
            vb = "0 0 " + this.width + S + this.height;                                                                // 7037
        } else {                                                                                                       // 7038
            this._vbSize = size;                                                                                       // 7039
            vb = x + S + y + S + w + S + h;                                                                            // 7040
        }                                                                                                              // 7041
        $(this.canvas, {                                                                                               // 7042
            viewBox: vb,                                                                                               // 7043
            preserveAspectRatio: aspectRatio                                                                           // 7044
        });                                                                                                            // 7045
        while (size && top) {                                                                                          // 7046
            sw = "stroke-width" in top.attrs ? top.attrs["stroke-width"] : 1;                                          // 7047
            top.attr({"stroke-width": sw});                                                                            // 7048
            top._.dirty = 1;                                                                                           // 7049
            top._.dirtyT = 1;                                                                                          // 7050
            top = top.prev;                                                                                            // 7051
        }                                                                                                              // 7052
        this._viewBox = [x, y, w, h, !!fit];                                                                           // 7053
        return this;                                                                                                   // 7054
    };                                                                                                                 // 7055
    /*\
     * Paper.renderfix                                                                                                 // 7057
     [ method ]                                                                                                        // 7058
     **                                                                                                                // 7059
     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependant                          // 7060
     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.         // 7061
     * This method fixes the issue.                                                                                    // 7062
     **                                                                                                                // 7063
       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.                                      // 7064
    \*/                                                                                                                // 7065
    R.prototype.renderfix = function () {                                                                              // 7066
        var cnvs = this.canvas,                                                                                        // 7067
            s = cnvs.style,                                                                                            // 7068
            pos;                                                                                                       // 7069
        try {                                                                                                          // 7070
            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();                                                       // 7071
        } catch (e) {                                                                                                  // 7072
            pos = cnvs.createSVGMatrix();                                                                              // 7073
        }                                                                                                              // 7074
        var left = -pos.e % 1,                                                                                         // 7075
            top = -pos.f % 1;                                                                                          // 7076
        if (left || top) {                                                                                             // 7077
            if (left) {                                                                                                // 7078
                this._left = (this._left + left) % 1;                                                                  // 7079
                s.left = this._left + "px";                                                                            // 7080
            }                                                                                                          // 7081
            if (top) {                                                                                                 // 7082
                this._top = (this._top + top) % 1;                                                                     // 7083
                s.top = this._top + "px";                                                                              // 7084
            }                                                                                                          // 7085
        }                                                                                                              // 7086
    };                                                                                                                 // 7087
    /*\
     * Paper.clear                                                                                                     // 7089
     [ method ]                                                                                                        // 7090
     **                                                                                                                // 7091
     * Clears the paper, i.e. removes all the elements.                                                                // 7092
    \*/                                                                                                                // 7093
    R.prototype.clear = function () {                                                                                  // 7094
        R.eve("raphael.clear", this);                                                                                  // 7095
        var c = this.canvas;                                                                                           // 7096
        while (c.firstChild) {                                                                                         // 7097
            c.removeChild(c.firstChild);                                                                               // 7098
        }                                                                                                              // 7099
        this.bottom = this.top = null;                                                                                 // 7100
        (this.desc = $("desc")).appendChild(R._g.doc.createTextNode("Created with Rapha\xebl " + R.version));          // 7101
        c.appendChild(this.desc);                                                                                      // 7102
        c.appendChild(this.defs = $("defs"));                                                                          // 7103
    };                                                                                                                 // 7104
    /*\
     * Paper.remove                                                                                                    // 7106
     [ method ]                                                                                                        // 7107
     **                                                                                                                // 7108
     * Removes the paper from the DOM.                                                                                 // 7109
    \*/                                                                                                                // 7110
    R.prototype.remove = function () {                                                                                 // 7111
        eve("raphael.remove", this);                                                                                   // 7112
        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);                                     // 7113
        for (var i in this) {                                                                                          // 7114
            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;                                      // 7115
        }                                                                                                              // 7116
    };                                                                                                                 // 7117
    var setproto = R.st;                                                                                               // 7118
    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {                                  // 7119
        setproto[method] = (function (methodname) {                                                                    // 7120
            return function () {                                                                                       // 7121
                var arg = arguments;                                                                                   // 7122
                return this.forEach(function (el) {                                                                    // 7123
                    el[methodname].apply(el, arg);                                                                     // 7124
                });                                                                                                    // 7125
            };                                                                                                         // 7126
        })(method);                                                                                                    // 7127
    }                                                                                                                  // 7128
})();                                                                                                                  // 7129
                                                                                                                       // 7130
// ┌─────────────────────────────────────────────────────────────────────┐ \\
// │ Raphaël - JavaScript Vector Library                                 │ \\
// ├─────────────────────────────────────────────────────────────────────┤ \\
// │ VML Module                                                          │ \\
// ├─────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\
// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\
// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\
// └─────────────────────────────────────────────────────────────────────┘ \\
                                                                                                                       // 7140
(function(){                                                                                                           // 7141
    if (!R.vml) {                                                                                                      // 7142
        return;                                                                                                        // 7143
    }                                                                                                                  // 7144
    var has = "hasOwnProperty",                                                                                        // 7145
        Str = String,                                                                                                  // 7146
        toFloat = parseFloat,                                                                                          // 7147
        math = Math,                                                                                                   // 7148
        round = math.round,                                                                                            // 7149
        mmax = math.max,                                                                                               // 7150
        mmin = math.min,                                                                                               // 7151
        abs = math.abs,                                                                                                // 7152
        fillString = "fill",                                                                                           // 7153
        separator = /[, ]+/,                                                                                           // 7154
        eve = R.eve,                                                                                                   // 7155
        ms = " progid:DXImageTransform.Microsoft",                                                                     // 7156
        S = " ",                                                                                                       // 7157
        E = "",                                                                                                        // 7158
        map = {M: "m", L: "l", C: "c", Z: "x", m: "t", l: "r", c: "v", z: "x"},                                        // 7159
        bites = /([clmz]),?([^clmz]*)/gi,                                                                              // 7160
        blurregexp = / progid:\S+Blur\([^\)]+\)/g,                                                                     // 7161
        val = /-?[^,\s-]+/g,                                                                                           // 7162
        cssDot = "position:absolute;left:0;top:0;width:1px;height:1px",                                                // 7163
        zoom = 21600,                                                                                                  // 7164
        pathTypes = {path: 1, rect: 1, image: 1},                                                                      // 7165
        ovalTypes = {circle: 1, ellipse: 1},                                                                           // 7166
        path2vml = function (path) {                                                                                   // 7167
            var total =  /[ahqstv]/ig,                                                                                 // 7168
                command = R._pathToAbsolute;                                                                           // 7169
            Str(path).match(total) && (command = R._path2curve);                                                       // 7170
            total = /[clmz]/g;                                                                                         // 7171
            if (command == R._pathToAbsolute && !Str(path).match(total)) {                                             // 7172
                var res = Str(path).replace(bites, function (all, command, args) {                                     // 7173
                    var vals = [],                                                                                     // 7174
                        isMove = command.toLowerCase() == "m",                                                         // 7175
                        res = map[command];                                                                            // 7176
                    args.replace(val, function (value) {                                                               // 7177
                        if (isMove && vals.length == 2) {                                                              // 7178
                            res += vals + map[command == "m" ? "l" : "L"];                                             // 7179
                            vals = [];                                                                                 // 7180
                        }                                                                                              // 7181
                        vals.push(round(value * zoom));                                                                // 7182
                    });                                                                                                // 7183
                    return res + vals;                                                                                 // 7184
                });                                                                                                    // 7185
                return res;                                                                                            // 7186
            }                                                                                                          // 7187
            var pa = command(path), p, r;                                                                              // 7188
            res = [];                                                                                                  // 7189
            for (var i = 0, ii = pa.length; i < ii; i++) {                                                             // 7190
                p = pa[i];                                                                                             // 7191
                r = pa[i][0].toLowerCase();                                                                            // 7192
                r == "z" && (r = "x");                                                                                 // 7193
                for (var j = 1, jj = p.length; j < jj; j++) {                                                          // 7194
                    r += round(p[j] * zoom) + (j != jj - 1 ? "," : E);                                                 // 7195
                }                                                                                                      // 7196
                res.push(r);                                                                                           // 7197
            }                                                                                                          // 7198
            return res.join(S);                                                                                        // 7199
        },                                                                                                             // 7200
        compensation = function (deg, dx, dy) {                                                                        // 7201
            var m = R.matrix();                                                                                        // 7202
            m.rotate(-deg, .5, .5);                                                                                    // 7203
            return {                                                                                                   // 7204
                dx: m.x(dx, dy),                                                                                       // 7205
                dy: m.y(dx, dy)                                                                                        // 7206
            };                                                                                                         // 7207
        },                                                                                                             // 7208
        setCoords = function (p, sx, sy, dx, dy, deg) {                                                                // 7209
            var _ = p._,                                                                                               // 7210
                m = p.matrix,                                                                                          // 7211
                fillpos = _.fillpos,                                                                                   // 7212
                o = p.node,                                                                                            // 7213
                s = o.style,                                                                                           // 7214
                y = 1,                                                                                                 // 7215
                flip = "",                                                                                             // 7216
                dxdy,                                                                                                  // 7217
                kx = zoom / sx,                                                                                        // 7218
                ky = zoom / sy;                                                                                        // 7219
            s.visibility = "hidden";                                                                                   // 7220
            if (!sx || !sy) {                                                                                          // 7221
                return;                                                                                                // 7222
            }                                                                                                          // 7223
            o.coordsize = abs(kx) + S + abs(ky);                                                                       // 7224
            s.rotation = deg * (sx * sy < 0 ? -1 : 1);                                                                 // 7225
            if (deg) {                                                                                                 // 7226
                var c = compensation(deg, dx, dy);                                                                     // 7227
                dx = c.dx;                                                                                             // 7228
                dy = c.dy;                                                                                             // 7229
            }                                                                                                          // 7230
            sx < 0 && (flip += "x");                                                                                   // 7231
            sy < 0 && (flip += " y") && (y = -1);                                                                      // 7232
            s.flip = flip;                                                                                             // 7233
            o.coordorigin = (dx * -kx) + S + (dy * -ky);                                                               // 7234
            if (fillpos || _.fillsize) {                                                                               // 7235
                var fill = o.getElementsByTagName(fillString);                                                         // 7236
                fill = fill && fill[0];                                                                                // 7237
                o.removeChild(fill);                                                                                   // 7238
                if (fillpos) {                                                                                         // 7239
                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));                   // 7240
                    fill.position = c.dx * y + S + c.dy * y;                                                           // 7241
                }                                                                                                      // 7242
                if (_.fillsize) {                                                                                      // 7243
                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);                                 // 7244
                }                                                                                                      // 7245
                o.appendChild(fill);                                                                                   // 7246
            }                                                                                                          // 7247
            s.visibility = "visible";                                                                                  // 7248
        };                                                                                                             // 7249
    R.toString = function () {                                                                                         // 7250
        return  "Your browser doesn\u2019t support SVG. Falling down to VML.\nYou are running Rapha\xebl " + this.version;
    };                                                                                                                 // 7252
    var addArrow = function (o, value, isEnd) {                                                                        // 7253
        var values = Str(value).toLowerCase().split("-"),                                                              // 7254
            se = isEnd ? "end" : "start",                                                                              // 7255
            i = values.length,                                                                                         // 7256
            type = "classic",                                                                                          // 7257
            w = "medium",                                                                                              // 7258
            h = "medium";                                                                                              // 7259
        while (i--) {                                                                                                  // 7260
            switch (values[i]) {                                                                                       // 7261
                case "block":                                                                                          // 7262
                case "classic":                                                                                        // 7263
                case "oval":                                                                                           // 7264
                case "diamond":                                                                                        // 7265
                case "open":                                                                                           // 7266
                case "none":                                                                                           // 7267
                    type = values[i];                                                                                  // 7268
                    break;                                                                                             // 7269
                case "wide":                                                                                           // 7270
                case "narrow": h = values[i]; break;                                                                   // 7271
                case "long":                                                                                           // 7272
                case "short": w = values[i]; break;                                                                    // 7273
            }                                                                                                          // 7274
        }                                                                                                              // 7275
        var stroke = o.node.getElementsByTagName("stroke")[0];                                                         // 7276
        stroke[se + "arrow"] = type;                                                                                   // 7277
        stroke[se + "arrowlength"] = w;                                                                                // 7278
        stroke[se + "arrowwidth"] = h;                                                                                 // 7279
    },                                                                                                                 // 7280
    setFillAndStroke = function (o, params) {                                                                          // 7281
        // o.paper.canvas.style.display = "none";                                                                      // 7282
        o.attrs = o.attrs || {};                                                                                       // 7283
        var node = o.node,                                                                                             // 7284
            a = o.attrs,                                                                                               // 7285
            s = node.style,                                                                                            // 7286
            xy,                                                                                                        // 7287
            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),
            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),
            res = o;                                                                                                   // 7290
                                                                                                                       // 7291
                                                                                                                       // 7292
        for (var par in params) if (params[has](par)) {                                                                // 7293
            a[par] = params[par];                                                                                      // 7294
        }                                                                                                              // 7295
        if (newpath) {                                                                                                 // 7296
            a.path = R._getPath[o.type](o);                                                                            // 7297
            o._.dirty = 1;                                                                                             // 7298
        }                                                                                                              // 7299
        params.href && (node.href = params.href);                                                                      // 7300
        params.title && (node.title = params.title);                                                                   // 7301
        params.target && (node.target = params.target);                                                                // 7302
        params.cursor && (s.cursor = params.cursor);                                                                   // 7303
        "blur" in params && o.blur(params.blur);                                                                       // 7304
        if (params.path && o.type == "path" || newpath) {                                                              // 7305
            node.path = path2vml(~Str(a.path).toLowerCase().indexOf("r") ? R._pathToAbsolute(a.path) : a.path);        // 7306
            if (o.type == "image") {                                                                                   // 7307
                o._.fillpos = [a.x, a.y];                                                                              // 7308
                o._.fillsize = [a.width, a.height];                                                                    // 7309
                setCoords(o, 1, 1, 0, 0, 0);                                                                           // 7310
            }                                                                                                          // 7311
        }                                                                                                              // 7312
        "transform" in params && o.transform(params.transform);                                                        // 7313
        if (isOval) {                                                                                                  // 7314
            var cx = +a.cx,                                                                                            // 7315
                cy = +a.cy,                                                                                            // 7316
                rx = +a.rx || +a.r || 0,                                                                               // 7317
                ry = +a.ry || +a.r || 0;                                                                               // 7318
            node.path = R.format("ar{0},{1},{2},{3},{4},{1},{4},{1}x", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));
            o._.dirty = 1;                                                                                             // 7320
        }                                                                                                              // 7321
        if ("clip-rect" in params) {                                                                                   // 7322
            var rect = Str(params["clip-rect"]).split(separator);                                                      // 7323
            if (rect.length == 4) {                                                                                    // 7324
                rect[2] = +rect[2] + (+rect[0]);                                                                       // 7325
                rect[3] = +rect[3] + (+rect[1]);                                                                       // 7326
                var div = node.clipRect || R._g.doc.createElement("div"),                                              // 7327
                    dstyle = div.style;                                                                                // 7328
                dstyle.clip = R.format("rect({1}px {2}px {3}px {0}px)", rect);                                         // 7329
                if (!node.clipRect) {                                                                                  // 7330
                    dstyle.position = "absolute";                                                                      // 7331
                    dstyle.top = 0;                                                                                    // 7332
                    dstyle.left = 0;                                                                                   // 7333
                    dstyle.width = o.paper.width + "px";                                                               // 7334
                    dstyle.height = o.paper.height + "px";                                                             // 7335
                    node.parentNode.insertBefore(div, node);                                                           // 7336
                    div.appendChild(node);                                                                             // 7337
                    node.clipRect = div;                                                                               // 7338
                }                                                                                                      // 7339
            }                                                                                                          // 7340
            if (!params["clip-rect"]) {                                                                                // 7341
                node.clipRect && (node.clipRect.style.clip = "auto");                                                  // 7342
            }                                                                                                          // 7343
        }                                                                                                              // 7344
        if (o.textpath) {                                                                                              // 7345
            var textpathStyle = o.textpath.style;                                                                      // 7346
            params.font && (textpathStyle.font = params.font);                                                         // 7347
            params["font-family"] && (textpathStyle.fontFamily = '"' + params["font-family"].split(",")[0].replace(/^['"]+|['"]+$/g, E) + '"');
            params["font-size"] && (textpathStyle.fontSize = params["font-size"]);                                     // 7349
            params["font-weight"] && (textpathStyle.fontWeight = params["font-weight"]);                               // 7350
            params["font-style"] && (textpathStyle.fontStyle = params["font-style"]);                                  // 7351
        }                                                                                                              // 7352
        if ("arrow-start" in params) {                                                                                 // 7353
            addArrow(res, params["arrow-start"]);                                                                      // 7354
        }                                                                                                              // 7355
        if ("arrow-end" in params) {                                                                                   // 7356
            addArrow(res, params["arrow-end"], 1);                                                                     // 7357
        }                                                                                                              // 7358
        if (params.opacity != null ||                                                                                  // 7359
            params["stroke-width"] != null ||                                                                          // 7360
            params.fill != null ||                                                                                     // 7361
            params.src != null ||                                                                                      // 7362
            params.stroke != null ||                                                                                   // 7363
            params["stroke-width"] != null ||                                                                          // 7364
            params["stroke-opacity"] != null ||                                                                        // 7365
            params["fill-opacity"] != null ||                                                                          // 7366
            params["stroke-dasharray"] != null ||                                                                      // 7367
            params["stroke-miterlimit"] != null ||                                                                     // 7368
            params["stroke-linejoin"] != null ||                                                                       // 7369
            params["stroke-linecap"] != null) {                                                                        // 7370
            var fill = node.getElementsByTagName(fillString),                                                          // 7371
                newfill = false;                                                                                       // 7372
            fill = fill && fill[0];                                                                                    // 7373
            !fill && (newfill = fill = createNode(fillString));                                                        // 7374
            if (o.type == "image" && params.src) {                                                                     // 7375
                fill.src = params.src;                                                                                 // 7376
            }                                                                                                          // 7377
            params.fill && (fill.on = true);                                                                           // 7378
            if (fill.on == null || params.fill == "none" || params.fill === null) {                                    // 7379
                fill.on = false;                                                                                       // 7380
            }                                                                                                          // 7381
            if (fill.on && params.fill) {                                                                              // 7382
                var isURL = Str(params.fill).match(R._ISURL);                                                          // 7383
                if (isURL) {                                                                                           // 7384
                    fill.parentNode == node && node.removeChild(fill);                                                 // 7385
                    fill.rotate = true;                                                                                // 7386
                    fill.src = isURL[1];                                                                               // 7387
                    fill.type = "tile";                                                                                // 7388
                    var bbox = o.getBBox(1);                                                                           // 7389
                    fill.position = bbox.x + S + bbox.y;                                                               // 7390
                    o._.fillpos = [bbox.x, bbox.y];                                                                    // 7391
                                                                                                                       // 7392
                    R._preload(isURL[1], function () {                                                                 // 7393
                        o._.fillsize = [this.offsetWidth, this.offsetHeight];                                          // 7394
                    });                                                                                                // 7395
                } else {                                                                                               // 7396
                    fill.color = R.getRGB(params.fill).hex;                                                            // 7397
                    fill.src = E;                                                                                      // 7398
                    fill.type = "solid";                                                                               // 7399
                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != "r") && addGradientFill(res, params.fill, fill)) {
                        a.fill = "none";                                                                               // 7401
                        a.gradient = params.fill;                                                                      // 7402
                        fill.rotate = false;                                                                           // 7403
                    }                                                                                                  // 7404
                }                                                                                                      // 7405
            }                                                                                                          // 7406
            if ("fill-opacity" in params || "opacity" in params) {                                                     // 7407
                var opacity = ((+a["fill-opacity"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);
                opacity = mmin(mmax(opacity, 0), 1);                                                                   // 7409
                fill.opacity = opacity;                                                                                // 7410
                if (fill.src) {                                                                                        // 7411
                    fill.color = "none";                                                                               // 7412
                }                                                                                                      // 7413
            }                                                                                                          // 7414
            node.appendChild(fill);                                                                                    // 7415
            var stroke = (node.getElementsByTagName("stroke") && node.getElementsByTagName("stroke")[0]),              // 7416
            newstroke = false;                                                                                         // 7417
            !stroke && (newstroke = stroke = createNode("stroke"));                                                    // 7418
            if ((params.stroke && params.stroke != "none") ||                                                          // 7419
                params["stroke-width"] ||                                                                              // 7420
                params["stroke-opacity"] != null ||                                                                    // 7421
                params["stroke-dasharray"] ||                                                                          // 7422
                params["stroke-miterlimit"] ||                                                                         // 7423
                params["stroke-linejoin"] ||                                                                           // 7424
                params["stroke-linecap"]) {                                                                            // 7425
                stroke.on = true;                                                                                      // 7426
            }                                                                                                          // 7427
            (params.stroke == "none" || params.stroke === null || stroke.on == null || params.stroke == 0 || params["stroke-width"] == 0) && (stroke.on = false);
            var strokeColor = R.getRGB(params.stroke);                                                                 // 7429
            stroke.on && params.stroke && (stroke.color = strokeColor.hex);                                            // 7430
            opacity = ((+a["stroke-opacity"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);
            var width = (toFloat(params["stroke-width"]) || 1) * .75;                                                  // 7432
            opacity = mmin(mmax(opacity, 0), 1);                                                                       // 7433
            params["stroke-width"] == null && (width = a["stroke-width"]);                                             // 7434
            params["stroke-width"] && (stroke.weight = width);                                                         // 7435
            width && width < 1 && (opacity *= width) && (stroke.weight = 1);                                           // 7436
            stroke.opacity = opacity;                                                                                  // 7437
                                                                                                                       // 7438
            params["stroke-linejoin"] && (stroke.joinstyle = params["stroke-linejoin"] || "miter");                    // 7439
            stroke.miterlimit = params["stroke-miterlimit"] || 8;                                                      // 7440
            params["stroke-linecap"] && (stroke.endcap = params["stroke-linecap"] == "butt" ? "flat" : params["stroke-linecap"] == "square" ? "square" : "round");
            if ("stroke-dasharray" in params) {                                                                        // 7442
                var dasharray = {                                                                                      // 7443
                    "-": "shortdash",                                                                                  // 7444
                    ".": "shortdot",                                                                                   // 7445
                    "-.": "shortdashdot",                                                                              // 7446
                    "-..": "shortdashdotdot",                                                                          // 7447
                    ". ": "dot",                                                                                       // 7448
                    "- ": "dash",                                                                                      // 7449
                    "--": "longdash",                                                                                  // 7450
                    "- .": "dashdot",                                                                                  // 7451
                    "--.": "longdashdot",                                                                              // 7452
                    "--..": "longdashdotdot"                                                                           // 7453
                };                                                                                                     // 7454
                stroke.dashstyle = dasharray[has](params["stroke-dasharray"]) ? dasharray[params["stroke-dasharray"]] : E;
            }                                                                                                          // 7456
            newstroke && node.appendChild(stroke);                                                                     // 7457
        }                                                                                                              // 7458
        if (res.type == "text") {                                                                                      // 7459
            res.paper.canvas.style.display = E;                                                                        // 7460
            var span = res.paper.span,                                                                                 // 7461
                m = 100,                                                                                               // 7462
                fontSize = a.font && a.font.match(/\d+(?:\.\d*)?(?=px)/);                                              // 7463
            s = span.style;                                                                                            // 7464
            a.font && (s.font = a.font);                                                                               // 7465
            a["font-family"] && (s.fontFamily = a["font-family"]);                                                     // 7466
            a["font-weight"] && (s.fontWeight = a["font-weight"]);                                                     // 7467
            a["font-style"] && (s.fontStyle = a["font-style"]);                                                        // 7468
            fontSize = toFloat(a["font-size"] || fontSize && fontSize[0]) || 10;                                       // 7469
            s.fontSize = fontSize * m + "px";                                                                          // 7470
            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, "&#60;").replace(/&/g, "&#38;").replace(/\n/g, "<br>"));
            var brect = span.getBoundingClientRect();                                                                  // 7472
            res.W = a.w = (brect.right - brect.left) / m;                                                              // 7473
            res.H = a.h = (brect.bottom - brect.top) / m;                                                              // 7474
            // res.paper.canvas.style.display = "none";                                                                // 7475
            res.X = a.x;                                                                                               // 7476
            res.Y = a.y + res.H / 2;                                                                                   // 7477
                                                                                                                       // 7478
            ("x" in params || "y" in params) && (res.path.v = R.format("m{0},{1}l{2},{1}", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));
            var dirtyattrs = ["x", "y", "text", "font", "font-family", "font-weight", "font-style", "font-size"];      // 7480
            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {                        // 7481
                res._.dirty = 1;                                                                                       // 7482
                break;                                                                                                 // 7483
            }                                                                                                          // 7484
                                                                                                                       // 7485
            // text-anchor emulation                                                                                   // 7486
            switch (a["text-anchor"]) {                                                                                // 7487
                case "start":                                                                                          // 7488
                    res.textpath.style["v-text-align"] = "left";                                                       // 7489
                    res.bbx = res.W / 2;                                                                               // 7490
                break;                                                                                                 // 7491
                case "end":                                                                                            // 7492
                    res.textpath.style["v-text-align"] = "right";                                                      // 7493
                    res.bbx = -res.W / 2;                                                                              // 7494
                break;                                                                                                 // 7495
                default:                                                                                               // 7496
                    res.textpath.style["v-text-align"] = "center";                                                     // 7497
                    res.bbx = 0;                                                                                       // 7498
                break;                                                                                                 // 7499
            }                                                                                                          // 7500
            res.textpath.style["v-text-kern"] = true;                                                                  // 7501
        }                                                                                                              // 7502
        // res.paper.canvas.style.display = E;                                                                         // 7503
    },                                                                                                                 // 7504
    addGradientFill = function (o, gradient, fill) {                                                                   // 7505
        o.attrs = o.attrs || {};                                                                                       // 7506
        var attrs = o.attrs,                                                                                           // 7507
            pow = Math.pow,                                                                                            // 7508
            opacity,                                                                                                   // 7509
            oindex,                                                                                                    // 7510
            type = "linear",                                                                                           // 7511
            fxfy = ".5 .5";                                                                                            // 7512
        o.attrs.gradient = gradient;                                                                                   // 7513
        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {                                  // 7514
            type = "radial";                                                                                           // 7515
            if (fx && fy) {                                                                                            // 7516
                fx = toFloat(fx);                                                                                      // 7517
                fy = toFloat(fy);                                                                                      // 7518
                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);
                fxfy = fx + S + fy;                                                                                    // 7520
            }                                                                                                          // 7521
            return E;                                                                                                  // 7522
        });                                                                                                            // 7523
        gradient = gradient.split(/\s*\-\s*/);                                                                         // 7524
        if (type == "linear") {                                                                                        // 7525
            var angle = gradient.shift();                                                                              // 7526
            angle = -toFloat(angle);                                                                                   // 7527
            if (isNaN(angle)) {                                                                                        // 7528
                return null;                                                                                           // 7529
            }                                                                                                          // 7530
        }                                                                                                              // 7531
        var dots = R._parseDots(gradient);                                                                             // 7532
        if (!dots) {                                                                                                   // 7533
            return null;                                                                                               // 7534
        }                                                                                                              // 7535
        o = o.shape || o.node;                                                                                         // 7536
        if (dots.length) {                                                                                             // 7537
            o.removeChild(fill);                                                                                       // 7538
            fill.on = true;                                                                                            // 7539
            fill.method = "none";                                                                                      // 7540
            fill.color = dots[0].color;                                                                                // 7541
            fill.color2 = dots[dots.length - 1].color;                                                                 // 7542
            var clrs = [];                                                                                             // 7543
            for (var i = 0, ii = dots.length; i < ii; i++) {                                                           // 7544
                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);                                       // 7545
            }                                                                                                          // 7546
            fill.colors = clrs.length ? clrs.join() : "0% " + fill.color;                                              // 7547
            if (type == "radial") {                                                                                    // 7548
                fill.type = "gradientTitle";                                                                           // 7549
                fill.focus = "100%";                                                                                   // 7550
                fill.focussize = "0 0";                                                                                // 7551
                fill.focusposition = fxfy;                                                                             // 7552
                fill.angle = 0;                                                                                        // 7553
            } else {                                                                                                   // 7554
                // fill.rotate= true;                                                                                  // 7555
                fill.type = "gradient";                                                                                // 7556
                fill.angle = (270 - angle) % 360;                                                                      // 7557
            }                                                                                                          // 7558
            o.appendChild(fill);                                                                                       // 7559
        }                                                                                                              // 7560
        return 1;                                                                                                      // 7561
    },                                                                                                                 // 7562
    Element = function (node, vml) {                                                                                   // 7563
        this[0] = this.node = node;                                                                                    // 7564
        node.raphael = true;                                                                                           // 7565
        this.id = R._oid++;                                                                                            // 7566
        node.raphaelid = this.id;                                                                                      // 7567
        this.X = 0;                                                                                                    // 7568
        this.Y = 0;                                                                                                    // 7569
        this.attrs = {};                                                                                               // 7570
        this.paper = vml;                                                                                              // 7571
        this.matrix = R.matrix();                                                                                      // 7572
        this._ = {                                                                                                     // 7573
            transform: [],                                                                                             // 7574
            sx: 1,                                                                                                     // 7575
            sy: 1,                                                                                                     // 7576
            dx: 0,                                                                                                     // 7577
            dy: 0,                                                                                                     // 7578
            deg: 0,                                                                                                    // 7579
            dirty: 1,                                                                                                  // 7580
            dirtyT: 1                                                                                                  // 7581
        };                                                                                                             // 7582
        !vml.bottom && (vml.bottom = this);                                                                            // 7583
        this.prev = vml.top;                                                                                           // 7584
        vml.top && (vml.top.next = this);                                                                              // 7585
        vml.top = this;                                                                                                // 7586
        this.next = null;                                                                                              // 7587
    };                                                                                                                 // 7588
    var elproto = R.el;                                                                                                // 7589
                                                                                                                       // 7590
    Element.prototype = elproto;                                                                                       // 7591
    elproto.constructor = Element;                                                                                     // 7592
    elproto.transform = function (tstr) {                                                                              // 7593
        if (tstr == null) {                                                                                            // 7594
            return this._.transform;                                                                                   // 7595
        }                                                                                                              // 7596
        var vbs = this.paper._viewBoxShift,                                                                            // 7597
            vbt = vbs ? "s" + [vbs.scale, vbs.scale] + "-1-1t" + [vbs.dx, vbs.dy] : E,                                 // 7598
            oldt;                                                                                                      // 7599
        if (vbs) {                                                                                                     // 7600
            oldt = tstr = Str(tstr).replace(/\.{3}|\u2026/g, this._.transform || E);                                   // 7601
        }                                                                                                              // 7602
        R._extractTransform(this, vbt + tstr);                                                                         // 7603
        var matrix = this.matrix.clone(),                                                                              // 7604
            skew = this.skew,                                                                                          // 7605
            o = this.node,                                                                                             // 7606
            split,                                                                                                     // 7607
            isGrad = ~Str(this.attrs.fill).indexOf("-"),                                                               // 7608
            isPatt = !Str(this.attrs.fill).indexOf("url(");                                                            // 7609
        matrix.translate(1, 1);                                                                                        // 7610
        if (isPatt || isGrad || this.type == "image") {                                                                // 7611
            skew.matrix = "1 0 0 1";                                                                                   // 7612
            skew.offset = "0 0";                                                                                       // 7613
            split = matrix.split();                                                                                    // 7614
            if ((isGrad && split.noRotation) || !split.isSimple) {                                                     // 7615
                o.style.filter = matrix.toFilter();                                                                    // 7616
                var bb = this.getBBox(),                                                                               // 7617
                    bbt = this.getBBox(1),                                                                             // 7618
                    dx = bb.x - bbt.x,                                                                                 // 7619
                    dy = bb.y - bbt.y;                                                                                 // 7620
                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);                                                       // 7621
                setCoords(this, 1, 1, dx, dy, 0);                                                                      // 7622
            } else {                                                                                                   // 7623
                o.style.filter = E;                                                                                    // 7624
                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);                         // 7625
            }                                                                                                          // 7626
        } else {                                                                                                       // 7627
            o.style.filter = E;                                                                                        // 7628
            skew.matrix = Str(matrix);                                                                                 // 7629
            skew.offset = matrix.offset();                                                                             // 7630
        }                                                                                                              // 7631
        oldt && (this._.transform = oldt);                                                                             // 7632
        return this;                                                                                                   // 7633
    };                                                                                                                 // 7634
    elproto.rotate = function (deg, cx, cy) {                                                                          // 7635
        if (this.removed) {                                                                                            // 7636
            return this;                                                                                               // 7637
        }                                                                                                              // 7638
        if (deg == null) {                                                                                             // 7639
            return;                                                                                                    // 7640
        }                                                                                                              // 7641
        deg = Str(deg).split(separator);                                                                               // 7642
        if (deg.length - 1) {                                                                                          // 7643
            cx = toFloat(deg[1]);                                                                                      // 7644
            cy = toFloat(deg[2]);                                                                                      // 7645
        }                                                                                                              // 7646
        deg = toFloat(deg[0]);                                                                                         // 7647
        (cy == null) && (cx = cy);                                                                                     // 7648
        if (cx == null || cy == null) {                                                                                // 7649
            var bbox = this.getBBox(1);                                                                                // 7650
            cx = bbox.x + bbox.width / 2;                                                                              // 7651
            cy = bbox.y + bbox.height / 2;                                                                             // 7652
        }                                                                                                              // 7653
        this._.dirtyT = 1;                                                                                             // 7654
        this.transform(this._.transform.concat([["r", deg, cx, cy]]));                                                 // 7655
        return this;                                                                                                   // 7656
    };                                                                                                                 // 7657
    elproto.translate = function (dx, dy) {                                                                            // 7658
        if (this.removed) {                                                                                            // 7659
            return this;                                                                                               // 7660
        }                                                                                                              // 7661
        dx = Str(dx).split(separator);                                                                                 // 7662
        if (dx.length - 1) {                                                                                           // 7663
            dy = toFloat(dx[1]);                                                                                       // 7664
        }                                                                                                              // 7665
        dx = toFloat(dx[0]) || 0;                                                                                      // 7666
        dy = +dy || 0;                                                                                                 // 7667
        if (this._.bbox) {                                                                                             // 7668
            this._.bbox.x += dx;                                                                                       // 7669
            this._.bbox.y += dy;                                                                                       // 7670
        }                                                                                                              // 7671
        this.transform(this._.transform.concat([["t", dx, dy]]));                                                      // 7672
        return this;                                                                                                   // 7673
    };                                                                                                                 // 7674
    elproto.scale = function (sx, sy, cx, cy) {                                                                        // 7675
        if (this.removed) {                                                                                            // 7676
            return this;                                                                                               // 7677
        }                                                                                                              // 7678
        sx = Str(sx).split(separator);                                                                                 // 7679
        if (sx.length - 1) {                                                                                           // 7680
            sy = toFloat(sx[1]);                                                                                       // 7681
            cx = toFloat(sx[2]);                                                                                       // 7682
            cy = toFloat(sx[3]);                                                                                       // 7683
            isNaN(cx) && (cx = null);                                                                                  // 7684
            isNaN(cy) && (cy = null);                                                                                  // 7685
        }                                                                                                              // 7686
        sx = toFloat(sx[0]);                                                                                           // 7687
        (sy == null) && (sy = sx);                                                                                     // 7688
        (cy == null) && (cx = cy);                                                                                     // 7689
        if (cx == null || cy == null) {                                                                                // 7690
            var bbox = this.getBBox(1);                                                                                // 7691
        }                                                                                                              // 7692
        cx = cx == null ? bbox.x + bbox.width / 2 : cx;                                                                // 7693
        cy = cy == null ? bbox.y + bbox.height / 2 : cy;                                                               // 7694
                                                                                                                       // 7695
        this.transform(this._.transform.concat([["s", sx, sy, cx, cy]]));                                              // 7696
        this._.dirtyT = 1;                                                                                             // 7697
        return this;                                                                                                   // 7698
    };                                                                                                                 // 7699
    elproto.hide = function () {                                                                                       // 7700
        !this.removed && (this.node.style.display = "none");                                                           // 7701
        return this;                                                                                                   // 7702
    };                                                                                                                 // 7703
    elproto.show = function () {                                                                                       // 7704
        !this.removed && (this.node.style.display = E);                                                                // 7705
        return this;                                                                                                   // 7706
    };                                                                                                                 // 7707
    elproto._getBBox = function () {                                                                                   // 7708
        if (this.removed) {                                                                                            // 7709
            return {};                                                                                                 // 7710
        }                                                                                                              // 7711
        return {                                                                                                       // 7712
            x: this.X + (this.bbx || 0) - this.W / 2,                                                                  // 7713
            y: this.Y - this.H,                                                                                        // 7714
            width: this.W,                                                                                             // 7715
            height: this.H                                                                                             // 7716
        };                                                                                                             // 7717
    };                                                                                                                 // 7718
    elproto.remove = function () {                                                                                     // 7719
        if (this.removed || !this.node.parentNode) {                                                                   // 7720
            return;                                                                                                    // 7721
        }                                                                                                              // 7722
        this.paper.__set__ && this.paper.__set__.exclude(this);                                                        // 7723
        R.eve.unbind("raphael.*.*." + this.id);                                                                        // 7724
        R._tear(this, this.paper);                                                                                     // 7725
        this.node.parentNode.removeChild(this.node);                                                                   // 7726
        this.shape && this.shape.parentNode.removeChild(this.shape);                                                   // 7727
        for (var i in this) {                                                                                          // 7728
            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;                                      // 7729
        }                                                                                                              // 7730
        this.removed = true;                                                                                           // 7731
    };                                                                                                                 // 7732
    elproto.attr = function (name, value) {                                                                            // 7733
        if (this.removed) {                                                                                            // 7734
            return this;                                                                                               // 7735
        }                                                                                                              // 7736
        if (name == null) {                                                                                            // 7737
            var res = {};                                                                                              // 7738
            for (var a in this.attrs) if (this.attrs[has](a)) {                                                        // 7739
                res[a] = this.attrs[a];                                                                                // 7740
            }                                                                                                          // 7741
            res.gradient && res.fill == "none" && (res.fill = res.gradient) && delete res.gradient;                    // 7742
            res.transform = this._.transform;                                                                          // 7743
            return res;                                                                                                // 7744
        }                                                                                                              // 7745
        if (value == null && R.is(name, "string")) {                                                                   // 7746
            if (name == fillString && this.attrs.fill == "none" && this.attrs.gradient) {                              // 7747
                return this.attrs.gradient;                                                                            // 7748
            }                                                                                                          // 7749
            var names = name.split(separator),                                                                         // 7750
                out = {};                                                                                              // 7751
            for (var i = 0, ii = names.length; i < ii; i++) {                                                          // 7752
                name = names[i];                                                                                       // 7753
                if (name in this.attrs) {                                                                              // 7754
                    out[name] = this.attrs[name];                                                                      // 7755
                } else if (R.is(this.paper.customAttributes[name], "function")) {                                      // 7756
                    out[name] = this.paper.customAttributes[name].def;                                                 // 7757
                } else {                                                                                               // 7758
                    out[name] = R._availableAttrs[name];                                                               // 7759
                }                                                                                                      // 7760
            }                                                                                                          // 7761
            return ii - 1 ? out : out[names[0]];                                                                       // 7762
        }                                                                                                              // 7763
        if (this.attrs && value == null && R.is(name, "array")) {                                                      // 7764
            out = {};                                                                                                  // 7765
            for (i = 0, ii = name.length; i < ii; i++) {                                                               // 7766
                out[name[i]] = this.attr(name[i]);                                                                     // 7767
            }                                                                                                          // 7768
            return out;                                                                                                // 7769
        }                                                                                                              // 7770
        var params;                                                                                                    // 7771
        if (value != null) {                                                                                           // 7772
            params = {};                                                                                               // 7773
            params[name] = value;                                                                                      // 7774
        }                                                                                                              // 7775
        value == null && R.is(name, "object") && (params = name);                                                      // 7776
        for (var key in params) {                                                                                      // 7777
            eve("raphael.attr." + key + "." + this.id, this, params[key]);                                             // 7778
        }                                                                                                              // 7779
        if (params) {                                                                                                  // 7780
            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], "function")) {
                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));                        // 7782
                this.attrs[key] = params[key];                                                                         // 7783
                for (var subkey in par) if (par[has](subkey)) {                                                        // 7784
                    params[subkey] = par[subkey];                                                                      // 7785
                }                                                                                                      // 7786
            }                                                                                                          // 7787
            // this.paper.canvas.style.display = "none";                                                               // 7788
            if (params.text && this.type == "text") {                                                                  // 7789
                this.textpath.string = params.text;                                                                    // 7790
            }                                                                                                          // 7791
            setFillAndStroke(this, params);                                                                            // 7792
            // this.paper.canvas.style.display = E;                                                                    // 7793
        }                                                                                                              // 7794
        return this;                                                                                                   // 7795
    };                                                                                                                 // 7796
    elproto.toFront = function () {                                                                                    // 7797
        !this.removed && this.node.parentNode.appendChild(this.node);                                                  // 7798
        this.paper && this.paper.top != this && R._tofront(this, this.paper);                                          // 7799
        return this;                                                                                                   // 7800
    };                                                                                                                 // 7801
    elproto.toBack = function () {                                                                                     // 7802
        if (this.removed) {                                                                                            // 7803
            return this;                                                                                               // 7804
        }                                                                                                              // 7805
        if (this.node.parentNode.firstChild != this.node) {                                                            // 7806
            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);                             // 7807
            R._toback(this, this.paper);                                                                               // 7808
        }                                                                                                              // 7809
        return this;                                                                                                   // 7810
    };                                                                                                                 // 7811
    elproto.insertAfter = function (element) {                                                                         // 7812
        if (this.removed) {                                                                                            // 7813
            return this;                                                                                               // 7814
        }                                                                                                              // 7815
        if (element.constructor == R.st.constructor) {                                                                 // 7816
            element = element[element.length - 1];                                                                     // 7817
        }                                                                                                              // 7818
        if (element.node.nextSibling) {                                                                                // 7819
            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);                                 // 7820
        } else {                                                                                                       // 7821
            element.node.parentNode.appendChild(this.node);                                                            // 7822
        }                                                                                                              // 7823
        R._insertafter(this, element, this.paper);                                                                     // 7824
        return this;                                                                                                   // 7825
    };                                                                                                                 // 7826
    elproto.insertBefore = function (element) {                                                                        // 7827
        if (this.removed) {                                                                                            // 7828
            return this;                                                                                               // 7829
        }                                                                                                              // 7830
        if (element.constructor == R.st.constructor) {                                                                 // 7831
            element = element[0];                                                                                      // 7832
        }                                                                                                              // 7833
        element.node.parentNode.insertBefore(this.node, element.node);                                                 // 7834
        R._insertbefore(this, element, this.paper);                                                                    // 7835
        return this;                                                                                                   // 7836
    };                                                                                                                 // 7837
    elproto.blur = function (size) {                                                                                   // 7838
        var s = this.node.runtimeStyle,                                                                                // 7839
            f = s.filter;                                                                                              // 7840
        f = f.replace(blurregexp, E);                                                                                  // 7841
        if (+size !== 0) {                                                                                             // 7842
            this.attrs.blur = size;                                                                                    // 7843
            s.filter = f + S + ms + ".Blur(pixelradius=" + (+size || 1.5) + ")";                                       // 7844
            s.margin = R.format("-{0}px 0 0 -{0}px", round(+size || 1.5));                                             // 7845
        } else {                                                                                                       // 7846
            s.filter = f;                                                                                              // 7847
            s.margin = 0;                                                                                              // 7848
            delete this.attrs.blur;                                                                                    // 7849
        }                                                                                                              // 7850
        return this;                                                                                                   // 7851
    };                                                                                                                 // 7852
                                                                                                                       // 7853
    R._engine.path = function (pathString, vml) {                                                                      // 7854
        var el = createNode("shape");                                                                                  // 7855
        el.style.cssText = cssDot;                                                                                     // 7856
        el.coordsize = zoom + S + zoom;                                                                                // 7857
        el.coordorigin = vml.coordorigin;                                                                              // 7858
        var p = new Element(el, vml),                                                                                  // 7859
            attr = {fill: "none", stroke: "#000"};                                                                     // 7860
        pathString && (attr.path = pathString);                                                                        // 7861
        p.type = "path";                                                                                               // 7862
        p.path = [];                                                                                                   // 7863
        p.Path = E;                                                                                                    // 7864
        setFillAndStroke(p, attr);                                                                                     // 7865
        vml.canvas.appendChild(el);                                                                                    // 7866
        var skew = createNode("skew");                                                                                 // 7867
        skew.on = true;                                                                                                // 7868
        el.appendChild(skew);                                                                                          // 7869
        p.skew = skew;                                                                                                 // 7870
        p.transform(E);                                                                                                // 7871
        return p;                                                                                                      // 7872
    };                                                                                                                 // 7873
    R._engine.rect = function (vml, x, y, w, h, r) {                                                                   // 7874
        var path = R._rectPath(x, y, w, h, r),                                                                         // 7875
            res = vml.path(path),                                                                                      // 7876
            a = res.attrs;                                                                                             // 7877
        res.X = a.x = x;                                                                                               // 7878
        res.Y = a.y = y;                                                                                               // 7879
        res.W = a.width = w;                                                                                           // 7880
        res.H = a.height = h;                                                                                          // 7881
        a.r = r;                                                                                                       // 7882
        a.path = path;                                                                                                 // 7883
        res.type = "rect";                                                                                             // 7884
        return res;                                                                                                    // 7885
    };                                                                                                                 // 7886
    R._engine.ellipse = function (vml, x, y, rx, ry) {                                                                 // 7887
        var res = vml.path(),                                                                                          // 7888
            a = res.attrs;                                                                                             // 7889
        res.X = x - rx;                                                                                                // 7890
        res.Y = y - ry;                                                                                                // 7891
        res.W = rx * 2;                                                                                                // 7892
        res.H = ry * 2;                                                                                                // 7893
        res.type = "ellipse";                                                                                          // 7894
        setFillAndStroke(res, {                                                                                        // 7895
            cx: x,                                                                                                     // 7896
            cy: y,                                                                                                     // 7897
            rx: rx,                                                                                                    // 7898
            ry: ry                                                                                                     // 7899
        });                                                                                                            // 7900
        return res;                                                                                                    // 7901
    };                                                                                                                 // 7902
    R._engine.circle = function (vml, x, y, r) {                                                                       // 7903
        var res = vml.path(),                                                                                          // 7904
            a = res.attrs;                                                                                             // 7905
        res.X = x - r;                                                                                                 // 7906
        res.Y = y - r;                                                                                                 // 7907
        res.W = res.H = r * 2;                                                                                         // 7908
        res.type = "circle";                                                                                           // 7909
        setFillAndStroke(res, {                                                                                        // 7910
            cx: x,                                                                                                     // 7911
            cy: y,                                                                                                     // 7912
            r: r                                                                                                       // 7913
        });                                                                                                            // 7914
        return res;                                                                                                    // 7915
    };                                                                                                                 // 7916
    R._engine.image = function (vml, src, x, y, w, h) {                                                                // 7917
        var path = R._rectPath(x, y, w, h),                                                                            // 7918
            res = vml.path(path).attr({stroke: "none"}),                                                               // 7919
            a = res.attrs,                                                                                             // 7920
            node = res.node,                                                                                           // 7921
            fill = node.getElementsByTagName(fillString)[0];                                                           // 7922
        a.src = src;                                                                                                   // 7923
        res.X = a.x = x;                                                                                               // 7924
        res.Y = a.y = y;                                                                                               // 7925
        res.W = a.width = w;                                                                                           // 7926
        res.H = a.height = h;                                                                                          // 7927
        a.path = path;                                                                                                 // 7928
        res.type = "image";                                                                                            // 7929
        fill.parentNode == node && node.removeChild(fill);                                                             // 7930
        fill.rotate = true;                                                                                            // 7931
        fill.src = src;                                                                                                // 7932
        fill.type = "tile";                                                                                            // 7933
        res._.fillpos = [x, y];                                                                                        // 7934
        res._.fillsize = [w, h];                                                                                       // 7935
        node.appendChild(fill);                                                                                        // 7936
        setCoords(res, 1, 1, 0, 0, 0);                                                                                 // 7937
        return res;                                                                                                    // 7938
    };                                                                                                                 // 7939
    R._engine.text = function (vml, x, y, text) {                                                                      // 7940
        var el = createNode("shape"),                                                                                  // 7941
            path = createNode("path"),                                                                                 // 7942
            o = createNode("textpath");                                                                                // 7943
        x = x || 0;                                                                                                    // 7944
        y = y || 0;                                                                                                    // 7945
        text = text || "";                                                                                             // 7946
        path.v = R.format("m{0},{1}l{2},{1}", round(x * zoom), round(y * zoom), round(x * zoom) + 1);                  // 7947
        path.textpathok = true;                                                                                        // 7948
        o.string = Str(text);                                                                                          // 7949
        o.on = true;                                                                                                   // 7950
        el.style.cssText = cssDot;                                                                                     // 7951
        el.coordsize = zoom + S + zoom;                                                                                // 7952
        el.coordorigin = "0 0";                                                                                        // 7953
        var p = new Element(el, vml),                                                                                  // 7954
            attr = {                                                                                                   // 7955
                fill: "#000",                                                                                          // 7956
                stroke: "none",                                                                                        // 7957
                font: R._availableAttrs.font,                                                                          // 7958
                text: text                                                                                             // 7959
            };                                                                                                         // 7960
        p.shape = el;                                                                                                  // 7961
        p.path = path;                                                                                                 // 7962
        p.textpath = o;                                                                                                // 7963
        p.type = "text";                                                                                               // 7964
        p.attrs.text = Str(text);                                                                                      // 7965
        p.attrs.x = x;                                                                                                 // 7966
        p.attrs.y = y;                                                                                                 // 7967
        p.attrs.w = 1;                                                                                                 // 7968
        p.attrs.h = 1;                                                                                                 // 7969
        setFillAndStroke(p, attr);                                                                                     // 7970
        el.appendChild(o);                                                                                             // 7971
        el.appendChild(path);                                                                                          // 7972
        vml.canvas.appendChild(el);                                                                                    // 7973
        var skew = createNode("skew");                                                                                 // 7974
        skew.on = true;                                                                                                // 7975
        el.appendChild(skew);                                                                                          // 7976
        p.skew = skew;                                                                                                 // 7977
        p.transform(E);                                                                                                // 7978
        return p;                                                                                                      // 7979
    };                                                                                                                 // 7980
    R._engine.setSize = function (width, height) {                                                                     // 7981
        var cs = this.canvas.style;                                                                                    // 7982
        this.width = width;                                                                                            // 7983
        this.height = height;                                                                                          // 7984
        width == +width && (width += "px");                                                                            // 7985
        height == +height && (height += "px");                                                                         // 7986
        cs.width = width;                                                                                              // 7987
        cs.height = height;                                                                                            // 7988
        cs.clip = "rect(0 " + width + " " + height + " 0)";                                                            // 7989
        if (this._viewBox) {                                                                                           // 7990
            R._engine.setViewBox.apply(this, this._viewBox);                                                           // 7991
        }                                                                                                              // 7992
        return this;                                                                                                   // 7993
    };                                                                                                                 // 7994
    R._engine.setViewBox = function (x, y, w, h, fit) {                                                                // 7995
        R.eve("raphael.setViewBox", this, this._viewBox, [x, y, w, h, fit]);                                           // 7996
        var width = this.width,                                                                                        // 7997
            height = this.height,                                                                                      // 7998
            size = 1 / mmax(w / width, h / height),                                                                    // 7999
            H, W;                                                                                                      // 8000
        if (fit) {                                                                                                     // 8001
            H = height / h;                                                                                            // 8002
            W = width / w;                                                                                             // 8003
            if (w * H < width) {                                                                                       // 8004
                x -= (width - w * H) / 2 / H;                                                                          // 8005
            }                                                                                                          // 8006
            if (h * W < height) {                                                                                      // 8007
                y -= (height - h * W) / 2 / W;                                                                         // 8008
            }                                                                                                          // 8009
        }                                                                                                              // 8010
        this._viewBox = [x, y, w, h, !!fit];                                                                           // 8011
        this._viewBoxShift = {                                                                                         // 8012
            dx: -x,                                                                                                    // 8013
            dy: -y,                                                                                                    // 8014
            scale: size                                                                                                // 8015
        };                                                                                                             // 8016
        this.forEach(function (el) {                                                                                   // 8017
            el.transform("...");                                                                                       // 8018
        });                                                                                                            // 8019
        return this;                                                                                                   // 8020
    };                                                                                                                 // 8021
    var createNode;                                                                                                    // 8022
    R._engine.initWin = function (win) {                                                                               // 8023
            var doc = win.document;                                                                                    // 8024
            doc.createStyleSheet().addRule(".rvml", "behavior:url(#default#VML)");                                     // 8025
            try {                                                                                                      // 8026
                !doc.namespaces.rvml && doc.namespaces.add("rvml", "urn:schemas-microsoft-com:vml");                   // 8027
                createNode = function (tagName) {                                                                      // 8028
                    return doc.createElement('<rvml:' + tagName + ' class="rvml">');                                   // 8029
                };                                                                                                     // 8030
            } catch (e) {                                                                                              // 8031
                createNode = function (tagName) {                                                                      // 8032
                    return doc.createElement('<' + tagName + ' xmlns="urn:schemas-microsoft.com:vml" class="rvml">');  // 8033
                };                                                                                                     // 8034
            }                                                                                                          // 8035
        };                                                                                                             // 8036
    R._engine.initWin(R._g.win);                                                                                       // 8037
    R._engine.create = function () {                                                                                   // 8038
        var con = R._getContainer.apply(0, arguments),                                                                 // 8039
            container = con.container,                                                                                 // 8040
            height = con.height,                                                                                       // 8041
            s,                                                                                                         // 8042
            width = con.width,                                                                                         // 8043
            x = con.x,                                                                                                 // 8044
            y = con.y;                                                                                                 // 8045
        if (!container) {                                                                                              // 8046
            throw new Error("VML container not found.");                                                               // 8047
        }                                                                                                              // 8048
        var res = new R._Paper,                                                                                        // 8049
            c = res.canvas = R._g.doc.createElement("div"),                                                            // 8050
            cs = c.style;                                                                                              // 8051
        x = x || 0;                                                                                                    // 8052
        y = y || 0;                                                                                                    // 8053
        width = width || 512;                                                                                          // 8054
        height = height || 342;                                                                                        // 8055
        res.width = width;                                                                                             // 8056
        res.height = height;                                                                                           // 8057
        width == +width && (width += "px");                                                                            // 8058
        height == +height && (height += "px");                                                                         // 8059
        res.coordsize = zoom * 1e3 + S + zoom * 1e3;                                                                   // 8060
        res.coordorigin = "0 0";                                                                                       // 8061
        res.span = R._g.doc.createElement("span");                                                                     // 8062
        res.span.style.cssText = "position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;";       // 8063
        c.appendChild(res.span);                                                                                       // 8064
        cs.cssText = R.format("top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden", width, height);
        if (container == 1) {                                                                                          // 8066
            R._g.doc.body.appendChild(c);                                                                              // 8067
            cs.left = x + "px";                                                                                        // 8068
            cs.top = y + "px";                                                                                         // 8069
            cs.position = "absolute";                                                                                  // 8070
        } else {                                                                                                       // 8071
            if (container.firstChild) {                                                                                // 8072
                container.insertBefore(c, container.firstChild);                                                       // 8073
            } else {                                                                                                   // 8074
                container.appendChild(c);                                                                              // 8075
            }                                                                                                          // 8076
        }                                                                                                              // 8077
        res.renderfix = function () {};                                                                                // 8078
        return res;                                                                                                    // 8079
    };                                                                                                                 // 8080
    R.prototype.clear = function () {                                                                                  // 8081
        R.eve("raphael.clear", this);                                                                                  // 8082
        this.canvas.innerHTML = E;                                                                                     // 8083
        this.span = R._g.doc.createElement("span");                                                                    // 8084
        this.span.style.cssText = "position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;";
        this.canvas.appendChild(this.span);                                                                            // 8086
        this.bottom = this.top = null;                                                                                 // 8087
    };                                                                                                                 // 8088
    R.prototype.remove = function () {                                                                                 // 8089
        R.eve("raphael.remove", this);                                                                                 // 8090
        this.canvas.parentNode.removeChild(this.canvas);                                                               // 8091
        for (var i in this) {                                                                                          // 8092
            this[i] = typeof this[i] == "function" ? R._removedFactory(i) : null;                                      // 8093
        }                                                                                                              // 8094
        return true;                                                                                                   // 8095
    };                                                                                                                 // 8096
                                                                                                                       // 8097
    var setproto = R.st;                                                                                               // 8098
    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {                                  // 8099
        setproto[method] = (function (methodname) {                                                                    // 8100
            return function () {                                                                                       // 8101
                var arg = arguments;                                                                                   // 8102
                return this.forEach(function (el) {                                                                    // 8103
                    el[methodname].apply(el, arg);                                                                     // 8104
                });                                                                                                    // 8105
            };                                                                                                         // 8106
        })(method);                                                                                                    // 8107
    }                                                                                                                  // 8108
})();                                                                                                                  // 8109
                                                                                                                       // 8110
    // EXPOSE                                                                                                          // 8111
    // SVG and VML are appended just before the EXPOSE line                                                            // 8112
    // Even with AMD, Raphael should be defined globally                                                               // 8113
    oldRaphael.was ? (g.win.Raphael = R) : (Raphael = R);                                                              // 8114
                                                                                                                       // 8115
    return R;                                                                                                          // 8116
}));                                                                                                                   // 8117
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                              // 8127
}).call(this);                                                                // 8128
                                                                              // 8129
////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['agnito:raphael'] = {
  Raphael: Raphael
};

})();
