{"version":3,"sources":["meteor://💻app/packages/agnito_raphael/packages/agnito_raphael.js"],"names":[],"mappingsqF","file":"/packages/agnito_raphael.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/agnito:raphael/raphael.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// ┌────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.1.2 - JavaScript Vector Library                          │ \\\\\n// ├────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2012 Dmitry Baranovskiy (http://raphaeljs.com)    │ \\\\\n// │ Copyright © 2008-2012 Sencha Labs (http://sencha.com)              │ \\\\\n// ├────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (http://raphaeljs.com/license.html) license.│ \\\\\n// └────────────────────────────────────────────────────────────────────┘ \\\\\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 9\n//                                                                                                                     // 10\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 11\n// you may not use this file except in compliance with the License.                                                    // 12\n// You may obtain a copy of the License at                                                                             // 13\n//                                                                                                                     // 14\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15\n//                                                                                                                     // 16\n// Unless required by applicable law or agreed to in writing, software                                                 // 17\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 18\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 19\n// See the License for the specific language governing permissions and                                                 // 20\n// limitations under the License.                                                                                      // 21\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n                                                                                                                       // 27\n(function (glob) {                                                                                                     // 28\n    var version = \"0.4.2\",                                                                                             // 29\n        has = \"hasOwnProperty\",                                                                                        // 30\n        separator = /[\\.\\/]/,                                                                                          // 31\n        wildcard = \"*\",                                                                                                // 32\n        fun = function () {},                                                                                          // 33\n        numsort = function (a, b) {                                                                                    // 34\n            return a - b;                                                                                              // 35\n        },                                                                                                             // 36\n        current_event,                                                                                                 // 37\n        stop,                                                                                                          // 38\n        events = {n: {}},                                                                                              // 39\n    /*\\\n     * eve                                                                                                             // 41\n     [ method ]                                                                                                        // 42\n                                                                                                                       // 43\n     * Fires event with given `name`, given scope and other parameters.                                                // 44\n                                                                                                                       // 45\n     > Arguments                                                                                                       // 46\n                                                                                                                       // 47\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated                                           // 48\n     - scope (object) context for the event handlers                                                                   // 49\n     - varargs (...) the rest of arguments will be sent to event handlers                                              // 50\n                                                                                                                       // 51\n     = (object) array of returned values from the listeners                                                            // 52\n    \\*/                                                                                                                // 53\n        eve = function (name, scope) {                                                                                 // 54\n\t\t\tname = String(name);                                                                                                // 55\n            var e = events,                                                                                            // 56\n                oldstop = stop,                                                                                        // 57\n                args = Array.prototype.slice.call(arguments, 2),                                                       // 58\n                listeners = eve.listeners(name),                                                                       // 59\n                z = 0,                                                                                                 // 60\n                f = false,                                                                                             // 61\n                l,                                                                                                     // 62\n                indexed = [],                                                                                          // 63\n                queue = {},                                                                                            // 64\n                out = [],                                                                                              // 65\n                ce = current_event,                                                                                    // 66\n                errors = [];                                                                                           // 67\n            current_event = name;                                                                                      // 68\n            stop = 0;                                                                                                  // 69\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {                        // 70\n                indexed.push(listeners[i].zIndex);                                                                     // 71\n                if (listeners[i].zIndex < 0) {                                                                         // 72\n                    queue[listeners[i].zIndex] = listeners[i];                                                         // 73\n                }                                                                                                      // 74\n            }                                                                                                          // 75\n            indexed.sort(numsort);                                                                                     // 76\n            while (indexed[z] < 0) {                                                                                   // 77\n                l = queue[indexed[z++]];                                                                               // 78\n                out.push(l.apply(scope, args));                                                                        // 79\n                if (stop) {                                                                                            // 80\n                    stop = oldstop;                                                                                    // 81\n                    return out;                                                                                        // 82\n                }                                                                                                      // 83\n            }                                                                                                          // 84\n            for (i = 0; i < ii; i++) {                                                                                 // 85\n                l = listeners[i];                                                                                      // 86\n                if (\"zIndex\" in l) {                                                                                   // 87\n                    if (l.zIndex == indexed[z]) {                                                                      // 88\n                        out.push(l.apply(scope, args));                                                                // 89\n                        if (stop) {                                                                                    // 90\n                            break;                                                                                     // 91\n                        }                                                                                              // 92\n                        do {                                                                                           // 93\n                            z++;                                                                                       // 94\n                            l = queue[indexed[z]];                                                                     // 95\n                            l && out.push(l.apply(scope, args));                                                       // 96\n                            if (stop) {                                                                                // 97\n                                break;                                                                                 // 98\n                            }                                                                                          // 99\n                        } while (l)                                                                                    // 100\n                    } else {                                                                                           // 101\n                        queue[l.zIndex] = l;                                                                           // 102\n                    }                                                                                                  // 103\n                } else {                                                                                               // 104\n                    out.push(l.apply(scope, args));                                                                    // 105\n                    if (stop) {                                                                                        // 106\n                        break;                                                                                         // 107\n                    }                                                                                                  // 108\n                }                                                                                                      // 109\n            }                                                                                                          // 110\n            stop = oldstop;                                                                                            // 111\n            current_event = ce;                                                                                        // 112\n            return out.length ? out : null;                                                                            // 113\n        };                                                                                                             // 114\n\t\t// Undocumented. Debug only.                                                                                         // 115\n\t\teve._events = events;                                                                                                // 116\n    /*\\\n     * eve.listeners                                                                                                   // 118\n     [ method ]                                                                                                        // 119\n                                                                                                                       // 120\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.         // 121\n                                                                                                                       // 122\n     > Arguments                                                                                                       // 123\n                                                                                                                       // 124\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated                                             // 125\n                                                                                                                       // 126\n     = (array) array of event handlers                                                                                 // 127\n    \\*/                                                                                                                // 128\n    eve.listeners = function (name) {                                                                                  // 129\n        var names = name.split(separator),                                                                             // 130\n            e = events,                                                                                                // 131\n            item,                                                                                                      // 132\n            items,                                                                                                     // 133\n            k,                                                                                                         // 134\n            i,                                                                                                         // 135\n            ii,                                                                                                        // 136\n            j,                                                                                                         // 137\n            jj,                                                                                                        // 138\n            nes,                                                                                                       // 139\n            es = [e],                                                                                                  // 140\n            out = [];                                                                                                  // 141\n        for (i = 0, ii = names.length; i < ii; i++) {                                                                  // 142\n            nes = [];                                                                                                  // 143\n            for (j = 0, jj = es.length; j < jj; j++) {                                                                 // 144\n                e = es[j].n;                                                                                           // 145\n                items = [e[names[i]], e[wildcard]];                                                                    // 146\n                k = 2;                                                                                                 // 147\n                while (k--) {                                                                                          // 148\n                    item = items[k];                                                                                   // 149\n                    if (item) {                                                                                        // 150\n                        nes.push(item);                                                                                // 151\n                        out = out.concat(item.f || []);                                                                // 152\n                    }                                                                                                  // 153\n                }                                                                                                      // 154\n            }                                                                                                          // 155\n            es = nes;                                                                                                  // 156\n        }                                                                                                              // 157\n        return out;                                                                                                    // 158\n    };                                                                                                                 // 159\n                                                                                                                       // 160\n    /*\\\n     * eve.on                                                                                                          // 162\n     [ method ]                                                                                                        // 163\n     **                                                                                                                // 164\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:                         // 165\n     | eve.on(\"*.under.*\", f);                                                                                         // 166\n     | eve(\"mouse.under.floor\"); // triggers f                                                                         // 167\n     * Use @eve to trigger the listener.                                                                               // 168\n     **                                                                                                                // 169\n     > Arguments                                                                                                       // 170\n     **                                                                                                                // 171\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 172\n     - f (function) event handler function                                                                             // 173\n     **                                                                                                                // 174\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:                                                                                                        // 176\n     | eve.on(\"mouse\", eatIt)(2);                                                                                      // 177\n     | eve.on(\"mouse\", scream);                                                                                        // 178\n     | eve.on(\"mouse\", catchIt)(1);                                                                                    // 179\n     * This will ensure that `catchIt()` function will be called before `eatIt()`.                                     // 180\n\t *                                                                                                                    // 181\n     * If you want to put your handler before non-indexed handlers, specify a negative value.                          // 182\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/                                                                                                                // 184\n    eve.on = function (name, f) {                                                                                      // 185\n\t\tname = String(name);                                                                                                 // 186\n\t\tif (typeof f != \"function\") {                                                                                        // 187\n\t\t\treturn function () {};                                                                                              // 188\n\t\t}                                                                                                                    // 189\n        var names = name.split(separator),                                                                             // 190\n            e = events;                                                                                                // 191\n        for (var i = 0, ii = names.length; i < ii; i++) {                                                              // 192\n            e = e.n;                                                                                                   // 193\n            e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});                                  // 194\n        }                                                                                                              // 195\n        e.f = e.f || [];                                                                                               // 196\n        for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {                                                   // 197\n            return fun;                                                                                                // 198\n        }                                                                                                              // 199\n        e.f.push(f);                                                                                                   // 200\n        return function (zIndex) {                                                                                     // 201\n            if (+zIndex == +zIndex) {                                                                                  // 202\n                f.zIndex = +zIndex;                                                                                    // 203\n            }                                                                                                          // 204\n        };                                                                                                             // 205\n    };                                                                                                                 // 206\n    /*\\\n     * eve.f                                                                                                           // 208\n     [ method ]                                                                                                        // 209\n     **                                                                                                                // 210\n     * Returns function that will fire given event with optional arguments.                                            // 211\n\t * Arguments that will be passed to the result function will be also                                                  // 212\n\t * concated to the list of final arguments.                                                                           // 213\n \t | el.onclick = eve.f(\"click\", 1, 2);                                                                                // 214\n \t | eve.on(\"click\", function (a, b, c) {                                                                              // 215\n \t |     console.log(a, b, c); // 1, 2, [event object]                                                                 // 216\n \t | });                                                                                                               // 217\n     > Arguments                                                                                                       // 218\n\t - event (string) event name                                                                                          // 219\n\t - varargs (…) and any other arguments                                                                                // 220\n\t = (function) possible event handler function                                                                         // 221\n    \\*/                                                                                                                // 222\n\teve.f = function (event) {                                                                                            // 223\n\t\tvar attrs = [].slice.call(arguments, 1);                                                                             // 224\n\t\treturn function () {                                                                                                 // 225\n\t\t\teve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));                                   // 226\n\t\t};                                                                                                                   // 227\n\t};                                                                                                                    // 228\n    /*\\\n     * eve.stop                                                                                                        // 230\n     [ method ]                                                                                                        // 231\n     **                                                                                                                // 232\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.             // 233\n    \\*/                                                                                                                // 234\n    eve.stop = function () {                                                                                           // 235\n        stop = 1;                                                                                                      // 236\n    };                                                                                                                 // 237\n    /*\\\n     * eve.nt                                                                                                          // 239\n     [ method ]                                                                                                        // 240\n     **                                                                                                                // 241\n     * Could be used inside event handler to figure out actual name of the event.                                      // 242\n     **                                                                                                                // 243\n     > Arguments                                                                                                       // 244\n     **                                                                                                                // 245\n     - subname (string) #optional subname of the event                                                                 // 246\n     **                                                                                                                // 247\n     = (string) name of the event, if `subname` is not specified                                                       // 248\n     * or                                                                                                              // 249\n     = (boolean) `true`, if current event’s name contains `subname`                                                    // 250\n    \\*/                                                                                                                // 251\n    eve.nt = function (subname) {                                                                                      // 252\n        if (subname) {                                                                                                 // 253\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);                        // 254\n        }                                                                                                              // 255\n        return current_event;                                                                                          // 256\n    };                                                                                                                 // 257\n    /*\\\n     * eve.nts                                                                                                         // 259\n     [ method ]                                                                                                        // 260\n     **                                                                                                                // 261\n     * Could be used inside event handler to figure out actual name of the event.                                      // 262\n     **                                                                                                                // 263\n     **                                                                                                                // 264\n     = (array) names of the event                                                                                      // 265\n    \\*/                                                                                                                // 266\n    eve.nts = function () {                                                                                            // 267\n        return current_event.split(separator);                                                                         // 268\n    };                                                                                                                 // 269\n    /*\\\n     * eve.off                                                                                                         // 271\n     [ method ]                                                                                                        // 272\n     **                                                                                                                // 273\n     * Removes given function from the list of event listeners assigned to given name.                                 // 274\n\t * If no arguments specified all the events will be cleared.                                                          // 275\n     **                                                                                                                // 276\n     > Arguments                                                                                                       // 277\n     **                                                                                                                // 278\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 279\n     - f (function) event handler function                                                                             // 280\n    \\*/                                                                                                                // 281\n    /*\\\n     * eve.unbind                                                                                                      // 283\n     [ method ]                                                                                                        // 284\n     **                                                                                                                // 285\n     * See @eve.off                                                                                                    // 286\n    \\*/                                                                                                                // 287\n    eve.off = eve.unbind = function (name, f) {                                                                        // 288\n\t\tif (!name) {                                                                                                         // 289\n\t\t    eve._events = events = {n: {}};                                                                                  // 290\n\t\t\treturn;                                                                                                             // 291\n\t\t}                                                                                                                    // 292\n        var names = name.split(separator),                                                                             // 293\n            e,                                                                                                         // 294\n            key,                                                                                                       // 295\n            splice,                                                                                                    // 296\n            i, ii, j, jj,                                                                                              // 297\n            cur = [events];                                                                                            // 298\n        for (i = 0, ii = names.length; i < ii; i++) {                                                                  // 299\n            for (j = 0; j < cur.length; j += splice.length - 2) {                                                      // 300\n                splice = [j, 1];                                                                                       // 301\n                e = cur[j].n;                                                                                          // 302\n                if (names[i] != wildcard) {                                                                            // 303\n                    if (e[names[i]]) {                                                                                 // 304\n                        splice.push(e[names[i]]);                                                                      // 305\n                    }                                                                                                  // 306\n                } else {                                                                                               // 307\n                    for (key in e) if (e[has](key)) {                                                                  // 308\n                        splice.push(e[key]);                                                                           // 309\n                    }                                                                                                  // 310\n                }                                                                                                      // 311\n                cur.splice.apply(cur, splice);                                                                         // 312\n            }                                                                                                          // 313\n        }                                                                                                              // 314\n        for (i = 0, ii = cur.length; i < ii; i++) {                                                                    // 315\n            e = cur[i];                                                                                                // 316\n            while (e.n) {                                                                                              // 317\n                if (f) {                                                                                               // 318\n                    if (e.f) {                                                                                         // 319\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {                                   // 320\n                            e.f.splice(j, 1);                                                                          // 321\n                            break;                                                                                     // 322\n                        }                                                                                              // 323\n                        !e.f.length && delete e.f;                                                                     // 324\n                    }                                                                                                  // 325\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {                                                // 326\n                        var funcs = e.n[key].f;                                                                        // 327\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {                               // 328\n                            funcs.splice(j, 1);                                                                        // 329\n                            break;                                                                                     // 330\n                        }                                                                                              // 331\n                        !funcs.length && delete e.n[key].f;                                                            // 332\n                    }                                                                                                  // 333\n                } else {                                                                                               // 334\n                    delete e.f;                                                                                        // 335\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {                                                // 336\n                        delete e.n[key].f;                                                                             // 337\n                    }                                                                                                  // 338\n                }                                                                                                      // 339\n                e = e.n;                                                                                               // 340\n            }                                                                                                          // 341\n        }                                                                                                              // 342\n    };                                                                                                                 // 343\n    /*\\\n     * eve.once                                                                                                        // 345\n     [ method ]                                                                                                        // 346\n     **                                                                                                                // 347\n     * Binds given event handler with a given name to only run once then unbind itself.                                // 348\n     | eve.once(\"login\", f);                                                                                           // 349\n     | eve(\"login\"); // triggers f                                                                                     // 350\n     | eve(\"login\"); // no listeners                                                                                   // 351\n     * Use @eve to trigger the listener.                                                                               // 352\n     **                                                                                                                // 353\n     > Arguments                                                                                                       // 354\n     **                                                                                                                // 355\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 356\n     - f (function) event handler function                                                                             // 357\n     **                                                                                                                // 358\n     = (function) same return function as @eve.on                                                                      // 359\n    \\*/                                                                                                                // 360\n    eve.once = function (name, f) {                                                                                    // 361\n        var f2 = function () {                                                                                         // 362\n            eve.unbind(name, f2);                                                                                      // 363\n            return f.apply(this, arguments);                                                                           // 364\n        };                                                                                                             // 365\n        return eve.on(name, f2);                                                                                       // 366\n    };                                                                                                                 // 367\n    /*\\\n     * eve.version                                                                                                     // 369\n     [ property (string) ]                                                                                             // 370\n     **                                                                                                                // 371\n     * Current version of the library.                                                                                 // 372\n    \\*/                                                                                                                // 373\n    eve.version = version;                                                                                             // 374\n    eve.toString = function () {                                                                                       // 375\n        return \"You are running Eve \" + version;                                                                       // 376\n    };                                                                                                                 // 377\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define != \"undefined\" ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(window || this);                                                                                                    // 379\n// ┌─────────────────────────────────────────────────────────────────────┐ \\\\\n// │ \"Raphaël 2.1.2\" - JavaScript Vector Library                         │ \\\\\n// ├─────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\\\\n// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\\\\n// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\\\\n// └─────────────────────────────────────────────────────────────────────┘ \\\\\n                                                                                                                       // 387\n(function (glob, factory) {                                                                                            // 388\n    // AMD support                                                                                                     // 389\n    if (typeof define === \"function\" && define.amd) {                                                                  // 390\n        // Define as an anonymous module                                                                               // 391\n        define([\"eve\"], function( eve ) {                                                                              // 392\n            return factory(glob, eve);                                                                                 // 393\n        });                                                                                                            // 394\n    } else {                                                                                                           // 395\n        // Browser globals (glob is window)                                                                            // 396\n        // Raphael adds itself to window                                                                               // 397\n        factory(glob, glob.eve);                                                                                       // 398\n    }                                                                                                                  // 399\n}(this, function (window, eve) {                                                                                       // 400\n    /*\\\n     * Raphael                                                                                                         // 402\n     [ method ]                                                                                                        // 403\n     **                                                                                                                // 404\n     * Creates a canvas object on which to draw.                                                                       // 405\n     * You must do this first, as all future calls to drawing methods                                                  // 406\n     * from this instance will be bound to this canvas.                                                                // 407\n     > Parameters                                                                                                      // 408\n     **                                                                                                                // 409\n     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface          // 410\n     - width (number)                                                                                                  // 411\n     - height (number)                                                                                                 // 412\n     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n     * or                                                                                                              // 414\n     - x (number)                                                                                                      // 415\n     - y (number)                                                                                                      // 416\n     - width (number)                                                                                                  // 417\n     - height (number)                                                                                                 // 418\n     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n     * or                                                                                                              // 420\n     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n     * or                                                                                                              // 423\n     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n     = (object) @Paper                                                                                                 // 425\n     > Usage                                                                                                           // 426\n     | // Each of the following examples create a canvas                                                               // 427\n     | // that is 320px wide by 200px high.                                                                            // 428\n     | // Canvas is created at the viewport’s 10,50 coordinate.                                                        // 429\n     | var paper = Raphael(10, 50, 320, 200);                                                                          // 430\n     | // Canvas is created at the top left corner of the #notepad element                                             // 431\n     | // (or its top right corner in dir=\"rtl\" elements)                                                              // 432\n     | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);                                              // 433\n     | // Same as above                                                                                                // 434\n     | var paper = Raphael(\"notepad\", 320, 200);                                                                       // 435\n     | // Image dump                                                                                                   // 436\n     | var set = Raphael([\"notepad\", 320, 200, {                                                                       // 437\n     |     type: \"rect\",                                                                                               // 438\n     |     x: 10,                                                                                                      // 439\n     |     y: 10,                                                                                                      // 440\n     |     width: 25,                                                                                                  // 441\n     |     height: 25,                                                                                                 // 442\n     |     stroke: \"#f00\"                                                                                              // 443\n     | }, {                                                                                                            // 444\n     |     type: \"text\",                                                                                               // 445\n     |     x: 30,                                                                                                      // 446\n     |     y: 40,                                                                                                      // 447\n     |     text: \"Dump\"                                                                                                // 448\n     | }]);                                                                                                            // 449\n    \\*/                                                                                                                // 450\n    function R(first) {                                                                                                // 451\n        if (R.is(first, \"function\")) {                                                                                 // 452\n            return loaded ? first() : eve.on(\"raphael.DOMload\", first);                                                // 453\n        } else if (R.is(first, array)) {                                                                               // 454\n            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);                     // 455\n        } else {                                                                                                       // 456\n            var args = Array.prototype.slice.call(arguments, 0);                                                       // 457\n            if (R.is(args[args.length - 1], \"function\")) {                                                             // 458\n                var f = args.pop();                                                                                    // 459\n                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {     // 460\n                    f.call(R._engine.create[apply](R, args));                                                          // 461\n                });                                                                                                    // 462\n            } else {                                                                                                   // 463\n                return R._engine.create[apply](R, arguments);                                                          // 464\n            }                                                                                                          // 465\n        }                                                                                                              // 466\n    }                                                                                                                  // 467\n    R.version = \"2.1.2\";                                                                                               // 468\n    R.eve = eve;                                                                                                       // 469\n    var loaded,                                                                                                        // 470\n        separator = /[, ]+/,                                                                                           // 471\n        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},                                       // 472\n        formatrg = /\\{(\\d+)\\}/g,                                                                                       // 473\n        proto = \"prototype\",                                                                                           // 474\n        has = \"hasOwnProperty\",                                                                                        // 475\n        g = {                                                                                                          // 476\n            doc: document,                                                                                             // 477\n            win: window                                                                                                // 478\n        },                                                                                                             // 479\n        oldRaphael = {                                                                                                 // 480\n            was: Object.prototype[has].call(g.win, \"Raphael\"),                                                         // 481\n            is: g.win.Raphael                                                                                          // 482\n        },                                                                                                             // 483\n        Paper = function () {                                                                                          // 484\n            /*\\\n             * Paper.ca                                                                                                // 486\n             [ property (object) ]                                                                                     // 487\n             **                                                                                                        // 488\n             * Shortcut for @Paper.customAttributes                                                                    // 489\n            \\*/                                                                                                        // 490\n            /*\\\n             * Paper.customAttributes                                                                                  // 492\n             [ property (object) ]                                                                                     // 493\n             **                                                                                                        // 494\n             * If you have a set of attributes that you would like to represent                                        // 495\n             * as a function of some number you can do it easily with custom attributes:                               // 496\n             > Usage                                                                                                   // 497\n             | paper.customAttributes.hue = function (num) {                                                           // 498\n             |     num = num % 1;                                                                                      // 499\n             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};                                                         // 500\n             | };                                                                                                      // 501\n             | // Custom attribute “hue” will change fill                                                              // 502\n             | // to be given hue with fixed saturation and brightness.                                                // 503\n             | // Now you can use it like this:                                                                        // 504\n             | var c = paper.circle(10, 10, 10).attr({hue: .45});                                                      // 505\n             | // or even like this:                                                                                   // 506\n             | c.animate({hue: 1}, 1e3);                                                                               // 507\n             |                                                                                                         // 508\n             | // You could also create custom attribute                                                               // 509\n             | // with multiple parameters:                                                                            // 510\n             | paper.customAttributes.hsb = function (h, s, b) {                                                       // 511\n             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};                                                  // 512\n             | };                                                                                                      // 513\n             | c.attr({hsb: \"0.5 .8 1\"});                                                                              // 514\n             | c.animate({hsb: [1, 0, 0.5]}, 1e3);                                                                     // 515\n            \\*/                                                                                                        // 516\n            this.ca = this.customAttributes = {};                                                                      // 517\n        },                                                                                                             // 518\n        paperproto,                                                                                                    // 519\n        appendChild = \"appendChild\",                                                                                   // 520\n        apply = \"apply\",                                                                                               // 521\n        concat = \"concat\",                                                                                             // 522\n        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test\n        E = \"\",                                                                                                        // 524\n        S = \" \",                                                                                                       // 525\n        Str = String,                                                                                                  // 526\n        split = \"split\",                                                                                               // 527\n        events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n        touchMap = {                                                                                                   // 529\n            mousedown: \"touchstart\",                                                                                   // 530\n            mousemove: \"touchmove\",                                                                                    // 531\n            mouseup: \"touchend\"                                                                                        // 532\n        },                                                                                                             // 533\n        lowerCase = Str.prototype.toLowerCase,                                                                         // 534\n        math = Math,                                                                                                   // 535\n        mmax = math.max,                                                                                               // 536\n        mmin = math.min,                                                                                               // 537\n        abs = math.abs,                                                                                                // 538\n        pow = math.pow,                                                                                                // 539\n        PI = math.PI,                                                                                                  // 540\n        nu = \"number\",                                                                                                 // 541\n        string = \"string\",                                                                                             // 542\n        array = \"array\",                                                                                               // 543\n        toString = \"toString\",                                                                                         // 544\n        fillString = \"fill\",                                                                                           // 545\n        objectToString = Object.prototype.toString,                                                                    // 546\n        paper = {},                                                                                                    // 547\n        push = \"push\",                                                                                                 // 548\n        ISURL = R._ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,                                                            // 549\n        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n        isnan = {\"NaN\": 1, \"Infinity\": 1, \"-Infinity\": 1},                                                             // 551\n        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,                                           // 552\n        round = math.round,                                                                                            // 553\n        setAttribute = \"setAttribute\",                                                                                 // 554\n        toFloat = parseFloat,                                                                                          // 555\n        toInt = parseInt,                                                                                              // 556\n        upperCase = Str.prototype.toUpperCase,                                                                         // 557\n        availableAttrs = R._availableAttrs = {                                                                         // 558\n            \"arrow-end\": \"none\",                                                                                       // 559\n            \"arrow-start\": \"none\",                                                                                     // 560\n            blur: 0,                                                                                                   // 561\n            \"clip-rect\": \"0 0 1e9 1e9\",                                                                                // 562\n            cursor: \"default\",                                                                                         // 563\n            cx: 0,                                                                                                     // 564\n            cy: 0,                                                                                                     // 565\n            fill: \"#fff\",                                                                                              // 566\n            \"fill-opacity\": 1,                                                                                         // 567\n            font: '10px \"Arial\"',                                                                                      // 568\n            \"font-family\": '\"Arial\"',                                                                                  // 569\n            \"font-size\": \"10\",                                                                                         // 570\n            \"font-style\": \"normal\",                                                                                    // 571\n            \"font-weight\": 400,                                                                                        // 572\n            gradient: 0,                                                                                               // 573\n            height: 0,                                                                                                 // 574\n            href: \"http://raphaeljs.com/\",                                                                             // 575\n            \"letter-spacing\": 0,                                                                                       // 576\n            opacity: 1,                                                                                                // 577\n            path: \"M0,0\",                                                                                              // 578\n            r: 0,                                                                                                      // 579\n            rx: 0,                                                                                                     // 580\n            ry: 0,                                                                                                     // 581\n            src: \"\",                                                                                                   // 582\n            stroke: \"#000\",                                                                                            // 583\n            \"stroke-dasharray\": \"\",                                                                                    // 584\n            \"stroke-linecap\": \"butt\",                                                                                  // 585\n            \"stroke-linejoin\": \"butt\",                                                                                 // 586\n            \"stroke-miterlimit\": 0,                                                                                    // 587\n            \"stroke-opacity\": 1,                                                                                       // 588\n            \"stroke-width\": 1,                                                                                         // 589\n            target: \"_blank\",                                                                                          // 590\n            \"text-anchor\": \"middle\",                                                                                   // 591\n            title: \"Raphael\",                                                                                          // 592\n            transform: \"\",                                                                                             // 593\n            width: 0,                                                                                                  // 594\n            x: 0,                                                                                                      // 595\n            y: 0                                                                                                       // 596\n        },                                                                                                             // 597\n        availableAnimAttrs = R._availableAnimAttrs = {                                                                 // 598\n            blur: nu,                                                                                                  // 599\n            \"clip-rect\": \"csv\",                                                                                        // 600\n            cx: nu,                                                                                                    // 601\n            cy: nu,                                                                                                    // 602\n            fill: \"colour\",                                                                                            // 603\n            \"fill-opacity\": nu,                                                                                        // 604\n            \"font-size\": nu,                                                                                           // 605\n            height: nu,                                                                                                // 606\n            opacity: nu,                                                                                               // 607\n            path: \"path\",                                                                                              // 608\n            r: nu,                                                                                                     // 609\n            rx: nu,                                                                                                    // 610\n            ry: nu,                                                                                                    // 611\n            stroke: \"colour\",                                                                                          // 612\n            \"stroke-opacity\": nu,                                                                                      // 613\n            \"stroke-width\": nu,                                                                                        // 614\n            transform: \"transform\",                                                                                    // 615\n            width: nu,                                                                                                 // 616\n            x: nu,                                                                                                     // 617\n            y: nu                                                                                                      // 618\n        },                                                                                                             // 619\n        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n        hsrg = {hs: 1, rg: 1},                                                                                         // 622\n        p2s = /,?([achlmqrstvxz]),?/gi,                                                                                // 623\n        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n        eldata = {},                                                                                                   // 628\n        sortByKey = function (a, b) {                                                                                  // 629\n            return a.key - b.key;                                                                                      // 630\n        },                                                                                                             // 631\n        sortByNumber = function (a, b) {                                                                               // 632\n            return toFloat(a) - toFloat(b);                                                                            // 633\n        },                                                                                                             // 634\n        fun = function () {},                                                                                          // 635\n        pipe = function (x) {                                                                                          // 636\n            return x;                                                                                                  // 637\n        },                                                                                                             // 638\n        rectPath = R._rectPath = function (x, y, w, h, r) {                                                            // 639\n            if (r) {                                                                                                   // 640\n                return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n            }                                                                                                          // 642\n            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];                                       // 643\n        },                                                                                                             // 644\n        ellipsePath = function (x, y, rx, ry) {                                                                        // 645\n            if (ry == null) {                                                                                          // 646\n                ry = rx;                                                                                               // 647\n            }                                                                                                          // 648\n            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n        },                                                                                                             // 650\n        getPath = R._getPath = {                                                                                       // 651\n            path: function (el) {                                                                                      // 652\n                return el.attr(\"path\");                                                                                // 653\n            },                                                                                                         // 654\n            circle: function (el) {                                                                                    // 655\n                var a = el.attrs;                                                                                      // 656\n                return ellipsePath(a.cx, a.cy, a.r);                                                                   // 657\n            },                                                                                                         // 658\n            ellipse: function (el) {                                                                                   // 659\n                var a = el.attrs;                                                                                      // 660\n                return ellipsePath(a.cx, a.cy, a.rx, a.ry);                                                            // 661\n            },                                                                                                         // 662\n            rect: function (el) {                                                                                      // 663\n                var a = el.attrs;                                                                                      // 664\n                return rectPath(a.x, a.y, a.width, a.height, a.r);                                                     // 665\n            },                                                                                                         // 666\n            image: function (el) {                                                                                     // 667\n                var a = el.attrs;                                                                                      // 668\n                return rectPath(a.x, a.y, a.width, a.height);                                                          // 669\n            },                                                                                                         // 670\n            text: function (el) {                                                                                      // 671\n                var bbox = el._getBBox();                                                                              // 672\n                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);                                              // 673\n            },                                                                                                         // 674\n            set : function(el) {                                                                                       // 675\n                var bbox = el._getBBox();                                                                              // 676\n                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);                                              // 677\n            }                                                                                                          // 678\n        },                                                                                                             // 679\n        /*\\\n         * Raphael.mapPath                                                                                             // 681\n         [ method ]                                                                                                    // 682\n         **                                                                                                            // 683\n         * Transform the path string with given matrix.                                                                // 684\n         > Parameters                                                                                                  // 685\n         - path (string) path string                                                                                   // 686\n         - matrix (object) see @Matrix                                                                                 // 687\n         = (string) transformed path string                                                                            // 688\n        \\*/                                                                                                            // 689\n        mapPath = R.mapPath = function (path, matrix) {                                                                // 690\n            if (!matrix) {                                                                                             // 691\n                return path;                                                                                           // 692\n            }                                                                                                          // 693\n            var x, y, i, j, ii, jj, pathi;                                                                             // 694\n            path = path2curve(path);                                                                                   // 695\n            for (i = 0, ii = path.length; i < ii; i++) {                                                               // 696\n                pathi = path[i];                                                                                       // 697\n                for (j = 1, jj = pathi.length; j < jj; j += 2) {                                                       // 698\n                    x = matrix.x(pathi[j], pathi[j + 1]);                                                              // 699\n                    y = matrix.y(pathi[j], pathi[j + 1]);                                                              // 700\n                    pathi[j] = x;                                                                                      // 701\n                    pathi[j + 1] = y;                                                                                  // 702\n                }                                                                                                      // 703\n            }                                                                                                          // 704\n            return path;                                                                                               // 705\n        };                                                                                                             // 706\n                                                                                                                       // 707\n    R._g = g;                                                                                                          // 708\n    /*\\\n     * Raphael.type                                                                                                    // 710\n     [ property (string) ]                                                                                             // 711\n     **                                                                                                                // 712\n     * Can be “SVG”, “VML” or empty, depending on browser support.                                                     // 713\n    \\*/                                                                                                                // 714\n    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\");\n    if (R.type == \"VML\") {                                                                                             // 716\n        var d = g.doc.createElement(\"div\"),                                                                            // 717\n            b;                                                                                                         // 718\n        d.innerHTML = '<v:shape adj=\"1\"/>';                                                                            // 719\n        b = d.firstChild;                                                                                              // 720\n        b.style.behavior = \"url(#default#VML)\";                                                                        // 721\n        if (!(b && typeof b.adj == \"object\")) {                                                                        // 722\n            return (R.type = E);                                                                                       // 723\n        }                                                                                                              // 724\n        d = null;                                                                                                      // 725\n    }                                                                                                                  // 726\n    /*\\\n     * Raphael.svg                                                                                                     // 728\n     [ property (boolean) ]                                                                                            // 729\n     **                                                                                                                // 730\n     * `true` if browser supports SVG.                                                                                 // 731\n    \\*/                                                                                                                // 732\n    /*\\\n     * Raphael.vml                                                                                                     // 734\n     [ property (boolean) ]                                                                                            // 735\n     **                                                                                                                // 736\n     * `true` if browser supports VML.                                                                                 // 737\n    \\*/                                                                                                                // 738\n    R.svg = !(R.vml = R.type == \"VML\");                                                                                // 739\n    R._Paper = Paper;                                                                                                  // 740\n    /*\\\n     * Raphael.fn                                                                                                      // 742\n     [ property (object) ]                                                                                             // 743\n     **                                                                                                                // 744\n     * You can add your own method to the canvas. For example if you want to draw a pie chart,                         // 745\n     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this                          // 746\n     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a                          // 747\n     * Raphaël instance is created, otherwise it will take no effect. Please note that the                             // 748\n     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to                            // 749\n     * ensure any namespacing ensures proper context.                                                                  // 750\n     > Usage                                                                                                           // 751\n     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {                                                            // 752\n     |     return this.path( ... );                                                                                    // 753\n     | };                                                                                                              // 754\n     | // or create namespace                                                                                          // 755\n     | Raphael.fn.mystuff = {                                                                                          // 756\n     |     arrow: function () {…},                                                                                     // 757\n     |     star: function () {…},                                                                                      // 758\n     |     // etc…                                                                                                     // 759\n     | };                                                                                                              // 760\n     | var paper = Raphael(10, 10, 630, 480);                                                                          // 761\n     | // then use it                                                                                                  // 762\n     | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});                                                            // 763\n     | paper.mystuff.arrow();                                                                                          // 764\n     | paper.mystuff.star();                                                                                           // 765\n    \\*/                                                                                                                // 766\n    R.fn = paperproto = Paper.prototype = R.prototype;                                                                 // 767\n    R._id = 0;                                                                                                         // 768\n    R._oid = 0;                                                                                                        // 769\n    /*\\\n     * Raphael.is                                                                                                      // 771\n     [ method ]                                                                                                        // 772\n     **                                                                                                                // 773\n     * Handfull replacement for `typeof` operator.                                                                     // 774\n     > Parameters                                                                                                      // 775\n     - o (…) any object or primitive                                                                                   // 776\n     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.                                       // 777\n     = (boolean) is given value is of given type                                                                       // 778\n    \\*/                                                                                                                // 779\n    R.is = function (o, type) {                                                                                        // 780\n        type = lowerCase.call(type);                                                                                   // 781\n        if (type == \"finite\") {                                                                                        // 782\n            return !isnan[has](+o);                                                                                    // 783\n        }                                                                                                              // 784\n        if (type == \"array\") {                                                                                         // 785\n            return o instanceof Array;                                                                                 // 786\n        }                                                                                                              // 787\n        return  (type == \"null\" && o === null) ||                                                                      // 788\n                (type == typeof o && o !== null) ||                                                                    // 789\n                (type == \"object\" && o === Object(o)) ||                                                               // 790\n                (type == \"array\" && Array.isArray && Array.isArray(o)) ||                                              // 791\n                objectToString.call(o).slice(8, -1).toLowerCase() == type;                                             // 792\n    };                                                                                                                 // 793\n                                                                                                                       // 794\n    function clone(obj) {                                                                                              // 795\n        if (typeof obj == \"function\" || Object(obj) !== obj) {                                                         // 796\n            return obj;                                                                                                // 797\n        }                                                                                                              // 798\n        var res = new obj.constructor;                                                                                 // 799\n        for (var key in obj) if (obj[has](key)) {                                                                      // 800\n            res[key] = clone(obj[key]);                                                                                // 801\n        }                                                                                                              // 802\n        return res;                                                                                                    // 803\n    }                                                                                                                  // 804\n                                                                                                                       // 805\n    /*\\\n     * Raphael.angle                                                                                                   // 807\n     [ method ]                                                                                                        // 808\n     **                                                                                                                // 809\n     * Returns angle between two or three points                                                                       // 810\n     > Parameters                                                                                                      // 811\n     - x1 (number) x coord of first point                                                                              // 812\n     - y1 (number) y coord of first point                                                                              // 813\n     - x2 (number) x coord of second point                                                                             // 814\n     - y2 (number) y coord of second point                                                                             // 815\n     - x3 (number) #optional x coord of third point                                                                    // 816\n     - y3 (number) #optional y coord of third point                                                                    // 817\n     = (number) angle in degrees.                                                                                      // 818\n    \\*/                                                                                                                // 819\n    R.angle = function (x1, y1, x2, y2, x3, y3) {                                                                      // 820\n        if (x3 == null) {                                                                                              // 821\n            var x = x1 - x2,                                                                                           // 822\n                y = y1 - y2;                                                                                           // 823\n            if (!x && !y) {                                                                                            // 824\n                return 0;                                                                                              // 825\n            }                                                                                                          // 826\n            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;                                                  // 827\n        } else {                                                                                                       // 828\n            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);                                                  // 829\n        }                                                                                                              // 830\n    };                                                                                                                 // 831\n    /*\\\n     * Raphael.rad                                                                                                     // 833\n     [ method ]                                                                                                        // 834\n     **                                                                                                                // 835\n     * Transform angle to radians                                                                                      // 836\n     > Parameters                                                                                                      // 837\n     - deg (number) angle in degrees                                                                                   // 838\n     = (number) angle in radians.                                                                                      // 839\n    \\*/                                                                                                                // 840\n    R.rad = function (deg) {                                                                                           // 841\n        return deg % 360 * PI / 180;                                                                                   // 842\n    };                                                                                                                 // 843\n    /*\\\n     * Raphael.deg                                                                                                     // 845\n     [ method ]                                                                                                        // 846\n     **                                                                                                                // 847\n     * Transform angle to degrees                                                                                      // 848\n     > Parameters                                                                                                      // 849\n     - deg (number) angle in radians                                                                                   // 850\n     = (number) angle in degrees.                                                                                      // 851\n    \\*/                                                                                                                // 852\n    R.deg = function (rad) {                                                                                           // 853\n        return rad * 180 / PI % 360;                                                                                   // 854\n    };                                                                                                                 // 855\n    /*\\\n     * Raphael.snapTo                                                                                                  // 857\n     [ method ]                                                                                                        // 858\n     **                                                                                                                // 859\n     * Snaps given value to given grid.                                                                                // 860\n     > Parameters                                                                                                      // 861\n     - values (array|number) given array of values or step of the grid                                                 // 862\n     - value (number) value to adjust                                                                                  // 863\n     - tolerance (number) #optional tolerance for snapping. Default is `10`.                                           // 864\n     = (number) adjusted value.                                                                                        // 865\n    \\*/                                                                                                                // 866\n    R.snapTo = function (values, value, tolerance) {                                                                   // 867\n        tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;                                                        // 868\n        if (R.is(values, array)) {                                                                                     // 869\n            var i = values.length;                                                                                     // 870\n            while (i--) if (abs(values[i] - value) <= tolerance) {                                                     // 871\n                return values[i];                                                                                      // 872\n            }                                                                                                          // 873\n        } else {                                                                                                       // 874\n            values = +values;                                                                                          // 875\n            var rem = value % values;                                                                                  // 876\n            if (rem < tolerance) {                                                                                     // 877\n                return value - rem;                                                                                    // 878\n            }                                                                                                          // 879\n            if (rem > values - tolerance) {                                                                            // 880\n                return value - rem + values;                                                                           // 881\n            }                                                                                                          // 882\n        }                                                                                                              // 883\n        return value;                                                                                                  // 884\n    };                                                                                                                 // 885\n                                                                                                                       // 886\n    /*\\\n     * Raphael.createUUID                                                                                              // 888\n     [ method ]                                                                                                        // 889\n     **                                                                                                                // 890\n     * Returns RFC4122, version 4 ID                                                                                   // 891\n    \\*/                                                                                                                // 892\n    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {                                              // 893\n        return function () {                                                                                           // 894\n            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();              // 895\n        };                                                                                                             // 896\n    })(/[xy]/g, function (c) {                                                                                         // 897\n        var r = math.random() * 16 | 0,                                                                                // 898\n            v = c == \"x\" ? r : (r & 3 | 8);                                                                            // 899\n        return v.toString(16);                                                                                         // 900\n    });                                                                                                                // 901\n                                                                                                                       // 902\n    /*\\\n     * Raphael.setWindow                                                                                               // 904\n     [ method ]                                                                                                        // 905\n     **                                                                                                                // 906\n     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.                                 // 907\n     > Parameters                                                                                                      // 908\n     - newwin (window) new window object                                                                               // 909\n    \\*/                                                                                                                // 910\n    R.setWindow = function (newwin) {                                                                                  // 911\n        eve(\"raphael.setWindow\", R, g.win, newwin);                                                                    // 912\n        g.win = newwin;                                                                                                // 913\n        g.doc = g.win.document;                                                                                        // 914\n        if (R._engine.initWin) {                                                                                       // 915\n            R._engine.initWin(g.win);                                                                                  // 916\n        }                                                                                                              // 917\n    };                                                                                                                 // 918\n    var toHex = function (color) {                                                                                     // 919\n        if (R.vml) {                                                                                                   // 920\n            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/                        // 921\n            var trim = /^\\s+|\\s+$/g;                                                                                   // 922\n            var bod;                                                                                                   // 923\n            try {                                                                                                      // 924\n                var docum = new ActiveXObject(\"htmlfile\");                                                             // 925\n                docum.write(\"<body>\");                                                                                 // 926\n                docum.close();                                                                                         // 927\n                bod = docum.body;                                                                                      // 928\n            } catch(e) {                                                                                               // 929\n                bod = createPopup().document.body;                                                                     // 930\n            }                                                                                                          // 931\n            var range = bod.createTextRange();                                                                         // 932\n            toHex = cacher(function (color) {                                                                          // 933\n                try {                                                                                                  // 934\n                    bod.style.color = Str(color).replace(trim, E);                                                     // 935\n                    var value = range.queryCommandValue(\"ForeColor\");                                                  // 936\n                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);                     // 937\n                    return \"#\" + (\"000000\" + value.toString(16)).slice(-6);                                            // 938\n                } catch(e) {                                                                                           // 939\n                    return \"none\";                                                                                     // 940\n                }                                                                                                      // 941\n            });                                                                                                        // 942\n        } else {                                                                                                       // 943\n            var i = g.doc.createElement(\"i\");                                                                          // 944\n            i.title = \"Rapha\\xebl Colour Picker\";                                                                      // 945\n            i.style.display = \"none\";                                                                                  // 946\n            g.doc.body.appendChild(i);                                                                                 // 947\n            toHex = cacher(function (color) {                                                                          // 948\n                i.style.color = color;                                                                                 // 949\n                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");                             // 950\n            });                                                                                                        // 951\n        }                                                                                                              // 952\n        return toHex(color);                                                                                           // 953\n    },                                                                                                                 // 954\n    hsbtoString = function () {                                                                                        // 955\n        return \"hsb(\" + [this.h, this.s, this.b] + \")\";                                                                // 956\n    },                                                                                                                 // 957\n    hsltoString = function () {                                                                                        // 958\n        return \"hsl(\" + [this.h, this.s, this.l] + \")\";                                                                // 959\n    },                                                                                                                 // 960\n    rgbtoString = function () {                                                                                        // 961\n        return this.hex;                                                                                               // 962\n    },                                                                                                                 // 963\n    prepareRGB = function (r, g, b) {                                                                                  // 964\n        if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {                                      // 965\n            b = r.b;                                                                                                   // 966\n            g = r.g;                                                                                                   // 967\n            r = r.r;                                                                                                   // 968\n        }                                                                                                              // 969\n        if (g == null && R.is(r, string)) {                                                                            // 970\n            var clr = R.getRGB(r);                                                                                     // 971\n            r = clr.r;                                                                                                 // 972\n            g = clr.g;                                                                                                 // 973\n            b = clr.b;                                                                                                 // 974\n        }                                                                                                              // 975\n        if (r > 1 || g > 1 || b > 1) {                                                                                 // 976\n            r /= 255;                                                                                                  // 977\n            g /= 255;                                                                                                  // 978\n            b /= 255;                                                                                                  // 979\n        }                                                                                                              // 980\n                                                                                                                       // 981\n        return [r, g, b];                                                                                              // 982\n    },                                                                                                                 // 983\n    packageRGB = function (r, g, b, o) {                                                                               // 984\n        r *= 255;                                                                                                      // 985\n        g *= 255;                                                                                                      // 986\n        b *= 255;                                                                                                      // 987\n        var rgb = {                                                                                                    // 988\n            r: r,                                                                                                      // 989\n            g: g,                                                                                                      // 990\n            b: b,                                                                                                      // 991\n            hex: R.rgb(r, g, b),                                                                                       // 992\n            toString: rgbtoString                                                                                      // 993\n        };                                                                                                             // 994\n        R.is(o, \"finite\") && (rgb.opacity = o);                                                                        // 995\n        return rgb;                                                                                                    // 996\n    };                                                                                                                 // 997\n                                                                                                                       // 998\n    /*\\\n     * Raphael.color                                                                                                   // 1000\n     [ method ]                                                                                                        // 1001\n     **                                                                                                                // 1002\n     * Parses the color string and returns object with all values for the given color.                                 // 1003\n     > Parameters                                                                                                      // 1004\n     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)                                 // 1005\n     = (object) Combined RGB & HSB object in format:                                                                   // 1006\n     o {                                                                                                               // 1007\n     o     r (number) red,                                                                                             // 1008\n     o     g (number) green,                                                                                           // 1009\n     o     b (number) blue,                                                                                            // 1010\n     o     hex (string) color in HTML/CSS format: #••••••,                                                             // 1011\n     o     error (boolean) `true` if string can’t be parsed,                                                           // 1012\n     o     h (number) hue,                                                                                             // 1013\n     o     s (number) saturation,                                                                                      // 1014\n     o     v (number) value (brightness),                                                                              // 1015\n     o     l (number) lightness                                                                                        // 1016\n     o }                                                                                                               // 1017\n    \\*/                                                                                                                // 1018\n    R.color = function (clr) {                                                                                         // 1019\n        var rgb;                                                                                                       // 1020\n        if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {                                           // 1021\n            rgb = R.hsb2rgb(clr);                                                                                      // 1022\n            clr.r = rgb.r;                                                                                             // 1023\n            clr.g = rgb.g;                                                                                             // 1024\n            clr.b = rgb.b;                                                                                             // 1025\n            clr.hex = rgb.hex;                                                                                         // 1026\n        } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {                                    // 1027\n            rgb = R.hsl2rgb(clr);                                                                                      // 1028\n            clr.r = rgb.r;                                                                                             // 1029\n            clr.g = rgb.g;                                                                                             // 1030\n            clr.b = rgb.b;                                                                                             // 1031\n            clr.hex = rgb.hex;                                                                                         // 1032\n        } else {                                                                                                       // 1033\n            if (R.is(clr, \"string\")) {                                                                                 // 1034\n                clr = R.getRGB(clr);                                                                                   // 1035\n            }                                                                                                          // 1036\n            if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {                                       // 1037\n                rgb = R.rgb2hsl(clr);                                                                                  // 1038\n                clr.h = rgb.h;                                                                                         // 1039\n                clr.s = rgb.s;                                                                                         // 1040\n                clr.l = rgb.l;                                                                                         // 1041\n                rgb = R.rgb2hsb(clr);                                                                                  // 1042\n                clr.v = rgb.b;                                                                                         // 1043\n            } else {                                                                                                   // 1044\n                clr = {hex: \"none\"};                                                                                   // 1045\n                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;                                            // 1046\n            }                                                                                                          // 1047\n        }                                                                                                              // 1048\n        clr.toString = rgbtoString;                                                                                    // 1049\n        return clr;                                                                                                    // 1050\n    };                                                                                                                 // 1051\n    /*\\\n     * Raphael.hsb2rgb                                                                                                 // 1053\n     [ method ]                                                                                                        // 1054\n     **                                                                                                                // 1055\n     * Converts HSB values to RGB object.                                                                              // 1056\n     > Parameters                                                                                                      // 1057\n     - h (number) hue                                                                                                  // 1058\n     - s (number) saturation                                                                                           // 1059\n     - v (number) value or brightness                                                                                  // 1060\n     = (object) RGB object in format:                                                                                  // 1061\n     o {                                                                                                               // 1062\n     o     r (number) red,                                                                                             // 1063\n     o     g (number) green,                                                                                           // 1064\n     o     b (number) blue,                                                                                            // 1065\n     o     hex (string) color in HTML/CSS format: #••••••                                                              // 1066\n     o }                                                                                                               // 1067\n    \\*/                                                                                                                // 1068\n    R.hsb2rgb = function (h, s, v, o) {                                                                                // 1069\n        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {                                                // 1070\n            v = h.b;                                                                                                   // 1071\n            s = h.s;                                                                                                   // 1072\n            h = h.h;                                                                                                   // 1073\n            o = h.o;                                                                                                   // 1074\n        }                                                                                                              // 1075\n        h *= 360;                                                                                                      // 1076\n        var R, G, B, X, C;                                                                                             // 1077\n        h = (h % 360) / 60;                                                                                            // 1078\n        C = v * s;                                                                                                     // 1079\n        X = C * (1 - abs(h % 2 - 1));                                                                                  // 1080\n        R = G = B = v - C;                                                                                             // 1081\n                                                                                                                       // 1082\n        h = ~~h;                                                                                                       // 1083\n        R += [C, X, 0, 0, X, C][h];                                                                                    // 1084\n        G += [X, C, C, X, 0, 0][h];                                                                                    // 1085\n        B += [0, 0, X, C, C, X][h];                                                                                    // 1086\n        return packageRGB(R, G, B, o);                                                                                 // 1087\n    };                                                                                                                 // 1088\n    /*\\\n     * Raphael.hsl2rgb                                                                                                 // 1090\n     [ method ]                                                                                                        // 1091\n     **                                                                                                                // 1092\n     * Converts HSL values to RGB object.                                                                              // 1093\n     > Parameters                                                                                                      // 1094\n     - h (number) hue                                                                                                  // 1095\n     - s (number) saturation                                                                                           // 1096\n     - l (number) luminosity                                                                                           // 1097\n     = (object) RGB object in format:                                                                                  // 1098\n     o {                                                                                                               // 1099\n     o     r (number) red,                                                                                             // 1100\n     o     g (number) green,                                                                                           // 1101\n     o     b (number) blue,                                                                                            // 1102\n     o     hex (string) color in HTML/CSS format: #••••••                                                              // 1103\n     o }                                                                                                               // 1104\n    \\*/                                                                                                                // 1105\n    R.hsl2rgb = function (h, s, l, o) {                                                                                // 1106\n        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {                                                // 1107\n            l = h.l;                                                                                                   // 1108\n            s = h.s;                                                                                                   // 1109\n            h = h.h;                                                                                                   // 1110\n        }                                                                                                              // 1111\n        if (h > 1 || s > 1 || l > 1) {                                                                                 // 1112\n            h /= 360;                                                                                                  // 1113\n            s /= 100;                                                                                                  // 1114\n            l /= 100;                                                                                                  // 1115\n        }                                                                                                              // 1116\n        h *= 360;                                                                                                      // 1117\n        var R, G, B, X, C;                                                                                             // 1118\n        h = (h % 360) / 60;                                                                                            // 1119\n        C = 2 * s * (l < .5 ? l : 1 - l);                                                                              // 1120\n        X = C * (1 - abs(h % 2 - 1));                                                                                  // 1121\n        R = G = B = l - C / 2;                                                                                         // 1122\n                                                                                                                       // 1123\n        h = ~~h;                                                                                                       // 1124\n        R += [C, X, 0, 0, X, C][h];                                                                                    // 1125\n        G += [X, C, C, X, 0, 0][h];                                                                                    // 1126\n        B += [0, 0, X, C, C, X][h];                                                                                    // 1127\n        return packageRGB(R, G, B, o);                                                                                 // 1128\n    };                                                                                                                 // 1129\n    /*\\\n     * Raphael.rgb2hsb                                                                                                 // 1131\n     [ method ]                                                                                                        // 1132\n     **                                                                                                                // 1133\n     * Converts RGB values to HSB object.                                                                              // 1134\n     > Parameters                                                                                                      // 1135\n     - r (number) red                                                                                                  // 1136\n     - g (number) green                                                                                                // 1137\n     - b (number) blue                                                                                                 // 1138\n     = (object) HSB object in format:                                                                                  // 1139\n     o {                                                                                                               // 1140\n     o     h (number) hue                                                                                              // 1141\n     o     s (number) saturation                                                                                       // 1142\n     o     b (number) brightness                                                                                       // 1143\n     o }                                                                                                               // 1144\n    \\*/                                                                                                                // 1145\n    R.rgb2hsb = function (r, g, b) {                                                                                   // 1146\n        b = prepareRGB(r, g, b);                                                                                       // 1147\n        r = b[0];                                                                                                      // 1148\n        g = b[1];                                                                                                      // 1149\n        b = b[2];                                                                                                      // 1150\n                                                                                                                       // 1151\n        var H, S, V, C;                                                                                                // 1152\n        V = mmax(r, g, b);                                                                                             // 1153\n        C = V - mmin(r, g, b);                                                                                         // 1154\n        H = (C == 0 ? null :                                                                                           // 1155\n             V == r ? (g - b) / C :                                                                                    // 1156\n             V == g ? (b - r) / C + 2 :                                                                                // 1157\n                      (r - g) / C + 4                                                                                  // 1158\n            );                                                                                                         // 1159\n        H = ((H + 360) % 6) * 60 / 360;                                                                                // 1160\n        S = C == 0 ? 0 : C / V;                                                                                        // 1161\n        return {h: H, s: S, b: V, toString: hsbtoString};                                                              // 1162\n    };                                                                                                                 // 1163\n    /*\\\n     * Raphael.rgb2hsl                                                                                                 // 1165\n     [ method ]                                                                                                        // 1166\n     **                                                                                                                // 1167\n     * Converts RGB values to HSL object.                                                                              // 1168\n     > Parameters                                                                                                      // 1169\n     - r (number) red                                                                                                  // 1170\n     - g (number) green                                                                                                // 1171\n     - b (number) blue                                                                                                 // 1172\n     = (object) HSL object in format:                                                                                  // 1173\n     o {                                                                                                               // 1174\n     o     h (number) hue                                                                                              // 1175\n     o     s (number) saturation                                                                                       // 1176\n     o     l (number) luminosity                                                                                       // 1177\n     o }                                                                                                               // 1178\n    \\*/                                                                                                                // 1179\n    R.rgb2hsl = function (r, g, b) {                                                                                   // 1180\n        b = prepareRGB(r, g, b);                                                                                       // 1181\n        r = b[0];                                                                                                      // 1182\n        g = b[1];                                                                                                      // 1183\n        b = b[2];                                                                                                      // 1184\n                                                                                                                       // 1185\n        var H, S, L, M, m, C;                                                                                          // 1186\n        M = mmax(r, g, b);                                                                                             // 1187\n        m = mmin(r, g, b);                                                                                             // 1188\n        C = M - m;                                                                                                     // 1189\n        H = (C == 0 ? null :                                                                                           // 1190\n             M == r ? (g - b) / C :                                                                                    // 1191\n             M == g ? (b - r) / C + 2 :                                                                                // 1192\n                      (r - g) / C + 4);                                                                                // 1193\n        H = ((H + 360) % 6) * 60 / 360;                                                                                // 1194\n        L = (M + m) / 2;                                                                                               // 1195\n        S = (C == 0 ? 0 :                                                                                              // 1196\n             L < .5 ? C / (2 * L) :                                                                                    // 1197\n                      C / (2 - 2 * L));                                                                                // 1198\n        return {h: H, s: S, l: L, toString: hsltoString};                                                              // 1199\n    };                                                                                                                 // 1200\n    R._path2string = function () {                                                                                     // 1201\n        return this.join(\",\").replace(p2s, \"$1\");                                                                      // 1202\n    };                                                                                                                 // 1203\n    function repush(array, item) {                                                                                     // 1204\n        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {                                       // 1205\n            return array.push(array.splice(i, 1)[0]);                                                                  // 1206\n        }                                                                                                              // 1207\n    }                                                                                                                  // 1208\n    function cacher(f, scope, postprocessor) {                                                                         // 1209\n        function newf() {                                                                                              // 1210\n            var arg = Array.prototype.slice.call(arguments, 0),                                                        // 1211\n                args = arg.join(\"\\u2400\"),                                                                             // 1212\n                cache = newf.cache = newf.cache || {},                                                                 // 1213\n                count = newf.count = newf.count || [];                                                                 // 1214\n            if (cache[has](args)) {                                                                                    // 1215\n                repush(count, args);                                                                                   // 1216\n                return postprocessor ? postprocessor(cache[args]) : cache[args];                                       // 1217\n            }                                                                                                          // 1218\n            count.length >= 1e3 && delete cache[count.shift()];                                                        // 1219\n            count.push(args);                                                                                          // 1220\n            cache[args] = f[apply](scope, arg);                                                                        // 1221\n            return postprocessor ? postprocessor(cache[args]) : cache[args];                                           // 1222\n        }                                                                                                              // 1223\n        return newf;                                                                                                   // 1224\n    }                                                                                                                  // 1225\n                                                                                                                       // 1226\n    var preload = R._preload = function (src, f) {                                                                     // 1227\n        var img = g.doc.createElement(\"img\");                                                                          // 1228\n        img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";                                              // 1229\n        img.onload = function () {                                                                                     // 1230\n            f.call(this);                                                                                              // 1231\n            this.onload = null;                                                                                        // 1232\n            g.doc.body.removeChild(this);                                                                              // 1233\n        };                                                                                                             // 1234\n        img.onerror = function () {                                                                                    // 1235\n            g.doc.body.removeChild(this);                                                                              // 1236\n        };                                                                                                             // 1237\n        g.doc.body.appendChild(img);                                                                                   // 1238\n        img.src = src;                                                                                                 // 1239\n    };                                                                                                                 // 1240\n                                                                                                                       // 1241\n    function clrToString() {                                                                                           // 1242\n        return this.hex;                                                                                               // 1243\n    }                                                                                                                  // 1244\n                                                                                                                       // 1245\n    /*\\\n     * Raphael.getRGB                                                                                                  // 1247\n     [ method ]                                                                                                        // 1248\n     **                                                                                                                // 1249\n     * Parses colour string as RGB object                                                                              // 1250\n     > Parameters                                                                                                      // 1251\n     - colour (string) colour string in one of formats:                                                                // 1252\n     # <ul>                                                                                                            // 1253\n     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>         // 1254\n     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>                      // 1255\n     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>                // 1256\n     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>    // 1258\n     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>                                                    // 1260\n     #     <li>hsl(•••, •••, •••) — same as hsb</li>                                                                   // 1261\n     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>                                                                // 1262\n     # </ul>                                                                                                           // 1263\n     = (object) RGB object in format:                                                                                  // 1264\n     o {                                                                                                               // 1265\n     o     r (number) red,                                                                                             // 1266\n     o     g (number) green,                                                                                           // 1267\n     o     b (number) blue                                                                                             // 1268\n     o     hex (string) color in HTML/CSS format: #••••••,                                                             // 1269\n     o     error (boolean) true if string can’t be parsed                                                              // 1270\n     o }                                                                                                               // 1271\n    \\*/                                                                                                                // 1272\n    R.getRGB = cacher(function (colour) {                                                                              // 1273\n        if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {                                                  // 1274\n            return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};                                // 1275\n        }                                                                                                              // 1276\n        if (colour == \"none\") {                                                                                        // 1277\n            return {r: -1, g: -1, b: -1, hex: \"none\", toString: clrToString};                                          // 1278\n        }                                                                                                              // 1279\n        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));      // 1280\n        var res,                                                                                                       // 1281\n            red,                                                                                                       // 1282\n            green,                                                                                                     // 1283\n            blue,                                                                                                      // 1284\n            opacity,                                                                                                   // 1285\n            t,                                                                                                         // 1286\n            values,                                                                                                    // 1287\n            rgb = colour.match(colourRegExp);                                                                          // 1288\n        if (rgb) {                                                                                                     // 1289\n            if (rgb[2]) {                                                                                              // 1290\n                blue = toInt(rgb[2].substring(5), 16);                                                                 // 1291\n                green = toInt(rgb[2].substring(3, 5), 16);                                                             // 1292\n                red = toInt(rgb[2].substring(1, 3), 16);                                                               // 1293\n            }                                                                                                          // 1294\n            if (rgb[3]) {                                                                                              // 1295\n                blue = toInt((t = rgb[3].charAt(3)) + t, 16);                                                          // 1296\n                green = toInt((t = rgb[3].charAt(2)) + t, 16);                                                         // 1297\n                red = toInt((t = rgb[3].charAt(1)) + t, 16);                                                           // 1298\n            }                                                                                                          // 1299\n            if (rgb[4]) {                                                                                              // 1300\n                values = rgb[4][split](commaSpaces);                                                                   // 1301\n                red = toFloat(values[0]);                                                                              // 1302\n                values[0].slice(-1) == \"%\" && (red *= 2.55);                                                           // 1303\n                green = toFloat(values[1]);                                                                            // 1304\n                values[1].slice(-1) == \"%\" && (green *= 2.55);                                                         // 1305\n                blue = toFloat(values[2]);                                                                             // 1306\n                values[2].slice(-1) == \"%\" && (blue *= 2.55);                                                          // 1307\n                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));                          // 1308\n                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);                                           // 1309\n            }                                                                                                          // 1310\n            if (rgb[5]) {                                                                                              // 1311\n                values = rgb[5][split](commaSpaces);                                                                   // 1312\n                red = toFloat(values[0]);                                                                              // 1313\n                values[0].slice(-1) == \"%\" && (red *= 2.55);                                                           // 1314\n                green = toFloat(values[1]);                                                                            // 1315\n                values[1].slice(-1) == \"%\" && (green *= 2.55);                                                         // 1316\n                blue = toFloat(values[2]);                                                                             // 1317\n                values[2].slice(-1) == \"%\" && (blue *= 2.55);                                                          // 1318\n                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);                       // 1319\n                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));                          // 1320\n                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);                                           // 1321\n                return R.hsb2rgb(red, green, blue, opacity);                                                           // 1322\n            }                                                                                                          // 1323\n            if (rgb[6]) {                                                                                              // 1324\n                values = rgb[6][split](commaSpaces);                                                                   // 1325\n                red = toFloat(values[0]);                                                                              // 1326\n                values[0].slice(-1) == \"%\" && (red *= 2.55);                                                           // 1327\n                green = toFloat(values[1]);                                                                            // 1328\n                values[1].slice(-1) == \"%\" && (green *= 2.55);                                                         // 1329\n                blue = toFloat(values[2]);                                                                             // 1330\n                values[2].slice(-1) == \"%\" && (blue *= 2.55);                                                          // 1331\n                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);                       // 1332\n                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));                          // 1333\n                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);                                           // 1334\n                return R.hsl2rgb(red, green, blue, opacity);                                                           // 1335\n            }                                                                                                          // 1336\n            rgb = {r: red, g: green, b: blue, toString: clrToString};                                                  // 1337\n            rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);                      // 1338\n            R.is(opacity, \"finite\") && (rgb.opacity = opacity);                                                        // 1339\n            return rgb;                                                                                                // 1340\n        }                                                                                                              // 1341\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};                                    // 1342\n    }, R);                                                                                                             // 1343\n    /*\\\n     * Raphael.hsb                                                                                                     // 1345\n     [ method ]                                                                                                        // 1346\n     **                                                                                                                // 1347\n     * Converts HSB values to hex representation of the colour.                                                        // 1348\n     > Parameters                                                                                                      // 1349\n     - h (number) hue                                                                                                  // 1350\n     - s (number) saturation                                                                                           // 1351\n     - b (number) value or brightness                                                                                  // 1352\n     = (string) hex representation of the colour.                                                                      // 1353\n    \\*/                                                                                                                // 1354\n    R.hsb = cacher(function (h, s, b) {                                                                                // 1355\n        return R.hsb2rgb(h, s, b).hex;                                                                                 // 1356\n    });                                                                                                                // 1357\n    /*\\\n     * Raphael.hsl                                                                                                     // 1359\n     [ method ]                                                                                                        // 1360\n     **                                                                                                                // 1361\n     * Converts HSL values to hex representation of the colour.                                                        // 1362\n     > Parameters                                                                                                      // 1363\n     - h (number) hue                                                                                                  // 1364\n     - s (number) saturation                                                                                           // 1365\n     - l (number) luminosity                                                                                           // 1366\n     = (string) hex representation of the colour.                                                                      // 1367\n    \\*/                                                                                                                // 1368\n    R.hsl = cacher(function (h, s, l) {                                                                                // 1369\n        return R.hsl2rgb(h, s, l).hex;                                                                                 // 1370\n    });                                                                                                                // 1371\n    /*\\\n     * Raphael.rgb                                                                                                     // 1373\n     [ method ]                                                                                                        // 1374\n     **                                                                                                                // 1375\n     * Converts RGB values to hex representation of the colour.                                                        // 1376\n     > Parameters                                                                                                      // 1377\n     - r (number) red                                                                                                  // 1378\n     - g (number) green                                                                                                // 1379\n     - b (number) blue                                                                                                 // 1380\n     = (string) hex representation of the colour.                                                                      // 1381\n    \\*/                                                                                                                // 1382\n    R.rgb = cacher(function (r, g, b) {                                                                                // 1383\n        return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);                                      // 1384\n    });                                                                                                                // 1385\n    /*\\\n     * Raphael.getColor                                                                                                // 1387\n     [ method ]                                                                                                        // 1388\n     **                                                                                                                // 1389\n     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset          // 1390\n     > Parameters                                                                                                      // 1391\n     - value (number) #optional brightness, default is `0.75`                                                          // 1392\n     = (string) hex representation of the colour.                                                                      // 1393\n    \\*/                                                                                                                // 1394\n    R.getColor = function (value) {                                                                                    // 1395\n        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},                        // 1396\n            rgb = this.hsb2rgb(start.h, start.s, start.b);                                                             // 1397\n        start.h += .075;                                                                                               // 1398\n        if (start.h > 1) {                                                                                             // 1399\n            start.h = 0;                                                                                               // 1400\n            start.s -= .2;                                                                                             // 1401\n            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});                                          // 1402\n        }                                                                                                              // 1403\n        return rgb.hex;                                                                                                // 1404\n    };                                                                                                                 // 1405\n    /*\\\n     * Raphael.getColor.reset                                                                                          // 1407\n     [ method ]                                                                                                        // 1408\n     **                                                                                                                // 1409\n     * Resets spectrum position for @Raphael.getColor back to red.                                                     // 1410\n    \\*/                                                                                                                // 1411\n    R.getColor.reset = function () {                                                                                   // 1412\n        delete this.start;                                                                                             // 1413\n    };                                                                                                                 // 1414\n                                                                                                                       // 1415\n    // http://schepers.cc/getting-to-the-point                                                                         // 1416\n    function catmullRom2bezier(crp, z) {                                                                               // 1417\n        var d = [];                                                                                                    // 1418\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {                                                // 1419\n            var p = [                                                                                                  // 1420\n                        {x: +crp[i - 2], y: +crp[i - 1]},                                                              // 1421\n                        {x: +crp[i],     y: +crp[i + 1]},                                                              // 1422\n                        {x: +crp[i + 2], y: +crp[i + 3]},                                                              // 1423\n                        {x: +crp[i + 4], y: +crp[i + 5]}                                                               // 1424\n                    ];                                                                                                 // 1425\n            if (z) {                                                                                                   // 1426\n                if (!i) {                                                                                              // 1427\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};                                                     // 1428\n                } else if (iLen - 4 == i) {                                                                            // 1429\n                    p[3] = {x: +crp[0], y: +crp[1]};                                                                   // 1430\n                } else if (iLen - 2 == i) {                                                                            // 1431\n                    p[2] = {x: +crp[0], y: +crp[1]};                                                                   // 1432\n                    p[3] = {x: +crp[2], y: +crp[3]};                                                                   // 1433\n                }                                                                                                      // 1434\n            } else {                                                                                                   // 1435\n                if (iLen - 4 == i) {                                                                                   // 1436\n                    p[3] = p[2];                                                                                       // 1437\n                } else if (!i) {                                                                                       // 1438\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};                                                               // 1439\n                }                                                                                                      // 1440\n            }                                                                                                          // 1441\n            d.push([\"C\",                                                                                               // 1442\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,                                                                 // 1443\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,                                                                 // 1444\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,                                                                  // 1445\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,                                                                    // 1446\n                  p[2].x,                                                                                              // 1447\n                  p[2].y                                                                                               // 1448\n            ]);                                                                                                        // 1449\n        }                                                                                                              // 1450\n                                                                                                                       // 1451\n        return d;                                                                                                      // 1452\n    }                                                                                                                  // 1453\n    /*\\\n     * Raphael.parsePathString                                                                                         // 1455\n     [ method ]                                                                                                        // 1456\n     **                                                                                                                // 1457\n     * Utility method                                                                                                  // 1458\n     **                                                                                                                // 1459\n     * Parses given path string into an array of arrays of path segments.                                              // 1460\n     > Parameters                                                                                                      // 1461\n     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away) // 1462\n     = (array) array of segments.                                                                                      // 1463\n    \\*/                                                                                                                // 1464\n    R.parsePathString = function (pathString) {                                                                        // 1465\n        if (!pathString) {                                                                                             // 1466\n            return null;                                                                                               // 1467\n        }                                                                                                              // 1468\n        var pth = paths(pathString);                                                                                   // 1469\n        if (pth.arr) {                                                                                                 // 1470\n            return pathClone(pth.arr);                                                                                 // 1471\n        }                                                                                                              // 1472\n                                                                                                                       // 1473\n        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},                          // 1474\n            data = [];                                                                                                 // 1475\n        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption                               // 1476\n            data = pathClone(pathString);                                                                              // 1477\n        }                                                                                                              // 1478\n        if (!data.length) {                                                                                            // 1479\n            Str(pathString).replace(pathCommand, function (a, b, c) {                                                  // 1480\n                var params = [],                                                                                       // 1481\n                    name = b.toLowerCase();                                                                            // 1482\n                c.replace(pathValues, function (a, b) {                                                                // 1483\n                    b && params.push(+b);                                                                              // 1484\n                });                                                                                                    // 1485\n                if (name == \"m\" && params.length > 2) {                                                                // 1486\n                    data.push([b][concat](params.splice(0, 2)));                                                       // 1487\n                    name = \"l\";                                                                                        // 1488\n                    b = b == \"m\" ? \"l\" : \"L\";                                                                          // 1489\n                }                                                                                                      // 1490\n                if (name == \"r\") {                                                                                     // 1491\n                    data.push([b][concat](params));                                                                    // 1492\n                } else while (params.length >= paramCounts[name]) {                                                    // 1493\n                    data.push([b][concat](params.splice(0, paramCounts[name])));                                       // 1494\n                    if (!paramCounts[name]) {                                                                          // 1495\n                        break;                                                                                         // 1496\n                    }                                                                                                  // 1497\n                }                                                                                                      // 1498\n            });                                                                                                        // 1499\n        }                                                                                                              // 1500\n        data.toString = R._path2string;                                                                                // 1501\n        pth.arr = pathClone(data);                                                                                     // 1502\n        return data;                                                                                                   // 1503\n    };                                                                                                                 // 1504\n    /*\\\n     * Raphael.parseTransformString                                                                                    // 1506\n     [ method ]                                                                                                        // 1507\n     **                                                                                                                // 1508\n     * Utility method                                                                                                  // 1509\n     **                                                                                                                // 1510\n     * Parses given path string into an array of transformations.                                                      // 1511\n     > Parameters                                                                                                      // 1512\n     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n     = (array) array of transformations.                                                                               // 1514\n    \\*/                                                                                                                // 1515\n    R.parseTransformString = cacher(function (TString) {                                                               // 1516\n        if (!TString) {                                                                                                // 1517\n            return null;                                                                                               // 1518\n        }                                                                                                              // 1519\n        var paramCounts = {r: 3, s: 4, t: 2, m: 6},                                                                    // 1520\n            data = [];                                                                                                 // 1521\n        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption                                     // 1522\n            data = pathClone(TString);                                                                                 // 1523\n        }                                                                                                              // 1524\n        if (!data.length) {                                                                                            // 1525\n            Str(TString).replace(tCommand, function (a, b, c) {                                                        // 1526\n                var params = [],                                                                                       // 1527\n                    name = lowerCase.call(b);                                                                          // 1528\n                c.replace(pathValues, function (a, b) {                                                                // 1529\n                    b && params.push(+b);                                                                              // 1530\n                });                                                                                                    // 1531\n                data.push([b][concat](params));                                                                        // 1532\n            });                                                                                                        // 1533\n        }                                                                                                              // 1534\n        data.toString = R._path2string;                                                                                // 1535\n        return data;                                                                                                   // 1536\n    });                                                                                                                // 1537\n    // PATHS                                                                                                           // 1538\n    var paths = function (ps) {                                                                                        // 1539\n        var p = paths.ps = paths.ps || {};                                                                             // 1540\n        if (p[ps]) {                                                                                                   // 1541\n            p[ps].sleep = 100;                                                                                         // 1542\n        } else {                                                                                                       // 1543\n            p[ps] = {                                                                                                  // 1544\n                sleep: 100                                                                                             // 1545\n            };                                                                                                         // 1546\n        }                                                                                                              // 1547\n        setTimeout(function () {                                                                                       // 1548\n            for (var key in p) if (p[has](key) && key != ps) {                                                         // 1549\n                p[key].sleep--;                                                                                        // 1550\n                !p[key].sleep && delete p[key];                                                                        // 1551\n            }                                                                                                          // 1552\n        });                                                                                                            // 1553\n        return p[ps];                                                                                                  // 1554\n    };                                                                                                                 // 1555\n    /*\\\n     * Raphael.findDotsAtSegment                                                                                       // 1557\n     [ method ]                                                                                                        // 1558\n     **                                                                                                                // 1559\n     * Utility method                                                                                                  // 1560\n     **                                                                                                                // 1561\n     * Find dot coordinates on the given cubic bezier curve at the given t.                                            // 1562\n     > Parameters                                                                                                      // 1563\n     - p1x (number) x of the first point of the curve                                                                  // 1564\n     - p1y (number) y of the first point of the curve                                                                  // 1565\n     - c1x (number) x of the first anchor of the curve                                                                 // 1566\n     - c1y (number) y of the first anchor of the curve                                                                 // 1567\n     - c2x (number) x of the second anchor of the curve                                                                // 1568\n     - c2y (number) y of the second anchor of the curve                                                                // 1569\n     - p2x (number) x of the second point of the curve                                                                 // 1570\n     - p2y (number) y of the second point of the curve                                                                 // 1571\n     - t (number) position on the curve (0..1)                                                                         // 1572\n     = (object) point information in format:                                                                           // 1573\n     o {                                                                                                               // 1574\n     o     x: (number) x coordinate of the point                                                                       // 1575\n     o     y: (number) y coordinate of the point                                                                       // 1576\n     o     m: {                                                                                                        // 1577\n     o         x: (number) x coordinate of the left anchor                                                             // 1578\n     o         y: (number) y coordinate of the left anchor                                                             // 1579\n     o     }                                                                                                           // 1580\n     o     n: {                                                                                                        // 1581\n     o         x: (number) x coordinate of the right anchor                                                            // 1582\n     o         y: (number) y coordinate of the right anchor                                                            // 1583\n     o     }                                                                                                           // 1584\n     o     start: {                                                                                                    // 1585\n     o         x: (number) x coordinate of the start of the curve                                                      // 1586\n     o         y: (number) y coordinate of the start of the curve                                                      // 1587\n     o     }                                                                                                           // 1588\n     o     end: {                                                                                                      // 1589\n     o         x: (number) x coordinate of the end of the curve                                                        // 1590\n     o         y: (number) y coordinate of the end of the curve                                                        // 1591\n     o     }                                                                                                           // 1592\n     o     alpha: (number) angle of the curve derivative at the point                                                  // 1593\n     o }                                                                                                               // 1594\n    \\*/                                                                                                                // 1595\n    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {                                       // 1596\n        var t1 = 1 - t,                                                                                                // 1597\n            t13 = pow(t1, 3),                                                                                          // 1598\n            t12 = pow(t1, 2),                                                                                          // 1599\n            t2 = t * t,                                                                                                // 1600\n            t3 = t2 * t,                                                                                               // 1601\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,                                       // 1602\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,                                       // 1603\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),                                               // 1604\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),                                               // 1605\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),                                               // 1606\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),                                               // 1607\n            ax = t1 * p1x + t * c1x,                                                                                   // 1608\n            ay = t1 * p1y + t * c1y,                                                                                   // 1609\n            cx = t1 * c2x + t * p2x,                                                                                   // 1610\n            cy = t1 * c2y + t * p2y,                                                                                   // 1611\n            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);                                                    // 1612\n        (mx > nx || my < ny) && (alpha += 180);                                                                        // 1613\n        return {                                                                                                       // 1614\n            x: x,                                                                                                      // 1615\n            y: y,                                                                                                      // 1616\n            m: {x: mx, y: my},                                                                                         // 1617\n            n: {x: nx, y: ny},                                                                                         // 1618\n            start: {x: ax, y: ay},                                                                                     // 1619\n            end: {x: cx, y: cy},                                                                                       // 1620\n            alpha: alpha                                                                                               // 1621\n        };                                                                                                             // 1622\n    };                                                                                                                 // 1623\n    /*\\\n     * Raphael.bezierBBox                                                                                              // 1625\n     [ method ]                                                                                                        // 1626\n     **                                                                                                                // 1627\n     * Utility method                                                                                                  // 1628\n     **                                                                                                                // 1629\n     * Return bounding box of a given cubic bezier curve                                                               // 1630\n     > Parameters                                                                                                      // 1631\n     - p1x (number) x of the first point of the curve                                                                  // 1632\n     - p1y (number) y of the first point of the curve                                                                  // 1633\n     - c1x (number) x of the first anchor of the curve                                                                 // 1634\n     - c1y (number) y of the first anchor of the curve                                                                 // 1635\n     - c2x (number) x of the second anchor of the curve                                                                // 1636\n     - c2y (number) y of the second anchor of the curve                                                                // 1637\n     - p2x (number) x of the second point of the curve                                                                 // 1638\n     - p2y (number) y of the second point of the curve                                                                 // 1639\n     * or                                                                                                              // 1640\n     - bez (array) array of six points for bezier curve                                                                // 1641\n     = (object) point information in format:                                                                           // 1642\n     o {                                                                                                               // 1643\n     o     min: {                                                                                                      // 1644\n     o         x: (number) x coordinate of the left point                                                              // 1645\n     o         y: (number) y coordinate of the top point                                                               // 1646\n     o     }                                                                                                           // 1647\n     o     max: {                                                                                                      // 1648\n     o         x: (number) x coordinate of the right point                                                             // 1649\n     o         y: (number) y coordinate of the bottom point                                                            // 1650\n     o     }                                                                                                           // 1651\n     o }                                                                                                               // 1652\n    \\*/                                                                                                                // 1653\n    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {                                                 // 1654\n        if (!R.is(p1x, \"array\")) {                                                                                     // 1655\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];                                                            // 1656\n        }                                                                                                              // 1657\n        var bbox = curveDim.apply(null, p1x);                                                                          // 1658\n        return {                                                                                                       // 1659\n            x: bbox.min.x,                                                                                             // 1660\n            y: bbox.min.y,                                                                                             // 1661\n            x2: bbox.max.x,                                                                                            // 1662\n            y2: bbox.max.y,                                                                                            // 1663\n            width: bbox.max.x - bbox.min.x,                                                                            // 1664\n            height: bbox.max.y - bbox.min.y                                                                            // 1665\n        };                                                                                                             // 1666\n    };                                                                                                                 // 1667\n    /*\\\n     * Raphael.isPointInsideBBox                                                                                       // 1669\n     [ method ]                                                                                                        // 1670\n     **                                                                                                                // 1671\n     * Utility method                                                                                                  // 1672\n     **                                                                                                                // 1673\n     * Returns `true` if given point is inside bounding boxes.                                                         // 1674\n     > Parameters                                                                                                      // 1675\n     - bbox (string) bounding box                                                                                      // 1676\n     - x (string) x coordinate of the point                                                                            // 1677\n     - y (string) y coordinate of the point                                                                            // 1678\n     = (boolean) `true` if point inside                                                                                // 1679\n    \\*/                                                                                                                // 1680\n    R.isPointInsideBBox = function (bbox, x, y) {                                                                      // 1681\n        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;                                             // 1682\n    };                                                                                                                 // 1683\n    /*\\\n     * Raphael.isBBoxIntersect                                                                                         // 1685\n     [ method ]                                                                                                        // 1686\n     **                                                                                                                // 1687\n     * Utility method                                                                                                  // 1688\n     **                                                                                                                // 1689\n     * Returns `true` if two bounding boxes intersect                                                                  // 1690\n     > Parameters                                                                                                      // 1691\n     - bbox1 (string) first bounding box                                                                               // 1692\n     - bbox2 (string) second bounding box                                                                              // 1693\n     = (boolean) `true` if they intersect                                                                              // 1694\n    \\*/                                                                                                                // 1695\n    R.isBBoxIntersect = function (bbox1, bbox2) {                                                                      // 1696\n        var i = R.isPointInsideBBox;                                                                                   // 1697\n        return i(bbox2, bbox1.x, bbox1.y)                                                                              // 1698\n            || i(bbox2, bbox1.x2, bbox1.y)                                                                             // 1699\n            || i(bbox2, bbox1.x, bbox1.y2)                                                                             // 1700\n            || i(bbox2, bbox1.x2, bbox1.y2)                                                                            // 1701\n            || i(bbox1, bbox2.x, bbox2.y)                                                                              // 1702\n            || i(bbox1, bbox2.x2, bbox2.y)                                                                             // 1703\n            || i(bbox1, bbox2.x, bbox2.y2)                                                                             // 1704\n            || i(bbox1, bbox2.x2, bbox2.y2)                                                                            // 1705\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)                    // 1706\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);                   // 1707\n    };                                                                                                                 // 1708\n    function base3(t, p1, p2, p3, p4) {                                                                                // 1709\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,                                                                   // 1710\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;                                                                   // 1711\n        return t * t2 - 3 * p1 + 3 * p2;                                                                               // 1712\n    }                                                                                                                  // 1713\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {                                                               // 1714\n        if (z == null) {                                                                                               // 1715\n            z = 1;                                                                                                     // 1716\n        }                                                                                                              // 1717\n        z = z > 1 ? 1 : z < 0 ? 0 : z;                                                                                 // 1718\n        var z2 = z / 2,                                                                                                // 1719\n            n = 12,                                                                                                    // 1720\n            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],     // 1721\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],           // 1722\n            sum = 0;                                                                                                   // 1723\n        for (var i = 0; i < n; i++) {                                                                                  // 1724\n            var ct = z2 * Tvalues[i] + z2,                                                                             // 1725\n                xbase = base3(ct, x1, x2, x3, x4),                                                                     // 1726\n                ybase = base3(ct, y1, y2, y3, y4),                                                                     // 1727\n                comb = xbase * xbase + ybase * ybase;                                                                  // 1728\n            sum += Cvalues[i] * math.sqrt(comb);                                                                       // 1729\n        }                                                                                                              // 1730\n        return z2 * sum;                                                                                               // 1731\n    }                                                                                                                  // 1732\n    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {                                                           // 1733\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {                                                   // 1734\n            return;                                                                                                    // 1735\n        }                                                                                                              // 1736\n        var t = 1,                                                                                                     // 1737\n            step = t / 2,                                                                                              // 1738\n            t2 = t - step,                                                                                             // 1739\n            l,                                                                                                         // 1740\n            e = .01;                                                                                                   // 1741\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);                                                                // 1742\n        while (abs(l - ll) > e) {                                                                                      // 1743\n            step /= 2;                                                                                                 // 1744\n            t2 += (l < ll ? 1 : -1) * step;                                                                            // 1745\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);                                                            // 1746\n        }                                                                                                              // 1747\n        return t2;                                                                                                     // 1748\n    }                                                                                                                  // 1749\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {                                                               // 1750\n        if (                                                                                                           // 1751\n            mmax(x1, x2) < mmin(x3, x4) ||                                                                             // 1752\n            mmin(x1, x2) > mmax(x3, x4) ||                                                                             // 1753\n            mmax(y1, y2) < mmin(y3, y4) ||                                                                             // 1754\n            mmin(y1, y2) > mmax(y3, y4)                                                                                // 1755\n        ) {                                                                                                            // 1756\n            return;                                                                                                    // 1757\n        }                                                                                                              // 1758\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),                                    // 1759\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),                                    // 1760\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);                                               // 1761\n                                                                                                                       // 1762\n        if (!denominator) {                                                                                            // 1763\n            return;                                                                                                    // 1764\n        }                                                                                                              // 1765\n        var px = nx / denominator,                                                                                     // 1766\n            py = ny / denominator,                                                                                     // 1767\n            px2 = +px.toFixed(2),                                                                                      // 1768\n            py2 = +py.toFixed(2);                                                                                      // 1769\n        if (                                                                                                           // 1770\n            px2 < +mmin(x1, x2).toFixed(2) ||                                                                          // 1771\n            px2 > +mmax(x1, x2).toFixed(2) ||                                                                          // 1772\n            px2 < +mmin(x3, x4).toFixed(2) ||                                                                          // 1773\n            px2 > +mmax(x3, x4).toFixed(2) ||                                                                          // 1774\n            py2 < +mmin(y1, y2).toFixed(2) ||                                                                          // 1775\n            py2 > +mmax(y1, y2).toFixed(2) ||                                                                          // 1776\n            py2 < +mmin(y3, y4).toFixed(2) ||                                                                          // 1777\n            py2 > +mmax(y3, y4).toFixed(2)                                                                             // 1778\n        ) {                                                                                                            // 1779\n            return;                                                                                                    // 1780\n        }                                                                                                              // 1781\n        return {x: px, y: py};                                                                                         // 1782\n    }                                                                                                                  // 1783\n    function inter(bez1, bez2) {                                                                                       // 1784\n        return interHelper(bez1, bez2);                                                                                // 1785\n    }                                                                                                                  // 1786\n    function interCount(bez1, bez2) {                                                                                  // 1787\n        return interHelper(bez1, bez2, 1);                                                                             // 1788\n    }                                                                                                                  // 1789\n    function interHelper(bez1, bez2, justCount) {                                                                      // 1790\n        var bbox1 = R.bezierBBox(bez1),                                                                                // 1791\n            bbox2 = R.bezierBBox(bez2);                                                                                // 1792\n        if (!R.isBBoxIntersect(bbox1, bbox2)) {                                                                        // 1793\n            return justCount ? 0 : [];                                                                                 // 1794\n        }                                                                                                              // 1795\n        var l1 = bezlen.apply(0, bez1),                                                                                // 1796\n            l2 = bezlen.apply(0, bez2),                                                                                // 1797\n            n1 = mmax(~~(l1 / 5), 1),                                                                                  // 1798\n            n2 = mmax(~~(l2 / 5), 1),                                                                                  // 1799\n            dots1 = [],                                                                                                // 1800\n            dots2 = [],                                                                                                // 1801\n            xy = {},                                                                                                   // 1802\n            res = justCount ? 0 : [];                                                                                  // 1803\n        for (var i = 0; i < n1 + 1; i++) {                                                                             // 1804\n            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));                                                 // 1805\n            dots1.push({x: p.x, y: p.y, t: i / n1});                                                                   // 1806\n        }                                                                                                              // 1807\n        for (i = 0; i < n2 + 1; i++) {                                                                                 // 1808\n            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));                                                     // 1809\n            dots2.push({x: p.x, y: p.y, t: i / n2});                                                                   // 1810\n        }                                                                                                              // 1811\n        for (i = 0; i < n1; i++) {                                                                                     // 1812\n            for (var j = 0; j < n2; j++) {                                                                             // 1813\n                var di = dots1[i],                                                                                     // 1814\n                    di1 = dots1[i + 1],                                                                                // 1815\n                    dj = dots2[j],                                                                                     // 1816\n                    dj1 = dots2[j + 1],                                                                                // 1817\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",                                                         // 1818\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",                                                         // 1819\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);                                // 1820\n                if (is) {                                                                                              // 1821\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {                                                      // 1822\n                        continue;                                                                                      // 1823\n                    }                                                                                                  // 1824\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);                                                             // 1825\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),                      // 1826\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);                      // 1827\n                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {                                            // 1828\n                        if (justCount) {                                                                               // 1829\n                            res++;                                                                                     // 1830\n                        } else {                                                                                       // 1831\n                            res.push({                                                                                 // 1832\n                                x: is.x,                                                                               // 1833\n                                y: is.y,                                                                               // 1834\n                                t1: mmin(t1, 1),                                                                       // 1835\n                                t2: mmin(t2, 1)                                                                        // 1836\n                            });                                                                                        // 1837\n                        }                                                                                              // 1838\n                    }                                                                                                  // 1839\n                }                                                                                                      // 1840\n            }                                                                                                          // 1841\n        }                                                                                                              // 1842\n        return res;                                                                                                    // 1843\n    }                                                                                                                  // 1844\n    /*\\\n     * Raphael.pathIntersection                                                                                        // 1846\n     [ method ]                                                                                                        // 1847\n     **                                                                                                                // 1848\n     * Utility method                                                                                                  // 1849\n     **                                                                                                                // 1850\n     * Finds intersections of two paths                                                                                // 1851\n     > Parameters                                                                                                      // 1852\n     - path1 (string) path string                                                                                      // 1853\n     - path2 (string) path string                                                                                      // 1854\n     = (array) dots of intersection                                                                                    // 1855\n     o [                                                                                                               // 1856\n     o     {                                                                                                           // 1857\n     o         x: (number) x coordinate of the point                                                                   // 1858\n     o         y: (number) y coordinate of the point                                                                   // 1859\n     o         t1: (number) t value for segment of path1                                                               // 1860\n     o         t2: (number) t value for segment of path2                                                               // 1861\n     o         segment1: (number) order number for segment of path1                                                    // 1862\n     o         segment2: (number) order number for segment of path2                                                    // 1863\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1                      // 1864\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2                      // 1865\n     o     }                                                                                                           // 1866\n     o ]                                                                                                               // 1867\n    \\*/                                                                                                                // 1868\n    R.pathIntersection = function (path1, path2) {                                                                     // 1869\n        return interPathHelper(path1, path2);                                                                          // 1870\n    };                                                                                                                 // 1871\n    R.pathIntersectionNumber = function (path1, path2) {                                                               // 1872\n        return interPathHelper(path1, path2, 1);                                                                       // 1873\n    };                                                                                                                 // 1874\n    function interPathHelper(path1, path2, justCount) {                                                                // 1875\n        path1 = R._path2curve(path1);                                                                                  // 1876\n        path2 = R._path2curve(path2);                                                                                  // 1877\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,                                                            // 1878\n            res = justCount ? 0 : [];                                                                                  // 1879\n        for (var i = 0, ii = path1.length; i < ii; i++) {                                                              // 1880\n            var pi = path1[i];                                                                                         // 1881\n            if (pi[0] == \"M\") {                                                                                        // 1882\n                x1 = x1m = pi[1];                                                                                      // 1883\n                y1 = y1m = pi[2];                                                                                      // 1884\n            } else {                                                                                                   // 1885\n                if (pi[0] == \"C\") {                                                                                    // 1886\n                    bez1 = [x1, y1].concat(pi.slice(1));                                                               // 1887\n                    x1 = bez1[6];                                                                                      // 1888\n                    y1 = bez1[7];                                                                                      // 1889\n                } else {                                                                                               // 1890\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];                                                       // 1891\n                    x1 = x1m;                                                                                          // 1892\n                    y1 = y1m;                                                                                          // 1893\n                }                                                                                                      // 1894\n                for (var j = 0, jj = path2.length; j < jj; j++) {                                                      // 1895\n                    var pj = path2[j];                                                                                 // 1896\n                    if (pj[0] == \"M\") {                                                                                // 1897\n                        x2 = x2m = pj[1];                                                                              // 1898\n                        y2 = y2m = pj[2];                                                                              // 1899\n                    } else {                                                                                           // 1900\n                        if (pj[0] == \"C\") {                                                                            // 1901\n                            bez2 = [x2, y2].concat(pj.slice(1));                                                       // 1902\n                            x2 = bez2[6];                                                                              // 1903\n                            y2 = bez2[7];                                                                              // 1904\n                        } else {                                                                                       // 1905\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];                                               // 1906\n                            x2 = x2m;                                                                                  // 1907\n                            y2 = y2m;                                                                                  // 1908\n                        }                                                                                              // 1909\n                        var intr = interHelper(bez1, bez2, justCount);                                                 // 1910\n                        if (justCount) {                                                                               // 1911\n                            res += intr;                                                                               // 1912\n                        } else {                                                                                       // 1913\n                            for (var k = 0, kk = intr.length; k < kk; k++) {                                           // 1914\n                                intr[k].segment1 = i;                                                                  // 1915\n                                intr[k].segment2 = j;                                                                  // 1916\n                                intr[k].bez1 = bez1;                                                                   // 1917\n                                intr[k].bez2 = bez2;                                                                   // 1918\n                            }                                                                                          // 1919\n                            res = res.concat(intr);                                                                    // 1920\n                        }                                                                                              // 1921\n                    }                                                                                                  // 1922\n                }                                                                                                      // 1923\n            }                                                                                                          // 1924\n        }                                                                                                              // 1925\n        return res;                                                                                                    // 1926\n    }                                                                                                                  // 1927\n    /*\\\n     * Raphael.isPointInsidePath                                                                                       // 1929\n     [ method ]                                                                                                        // 1930\n     **                                                                                                                // 1931\n     * Utility method                                                                                                  // 1932\n     **                                                                                                                // 1933\n     * Returns `true` if given point is inside a given closed path.                                                    // 1934\n     > Parameters                                                                                                      // 1935\n     - path (string) path string                                                                                       // 1936\n     - x (number) x of the point                                                                                       // 1937\n     - y (number) y of the point                                                                                       // 1938\n     = (boolean) true, if point is inside the path                                                                     // 1939\n    \\*/                                                                                                                // 1940\n    R.isPointInsidePath = function (path, x, y) {                                                                      // 1941\n        var bbox = R.pathBBox(path);                                                                                   // 1942\n        return R.isPointInsideBBox(bbox, x, y) &&                                                                      // 1943\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;                                  // 1944\n    };                                                                                                                 // 1945\n    R._removedFactory = function (methodname) {                                                                        // 1946\n        return function () {                                                                                           // 1947\n            eve(\"raphael.log\", null, \"Rapha\\xebl: you are calling to method \\u201c\" + methodname + \"\\u201d of removed object\", methodname);\n        };                                                                                                             // 1949\n    };                                                                                                                 // 1950\n    /*\\\n     * Raphael.pathBBox                                                                                                // 1952\n     [ method ]                                                                                                        // 1953\n     **                                                                                                                // 1954\n     * Utility method                                                                                                  // 1955\n     **                                                                                                                // 1956\n     * Return bounding box of a given path                                                                             // 1957\n     > Parameters                                                                                                      // 1958\n     - path (string) path string                                                                                       // 1959\n     = (object) bounding box                                                                                           // 1960\n     o {                                                                                                               // 1961\n     o     x: (number) x coordinate of the left top point of the box                                                   // 1962\n     o     y: (number) y coordinate of the left top point of the box                                                   // 1963\n     o     x2: (number) x coordinate of the right bottom point of the box                                              // 1964\n     o     y2: (number) y coordinate of the right bottom point of the box                                              // 1965\n     o     width: (number) width of the box                                                                            // 1966\n     o     height: (number) height of the box                                                                          // 1967\n     o     cx: (number) x coordinate of the center of the box                                                          // 1968\n     o     cy: (number) y coordinate of the center of the box                                                          // 1969\n     o }                                                                                                               // 1970\n    \\*/                                                                                                                // 1971\n    var pathDimensions = R.pathBBox = function (path) {                                                                // 1972\n        var pth = paths(path);                                                                                         // 1973\n        if (pth.bbox) {                                                                                                // 1974\n            return clone(pth.bbox);                                                                                    // 1975\n        }                                                                                                              // 1976\n        if (!path) {                                                                                                   // 1977\n            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};                                                    // 1978\n        }                                                                                                              // 1979\n        path = path2curve(path);                                                                                       // 1980\n        var x = 0,                                                                                                     // 1981\n            y = 0,                                                                                                     // 1982\n            X = [],                                                                                                    // 1983\n            Y = [],                                                                                                    // 1984\n            p;                                                                                                         // 1985\n        for (var i = 0, ii = path.length; i < ii; i++) {                                                               // 1986\n            p = path[i];                                                                                               // 1987\n            if (p[0] == \"M\") {                                                                                         // 1988\n                x = p[1];                                                                                              // 1989\n                y = p[2];                                                                                              // 1990\n                X.push(x);                                                                                             // 1991\n                Y.push(y);                                                                                             // 1992\n            } else {                                                                                                   // 1993\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);                                          // 1994\n                X = X[concat](dim.min.x, dim.max.x);                                                                   // 1995\n                Y = Y[concat](dim.min.y, dim.max.y);                                                                   // 1996\n                x = p[5];                                                                                              // 1997\n                y = p[6];                                                                                              // 1998\n            }                                                                                                          // 1999\n        }                                                                                                              // 2000\n        var xmin = mmin[apply](0, X),                                                                                  // 2001\n            ymin = mmin[apply](0, Y),                                                                                  // 2002\n            xmax = mmax[apply](0, X),                                                                                  // 2003\n            ymax = mmax[apply](0, Y),                                                                                  // 2004\n            width = xmax - xmin,                                                                                       // 2005\n            height = ymax - ymin,                                                                                      // 2006\n                bb = {                                                                                                 // 2007\n                x: xmin,                                                                                               // 2008\n                y: ymin,                                                                                               // 2009\n                x2: xmax,                                                                                              // 2010\n                y2: ymax,                                                                                              // 2011\n                width: width,                                                                                          // 2012\n                height: height,                                                                                        // 2013\n                cx: xmin + width / 2,                                                                                  // 2014\n                cy: ymin + height / 2                                                                                  // 2015\n            };                                                                                                         // 2016\n        pth.bbox = clone(bb);                                                                                          // 2017\n        return bb;                                                                                                     // 2018\n    },                                                                                                                 // 2019\n        pathClone = function (pathArray) {                                                                             // 2020\n            var res = clone(pathArray);                                                                                // 2021\n            res.toString = R._path2string;                                                                             // 2022\n            return res;                                                                                                // 2023\n        },                                                                                                             // 2024\n        pathToRelative = R._pathToRelative = function (pathArray) {                                                    // 2025\n            var pth = paths(pathArray);                                                                                // 2026\n            if (pth.rel) {                                                                                             // 2027\n                return pathClone(pth.rel);                                                                             // 2028\n            }                                                                                                          // 2029\n            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption              // 2030\n                pathArray = R.parsePathString(pathArray);                                                              // 2031\n            }                                                                                                          // 2032\n            var res = [],                                                                                              // 2033\n                x = 0,                                                                                                 // 2034\n                y = 0,                                                                                                 // 2035\n                mx = 0,                                                                                                // 2036\n                my = 0,                                                                                                // 2037\n                start = 0;                                                                                             // 2038\n            if (pathArray[0][0] == \"M\") {                                                                              // 2039\n                x = pathArray[0][1];                                                                                   // 2040\n                y = pathArray[0][2];                                                                                   // 2041\n                mx = x;                                                                                                // 2042\n                my = y;                                                                                                // 2043\n                start++;                                                                                               // 2044\n                res.push([\"M\", x, y]);                                                                                 // 2045\n            }                                                                                                          // 2046\n            for (var i = start, ii = pathArray.length; i < ii; i++) {                                                  // 2047\n                var r = res[i] = [],                                                                                   // 2048\n                    pa = pathArray[i];                                                                                 // 2049\n                if (pa[0] != lowerCase.call(pa[0])) {                                                                  // 2050\n                    r[0] = lowerCase.call(pa[0]);                                                                      // 2051\n                    switch (r[0]) {                                                                                    // 2052\n                        case \"a\":                                                                                      // 2053\n                            r[1] = pa[1];                                                                              // 2054\n                            r[2] = pa[2];                                                                              // 2055\n                            r[3] = pa[3];                                                                              // 2056\n                            r[4] = pa[4];                                                                              // 2057\n                            r[5] = pa[5];                                                                              // 2058\n                            r[6] = +(pa[6] - x).toFixed(3);                                                            // 2059\n                            r[7] = +(pa[7] - y).toFixed(3);                                                            // 2060\n                            break;                                                                                     // 2061\n                        case \"v\":                                                                                      // 2062\n                            r[1] = +(pa[1] - y).toFixed(3);                                                            // 2063\n                            break;                                                                                     // 2064\n                        case \"m\":                                                                                      // 2065\n                            mx = pa[1];                                                                                // 2066\n                            my = pa[2];                                                                                // 2067\n                        default:                                                                                       // 2068\n                            for (var j = 1, jj = pa.length; j < jj; j++) {                                             // 2069\n                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);                                        // 2070\n                            }                                                                                          // 2071\n                    }                                                                                                  // 2072\n                } else {                                                                                               // 2073\n                    r = res[i] = [];                                                                                   // 2074\n                    if (pa[0] == \"m\") {                                                                                // 2075\n                        mx = pa[1] + x;                                                                                // 2076\n                        my = pa[2] + y;                                                                                // 2077\n                    }                                                                                                  // 2078\n                    for (var k = 0, kk = pa.length; k < kk; k++) {                                                     // 2079\n                        res[i][k] = pa[k];                                                                             // 2080\n                    }                                                                                                  // 2081\n                }                                                                                                      // 2082\n                var len = res[i].length;                                                                               // 2083\n                switch (res[i][0]) {                                                                                   // 2084\n                    case \"z\":                                                                                          // 2085\n                        x = mx;                                                                                        // 2086\n                        y = my;                                                                                        // 2087\n                        break;                                                                                         // 2088\n                    case \"h\":                                                                                          // 2089\n                        x += +res[i][len - 1];                                                                         // 2090\n                        break;                                                                                         // 2091\n                    case \"v\":                                                                                          // 2092\n                        y += +res[i][len - 1];                                                                         // 2093\n                        break;                                                                                         // 2094\n                    default:                                                                                           // 2095\n                        x += +res[i][len - 2];                                                                         // 2096\n                        y += +res[i][len - 1];                                                                         // 2097\n                }                                                                                                      // 2098\n            }                                                                                                          // 2099\n            res.toString = R._path2string;                                                                             // 2100\n            pth.rel = pathClone(res);                                                                                  // 2101\n            return res;                                                                                                // 2102\n        },                                                                                                             // 2103\n        pathToAbsolute = R._pathToAbsolute = function (pathArray) {                                                    // 2104\n            var pth = paths(pathArray);                                                                                // 2105\n            if (pth.abs) {                                                                                             // 2106\n                return pathClone(pth.abs);                                                                             // 2107\n            }                                                                                                          // 2108\n            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption              // 2109\n                pathArray = R.parsePathString(pathArray);                                                              // 2110\n            }                                                                                                          // 2111\n            if (!pathArray || !pathArray.length) {                                                                     // 2112\n                return [[\"M\", 0, 0]];                                                                                  // 2113\n            }                                                                                                          // 2114\n            var res = [],                                                                                              // 2115\n                x = 0,                                                                                                 // 2116\n                y = 0,                                                                                                 // 2117\n                mx = 0,                                                                                                // 2118\n                my = 0,                                                                                                // 2119\n                start = 0;                                                                                             // 2120\n            if (pathArray[0][0] == \"M\") {                                                                              // 2121\n                x = +pathArray[0][1];                                                                                  // 2122\n                y = +pathArray[0][2];                                                                                  // 2123\n                mx = x;                                                                                                // 2124\n                my = y;                                                                                                // 2125\n                start++;                                                                                               // 2126\n                res[0] = [\"M\", x, y];                                                                                  // 2127\n            }                                                                                                          // 2128\n            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {                                           // 2130\n                res.push(r = []);                                                                                      // 2131\n                pa = pathArray[i];                                                                                     // 2132\n                if (pa[0] != upperCase.call(pa[0])) {                                                                  // 2133\n                    r[0] = upperCase.call(pa[0]);                                                                      // 2134\n                    switch (r[0]) {                                                                                    // 2135\n                        case \"A\":                                                                                      // 2136\n                            r[1] = pa[1];                                                                              // 2137\n                            r[2] = pa[2];                                                                              // 2138\n                            r[3] = pa[3];                                                                              // 2139\n                            r[4] = pa[4];                                                                              // 2140\n                            r[5] = pa[5];                                                                              // 2141\n                            r[6] = +(pa[6] + x);                                                                       // 2142\n                            r[7] = +(pa[7] + y);                                                                       // 2143\n                            break;                                                                                     // 2144\n                        case \"V\":                                                                                      // 2145\n                            r[1] = +pa[1] + y;                                                                         // 2146\n                            break;                                                                                     // 2147\n                        case \"H\":                                                                                      // 2148\n                            r[1] = +pa[1] + x;                                                                         // 2149\n                            break;                                                                                     // 2150\n                        case \"R\":                                                                                      // 2151\n                            var dots = [x, y][concat](pa.slice(1));                                                    // 2152\n                            for (var j = 2, jj = dots.length; j < jj; j++) {                                           // 2153\n                                dots[j] = +dots[j] + x;                                                                // 2154\n                                dots[++j] = +dots[j] + y;                                                              // 2155\n                            }                                                                                          // 2156\n                            res.pop();                                                                                 // 2157\n                            res = res[concat](catmullRom2bezier(dots, crz));                                           // 2158\n                            break;                                                                                     // 2159\n                        case \"M\":                                                                                      // 2160\n                            mx = +pa[1] + x;                                                                           // 2161\n                            my = +pa[2] + y;                                                                           // 2162\n                        default:                                                                                       // 2163\n                            for (j = 1, jj = pa.length; j < jj; j++) {                                                 // 2164\n                                r[j] = +pa[j] + ((j % 2) ? x : y);                                                     // 2165\n                            }                                                                                          // 2166\n                    }                                                                                                  // 2167\n                } else if (pa[0] == \"R\") {                                                                             // 2168\n                    dots = [x, y][concat](pa.slice(1));                                                                // 2169\n                    res.pop();                                                                                         // 2170\n                    res = res[concat](catmullRom2bezier(dots, crz));                                                   // 2171\n                    r = [\"R\"][concat](pa.slice(-2));                                                                   // 2172\n                } else {                                                                                               // 2173\n                    for (var k = 0, kk = pa.length; k < kk; k++) {                                                     // 2174\n                        r[k] = pa[k];                                                                                  // 2175\n                    }                                                                                                  // 2176\n                }                                                                                                      // 2177\n                switch (r[0]) {                                                                                        // 2178\n                    case \"Z\":                                                                                          // 2179\n                        x = mx;                                                                                        // 2180\n                        y = my;                                                                                        // 2181\n                        break;                                                                                         // 2182\n                    case \"H\":                                                                                          // 2183\n                        x = r[1];                                                                                      // 2184\n                        break;                                                                                         // 2185\n                    case \"V\":                                                                                          // 2186\n                        y = r[1];                                                                                      // 2187\n                        break;                                                                                         // 2188\n                    case \"M\":                                                                                          // 2189\n                        mx = r[r.length - 2];                                                                          // 2190\n                        my = r[r.length - 1];                                                                          // 2191\n                    default:                                                                                           // 2192\n                        x = r[r.length - 2];                                                                           // 2193\n                        y = r[r.length - 1];                                                                           // 2194\n                }                                                                                                      // 2195\n            }                                                                                                          // 2196\n            res.toString = R._path2string;                                                                             // 2197\n            pth.abs = pathClone(res);                                                                                  // 2198\n            return res;                                                                                                // 2199\n        },                                                                                                             // 2200\n        l2c = function (x1, y1, x2, y2) {                                                                              // 2201\n            return [x1, y1, x2, y2, x2, y2];                                                                           // 2202\n        },                                                                                                             // 2203\n        q2c = function (x1, y1, ax, ay, x2, y2) {                                                                      // 2204\n            var _13 = 1 / 3,                                                                                           // 2205\n                _23 = 2 / 3;                                                                                           // 2206\n            return [                                                                                                   // 2207\n                    _13 * x1 + _23 * ax,                                                                               // 2208\n                    _13 * y1 + _23 * ay,                                                                               // 2209\n                    _13 * x2 + _23 * ax,                                                                               // 2210\n                    _13 * y2 + _23 * ay,                                                                               // 2211\n                    x2,                                                                                                // 2212\n                    y2                                                                                                 // 2213\n                ];                                                                                                     // 2214\n        },                                                                                                             // 2215\n        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {                        // 2216\n            // for more information of where this math came from visit:                                                // 2217\n            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes                                         // 2218\n            var _120 = PI * 120 / 180,                                                                                 // 2219\n                rad = PI / 180 * (+angle || 0),                                                                        // 2220\n                res = [],                                                                                              // 2221\n                xy,                                                                                                    // 2222\n                rotate = cacher(function (x, y, rad) {                                                                 // 2223\n                    var X = x * math.cos(rad) - y * math.sin(rad),                                                     // 2224\n                        Y = x * math.sin(rad) + y * math.cos(rad);                                                     // 2225\n                    return {x: X, y: Y};                                                                               // 2226\n                });                                                                                                    // 2227\n            if (!recursive) {                                                                                          // 2228\n                xy = rotate(x1, y1, -rad);                                                                             // 2229\n                x1 = xy.x;                                                                                             // 2230\n                y1 = xy.y;                                                                                             // 2231\n                xy = rotate(x2, y2, -rad);                                                                             // 2232\n                x2 = xy.x;                                                                                             // 2233\n                y2 = xy.y;                                                                                             // 2234\n                var cos = math.cos(PI / 180 * angle),                                                                  // 2235\n                    sin = math.sin(PI / 180 * angle),                                                                  // 2236\n                    x = (x1 - x2) / 2,                                                                                 // 2237\n                    y = (y1 - y2) / 2;                                                                                 // 2238\n                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);                                                     // 2239\n                if (h > 1) {                                                                                           // 2240\n                    h = math.sqrt(h);                                                                                  // 2241\n                    rx = h * rx;                                                                                       // 2242\n                    ry = h * ry;                                                                                       // 2243\n                }                                                                                                      // 2244\n                var rx2 = rx * rx,                                                                                     // 2245\n                    ry2 = ry * ry,                                                                                     // 2246\n                    k = (large_arc_flag == sweep_flag ? -1 : 1) *                                                      // 2247\n                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),         // 2248\n                    cx = k * rx * y / ry + (x1 + x2) / 2,                                                              // 2249\n                    cy = k * -ry * x / rx + (y1 + y2) / 2,                                                             // 2250\n                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),                                                       // 2251\n                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));                                                       // 2252\n                                                                                                                       // 2253\n                f1 = x1 < cx ? PI - f1 : f1;                                                                           // 2254\n                f2 = x2 < cx ? PI - f2 : f2;                                                                           // 2255\n                f1 < 0 && (f1 = PI * 2 + f1);                                                                          // 2256\n                f2 < 0 && (f2 = PI * 2 + f2);                                                                          // 2257\n                if (sweep_flag && f1 > f2) {                                                                           // 2258\n                    f1 = f1 - PI * 2;                                                                                  // 2259\n                }                                                                                                      // 2260\n                if (!sweep_flag && f2 > f1) {                                                                          // 2261\n                    f2 = f2 - PI * 2;                                                                                  // 2262\n                }                                                                                                      // 2263\n            } else {                                                                                                   // 2264\n                f1 = recursive[0];                                                                                     // 2265\n                f2 = recursive[1];                                                                                     // 2266\n                cx = recursive[2];                                                                                     // 2267\n                cy = recursive[3];                                                                                     // 2268\n            }                                                                                                          // 2269\n            var df = f2 - f1;                                                                                          // 2270\n            if (abs(df) > _120) {                                                                                      // 2271\n                var f2old = f2,                                                                                        // 2272\n                    x2old = x2,                                                                                        // 2273\n                    y2old = y2;                                                                                        // 2274\n                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);                                                     // 2275\n                x2 = cx + rx * math.cos(f2);                                                                           // 2276\n                y2 = cy + ry * math.sin(f2);                                                                           // 2277\n                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);                    // 2278\n            }                                                                                                          // 2279\n            df = f2 - f1;                                                                                              // 2280\n            var c1 = math.cos(f1),                                                                                     // 2281\n                s1 = math.sin(f1),                                                                                     // 2282\n                c2 = math.cos(f2),                                                                                     // 2283\n                s2 = math.sin(f2),                                                                                     // 2284\n                t = math.tan(df / 4),                                                                                  // 2285\n                hx = 4 / 3 * rx * t,                                                                                   // 2286\n                hy = 4 / 3 * ry * t,                                                                                   // 2287\n                m1 = [x1, y1],                                                                                         // 2288\n                m2 = [x1 + hx * s1, y1 - hy * c1],                                                                     // 2289\n                m3 = [x2 + hx * s2, y2 - hy * c2],                                                                     // 2290\n                m4 = [x2, y2];                                                                                         // 2291\n            m2[0] = 2 * m1[0] - m2[0];                                                                                 // 2292\n            m2[1] = 2 * m1[1] - m2[1];                                                                                 // 2293\n            if (recursive) {                                                                                           // 2294\n                return [m2, m3, m4][concat](res);                                                                      // 2295\n            } else {                                                                                                   // 2296\n                res = [m2, m3, m4][concat](res).join()[split](\",\");                                                    // 2297\n                var newres = [];                                                                                       // 2298\n                for (var i = 0, ii = res.length; i < ii; i++) {                                                        // 2299\n                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;         // 2300\n                }                                                                                                      // 2301\n                return newres;                                                                                         // 2302\n            }                                                                                                          // 2303\n        },                                                                                                             // 2304\n        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {                                      // 2305\n            var t1 = 1 - t;                                                                                            // 2306\n            return {                                                                                                   // 2307\n                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,               // 2308\n                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y                // 2309\n            };                                                                                                         // 2310\n        },                                                                                                             // 2311\n        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {                                          // 2312\n            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),                                                     // 2313\n                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),                                                                 // 2314\n                c = p1x - c1x,                                                                                         // 2315\n                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,                                                      // 2316\n                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,                                                      // 2317\n                y = [p1y, p2y],                                                                                        // 2318\n                x = [p1x, p2x],                                                                                        // 2319\n                dot;                                                                                                   // 2320\n            abs(t1) > \"1e12\" && (t1 = .5);                                                                             // 2321\n            abs(t2) > \"1e12\" && (t2 = .5);                                                                             // 2322\n            if (t1 > 0 && t1 < 1) {                                                                                    // 2323\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);                                    // 2324\n                x.push(dot.x);                                                                                         // 2325\n                y.push(dot.y);                                                                                         // 2326\n            }                                                                                                          // 2327\n            if (t2 > 0 && t2 < 1) {                                                                                    // 2328\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);                                    // 2329\n                x.push(dot.x);                                                                                         // 2330\n                y.push(dot.y);                                                                                         // 2331\n            }                                                                                                          // 2332\n            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);                                                         // 2333\n            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);                                                                     // 2334\n            c = p1y - c1y;                                                                                             // 2335\n            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;                                                          // 2336\n            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;                                                          // 2337\n            abs(t1) > \"1e12\" && (t1 = .5);                                                                             // 2338\n            abs(t2) > \"1e12\" && (t2 = .5);                                                                             // 2339\n            if (t1 > 0 && t1 < 1) {                                                                                    // 2340\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);                                    // 2341\n                x.push(dot.x);                                                                                         // 2342\n                y.push(dot.y);                                                                                         // 2343\n            }                                                                                                          // 2344\n            if (t2 > 0 && t2 < 1) {                                                                                    // 2345\n                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);                                    // 2346\n                x.push(dot.x);                                                                                         // 2347\n                y.push(dot.y);                                                                                         // 2348\n            }                                                                                                          // 2349\n            return {                                                                                                   // 2350\n                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},                                                     // 2351\n                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}                                                      // 2352\n            };                                                                                                         // 2353\n        }),                                                                                                            // 2354\n        path2curve = R._path2curve = cacher(function (path, path2) {                                                   // 2355\n            var pth = !path2 && paths(path);                                                                           // 2356\n            if (!path2 && pth.curve) {                                                                                 // 2357\n                return pathClone(pth.curve);                                                                           // 2358\n            }                                                                                                          // 2359\n            var p = pathToAbsolute(path),                                                                              // 2360\n                p2 = path2 && pathToAbsolute(path2),                                                                   // 2361\n                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},                                    // 2362\n                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},                                   // 2363\n                processPath = function (path, d, pcom) {                                                               // 2364\n                    var nx, ny, tq = {T:1, Q:1};                                                                       // 2365\n                    if (!path) {                                                                                       // 2366\n                        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];                                                    // 2367\n                    }                                                                                                  // 2368\n                    !(path[0] in tq) && (d.qx = d.qy = null);                                                          // 2369\n                    switch (path[0]) {                                                                                 // 2370\n                        case \"M\":                                                                                      // 2371\n                            d.X = path[1];                                                                             // 2372\n                            d.Y = path[2];                                                                             // 2373\n                            break;                                                                                     // 2374\n                        case \"A\":                                                                                      // 2375\n                            path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));                    // 2376\n                            break;                                                                                     // 2377\n                        case \"S\":                                                                                      // 2378\n                            if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                                nx = d.x * 2 - d.bx;          // And reflect the previous                              // 2380\n                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                            }                                                                                          // 2382\n                            else {                            // or some else or nothing                               // 2383\n                                nx = d.x;                                                                              // 2384\n                                ny = d.y;                                                                              // 2385\n                            }                                                                                          // 2386\n                            path = [\"C\", nx, ny][concat](path.slice(1));                                               // 2387\n                            break;                                                                                     // 2388\n                        case \"T\":                                                                                      // 2389\n                            if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar                         // 2391\n                                d.qy = d.y * 2 - d.qy;        // to case \"S\".                                          // 2392\n                            }                                                                                          // 2393\n                            else {                            // or something else or nothing                          // 2394\n                                d.qx = d.x;                                                                            // 2395\n                                d.qy = d.y;                                                                            // 2396\n                            }                                                                                          // 2397\n                            path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));                         // 2398\n                            break;                                                                                     // 2399\n                        case \"Q\":                                                                                      // 2400\n                            d.qx = path[1];                                                                            // 2401\n                            d.qy = path[2];                                                                            // 2402\n                            path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));                   // 2403\n                            break;                                                                                     // 2404\n                        case \"L\":                                                                                      // 2405\n                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));                                     // 2406\n                            break;                                                                                     // 2407\n                        case \"H\":                                                                                      // 2408\n                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));                                         // 2409\n                            break;                                                                                     // 2410\n                        case \"V\":                                                                                      // 2411\n                            path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));                                         // 2412\n                            break;                                                                                     // 2413\n                        case \"Z\":                                                                                      // 2414\n                            path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));                                             // 2415\n                            break;                                                                                     // 2416\n                    }                                                                                                  // 2417\n                    return path;                                                                                       // 2418\n                },                                                                                                     // 2419\n                fixArc = function (pp, i) {                                                                            // 2420\n                    if (pp[i].length > 7) {                                                                            // 2421\n                        pp[i].shift();                                                                                 // 2422\n                        var pi = pp[i];                                                                                // 2423\n                        while (pi.length) {                                                                            // 2424\n                            pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));                                         // 2425\n                        }                                                                                              // 2426\n                        pp.splice(i, 1);                                                                               // 2427\n                        ii = mmax(p.length, p2 && p2.length || 0);                                                     // 2428\n                    }                                                                                                  // 2429\n                },                                                                                                     // 2430\n                fixM = function (path1, path2, a1, a2, i) {                                                            // 2431\n                    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {                                  // 2432\n                        path2.splice(i, 0, [\"M\", a2.x, a2.y]);                                                         // 2433\n                        a1.bx = 0;                                                                                     // 2434\n                        a1.by = 0;                                                                                     // 2435\n                        a1.x = path1[i][1];                                                                            // 2436\n                        a1.y = path1[i][2];                                                                            // 2437\n                        ii = mmax(p.length, p2 && p2.length || 0);                                                     // 2438\n                    }                                                                                                  // 2439\n                };                                                                                                     // 2440\n            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {                                  // 2441\n                p[i] = processPath(p[i], attrs);                                                                       // 2442\n                fixArc(p, i);                                                                                          // 2443\n                p2 && (p2[i] = processPath(p2[i], attrs2));                                                            // 2444\n                p2 && fixArc(p2, i);                                                                                   // 2445\n                fixM(p, p2, attrs, attrs2, i);                                                                         // 2446\n                fixM(p2, p, attrs2, attrs, i);                                                                         // 2447\n                var seg = p[i],                                                                                        // 2448\n                    seg2 = p2 && p2[i],                                                                                // 2449\n                    seglen = seg.length,                                                                               // 2450\n                    seg2len = p2 && seg2.length;                                                                       // 2451\n                attrs.x = seg[seglen - 2];                                                                             // 2452\n                attrs.y = seg[seglen - 1];                                                                             // 2453\n                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;                                                        // 2454\n                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;                                                        // 2455\n                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);                                            // 2456\n                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);                                            // 2457\n                attrs2.x = p2 && seg2[seg2len - 2];                                                                    // 2458\n                attrs2.y = p2 && seg2[seg2len - 1];                                                                    // 2459\n            }                                                                                                          // 2460\n            if (!p2) {                                                                                                 // 2461\n                pth.curve = pathClone(p);                                                                              // 2462\n            }                                                                                                          // 2463\n            return p2 ? [p, p2] : p;                                                                                   // 2464\n        }, null, pathClone),                                                                                           // 2465\n        parseDots = R._parseDots = cacher(function (gradient) {                                                        // 2466\n            var dots = [];                                                                                             // 2467\n            for (var i = 0, ii = gradient.length; i < ii; i++) {                                                       // 2468\n                var dot = {},                                                                                          // 2469\n                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);                                                    // 2470\n                dot.color = R.getRGB(par[1]);                                                                          // 2471\n                if (dot.color.error) {                                                                                 // 2472\n                    return null;                                                                                       // 2473\n                }                                                                                                      // 2474\n                dot.color = dot.color.hex;                                                                             // 2475\n                par[2] && (dot.offset = par[2] + \"%\");                                                                 // 2476\n                dots.push(dot);                                                                                        // 2477\n            }                                                                                                          // 2478\n            for (i = 1, ii = dots.length - 1; i < ii; i++) {                                                           // 2479\n                if (!dots[i].offset) {                                                                                 // 2480\n                    var start = toFloat(dots[i - 1].offset || 0),                                                      // 2481\n                        end = 0;                                                                                       // 2482\n                    for (var j = i + 1; j < ii; j++) {                                                                 // 2483\n                        if (dots[j].offset) {                                                                          // 2484\n                            end = dots[j].offset;                                                                      // 2485\n                            break;                                                                                     // 2486\n                        }                                                                                              // 2487\n                    }                                                                                                  // 2488\n                    if (!end) {                                                                                        // 2489\n                        end = 100;                                                                                     // 2490\n                        j = ii;                                                                                        // 2491\n                    }                                                                                                  // 2492\n                    end = toFloat(end);                                                                                // 2493\n                    var d = (end - start) / (j - i + 1);                                                               // 2494\n                    for (; i < j; i++) {                                                                               // 2495\n                        start += d;                                                                                    // 2496\n                        dots[i].offset = start + \"%\";                                                                  // 2497\n                    }                                                                                                  // 2498\n                }                                                                                                      // 2499\n            }                                                                                                          // 2500\n            return dots;                                                                                               // 2501\n        }),                                                                                                            // 2502\n        tear = R._tear = function (el, paper) {                                                                        // 2503\n            el == paper.top && (paper.top = el.prev);                                                                  // 2504\n            el == paper.bottom && (paper.bottom = el.next);                                                            // 2505\n            el.next && (el.next.prev = el.prev);                                                                       // 2506\n            el.prev && (el.prev.next = el.next);                                                                       // 2507\n        },                                                                                                             // 2508\n        tofront = R._tofront = function (el, paper) {                                                                  // 2509\n            if (paper.top === el) {                                                                                    // 2510\n                return;                                                                                                // 2511\n            }                                                                                                          // 2512\n            tear(el, paper);                                                                                           // 2513\n            el.next = null;                                                                                            // 2514\n            el.prev = paper.top;                                                                                       // 2515\n            paper.top.next = el;                                                                                       // 2516\n            paper.top = el;                                                                                            // 2517\n        },                                                                                                             // 2518\n        toback = R._toback = function (el, paper) {                                                                    // 2519\n            if (paper.bottom === el) {                                                                                 // 2520\n                return;                                                                                                // 2521\n            }                                                                                                          // 2522\n            tear(el, paper);                                                                                           // 2523\n            el.next = paper.bottom;                                                                                    // 2524\n            el.prev = null;                                                                                            // 2525\n            paper.bottom.prev = el;                                                                                    // 2526\n            paper.bottom = el;                                                                                         // 2527\n        },                                                                                                             // 2528\n        insertafter = R._insertafter = function (el, el2, paper) {                                                     // 2529\n            tear(el, paper);                                                                                           // 2530\n            el2 == paper.top && (paper.top = el);                                                                      // 2531\n            el2.next && (el2.next.prev = el);                                                                          // 2532\n            el.next = el2.next;                                                                                        // 2533\n            el.prev = el2;                                                                                             // 2534\n            el2.next = el;                                                                                             // 2535\n        },                                                                                                             // 2536\n        insertbefore = R._insertbefore = function (el, el2, paper) {                                                   // 2537\n            tear(el, paper);                                                                                           // 2538\n            el2 == paper.bottom && (paper.bottom = el);                                                                // 2539\n            el2.prev && (el2.prev.next = el);                                                                          // 2540\n            el.prev = el2.prev;                                                                                        // 2541\n            el2.prev = el;                                                                                             // 2542\n            el.next = el2;                                                                                             // 2543\n        },                                                                                                             // 2544\n        /*\\\n         * Raphael.toMatrix                                                                                            // 2546\n         [ method ]                                                                                                    // 2547\n         **                                                                                                            // 2548\n         * Utility method                                                                                              // 2549\n         **                                                                                                            // 2550\n         * Returns matrix of transformations applied to a given path                                                   // 2551\n         > Parameters                                                                                                  // 2552\n         - path (string) path string                                                                                   // 2553\n         - transform (string|array) transformation string                                                              // 2554\n         = (object) @Matrix                                                                                            // 2555\n        \\*/                                                                                                            // 2556\n        toMatrix = R.toMatrix = function (path, transform) {                                                           // 2557\n            var bb = pathDimensions(path),                                                                             // 2558\n                el = {                                                                                                 // 2559\n                    _: {                                                                                               // 2560\n                        transform: E                                                                                   // 2561\n                    },                                                                                                 // 2562\n                    getBBox: function () {                                                                             // 2563\n                        return bb;                                                                                     // 2564\n                    }                                                                                                  // 2565\n                };                                                                                                     // 2566\n            extractTransform(el, transform);                                                                           // 2567\n            return el.matrix;                                                                                          // 2568\n        },                                                                                                             // 2569\n        /*\\\n         * Raphael.transformPath                                                                                       // 2571\n         [ method ]                                                                                                    // 2572\n         **                                                                                                            // 2573\n         * Utility method                                                                                              // 2574\n         **                                                                                                            // 2575\n         * Returns path transformed by a given transformation                                                          // 2576\n         > Parameters                                                                                                  // 2577\n         - path (string) path string                                                                                   // 2578\n         - transform (string|array) transformation string                                                              // 2579\n         = (string) path                                                                                               // 2580\n        \\*/                                                                                                            // 2581\n        transformPath = R.transformPath = function (path, transform) {                                                 // 2582\n            return mapPath(path, toMatrix(path, transform));                                                           // 2583\n        },                                                                                                             // 2584\n        extractTransform = R._extractTransform = function (el, tstr) {                                                 // 2585\n            if (tstr == null) {                                                                                        // 2586\n                return el._.transform;                                                                                 // 2587\n            }                                                                                                          // 2588\n            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);                                            // 2589\n            var tdata = R.parseTransformString(tstr),                                                                  // 2590\n                deg = 0,                                                                                               // 2591\n                dx = 0,                                                                                                // 2592\n                dy = 0,                                                                                                // 2593\n                sx = 1,                                                                                                // 2594\n                sy = 1,                                                                                                // 2595\n                _ = el._,                                                                                              // 2596\n                m = new Matrix;                                                                                        // 2597\n            _.transform = tdata || [];                                                                                 // 2598\n            if (tdata) {                                                                                               // 2599\n                for (var i = 0, ii = tdata.length; i < ii; i++) {                                                      // 2600\n                    var t = tdata[i],                                                                                  // 2601\n                        tlen = t.length,                                                                               // 2602\n                        command = Str(t[0]).toLowerCase(),                                                             // 2603\n                        absolute = t[0] != command,                                                                    // 2604\n                        inver = absolute ? m.invert() : 0,                                                             // 2605\n                        x1,                                                                                            // 2606\n                        y1,                                                                                            // 2607\n                        x2,                                                                                            // 2608\n                        y2,                                                                                            // 2609\n                        bb;                                                                                            // 2610\n                    if (command == \"t\" && tlen == 3) {                                                                 // 2611\n                        if (absolute) {                                                                                // 2612\n                            x1 = inver.x(0, 0);                                                                        // 2613\n                            y1 = inver.y(0, 0);                                                                        // 2614\n                            x2 = inver.x(t[1], t[2]);                                                                  // 2615\n                            y2 = inver.y(t[1], t[2]);                                                                  // 2616\n                            m.translate(x2 - x1, y2 - y1);                                                             // 2617\n                        } else {                                                                                       // 2618\n                            m.translate(t[1], t[2]);                                                                   // 2619\n                        }                                                                                              // 2620\n                    } else if (command == \"r\") {                                                                       // 2621\n                        if (tlen == 2) {                                                                               // 2622\n                            bb = bb || el.getBBox(1);                                                                  // 2623\n                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);                                 // 2624\n                            deg += t[1];                                                                               // 2625\n                        } else if (tlen == 4) {                                                                        // 2626\n                            if (absolute) {                                                                            // 2627\n                                x2 = inver.x(t[2], t[3]);                                                              // 2628\n                                y2 = inver.y(t[2], t[3]);                                                              // 2629\n                                m.rotate(t[1], x2, y2);                                                                // 2630\n                            } else {                                                                                   // 2631\n                                m.rotate(t[1], t[2], t[3]);                                                            // 2632\n                            }                                                                                          // 2633\n                            deg += t[1];                                                                               // 2634\n                        }                                                                                              // 2635\n                    } else if (command == \"s\") {                                                                       // 2636\n                        if (tlen == 2 || tlen == 3) {                                                                  // 2637\n                            bb = bb || el.getBBox(1);                                                                  // 2638\n                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);                     // 2639\n                            sx *= t[1];                                                                                // 2640\n                            sy *= t[tlen - 1];                                                                         // 2641\n                        } else if (tlen == 5) {                                                                        // 2642\n                            if (absolute) {                                                                            // 2643\n                                x2 = inver.x(t[3], t[4]);                                                              // 2644\n                                y2 = inver.y(t[3], t[4]);                                                              // 2645\n                                m.scale(t[1], t[2], x2, y2);                                                           // 2646\n                            } else {                                                                                   // 2647\n                                m.scale(t[1], t[2], t[3], t[4]);                                                       // 2648\n                            }                                                                                          // 2649\n                            sx *= t[1];                                                                                // 2650\n                            sy *= t[2];                                                                                // 2651\n                        }                                                                                              // 2652\n                    } else if (command == \"m\" && tlen == 7) {                                                          // 2653\n                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);                                                     // 2654\n                    }                                                                                                  // 2655\n                    _.dirtyT = 1;                                                                                      // 2656\n                    el.matrix = m;                                                                                     // 2657\n                }                                                                                                      // 2658\n            }                                                                                                          // 2659\n                                                                                                                       // 2660\n            /*\\\n             * Element.matrix                                                                                          // 2662\n             [ property (object) ]                                                                                     // 2663\n             **                                                                                                        // 2664\n             * Keeps @Matrix object, which represents element transformation                                           // 2665\n            \\*/                                                                                                        // 2666\n            el.matrix = m;                                                                                             // 2667\n                                                                                                                       // 2668\n            _.sx = sx;                                                                                                 // 2669\n            _.sy = sy;                                                                                                 // 2670\n            _.deg = deg;                                                                                               // 2671\n            _.dx = dx = m.e;                                                                                           // 2672\n            _.dy = dy = m.f;                                                                                           // 2673\n                                                                                                                       // 2674\n            if (sx == 1 && sy == 1 && !deg && _.bbox) {                                                                // 2675\n                _.bbox.x += +dx;                                                                                       // 2676\n                _.bbox.y += +dy;                                                                                       // 2677\n            } else {                                                                                                   // 2678\n                _.dirtyT = 1;                                                                                          // 2679\n            }                                                                                                          // 2680\n        },                                                                                                             // 2681\n        getEmpty = function (item) {                                                                                   // 2682\n            var l = item[0];                                                                                           // 2683\n            switch (l.toLowerCase()) {                                                                                 // 2684\n                case \"t\": return [l, 0, 0];                                                                            // 2685\n                case \"m\": return [l, 1, 0, 0, 1, 0, 0];                                                                // 2686\n                case \"r\": if (item.length == 4) {                                                                      // 2687\n                    return [l, 0, item[2], item[3]];                                                                   // 2688\n                } else {                                                                                               // 2689\n                    return [l, 0];                                                                                     // 2690\n                }                                                                                                      // 2691\n                case \"s\": if (item.length == 5) {                                                                      // 2692\n                    return [l, 1, 1, item[3], item[4]];                                                                // 2693\n                } else if (item.length == 3) {                                                                         // 2694\n                    return [l, 1, 1];                                                                                  // 2695\n                } else {                                                                                               // 2696\n                    return [l, 1];                                                                                     // 2697\n                }                                                                                                      // 2698\n            }                                                                                                          // 2699\n        },                                                                                                             // 2700\n        equaliseTransform = R._equaliseTransform = function (t1, t2) {                                                 // 2701\n            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);                                                                 // 2702\n            t1 = R.parseTransformString(t1) || [];                                                                     // 2703\n            t2 = R.parseTransformString(t2) || [];                                                                     // 2704\n            var maxlength = mmax(t1.length, t2.length),                                                                // 2705\n                from = [],                                                                                             // 2706\n                to = [],                                                                                               // 2707\n                i = 0, j, jj,                                                                                          // 2708\n                tt1, tt2;                                                                                              // 2709\n            for (; i < maxlength; i++) {                                                                               // 2710\n                tt1 = t1[i] || getEmpty(t2[i]);                                                                        // 2711\n                tt2 = t2[i] || getEmpty(tt1);                                                                          // 2712\n                if ((tt1[0] != tt2[0]) ||                                                                              // 2713\n                    (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||                         // 2714\n                    (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))                            // 2715\n                    ) {                                                                                                // 2716\n                    return;                                                                                            // 2717\n                }                                                                                                      // 2718\n                from[i] = [];                                                                                          // 2719\n                to[i] = [];                                                                                            // 2720\n                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {                                          // 2721\n                    j in tt1 && (from[i][j] = tt1[j]);                                                                 // 2722\n                    j in tt2 && (to[i][j] = tt2[j]);                                                                   // 2723\n                }                                                                                                      // 2724\n            }                                                                                                          // 2725\n            return {                                                                                                   // 2726\n                from: from,                                                                                            // 2727\n                to: to                                                                                                 // 2728\n            };                                                                                                         // 2729\n        };                                                                                                             // 2730\n    R._getContainer = function (x, y, w, h) {                                                                          // 2731\n        var container;                                                                                                 // 2732\n        container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;                                     // 2733\n        if (container == null) {                                                                                       // 2734\n            return;                                                                                                    // 2735\n        }                                                                                                              // 2736\n        if (container.tagName) {                                                                                       // 2737\n            if (y == null) {                                                                                           // 2738\n                return {                                                                                               // 2739\n                    container: container,                                                                              // 2740\n                    width: container.style.pixelWidth || container.offsetWidth,                                        // 2741\n                    height: container.style.pixelHeight || container.offsetHeight                                      // 2742\n                };                                                                                                     // 2743\n            } else {                                                                                                   // 2744\n                return {                                                                                               // 2745\n                    container: container,                                                                              // 2746\n                    width: y,                                                                                          // 2747\n                    height: w                                                                                          // 2748\n                };                                                                                                     // 2749\n            }                                                                                                          // 2750\n        }                                                                                                              // 2751\n        return {                                                                                                       // 2752\n            container: 1,                                                                                              // 2753\n            x: x,                                                                                                      // 2754\n            y: y,                                                                                                      // 2755\n            width: w,                                                                                                  // 2756\n            height: h                                                                                                  // 2757\n        };                                                                                                             // 2758\n    };                                                                                                                 // 2759\n    /*\\\n     * Raphael.pathToRelative                                                                                          // 2761\n     [ method ]                                                                                                        // 2762\n     **                                                                                                                // 2763\n     * Utility method                                                                                                  // 2764\n     **                                                                                                                // 2765\n     * Converts path to relative form                                                                                  // 2766\n     > Parameters                                                                                                      // 2767\n     - pathString (string|array) path string or array of segments                                                      // 2768\n     = (array) array of segments.                                                                                      // 2769\n    \\*/                                                                                                                // 2770\n    R.pathToRelative = pathToRelative;                                                                                 // 2771\n    R._engine = {};                                                                                                    // 2772\n    /*\\\n     * Raphael.path2curve                                                                                              // 2774\n     [ method ]                                                                                                        // 2775\n     **                                                                                                                // 2776\n     * Utility method                                                                                                  // 2777\n     **                                                                                                                // 2778\n     * Converts path to a new path where all segments are cubic bezier curves.                                         // 2779\n     > Parameters                                                                                                      // 2780\n     - pathString (string|array) path string or array of segments                                                      // 2781\n     = (array) array of segments.                                                                                      // 2782\n    \\*/                                                                                                                // 2783\n    R.path2curve = path2curve;                                                                                         // 2784\n    /*\\\n     * Raphael.matrix                                                                                                  // 2786\n     [ method ]                                                                                                        // 2787\n     **                                                                                                                // 2788\n     * Utility method                                                                                                  // 2789\n     **                                                                                                                // 2790\n     * Returns matrix based on given parameters.                                                                       // 2791\n     > Parameters                                                                                                      // 2792\n     - a (number)                                                                                                      // 2793\n     - b (number)                                                                                                      // 2794\n     - c (number)                                                                                                      // 2795\n     - d (number)                                                                                                      // 2796\n     - e (number)                                                                                                      // 2797\n     - f (number)                                                                                                      // 2798\n     = (object) @Matrix                                                                                                // 2799\n    \\*/                                                                                                                // 2800\n    R.matrix = function (a, b, c, d, e, f) {                                                                           // 2801\n        return new Matrix(a, b, c, d, e, f);                                                                           // 2802\n    };                                                                                                                 // 2803\n    function Matrix(a, b, c, d, e, f) {                                                                                // 2804\n        if (a != null) {                                                                                               // 2805\n            this.a = +a;                                                                                               // 2806\n            this.b = +b;                                                                                               // 2807\n            this.c = +c;                                                                                               // 2808\n            this.d = +d;                                                                                               // 2809\n            this.e = +e;                                                                                               // 2810\n            this.f = +f;                                                                                               // 2811\n        } else {                                                                                                       // 2812\n            this.a = 1;                                                                                                // 2813\n            this.b = 0;                                                                                                // 2814\n            this.c = 0;                                                                                                // 2815\n            this.d = 1;                                                                                                // 2816\n            this.e = 0;                                                                                                // 2817\n            this.f = 0;                                                                                                // 2818\n        }                                                                                                              // 2819\n    }                                                                                                                  // 2820\n    (function (matrixproto) {                                                                                          // 2821\n        /*\\\n         * Matrix.add                                                                                                  // 2823\n         [ method ]                                                                                                    // 2824\n         **                                                                                                            // 2825\n         * Adds given matrix to existing one.                                                                          // 2826\n         > Parameters                                                                                                  // 2827\n         - a (number)                                                                                                  // 2828\n         - b (number)                                                                                                  // 2829\n         - c (number)                                                                                                  // 2830\n         - d (number)                                                                                                  // 2831\n         - e (number)                                                                                                  // 2832\n         - f (number)                                                                                                  // 2833\n         or                                                                                                            // 2834\n         - matrix (object) @Matrix                                                                                     // 2835\n        \\*/                                                                                                            // 2836\n        matrixproto.add = function (a, b, c, d, e, f) {                                                                // 2837\n            var out = [[], [], []],                                                                                    // 2838\n                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],                                   // 2839\n                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],                                                            // 2840\n                x, y, z, res;                                                                                          // 2841\n                                                                                                                       // 2842\n            if (a && a instanceof Matrix) {                                                                            // 2843\n                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];                                                // 2844\n            }                                                                                                          // 2845\n                                                                                                                       // 2846\n            for (x = 0; x < 3; x++) {                                                                                  // 2847\n                for (y = 0; y < 3; y++) {                                                                              // 2848\n                    res = 0;                                                                                           // 2849\n                    for (z = 0; z < 3; z++) {                                                                          // 2850\n                        res += m[x][z] * matrix[z][y];                                                                 // 2851\n                    }                                                                                                  // 2852\n                    out[x][y] = res;                                                                                   // 2853\n                }                                                                                                      // 2854\n            }                                                                                                          // 2855\n            this.a = out[0][0];                                                                                        // 2856\n            this.b = out[1][0];                                                                                        // 2857\n            this.c = out[0][1];                                                                                        // 2858\n            this.d = out[1][1];                                                                                        // 2859\n            this.e = out[0][2];                                                                                        // 2860\n            this.f = out[1][2];                                                                                        // 2861\n        };                                                                                                             // 2862\n        /*\\\n         * Matrix.invert                                                                                               // 2864\n         [ method ]                                                                                                    // 2865\n         **                                                                                                            // 2866\n         * Returns inverted version of the matrix                                                                      // 2867\n         = (object) @Matrix                                                                                            // 2868\n        \\*/                                                                                                            // 2869\n        matrixproto.invert = function () {                                                                             // 2870\n            var me = this,                                                                                             // 2871\n                x = me.a * me.d - me.b * me.c;                                                                         // 2872\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };                                                                                                             // 2874\n        /*\\\n         * Matrix.clone                                                                                                // 2876\n         [ method ]                                                                                                    // 2877\n         **                                                                                                            // 2878\n         * Returns copy of the matrix                                                                                  // 2879\n         = (object) @Matrix                                                                                            // 2880\n        \\*/                                                                                                            // 2881\n        matrixproto.clone = function () {                                                                              // 2882\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);                                         // 2883\n        };                                                                                                             // 2884\n        /*\\\n         * Matrix.translate                                                                                            // 2886\n         [ method ]                                                                                                    // 2887\n         **                                                                                                            // 2888\n         * Translate the matrix                                                                                        // 2889\n         > Parameters                                                                                                  // 2890\n         - x (number)                                                                                                  // 2891\n         - y (number)                                                                                                  // 2892\n        \\*/                                                                                                            // 2893\n        matrixproto.translate = function (x, y) {                                                                      // 2894\n            this.add(1, 0, 0, 1, x, y);                                                                                // 2895\n        };                                                                                                             // 2896\n        /*\\\n         * Matrix.scale                                                                                                // 2898\n         [ method ]                                                                                                    // 2899\n         **                                                                                                            // 2900\n         * Scales the matrix                                                                                           // 2901\n         > Parameters                                                                                                  // 2902\n         - x (number)                                                                                                  // 2903\n         - y (number) #optional                                                                                        // 2904\n         - cx (number) #optional                                                                                       // 2905\n         - cy (number) #optional                                                                                       // 2906\n        \\*/                                                                                                            // 2907\n        matrixproto.scale = function (x, y, cx, cy) {                                                                  // 2908\n            y == null && (y = x);                                                                                      // 2909\n            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);                                                                // 2910\n            this.add(x, 0, 0, y, 0, 0);                                                                                // 2911\n            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);                                                              // 2912\n        };                                                                                                             // 2913\n        /*\\\n         * Matrix.rotate                                                                                               // 2915\n         [ method ]                                                                                                    // 2916\n         **                                                                                                            // 2917\n         * Rotates the matrix                                                                                          // 2918\n         > Parameters                                                                                                  // 2919\n         - a (number)                                                                                                  // 2920\n         - x (number)                                                                                                  // 2921\n         - y (number)                                                                                                  // 2922\n        \\*/                                                                                                            // 2923\n        matrixproto.rotate = function (a, x, y) {                                                                      // 2924\n            a = R.rad(a);                                                                                              // 2925\n            x = x || 0;                                                                                                // 2926\n            y = y || 0;                                                                                                // 2927\n            var cos = +math.cos(a).toFixed(9),                                                                         // 2928\n                sin = +math.sin(a).toFixed(9);                                                                         // 2929\n            this.add(cos, sin, -sin, cos, x, y);                                                                       // 2930\n            this.add(1, 0, 0, 1, -x, -y);                                                                              // 2931\n        };                                                                                                             // 2932\n        /*\\\n         * Matrix.x                                                                                                    // 2934\n         [ method ]                                                                                                    // 2935\n         **                                                                                                            // 2936\n         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y        // 2937\n         > Parameters                                                                                                  // 2938\n         - x (number)                                                                                                  // 2939\n         - y (number)                                                                                                  // 2940\n         = (number) x                                                                                                  // 2941\n        \\*/                                                                                                            // 2942\n        matrixproto.x = function (x, y) {                                                                              // 2943\n            return x * this.a + y * this.c + this.e;                                                                   // 2944\n        };                                                                                                             // 2945\n        /*\\\n         * Matrix.y                                                                                                    // 2947\n         [ method ]                                                                                                    // 2948\n         **                                                                                                            // 2949\n         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x        // 2950\n         > Parameters                                                                                                  // 2951\n         - x (number)                                                                                                  // 2952\n         - y (number)                                                                                                  // 2953\n         = (number) y                                                                                                  // 2954\n        \\*/                                                                                                            // 2955\n        matrixproto.y = function (x, y) {                                                                              // 2956\n            return x * this.b + y * this.d + this.f;                                                                   // 2957\n        };                                                                                                             // 2958\n        matrixproto.get = function (i) {                                                                               // 2959\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);                                                         // 2960\n        };                                                                                                             // 2961\n        matrixproto.toString = function () {                                                                           // 2962\n            return R.svg ?                                                                                             // 2963\n                \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" :\n                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();                                     // 2965\n        };                                                                                                             // 2966\n        matrixproto.toFilter = function () {                                                                           // 2967\n            return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) +                                     // 2968\n                \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) +                             // 2969\n                \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";                       // 2970\n        };                                                                                                             // 2971\n        matrixproto.offset = function () {                                                                             // 2972\n            return [this.e.toFixed(4), this.f.toFixed(4)];                                                             // 2973\n        };                                                                                                             // 2974\n        function norm(a) {                                                                                             // 2975\n            return a[0] * a[0] + a[1] * a[1];                                                                          // 2976\n        }                                                                                                              // 2977\n        function normalize(a) {                                                                                        // 2978\n            var mag = math.sqrt(norm(a));                                                                              // 2979\n            a[0] && (a[0] /= mag);                                                                                     // 2980\n            a[1] && (a[1] /= mag);                                                                                     // 2981\n        }                                                                                                              // 2982\n        /*\\\n         * Matrix.split                                                                                                // 2984\n         [ method ]                                                                                                    // 2985\n         **                                                                                                            // 2986\n         * Splits matrix into primitive transformations                                                                // 2987\n         = (object) in format:                                                                                         // 2988\n         o dx (number) translation by x                                                                                // 2989\n         o dy (number) translation by y                                                                                // 2990\n         o scalex (number) scale by x                                                                                  // 2991\n         o scaley (number) scale by y                                                                                  // 2992\n         o shear (number) shear                                                                                        // 2993\n         o rotate (number) rotation in deg                                                                             // 2994\n         o isSimple (boolean) could it be represented via simple transformations                                       // 2995\n        \\*/                                                                                                            // 2996\n        matrixproto.split = function () {                                                                              // 2997\n            var out = {};                                                                                              // 2998\n            // translation                                                                                             // 2999\n            out.dx = this.e;                                                                                           // 3000\n            out.dy = this.f;                                                                                           // 3001\n                                                                                                                       // 3002\n            // scale and shear                                                                                         // 3003\n            var row = [[this.a, this.c], [this.b, this.d]];                                                            // 3004\n            out.scalex = math.sqrt(norm(row[0]));                                                                      // 3005\n            normalize(row[0]);                                                                                         // 3006\n                                                                                                                       // 3007\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];                                                 // 3008\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];                           // 3009\n                                                                                                                       // 3010\n            out.scaley = math.sqrt(norm(row[1]));                                                                      // 3011\n            normalize(row[1]);                                                                                         // 3012\n            out.shear /= out.scaley;                                                                                   // 3013\n                                                                                                                       // 3014\n            // rotation                                                                                                // 3015\n            var sin = -row[0][1],                                                                                      // 3016\n                cos = row[1][1];                                                                                       // 3017\n            if (cos < 0) {                                                                                             // 3018\n                out.rotate = R.deg(math.acos(cos));                                                                    // 3019\n                if (sin < 0) {                                                                                         // 3020\n                    out.rotate = 360 - out.rotate;                                                                     // 3021\n                }                                                                                                      // 3022\n            } else {                                                                                                   // 3023\n                out.rotate = R.deg(math.asin(sin));                                                                    // 3024\n            }                                                                                                          // 3025\n                                                                                                                       // 3026\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);  // 3027\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;                                                    // 3029\n            return out;                                                                                                // 3030\n        };                                                                                                             // 3031\n        /*\\\n         * Matrix.toTransformString                                                                                    // 3033\n         [ method ]                                                                                                    // 3034\n         **                                                                                                            // 3035\n         * Return transform string that represents given matrix                                                        // 3036\n         = (string) transform string                                                                                   // 3037\n        \\*/                                                                                                            // 3038\n        matrixproto.toTransformString = function (shorter) {                                                           // 3039\n            var s = shorter || this[split]();                                                                          // 3040\n            if (s.isSimple) {                                                                                          // 3041\n                s.scalex = +s.scalex.toFixed(4);                                                                       // 3042\n                s.scaley = +s.scaley.toFixed(4);                                                                       // 3043\n                s.rotate = +s.rotate.toFixed(4);                                                                       // 3044\n                return  (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) +                                                      // 3045\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +                      // 3046\n                        (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);                                                       // 3047\n            } else {                                                                                                   // 3048\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];           // 3049\n            }                                                                                                          // 3050\n        };                                                                                                             // 3051\n    })(Matrix.prototype);                                                                                              // 3052\n                                                                                                                       // 3053\n    // WebKit rendering bug workaround method                                                                          // 3054\n    var version = navigator.userAgent.match(/Version\\/(.*?)\\s/) || navigator.userAgent.match(/Chrome\\/(\\d+)/);         // 3055\n    if ((navigator.vendor == \"Apple Computer, Inc.\") && (version && version[1] < 4 || navigator.platform.slice(0, 2) == \"iP\") ||\n        (navigator.vendor == \"Google Inc.\" && version && version[1] < 8)) {                                            // 3057\n        /*\\\n         * Paper.safari                                                                                                // 3059\n         [ method ]                                                                                                    // 3060\n         **                                                                                                            // 3061\n         * There is an inconvenient rendering bug in Safari (WebKit):                                                  // 3062\n         * sometimes the rendering should be forced.                                                                   // 3063\n         * This method should help with dealing with this bug.                                                         // 3064\n        \\*/                                                                                                            // 3065\n        paperproto.safari = function () {                                                                              // 3066\n            var rect = this.rect(-99, -99, this.width + 99, this.height + 99).attr({stroke: \"none\"});                  // 3067\n            setTimeout(function () {rect.remove();});                                                                  // 3068\n        };                                                                                                             // 3069\n    } else {                                                                                                           // 3070\n        paperproto.safari = fun;                                                                                       // 3071\n    }                                                                                                                  // 3072\n                                                                                                                       // 3073\n    var preventDefault = function () {                                                                                 // 3074\n        this.returnValue = false;                                                                                      // 3075\n    },                                                                                                                 // 3076\n    preventTouch = function () {                                                                                       // 3077\n        return this.originalEvent.preventDefault();                                                                    // 3078\n    },                                                                                                                 // 3079\n    stopPropagation = function () {                                                                                    // 3080\n        this.cancelBubble = true;                                                                                      // 3081\n    },                                                                                                                 // 3082\n    stopTouch = function () {                                                                                          // 3083\n        return this.originalEvent.stopPropagation();                                                                   // 3084\n    },                                                                                                                 // 3085\n    getEventPosition = function (e) {                                                                                  // 3086\n        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,                                         // 3087\n            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;                                       // 3088\n                                                                                                                       // 3089\n        return {                                                                                                       // 3090\n            x: e.clientX + scrollX,                                                                                    // 3091\n            y: e.clientY + scrollY                                                                                     // 3092\n        };                                                                                                             // 3093\n    },                                                                                                                 // 3094\n    addEvent = (function () {                                                                                          // 3095\n        if (g.doc.addEventListener) {                                                                                  // 3096\n            return function (obj, type, fn, element) {                                                                 // 3097\n                var f = function (e) {                                                                                 // 3098\n                    var pos = getEventPosition(e);                                                                     // 3099\n                    return fn.call(element, e, pos.x, pos.y);                                                          // 3100\n                };                                                                                                     // 3101\n                obj.addEventListener(type, f, false);                                                                  // 3102\n                                                                                                                       // 3103\n                if (supportsTouch && touchMap[type]) {                                                                 // 3104\n                    var _f = function (e) {                                                                            // 3105\n                        var pos = getEventPosition(e),                                                                 // 3106\n                            olde = e;                                                                                  // 3107\n                                                                                                                       // 3108\n                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {                 // 3109\n                            if (e.targetTouches[i].target == obj) {                                                    // 3110\n                                e = e.targetTouches[i];                                                                // 3111\n                                e.originalEvent = olde;                                                                // 3112\n                                e.preventDefault = preventTouch;                                                       // 3113\n                                e.stopPropagation = stopTouch;                                                         // 3114\n                                break;                                                                                 // 3115\n                            }                                                                                          // 3116\n                        }                                                                                              // 3117\n                                                                                                                       // 3118\n                        return fn.call(element, e, pos.x, pos.y);                                                      // 3119\n                    };                                                                                                 // 3120\n                    obj.addEventListener(touchMap[type], _f, false);                                                   // 3121\n                }                                                                                                      // 3122\n                                                                                                                       // 3123\n                return function () {                                                                                   // 3124\n                    obj.removeEventListener(type, f, false);                                                           // 3125\n                                                                                                                       // 3126\n                    if (supportsTouch && touchMap[type])                                                               // 3127\n                        obj.removeEventListener(touchMap[type], f, false);                                             // 3128\n                                                                                                                       // 3129\n                    return true;                                                                                       // 3130\n                };                                                                                                     // 3131\n            };                                                                                                         // 3132\n        } else if (g.doc.attachEvent) {                                                                                // 3133\n            return function (obj, type, fn, element) {                                                                 // 3134\n                var f = function (e) {                                                                                 // 3135\n                    e = e || g.win.event;                                                                              // 3136\n                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,                             // 3137\n                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,                           // 3138\n                        x = e.clientX + scrollX,                                                                       // 3139\n                        y = e.clientY + scrollY;                                                                       // 3140\n                    e.preventDefault = e.preventDefault || preventDefault;                                             // 3141\n                    e.stopPropagation = e.stopPropagation || stopPropagation;                                          // 3142\n                    return fn.call(element, e, x, y);                                                                  // 3143\n                };                                                                                                     // 3144\n                obj.attachEvent(\"on\" + type, f);                                                                       // 3145\n                var detacher = function () {                                                                           // 3146\n                    obj.detachEvent(\"on\" + type, f);                                                                   // 3147\n                    return true;                                                                                       // 3148\n                };                                                                                                     // 3149\n                return detacher;                                                                                       // 3150\n            };                                                                                                         // 3151\n        }                                                                                                              // 3152\n    })(),                                                                                                              // 3153\n    drag = [],                                                                                                         // 3154\n    dragMove = function (e) {                                                                                          // 3155\n        var x = e.clientX,                                                                                             // 3156\n            y = e.clientY,                                                                                             // 3157\n            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,                                         // 3158\n            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,                                       // 3159\n            dragi,                                                                                                     // 3160\n            j = drag.length;                                                                                           // 3161\n        while (j--) {                                                                                                  // 3162\n            dragi = drag[j];                                                                                           // 3163\n            if (supportsTouch && e.touches) {                                                                          // 3164\n                var i = e.touches.length,                                                                              // 3165\n                    touch;                                                                                             // 3166\n                while (i--) {                                                                                          // 3167\n                    touch = e.touches[i];                                                                              // 3168\n                    if (touch.identifier == dragi.el._drag.id) {                                                       // 3169\n                        x = touch.clientX;                                                                             // 3170\n                        y = touch.clientY;                                                                             // 3171\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();                                      // 3172\n                        break;                                                                                         // 3173\n                    }                                                                                                  // 3174\n                }                                                                                                      // 3175\n            } else {                                                                                                   // 3176\n                e.preventDefault();                                                                                    // 3177\n            }                                                                                                          // 3178\n            var node = dragi.el.node,                                                                                  // 3179\n                o,                                                                                                     // 3180\n                next = node.nextSibling,                                                                               // 3181\n                parent = node.parentNode,                                                                              // 3182\n                display = node.style.display;                                                                          // 3183\n            g.win.opera && parent.removeChild(node);                                                                   // 3184\n            node.style.display = \"none\";                                                                               // 3185\n            o = dragi.el.paper.getElementByPoint(x, y);                                                                // 3186\n            node.style.display = display;                                                                              // 3187\n            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));                        // 3188\n            o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);                                                 // 3189\n            x += scrollX;                                                                                              // 3190\n            y += scrollY;                                                                                              // 3191\n            eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }                                                                                                              // 3193\n    },                                                                                                                 // 3194\n    dragUp = function (e) {                                                                                            // 3195\n        R.unmousemove(dragMove).unmouseup(dragUp);                                                                     // 3196\n        var i = drag.length,                                                                                           // 3197\n            dragi;                                                                                                     // 3198\n        while (i--) {                                                                                                  // 3199\n            dragi = drag[i];                                                                                           // 3200\n            dragi.el._drag = {};                                                                                       // 3201\n            eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n        }                                                                                                              // 3203\n        drag = [];                                                                                                     // 3204\n    },                                                                                                                 // 3205\n    /*\\\n     * Raphael.el                                                                                                      // 3207\n     [ property (object) ]                                                                                             // 3208\n     **                                                                                                                // 3209\n     * You can add your own method to elements. This is usefull when you want to hack default functionality or         // 3210\n     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,           // 3211\n     * you can redefine element method at any time. Expending element methods wouldn’t affect set.                     // 3212\n     > Usage                                                                                                           // 3213\n     | Raphael.el.red = function () {                                                                                  // 3214\n     |     this.attr({fill: \"#f00\"});                                                                                  // 3215\n     | };                                                                                                              // 3216\n     | // then use it                                                                                                  // 3217\n     | paper.circle(100, 100, 20).red();                                                                               // 3218\n    \\*/                                                                                                                // 3219\n    elproto = R.el = {};                                                                                               // 3220\n    /*\\\n     * Element.click                                                                                                   // 3222\n     [ method ]                                                                                                        // 3223\n     **                                                                                                                // 3224\n     * Adds event handler for click for the element.                                                                   // 3225\n     > Parameters                                                                                                      // 3226\n     - handler (function) handler for the event                                                                        // 3227\n     = (object) @Element                                                                                               // 3228\n    \\*/                                                                                                                // 3229\n    /*\\\n     * Element.unclick                                                                                                 // 3231\n     [ method ]                                                                                                        // 3232\n     **                                                                                                                // 3233\n     * Removes event handler for click for the element.                                                                // 3234\n     > Parameters                                                                                                      // 3235\n     - handler (function) #optional handler for the event                                                              // 3236\n     = (object) @Element                                                                                               // 3237\n    \\*/                                                                                                                // 3238\n                                                                                                                       // 3239\n    /*\\\n     * Element.dblclick                                                                                                // 3241\n     [ method ]                                                                                                        // 3242\n     **                                                                                                                // 3243\n     * Adds event handler for double click for the element.                                                            // 3244\n     > Parameters                                                                                                      // 3245\n     - handler (function) handler for the event                                                                        // 3246\n     = (object) @Element                                                                                               // 3247\n    \\*/                                                                                                                // 3248\n    /*\\\n     * Element.undblclick                                                                                              // 3250\n     [ method ]                                                                                                        // 3251\n     **                                                                                                                // 3252\n     * Removes event handler for double click for the element.                                                         // 3253\n     > Parameters                                                                                                      // 3254\n     - handler (function) #optional handler for the event                                                              // 3255\n     = (object) @Element                                                                                               // 3256\n    \\*/                                                                                                                // 3257\n                                                                                                                       // 3258\n    /*\\\n     * Element.mousedown                                                                                               // 3260\n     [ method ]                                                                                                        // 3261\n     **                                                                                                                // 3262\n     * Adds event handler for mousedown for the element.                                                               // 3263\n     > Parameters                                                                                                      // 3264\n     - handler (function) handler for the event                                                                        // 3265\n     = (object) @Element                                                                                               // 3266\n    \\*/                                                                                                                // 3267\n    /*\\\n     * Element.unmousedown                                                                                             // 3269\n     [ method ]                                                                                                        // 3270\n     **                                                                                                                // 3271\n     * Removes event handler for mousedown for the element.                                                            // 3272\n     > Parameters                                                                                                      // 3273\n     - handler (function) #optional handler for the event                                                              // 3274\n     = (object) @Element                                                                                               // 3275\n    \\*/                                                                                                                // 3276\n                                                                                                                       // 3277\n    /*\\\n     * Element.mousemove                                                                                               // 3279\n     [ method ]                                                                                                        // 3280\n     **                                                                                                                // 3281\n     * Adds event handler for mousemove for the element.                                                               // 3282\n     > Parameters                                                                                                      // 3283\n     - handler (function) handler for the event                                                                        // 3284\n     = (object) @Element                                                                                               // 3285\n    \\*/                                                                                                                // 3286\n    /*\\\n     * Element.unmousemove                                                                                             // 3288\n     [ method ]                                                                                                        // 3289\n     **                                                                                                                // 3290\n     * Removes event handler for mousemove for the element.                                                            // 3291\n     > Parameters                                                                                                      // 3292\n     - handler (function) #optional handler for the event                                                              // 3293\n     = (object) @Element                                                                                               // 3294\n    \\*/                                                                                                                // 3295\n                                                                                                                       // 3296\n    /*\\\n     * Element.mouseout                                                                                                // 3298\n     [ method ]                                                                                                        // 3299\n     **                                                                                                                // 3300\n     * Adds event handler for mouseout for the element.                                                                // 3301\n     > Parameters                                                                                                      // 3302\n     - handler (function) handler for the event                                                                        // 3303\n     = (object) @Element                                                                                               // 3304\n    \\*/                                                                                                                // 3305\n    /*\\\n     * Element.unmouseout                                                                                              // 3307\n     [ method ]                                                                                                        // 3308\n     **                                                                                                                // 3309\n     * Removes event handler for mouseout for the element.                                                             // 3310\n     > Parameters                                                                                                      // 3311\n     - handler (function) #optional handler for the event                                                              // 3312\n     = (object) @Element                                                                                               // 3313\n    \\*/                                                                                                                // 3314\n                                                                                                                       // 3315\n    /*\\\n     * Element.mouseover                                                                                               // 3317\n     [ method ]                                                                                                        // 3318\n     **                                                                                                                // 3319\n     * Adds event handler for mouseover for the element.                                                               // 3320\n     > Parameters                                                                                                      // 3321\n     - handler (function) handler for the event                                                                        // 3322\n     = (object) @Element                                                                                               // 3323\n    \\*/                                                                                                                // 3324\n    /*\\\n     * Element.unmouseover                                                                                             // 3326\n     [ method ]                                                                                                        // 3327\n     **                                                                                                                // 3328\n     * Removes event handler for mouseover for the element.                                                            // 3329\n     > Parameters                                                                                                      // 3330\n     - handler (function) #optional handler for the event                                                              // 3331\n     = (object) @Element                                                                                               // 3332\n    \\*/                                                                                                                // 3333\n                                                                                                                       // 3334\n    /*\\\n     * Element.mouseup                                                                                                 // 3336\n     [ method ]                                                                                                        // 3337\n     **                                                                                                                // 3338\n     * Adds event handler for mouseup for the element.                                                                 // 3339\n     > Parameters                                                                                                      // 3340\n     - handler (function) handler for the event                                                                        // 3341\n     = (object) @Element                                                                                               // 3342\n    \\*/                                                                                                                // 3343\n    /*\\\n     * Element.unmouseup                                                                                               // 3345\n     [ method ]                                                                                                        // 3346\n     **                                                                                                                // 3347\n     * Removes event handler for mouseup for the element.                                                              // 3348\n     > Parameters                                                                                                      // 3349\n     - handler (function) #optional handler for the event                                                              // 3350\n     = (object) @Element                                                                                               // 3351\n    \\*/                                                                                                                // 3352\n                                                                                                                       // 3353\n    /*\\\n     * Element.touchstart                                                                                              // 3355\n     [ method ]                                                                                                        // 3356\n     **                                                                                                                // 3357\n     * Adds event handler for touchstart for the element.                                                              // 3358\n     > Parameters                                                                                                      // 3359\n     - handler (function) handler for the event                                                                        // 3360\n     = (object) @Element                                                                                               // 3361\n    \\*/                                                                                                                // 3362\n    /*\\\n     * Element.untouchstart                                                                                            // 3364\n     [ method ]                                                                                                        // 3365\n     **                                                                                                                // 3366\n     * Removes event handler for touchstart for the element.                                                           // 3367\n     > Parameters                                                                                                      // 3368\n     - handler (function) #optional handler for the event                                                              // 3369\n     = (object) @Element                                                                                               // 3370\n    \\*/                                                                                                                // 3371\n                                                                                                                       // 3372\n    /*\\\n     * Element.touchmove                                                                                               // 3374\n     [ method ]                                                                                                        // 3375\n     **                                                                                                                // 3376\n     * Adds event handler for touchmove for the element.                                                               // 3377\n     > Parameters                                                                                                      // 3378\n     - handler (function) handler for the event                                                                        // 3379\n     = (object) @Element                                                                                               // 3380\n    \\*/                                                                                                                // 3381\n    /*\\\n     * Element.untouchmove                                                                                             // 3383\n     [ method ]                                                                                                        // 3384\n     **                                                                                                                // 3385\n     * Removes event handler for touchmove for the element.                                                            // 3386\n     > Parameters                                                                                                      // 3387\n     - handler (function) #optional handler for the event                                                              // 3388\n     = (object) @Element                                                                                               // 3389\n    \\*/                                                                                                                // 3390\n                                                                                                                       // 3391\n    /*\\\n     * Element.touchend                                                                                                // 3393\n     [ method ]                                                                                                        // 3394\n     **                                                                                                                // 3395\n     * Adds event handler for touchend for the element.                                                                // 3396\n     > Parameters                                                                                                      // 3397\n     - handler (function) handler for the event                                                                        // 3398\n     = (object) @Element                                                                                               // 3399\n    \\*/                                                                                                                // 3400\n    /*\\\n     * Element.untouchend                                                                                              // 3402\n     [ method ]                                                                                                        // 3403\n     **                                                                                                                // 3404\n     * Removes event handler for touchend for the element.                                                             // 3405\n     > Parameters                                                                                                      // 3406\n     - handler (function) #optional handler for the event                                                              // 3407\n     = (object) @Element                                                                                               // 3408\n    \\*/                                                                                                                // 3409\n                                                                                                                       // 3410\n    /*\\\n     * Element.touchcancel                                                                                             // 3412\n     [ method ]                                                                                                        // 3413\n     **                                                                                                                // 3414\n     * Adds event handler for touchcancel for the element.                                                             // 3415\n     > Parameters                                                                                                      // 3416\n     - handler (function) handler for the event                                                                        // 3417\n     = (object) @Element                                                                                               // 3418\n    \\*/                                                                                                                // 3419\n    /*\\\n     * Element.untouchcancel                                                                                           // 3421\n     [ method ]                                                                                                        // 3422\n     **                                                                                                                // 3423\n     * Removes event handler for touchcancel for the element.                                                          // 3424\n     > Parameters                                                                                                      // 3425\n     - handler (function) #optional handler for the event                                                              // 3426\n     = (object) @Element                                                                                               // 3427\n    \\*/                                                                                                                // 3428\n    for (var i = events.length; i--;) {                                                                                // 3429\n        (function (eventName) {                                                                                        // 3430\n            R[eventName] = elproto[eventName] = function (fn, scope) {                                                 // 3431\n                if (R.is(fn, \"function\")) {                                                                            // 3432\n                    this.events = this.events || [];                                                                   // 3433\n                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n                }                                                                                                      // 3435\n                return this;                                                                                           // 3436\n            };                                                                                                         // 3437\n            R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {                                          // 3438\n                var events = this.events || [],                                                                        // 3439\n                    l = events.length;                                                                                 // 3440\n                while (l--){                                                                                           // 3441\n                    if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {                 // 3442\n                        events[l].unbind();                                                                            // 3443\n                        events.splice(l, 1);                                                                           // 3444\n                        !events.length && delete this.events;                                                          // 3445\n                    }                                                                                                  // 3446\n                }                                                                                                      // 3447\n                return this;                                                                                           // 3448\n            };                                                                                                         // 3449\n        })(events[i]);                                                                                                 // 3450\n    }                                                                                                                  // 3451\n                                                                                                                       // 3452\n    /*\\\n     * Element.data                                                                                                    // 3454\n     [ method ]                                                                                                        // 3455\n     **                                                                                                                // 3456\n     * Adds or retrieves given value asociated with given key.                                                         // 3457\n     **                                                                                                                // 3458\n     * See also @Element.removeData                                                                                    // 3459\n     > Parameters                                                                                                      // 3460\n     - key (string) key to store data                                                                                  // 3461\n     - value (any) #optional value to store                                                                            // 3462\n     = (object) @Element                                                                                               // 3463\n     * or, if value is not specified:                                                                                  // 3464\n     = (any) value                                                                                                     // 3465\n     * or, if key and value are not specified:                                                                         // 3466\n     = (object) Key/value pairs for all the data associated with the element.                                          // 3467\n     > Usage                                                                                                           // 3468\n     | for (var i = 0, i < 5, i++) {                                                                                   // 3469\n     |     paper.circle(10 + 15 * i, 10, 10)                                                                           // 3470\n     |          .attr({fill: \"#000\"})                                                                                  // 3471\n     |          .data(\"i\", i)                                                                                          // 3472\n     |          .click(function () {                                                                                   // 3473\n     |             alert(this.data(\"i\"));                                                                              // 3474\n     |          });                                                                                                    // 3475\n     | }                                                                                                               // 3476\n    \\*/                                                                                                                // 3477\n    elproto.data = function (key, value) {                                                                             // 3478\n        var data = eldata[this.id] = eldata[this.id] || {};                                                            // 3479\n        if (arguments.length == 0) {                                                                                   // 3480\n            return data;                                                                                               // 3481\n        }                                                                                                              // 3482\n        if (arguments.length == 1) {                                                                                   // 3483\n            if (R.is(key, \"object\")) {                                                                                 // 3484\n                for (var i in key) if (key[has](i)) {                                                                  // 3485\n                    this.data(i, key[i]);                                                                              // 3486\n                }                                                                                                      // 3487\n                return this;                                                                                           // 3488\n            }                                                                                                          // 3489\n            eve(\"raphael.data.get.\" + this.id, this, data[key], key);                                                  // 3490\n            return data[key];                                                                                          // 3491\n        }                                                                                                              // 3492\n        data[key] = value;                                                                                             // 3493\n        eve(\"raphael.data.set.\" + this.id, this, value, key);                                                          // 3494\n        return this;                                                                                                   // 3495\n    };                                                                                                                 // 3496\n    /*\\\n     * Element.removeData                                                                                              // 3498\n     [ method ]                                                                                                        // 3499\n     **                                                                                                                // 3500\n     * Removes value associated with an element by given key.                                                          // 3501\n     * If key is not provided, removes all the data of the element.                                                    // 3502\n     > Parameters                                                                                                      // 3503\n     - key (string) #optional key                                                                                      // 3504\n     = (object) @Element                                                                                               // 3505\n    \\*/                                                                                                                // 3506\n    elproto.removeData = function (key) {                                                                              // 3507\n        if (key == null) {                                                                                             // 3508\n            eldata[this.id] = {};                                                                                      // 3509\n        } else {                                                                                                       // 3510\n            eldata[this.id] && delete eldata[this.id][key];                                                            // 3511\n        }                                                                                                              // 3512\n        return this;                                                                                                   // 3513\n    };                                                                                                                 // 3514\n     /*\\\n     * Element.getData                                                                                                 // 3516\n     [ method ]                                                                                                        // 3517\n     **                                                                                                                // 3518\n     * Retrieves the element data                                                                                      // 3519\n     = (object) data                                                                                                   // 3520\n    \\*/                                                                                                                // 3521\n    elproto.getData = function () {                                                                                    // 3522\n        return clone(eldata[this.id] || {});                                                                           // 3523\n    };                                                                                                                 // 3524\n    /*\\\n     * Element.hover                                                                                                   // 3526\n     [ method ]                                                                                                        // 3527\n     **                                                                                                                // 3528\n     * Adds event handlers for hover for the element.                                                                  // 3529\n     > Parameters                                                                                                      // 3530\n     - f_in (function) handler for hover in                                                                            // 3531\n     - f_out (function) handler for hover out                                                                          // 3532\n     - icontext (object) #optional context for hover in handler                                                        // 3533\n     - ocontext (object) #optional context for hover out handler                                                       // 3534\n     = (object) @Element                                                                                               // 3535\n    \\*/                                                                                                                // 3536\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {                                                      // 3537\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);                                  // 3538\n    };                                                                                                                 // 3539\n    /*\\\n     * Element.unhover                                                                                                 // 3541\n     [ method ]                                                                                                        // 3542\n     **                                                                                                                // 3543\n     * Removes event handlers for hover for the element.                                                               // 3544\n     > Parameters                                                                                                      // 3545\n     - f_in (function) handler for hover in                                                                            // 3546\n     - f_out (function) handler for hover out                                                                          // 3547\n     = (object) @Element                                                                                               // 3548\n    \\*/                                                                                                                // 3549\n    elproto.unhover = function (f_in, f_out) {                                                                         // 3550\n        return this.unmouseover(f_in).unmouseout(f_out);                                                               // 3551\n    };                                                                                                                 // 3552\n    var draggable = [];                                                                                                // 3553\n    /*\\\n     * Element.drag                                                                                                    // 3555\n     [ method ]                                                                                                        // 3556\n     **                                                                                                                // 3557\n     * Adds event handlers for drag of the element.                                                                    // 3558\n     > Parameters                                                                                                      // 3559\n     - onmove (function) handler for moving                                                                            // 3560\n     - onstart (function) handler for drag start                                                                       // 3561\n     - onend (function) handler for drag end                                                                           // 3562\n     - mcontext (object) #optional context for moving handler                                                          // 3563\n     - scontext (object) #optional context for drag start handler                                                      // 3564\n     - econtext (object) #optional context for drag end handler                                                        // 3565\n     * Additionaly following `drag` events will be triggered: `drag.start.<id>` on start,                              // 3566\n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element    // 3567\n     * `drag.over.<id>` will be fired as well.                                                                         // 3568\n     *                                                                                                                 // 3569\n     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse                                                                              // 3571\n     o y (number) y position of the mouse                                                                              // 3572\n     o event (object) DOM event object                                                                                 // 3573\n     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point                                                                     // 3575\n     o dy (number) shift by y from the start point                                                                     // 3576\n     o x (number) x position of the mouse                                                                              // 3577\n     o y (number) y position of the mouse                                                                              // 3578\n     o event (object) DOM event object                                                                                 // 3579\n     * End event and end handler will be called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object                                                                                 // 3581\n     = (object) @Element                                                                                               // 3582\n    \\*/                                                                                                                // 3583\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {                             // 3584\n        function start(e) {                                                                                            // 3585\n            (e.originalEvent || e).preventDefault();                                                                   // 3586\n            var x = e.clientX,                                                                                         // 3587\n                y = e.clientY,                                                                                         // 3588\n                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,                                     // 3589\n                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;                                   // 3590\n            this._drag.id = e.identifier;                                                                              // 3591\n            if (supportsTouch && e.touches) {                                                                          // 3592\n                var i = e.touches.length, touch;                                                                       // 3593\n                while (i--) {                                                                                          // 3594\n                    touch = e.touches[i];                                                                              // 3595\n                    this._drag.id = touch.identifier;                                                                  // 3596\n                    if (touch.identifier == this._drag.id) {                                                           // 3597\n                        x = touch.clientX;                                                                             // 3598\n                        y = touch.clientY;                                                                             // 3599\n                        break;                                                                                         // 3600\n                    }                                                                                                  // 3601\n                }                                                                                                      // 3602\n            }                                                                                                          // 3603\n            this._drag.x = x + scrollX;                                                                                // 3604\n            this._drag.y = y + scrollY;                                                                                // 3605\n            !drag.length && R.mousemove(dragMove).mouseup(dragUp);                                                     // 3606\n            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});             // 3607\n            onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);                                               // 3608\n            onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);                                                  // 3609\n            onend && eve.on(\"raphael.drag.end.\" + this.id, onend);                                                     // 3610\n            eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);\n        }                                                                                                              // 3612\n        this._drag = {};                                                                                               // 3613\n        draggable.push({el: this, start: start});                                                                      // 3614\n        this.mousedown(start);                                                                                         // 3615\n        return this;                                                                                                   // 3616\n    };                                                                                                                 // 3617\n    /*\\\n     * Element.onDragOver                                                                                              // 3619\n     [ method ]                                                                                                        // 3620\n     **                                                                                                                // 3621\n     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n     > Parameters                                                                                                      // 3623\n     - f (function) handler for event, first argument would be the element you are dragging over                       // 3624\n    \\*/                                                                                                                // 3625\n    elproto.onDragOver = function (f) {                                                                                // 3626\n        f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);                    // 3627\n    };                                                                                                                 // 3628\n    /*\\\n     * Element.undrag                                                                                                  // 3630\n     [ method ]                                                                                                        // 3631\n     **                                                                                                                // 3632\n     * Removes all drag event handlers from given element.                                                             // 3633\n    \\*/                                                                                                                // 3634\n    elproto.undrag = function () {                                                                                     // 3635\n        var i = draggable.length;                                                                                      // 3636\n        while (i--) if (draggable[i].el == this) {                                                                     // 3637\n            this.unmousedown(draggable[i].start);                                                                      // 3638\n            draggable.splice(i, 1);                                                                                    // 3639\n            eve.unbind(\"raphael.drag.*.\" + this.id);                                                                   // 3640\n        }                                                                                                              // 3641\n        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);                                                // 3642\n        drag = [];                                                                                                     // 3643\n    };                                                                                                                 // 3644\n    /*\\\n     * Paper.circle                                                                                                    // 3646\n     [ method ]                                                                                                        // 3647\n     **                                                                                                                // 3648\n     * Draws a circle.                                                                                                 // 3649\n     **                                                                                                                // 3650\n     > Parameters                                                                                                      // 3651\n     **                                                                                                                // 3652\n     - x (number) x coordinate of the centre                                                                           // 3653\n     - y (number) y coordinate of the centre                                                                           // 3654\n     - r (number) radius                                                                                               // 3655\n     = (object) Raphaël element object with type “circle”                                                              // 3656\n     **                                                                                                                // 3657\n     > Usage                                                                                                           // 3658\n     | var c = paper.circle(50, 50, 40);                                                                               // 3659\n    \\*/                                                                                                                // 3660\n    paperproto.circle = function (x, y, r) {                                                                           // 3661\n        var out = R._engine.circle(this, x || 0, y || 0, r || 0);                                                      // 3662\n        this.__set__ && this.__set__.push(out);                                                                        // 3663\n        return out;                                                                                                    // 3664\n    };                                                                                                                 // 3665\n    /*\\\n     * Paper.rect                                                                                                      // 3667\n     [ method ]                                                                                                        // 3668\n     *                                                                                                                 // 3669\n     * Draws a rectangle.                                                                                              // 3670\n     **                                                                                                                // 3671\n     > Parameters                                                                                                      // 3672\n     **                                                                                                                // 3673\n     - x (number) x coordinate of the top left corner                                                                  // 3674\n     - y (number) y coordinate of the top left corner                                                                  // 3675\n     - width (number) width                                                                                            // 3676\n     - height (number) height                                                                                          // 3677\n     - r (number) #optional radius for rounded corners, default is 0                                                   // 3678\n     = (object) Raphaël element object with type “rect”                                                                // 3679\n     **                                                                                                                // 3680\n     > Usage                                                                                                           // 3681\n     | // regular rectangle                                                                                            // 3682\n     | var c = paper.rect(10, 10, 50, 50);                                                                             // 3683\n     | // rectangle with rounded corners                                                                               // 3684\n     | var c = paper.rect(40, 40, 50, 50, 10);                                                                         // 3685\n    \\*/                                                                                                                // 3686\n    paperproto.rect = function (x, y, w, h, r) {                                                                       // 3687\n        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);                                        // 3688\n        this.__set__ && this.__set__.push(out);                                                                        // 3689\n        return out;                                                                                                    // 3690\n    };                                                                                                                 // 3691\n    /*\\\n     * Paper.ellipse                                                                                                   // 3693\n     [ method ]                                                                                                        // 3694\n     **                                                                                                                // 3695\n     * Draws an ellipse.                                                                                               // 3696\n     **                                                                                                                // 3697\n     > Parameters                                                                                                      // 3698\n     **                                                                                                                // 3699\n     - x (number) x coordinate of the centre                                                                           // 3700\n     - y (number) y coordinate of the centre                                                                           // 3701\n     - rx (number) horizontal radius                                                                                   // 3702\n     - ry (number) vertical radius                                                                                     // 3703\n     = (object) Raphaël element object with type “ellipse”                                                             // 3704\n     **                                                                                                                // 3705\n     > Usage                                                                                                           // 3706\n     | var c = paper.ellipse(50, 50, 40, 20);                                                                          // 3707\n    \\*/                                                                                                                // 3708\n    paperproto.ellipse = function (x, y, rx, ry) {                                                                     // 3709\n        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);                                           // 3710\n        this.__set__ && this.__set__.push(out);                                                                        // 3711\n        return out;                                                                                                    // 3712\n    };                                                                                                                 // 3713\n    /*\\\n     * Paper.path                                                                                                      // 3715\n     [ method ]                                                                                                        // 3716\n     **                                                                                                                // 3717\n     * Creates a path element by given path data string.                                                               // 3718\n     > Parameters                                                                                                      // 3719\n     - pathString (string) #optional path string in SVG format.                                                        // 3720\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:  // 3721\n     | \"M10,20L30,40\"                                                                                                  // 3722\n     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n     *                                                                                                                 // 3724\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>                          // 3726\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>                                                               // 3727\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>                                                            // 3728\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>                                                               // 3729\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>                                                        // 3730\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>                                                          // 3731\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>                                                  // 3732\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>                                                 // 3733\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>                                       // 3734\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>                                      // 3735\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>       // 3736\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.                     // 3738\n     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n     > Usage                                                                                                           // 3740\n     | var c = paper.path(\"M10 10L90 90\");                                                                             // 3741\n     | // draw a diagonal line:                                                                                        // 3742\n     | // move to 10,10, line to 90,90                                                                                 // 3743\n     * For example of path strings, check out these icons: http://raphaeljs.com/icons/                                 // 3744\n    \\*/                                                                                                                // 3745\n    paperproto.path = function (pathString) {                                                                          // 3746\n        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);                   // 3747\n        var out = R._engine.path(R.format[apply](R, arguments), this);                                                 // 3748\n        this.__set__ && this.__set__.push(out);                                                                        // 3749\n        return out;                                                                                                    // 3750\n    };                                                                                                                 // 3751\n    /*\\\n     * Paper.image                                                                                                     // 3753\n     [ method ]                                                                                                        // 3754\n     **                                                                                                                // 3755\n     * Embeds an image into the surface.                                                                               // 3756\n     **                                                                                                                // 3757\n     > Parameters                                                                                                      // 3758\n     **                                                                                                                // 3759\n     - src (string) URI of the source image                                                                            // 3760\n     - x (number) x coordinate position                                                                                // 3761\n     - y (number) y coordinate position                                                                                // 3762\n     - width (number) width of the image                                                                               // 3763\n     - height (number) height of the image                                                                             // 3764\n     = (object) Raphaël element object with type “image”                                                               // 3765\n     **                                                                                                                // 3766\n     > Usage                                                                                                           // 3767\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);                                                               // 3768\n    \\*/                                                                                                                // 3769\n    paperproto.image = function (src, x, y, w, h) {                                                                    // 3770\n        var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);                         // 3771\n        this.__set__ && this.__set__.push(out);                                                                        // 3772\n        return out;                                                                                                    // 3773\n    };                                                                                                                 // 3774\n    /*\\\n     * Paper.text                                                                                                      // 3776\n     [ method ]                                                                                                        // 3777\n     **                                                                                                                // 3778\n     * Draws a text string. If you need line breaks, put “\\n” in the string.                                           // 3779\n     **                                                                                                                // 3780\n     > Parameters                                                                                                      // 3781\n     **                                                                                                                // 3782\n     - x (number) x coordinate position                                                                                // 3783\n     - y (number) y coordinate position                                                                                // 3784\n     - text (string) The text string to draw                                                                           // 3785\n     = (object) Raphaël element object with type “text”                                                                // 3786\n     **                                                                                                                // 3787\n     > Usage                                                                                                           // 3788\n     | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");                                                            // 3789\n    \\*/                                                                                                                // 3790\n    paperproto.text = function (x, y, text) {                                                                          // 3791\n        var out = R._engine.text(this, x || 0, y || 0, Str(text));                                                     // 3792\n        this.__set__ && this.__set__.push(out);                                                                        // 3793\n        return out;                                                                                                    // 3794\n    };                                                                                                                 // 3795\n    /*\\\n     * Paper.set                                                                                                       // 3797\n     [ method ]                                                                                                        // 3798\n     **                                                                                                                // 3799\n     * Creates array-like object to keep and operate several elements at once.                                         // 3800\n     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.               // 3801\n     * Sets act as pseudo elements — all methods available to an element can be used on a set.                         // 3802\n     = (object) array-like object that represents set of elements                                                      // 3803\n     **                                                                                                                // 3804\n     > Usage                                                                                                           // 3805\n     | var st = paper.set();                                                                                           // 3806\n     | st.push(                                                                                                        // 3807\n     |     paper.circle(10, 10, 5),                                                                                    // 3808\n     |     paper.circle(30, 10, 5)                                                                                     // 3809\n     | );                                                                                                              // 3810\n     | st.attr({fill: \"red\"}); // changes the fill of both circles                                                     // 3811\n    \\*/                                                                                                                // 3812\n    paperproto.set = function (itemsArray) {                                                                           // 3813\n        !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));      // 3814\n        var out = new Set(itemsArray);                                                                                 // 3815\n        this.__set__ && this.__set__.push(out);                                                                        // 3816\n        out[\"paper\"] = this;                                                                                           // 3817\n        out[\"type\"] = \"set\";                                                                                           // 3818\n        return out;                                                                                                    // 3819\n    };                                                                                                                 // 3820\n    /*\\\n     * Paper.setStart                                                                                                  // 3822\n     [ method ]                                                                                                        // 3823\n     **                                                                                                                // 3824\n     * Creates @Paper.set. All elements that will be created after calling this method and before calling              // 3825\n     * @Paper.setFinish will be added to the set.                                                                      // 3826\n     **                                                                                                                // 3827\n     > Usage                                                                                                           // 3828\n     | paper.setStart();                                                                                               // 3829\n     | paper.circle(10, 10, 5),                                                                                        // 3830\n     | paper.circle(30, 10, 5)                                                                                         // 3831\n     | var st = paper.setFinish();                                                                                     // 3832\n     | st.attr({fill: \"red\"}); // changes the fill of both circles                                                     // 3833\n    \\*/                                                                                                                // 3834\n    paperproto.setStart = function (set) {                                                                             // 3835\n        this.__set__ = set || this.set();                                                                              // 3836\n    };                                                                                                                 // 3837\n    /*\\\n     * Paper.setFinish                                                                                                 // 3839\n     [ method ]                                                                                                        // 3840\n     **                                                                                                                // 3841\n     * See @Paper.setStart. This method finishes catching and returns resulting set.                                   // 3842\n     **                                                                                                                // 3843\n     = (object) set                                                                                                    // 3844\n    \\*/                                                                                                                // 3845\n    paperproto.setFinish = function (set) {                                                                            // 3846\n        var out = this.__set__;                                                                                        // 3847\n        delete this.__set__;                                                                                           // 3848\n        return out;                                                                                                    // 3849\n    };                                                                                                                 // 3850\n    /*\\\n     * Paper.setSize                                                                                                   // 3852\n     [ method ]                                                                                                        // 3853\n     **                                                                                                                // 3854\n     * If you need to change dimensions of the canvas call this method                                                 // 3855\n     **                                                                                                                // 3856\n     > Parameters                                                                                                      // 3857\n     **                                                                                                                // 3858\n     - width (number) new width of the canvas                                                                          // 3859\n     - height (number) new height of the canvas                                                                        // 3860\n    \\*/                                                                                                                // 3861\n    paperproto.setSize = function (width, height) {                                                                    // 3862\n        return R._engine.setSize.call(this, width, height);                                                            // 3863\n    };                                                                                                                 // 3864\n    /*\\\n     * Paper.setViewBox                                                                                                // 3866\n     [ method ]                                                                                                        // 3867\n     **                                                                                                                // 3868\n     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by         // 3869\n     * specifying new boundaries.                                                                                      // 3870\n     **                                                                                                                // 3871\n     > Parameters                                                                                                      // 3872\n     **                                                                                                                // 3873\n     - x (number) new x position, default is `0`                                                                       // 3874\n     - y (number) new y position, default is `0`                                                                       // 3875\n     - w (number) new width of the canvas                                                                              // 3876\n     - h (number) new height of the canvas                                                                             // 3877\n     - fit (boolean) `true` if you want graphics to fit into new boundary box                                          // 3878\n    \\*/                                                                                                                // 3879\n    paperproto.setViewBox = function (x, y, w, h, fit) {                                                               // 3880\n        return R._engine.setViewBox.call(this, x, y, w, h, fit);                                                       // 3881\n    };                                                                                                                 // 3882\n    /*\\\n     * Paper.top                                                                                                       // 3884\n     [ property ]                                                                                                      // 3885\n     **                                                                                                                // 3886\n     * Points to the topmost element on the paper                                                                      // 3887\n    \\*/                                                                                                                // 3888\n    /*\\\n     * Paper.bottom                                                                                                    // 3890\n     [ property ]                                                                                                      // 3891\n     **                                                                                                                // 3892\n     * Points to the bottom element on the paper                                                                       // 3893\n    \\*/                                                                                                                // 3894\n    paperproto.top = paperproto.bottom = null;                                                                         // 3895\n    /*\\\n     * Paper.raphael                                                                                                   // 3897\n     [ property ]                                                                                                      // 3898\n     **                                                                                                                // 3899\n     * Points to the @Raphael object/function                                                                          // 3900\n    \\*/                                                                                                                // 3901\n    paperproto.raphael = R;                                                                                            // 3902\n    var getOffset = function (elem) {                                                                                  // 3903\n        var box = elem.getBoundingClientRect(),                                                                        // 3904\n            doc = elem.ownerDocument,                                                                                  // 3905\n            body = doc.body,                                                                                           // 3906\n            docElem = doc.documentElement,                                                                             // 3907\n            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,                 // 3909\n            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;               // 3910\n        return {                                                                                                       // 3911\n            y: top,                                                                                                    // 3912\n            x: left                                                                                                    // 3913\n        };                                                                                                             // 3914\n    };                                                                                                                 // 3915\n    /*\\\n     * Paper.getElementByPoint                                                                                         // 3917\n     [ method ]                                                                                                        // 3918\n     **                                                                                                                // 3919\n     * Returns you topmost element under given point.                                                                  // 3920\n     **                                                                                                                // 3921\n     = (object) Raphaël element object                                                                                 // 3922\n     > Parameters                                                                                                      // 3923\n     **                                                                                                                // 3924\n     - x (number) x coordinate from the top left corner of the window                                                  // 3925\n     - y (number) y coordinate from the top left corner of the window                                                  // 3926\n     > Usage                                                                                                           // 3927\n     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});                                                 // 3928\n    \\*/                                                                                                                // 3929\n    paperproto.getElementByPoint = function (x, y) {                                                                   // 3930\n        var paper = this,                                                                                              // 3931\n            svg = paper.canvas,                                                                                        // 3932\n            target = g.doc.elementFromPoint(x, y);                                                                     // 3933\n        if (g.win.opera && target.tagName == \"svg\") {                                                                  // 3934\n            var so = getOffset(svg),                                                                                   // 3935\n                sr = svg.createSVGRect();                                                                              // 3936\n            sr.x = x - so.x;                                                                                           // 3937\n            sr.y = y - so.y;                                                                                           // 3938\n            sr.width = sr.height = 1;                                                                                  // 3939\n            var hits = svg.getIntersectionList(sr, null);                                                              // 3940\n            if (hits.length) {                                                                                         // 3941\n                target = hits[hits.length - 1];                                                                        // 3942\n            }                                                                                                          // 3943\n        }                                                                                                              // 3944\n        if (!target) {                                                                                                 // 3945\n            return null;                                                                                               // 3946\n        }                                                                                                              // 3947\n        while (target.parentNode && target != svg.parentNode && !target.raphael) {                                     // 3948\n            target = target.parentNode;                                                                                // 3949\n        }                                                                                                              // 3950\n        target == paper.canvas.parentNode && (target = svg);                                                           // 3951\n        target = target && target.raphael ? paper.getById(target.raphaelid) : null;                                    // 3952\n        return target;                                                                                                 // 3953\n    };                                                                                                                 // 3954\n                                                                                                                       // 3955\n    /*\\\n     * Paper.getElementsByBBox                                                                                         // 3957\n     [ method ]                                                                                                        // 3958\n     **                                                                                                                // 3959\n     * Returns set of elements that have an intersecting bounding box                                                  // 3960\n     **                                                                                                                // 3961\n     > Parameters                                                                                                      // 3962\n     **                                                                                                                // 3963\n     - bbox (object) bbox to check with                                                                                // 3964\n     = (object) @Set                                                                                                   // 3965\n     \\*/                                                                                                               // 3966\n    paperproto.getElementsByBBox = function (bbox) {                                                                   // 3967\n        var set = this.set();                                                                                          // 3968\n        this.forEach(function (el) {                                                                                   // 3969\n            if (R.isBBoxIntersect(el.getBBox(), bbox)) {                                                               // 3970\n                set.push(el);                                                                                          // 3971\n            }                                                                                                          // 3972\n        });                                                                                                            // 3973\n        return set;                                                                                                    // 3974\n    };                                                                                                                 // 3975\n                                                                                                                       // 3976\n    /*\\\n     * Paper.getById                                                                                                   // 3978\n     [ method ]                                                                                                        // 3979\n     **                                                                                                                // 3980\n     * Returns you element by its internal ID.                                                                         // 3981\n     **                                                                                                                // 3982\n     > Parameters                                                                                                      // 3983\n     **                                                                                                                // 3984\n     - id (number) id                                                                                                  // 3985\n     = (object) Raphaël element object                                                                                 // 3986\n    \\*/                                                                                                                // 3987\n    paperproto.getById = function (id) {                                                                               // 3988\n        var bot = this.bottom;                                                                                         // 3989\n        while (bot) {                                                                                                  // 3990\n            if (bot.id == id) {                                                                                        // 3991\n                return bot;                                                                                            // 3992\n            }                                                                                                          // 3993\n            bot = bot.next;                                                                                            // 3994\n        }                                                                                                              // 3995\n        return null;                                                                                                   // 3996\n    };                                                                                                                 // 3997\n    /*\\\n     * Paper.forEach                                                                                                   // 3999\n     [ method ]                                                                                                        // 4000\n     **                                                                                                                // 4001\n     * Executes given function for each element on the paper                                                           // 4002\n     *                                                                                                                 // 4003\n     * If callback function returns `false` it will stop loop running.                                                 // 4004\n     **                                                                                                                // 4005\n     > Parameters                                                                                                      // 4006\n     **                                                                                                                // 4007\n     - callback (function) function to run                                                                             // 4008\n     - thisArg (object) context object for the callback                                                                // 4009\n     = (object) Paper object                                                                                           // 4010\n     > Usage                                                                                                           // 4011\n     | paper.forEach(function (el) {                                                                                   // 4012\n     |     el.attr({ stroke: \"blue\" });                                                                                // 4013\n     | });                                                                                                             // 4014\n    \\*/                                                                                                                // 4015\n    paperproto.forEach = function (callback, thisArg) {                                                                // 4016\n        var bot = this.bottom;                                                                                         // 4017\n        while (bot) {                                                                                                  // 4018\n            if (callback.call(thisArg, bot) === false) {                                                               // 4019\n                return this;                                                                                           // 4020\n            }                                                                                                          // 4021\n            bot = bot.next;                                                                                            // 4022\n        }                                                                                                              // 4023\n        return this;                                                                                                   // 4024\n    };                                                                                                                 // 4025\n    /*\\\n     * Paper.getElementsByPoint                                                                                        // 4027\n     [ method ]                                                                                                        // 4028\n     **                                                                                                                // 4029\n     * Returns set of elements that have common point inside                                                           // 4030\n     **                                                                                                                // 4031\n     > Parameters                                                                                                      // 4032\n     **                                                                                                                // 4033\n     - x (number) x coordinate of the point                                                                            // 4034\n     - y (number) y coordinate of the point                                                                            // 4035\n     = (object) @Set                                                                                                   // 4036\n    \\*/                                                                                                                // 4037\n    paperproto.getElementsByPoint = function (x, y) {                                                                  // 4038\n        var set = this.set();                                                                                          // 4039\n        this.forEach(function (el) {                                                                                   // 4040\n            if (el.isPointInside(x, y)) {                                                                              // 4041\n                set.push(el);                                                                                          // 4042\n            }                                                                                                          // 4043\n        });                                                                                                            // 4044\n        return set;                                                                                                    // 4045\n    };                                                                                                                 // 4046\n    function x_y() {                                                                                                   // 4047\n        return this.x + S + this.y;                                                                                    // 4048\n    }                                                                                                                  // 4049\n    function x_y_w_h() {                                                                                               // 4050\n        return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;                                          // 4051\n    }                                                                                                                  // 4052\n    /*\\\n     * Element.isPointInside                                                                                           // 4054\n     [ method ]                                                                                                        // 4055\n     **                                                                                                                // 4056\n     * Determine if given point is inside this element’s shape                                                         // 4057\n     **                                                                                                                // 4058\n     > Parameters                                                                                                      // 4059\n     **                                                                                                                // 4060\n     - x (number) x coordinate of the point                                                                            // 4061\n     - y (number) y coordinate of the point                                                                            // 4062\n     = (boolean) `true` if point inside the shape                                                                      // 4063\n    \\*/                                                                                                                // 4064\n    elproto.isPointInside = function (x, y) {                                                                          // 4065\n        var rp = this.realPath = getPath[this.type](this);                                                             // 4066\n        if (this.attr('transform') && this.attr('transform').length) {                                                 // 4067\n            rp = R.transformPath(rp, this.attr('transform'));                                                          // 4068\n        }                                                                                                              // 4069\n        return R.isPointInsidePath(rp, x, y);                                                                          // 4070\n    };                                                                                                                 // 4071\n    /*\\\n     * Element.getBBox                                                                                                 // 4073\n     [ method ]                                                                                                        // 4074\n     **                                                                                                                // 4075\n     * Return bounding box for a given element                                                                         // 4076\n     **                                                                                                                // 4077\n     > Parameters                                                                                                      // 4078\n     **                                                                                                                // 4079\n     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n     = (object) Bounding box object:                                                                                   // 4081\n     o {                                                                                                               // 4082\n     o     x: (number) top left corner x                                                                               // 4083\n     o     y: (number) top left corner y                                                                               // 4084\n     o     x2: (number) bottom right corner x                                                                          // 4085\n     o     y2: (number) bottom right corner y                                                                          // 4086\n     o     width: (number) width                                                                                       // 4087\n     o     height: (number) height                                                                                     // 4088\n     o }                                                                                                               // 4089\n    \\*/                                                                                                                // 4090\n    elproto.getBBox = function (isWithoutTransform) {                                                                  // 4091\n        if (this.removed) {                                                                                            // 4092\n            return {};                                                                                                 // 4093\n        }                                                                                                              // 4094\n        var _ = this._;                                                                                                // 4095\n        if (isWithoutTransform) {                                                                                      // 4096\n            if (_.dirty || !_.bboxwt) {                                                                                // 4097\n                this.realPath = getPath[this.type](this);                                                              // 4098\n                _.bboxwt = pathDimensions(this.realPath);                                                              // 4099\n                _.bboxwt.toString = x_y_w_h;                                                                           // 4100\n                _.dirty = 0;                                                                                           // 4101\n            }                                                                                                          // 4102\n            return _.bboxwt;                                                                                           // 4103\n        }                                                                                                              // 4104\n        if (_.dirty || _.dirtyT || !_.bbox) {                                                                          // 4105\n            if (_.dirty || !this.realPath) {                                                                           // 4106\n                _.bboxwt = 0;                                                                                          // 4107\n                this.realPath = getPath[this.type](this);                                                              // 4108\n            }                                                                                                          // 4109\n            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));                                              // 4110\n            _.bbox.toString = x_y_w_h;                                                                                 // 4111\n            _.dirty = _.dirtyT = 0;                                                                                    // 4112\n        }                                                                                                              // 4113\n        return _.bbox;                                                                                                 // 4114\n    };                                                                                                                 // 4115\n    /*\\\n     * Element.clone                                                                                                   // 4117\n     [ method ]                                                                                                        // 4118\n     **                                                                                                                // 4119\n     = (object) clone of a given element                                                                               // 4120\n     **                                                                                                                // 4121\n    \\*/                                                                                                                // 4122\n    elproto.clone = function () {                                                                                      // 4123\n        if (this.removed) {                                                                                            // 4124\n            return null;                                                                                               // 4125\n        }                                                                                                              // 4126\n        var out = this.paper[this.type]().attr(this.attr());                                                           // 4127\n        this.__set__ && this.__set__.push(out);                                                                        // 4128\n        return out;                                                                                                    // 4129\n    };                                                                                                                 // 4130\n    /*\\\n     * Element.glow                                                                                                    // 4132\n     [ method ]                                                                                                        // 4133\n     **                                                                                                                // 4134\n     * Return set of elements that create glow-like effect around given element. See @Paper.set.                       // 4135\n     *                                                                                                                 // 4136\n     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.            // 4137\n     **                                                                                                                // 4138\n     > Parameters                                                                                                      // 4139\n     **                                                                                                                // 4140\n     - glow (object) #optional parameters object with all properties optional:                                         // 4141\n     o {                                                                                                               // 4142\n     o     width (number) size of the glow, default is `10`                                                            // 4143\n     o     fill (boolean) will it be filled, default is `false`                                                        // 4144\n     o     opacity (number) opacity, default is `0.5`                                                                  // 4145\n     o     offsetx (number) horizontal offset, default is `0`                                                          // 4146\n     o     offsety (number) vertical offset, default is `0`                                                            // 4147\n     o     color (string) glow colour, default is `black`                                                              // 4148\n     o }                                                                                                               // 4149\n     = (object) @Paper.set of elements that represents glow                                                            // 4150\n    \\*/                                                                                                                // 4151\n    elproto.glow = function (glow) {                                                                                   // 4152\n        if (this.type == \"text\") {                                                                                     // 4153\n            return null;                                                                                               // 4154\n        }                                                                                                              // 4155\n        glow = glow || {};                                                                                             // 4156\n        var s = {                                                                                                      // 4157\n            width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),                                             // 4158\n            fill: glow.fill || false,                                                                                  // 4159\n            opacity: glow.opacity || .5,                                                                               // 4160\n            offsetx: glow.offsetx || 0,                                                                                // 4161\n            offsety: glow.offsety || 0,                                                                                // 4162\n            color: glow.color || \"#000\"                                                                                // 4163\n        },                                                                                                             // 4164\n            c = s.width / 2,                                                                                           // 4165\n            r = this.paper,                                                                                            // 4166\n            out = r.set(),                                                                                             // 4167\n            path = this.realPath || getPath[this.type](this);                                                          // 4168\n        path = this.matrix ? mapPath(path, this.matrix) : path;                                                        // 4169\n        for (var i = 1; i < c + 1; i++) {                                                                              // 4170\n            out.push(r.path(path).attr({                                                                               // 4171\n                stroke: s.color,                                                                                       // 4172\n                fill: s.fill ? s.color : \"none\",                                                                       // 4173\n                \"stroke-linejoin\": \"round\",                                                                            // 4174\n                \"stroke-linecap\": \"round\",                                                                             // 4175\n                \"stroke-width\": +(s.width / c * i).toFixed(3),                                                         // 4176\n                opacity: +(s.opacity / c).toFixed(3)                                                                   // 4177\n            }));                                                                                                       // 4178\n        }                                                                                                              // 4179\n        return out.insertBefore(this).translate(s.offsetx, s.offsety);                                                 // 4180\n    };                                                                                                                 // 4181\n    var curveslengths = {},                                                                                            // 4182\n    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {                              // 4183\n        if (length == null) {                                                                                          // 4184\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);                                                     // 4185\n        } else {                                                                                                       // 4186\n            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }                                                                                                              // 4188\n    },                                                                                                                 // 4189\n    getLengthFactory = function (istotal, subpath) {                                                                   // 4190\n        return function (path, length, onlystart) {                                                                    // 4191\n            path = path2curve(path);                                                                                   // 4192\n            var x, y, p, l, sp = \"\", subpaths = {}, point,                                                             // 4193\n                len = 0;                                                                                               // 4194\n            for (var i = 0, ii = path.length; i < ii; i++) {                                                           // 4195\n                p = path[i];                                                                                           // 4196\n                if (p[0] == \"M\") {                                                                                     // 4197\n                    x = +p[1];                                                                                         // 4198\n                    y = +p[2];                                                                                         // 4199\n                } else {                                                                                               // 4200\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);                             // 4201\n                    if (len + l > length) {                                                                            // 4202\n                        if (subpath && !subpaths.start) {                                                              // 4203\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);   // 4204\n                            sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];        // 4205\n                            if (onlystart) {return sp;}                                                                // 4206\n                            subpaths.start = sp;                                                                       // 4207\n                            sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n                            len += l;                                                                                  // 4209\n                            x = +p[5];                                                                                 // 4210\n                            y = +p[6];                                                                                 // 4211\n                            continue;                                                                                  // 4212\n                        }                                                                                              // 4213\n                        if (!istotal && !subpath) {                                                                    // 4214\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);   // 4215\n                            return {x: point.x, y: point.y, alpha: point.alpha};                                       // 4216\n                        }                                                                                              // 4217\n                    }                                                                                                  // 4218\n                    len += l;                                                                                          // 4219\n                    x = +p[5];                                                                                         // 4220\n                    y = +p[6];                                                                                         // 4221\n                }                                                                                                      // 4222\n                sp += p.shift() + p;                                                                                   // 4223\n            }                                                                                                          // 4224\n            subpaths.end = sp;                                                                                         // 4225\n            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});                                     // 4227\n            return point;                                                                                              // 4228\n        };                                                                                                             // 4229\n    };                                                                                                                 // 4230\n    var getTotalLength = getLengthFactory(1),                                                                          // 4231\n        getPointAtLength = getLengthFactory(),                                                                         // 4232\n        getSubpathsAtLength = getLengthFactory(0, 1);                                                                  // 4233\n    /*\\\n     * Raphael.getTotalLength                                                                                          // 4235\n     [ method ]                                                                                                        // 4236\n     **                                                                                                                // 4237\n     * Returns length of the given path in pixels.                                                                     // 4238\n     **                                                                                                                // 4239\n     > Parameters                                                                                                      // 4240\n     **                                                                                                                // 4241\n     - path (string) SVG path string.                                                                                  // 4242\n     **                                                                                                                // 4243\n     = (number) length.                                                                                                // 4244\n    \\*/                                                                                                                // 4245\n    R.getTotalLength = getTotalLength;                                                                                 // 4246\n    /*\\\n     * Raphael.getPointAtLength                                                                                        // 4248\n     [ method ]                                                                                                        // 4249\n     **                                                                                                                // 4250\n     * Return coordinates of the point located at the given length on the given path.                                  // 4251\n     **                                                                                                                // 4252\n     > Parameters                                                                                                      // 4253\n     **                                                                                                                // 4254\n     - path (string) SVG path string                                                                                   // 4255\n     - length (number)                                                                                                 // 4256\n     **                                                                                                                // 4257\n     = (object) representation of the point:                                                                           // 4258\n     o {                                                                                                               // 4259\n     o     x: (number) x coordinate                                                                                    // 4260\n     o     y: (number) y coordinate                                                                                    // 4261\n     o     alpha: (number) angle of derivative                                                                         // 4262\n     o }                                                                                                               // 4263\n    \\*/                                                                                                                // 4264\n    R.getPointAtLength = getPointAtLength;                                                                             // 4265\n    /*\\\n     * Raphael.getSubpath                                                                                              // 4267\n     [ method ]                                                                                                        // 4268\n     **                                                                                                                // 4269\n     * Return subpath of a given path from given length to given length.                                               // 4270\n     **                                                                                                                // 4271\n     > Parameters                                                                                                      // 4272\n     **                                                                                                                // 4273\n     - path (string) SVG path string                                                                                   // 4274\n     - from (number) position of the start of the segment                                                              // 4275\n     - to (number) position of the end of the segment                                                                  // 4276\n     **                                                                                                                // 4277\n     = (string) pathstring for the segment                                                                             // 4278\n    \\*/                                                                                                                // 4279\n    R.getSubpath = function (path, from, to) {                                                                         // 4280\n        if (this.getTotalLength(path) - to < 1e-6) {                                                                   // 4281\n            return getSubpathsAtLength(path, from).end;                                                                // 4282\n        }                                                                                                              // 4283\n        var a = getSubpathsAtLength(path, to, 1);                                                                      // 4284\n        return from ? getSubpathsAtLength(a, from).end : a;                                                            // 4285\n    };                                                                                                                 // 4286\n    /*\\\n     * Element.getTotalLength                                                                                          // 4288\n     [ method ]                                                                                                        // 4289\n     **                                                                                                                // 4290\n     * Returns length of the path in pixels. Only works for element of “path” type.                                    // 4291\n     = (number) length.                                                                                                // 4292\n    \\*/                                                                                                                // 4293\n    elproto.getTotalLength = function () {                                                                             // 4294\n        var path = this.getPath();                                                                                     // 4295\n        if (!path) {                                                                                                   // 4296\n            return;                                                                                                    // 4297\n        }                                                                                                              // 4298\n                                                                                                                       // 4299\n        if (this.node.getTotalLength) {                                                                                // 4300\n            return this.node.getTotalLength();                                                                         // 4301\n        }                                                                                                              // 4302\n                                                                                                                       // 4303\n        return getTotalLength(path);                                                                                   // 4304\n    };                                                                                                                 // 4305\n    /*\\\n     * Element.getPointAtLength                                                                                        // 4307\n     [ method ]                                                                                                        // 4308\n     **                                                                                                                // 4309\n     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n     **                                                                                                                // 4311\n     > Parameters                                                                                                      // 4312\n     **                                                                                                                // 4313\n     - length (number)                                                                                                 // 4314\n     **                                                                                                                // 4315\n     = (object) representation of the point:                                                                           // 4316\n     o {                                                                                                               // 4317\n     o     x: (number) x coordinate                                                                                    // 4318\n     o     y: (number) y coordinate                                                                                    // 4319\n     o     alpha: (number) angle of derivative                                                                         // 4320\n     o }                                                                                                               // 4321\n    \\*/                                                                                                                // 4322\n    elproto.getPointAtLength = function (length) {                                                                     // 4323\n        var path = this.getPath();                                                                                     // 4324\n        if (!path) {                                                                                                   // 4325\n            return;                                                                                                    // 4326\n        }                                                                                                              // 4327\n                                                                                                                       // 4328\n        return getPointAtLength(path, length);                                                                         // 4329\n    };                                                                                                                 // 4330\n    /*\\\n     * Element.getPath                                                                                                 // 4332\n     [ method ]                                                                                                        // 4333\n     **                                                                                                                // 4334\n     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.            // 4335\n     = (object) path                                                                                                   // 4336\n     **                                                                                                                // 4337\n    \\*/                                                                                                                // 4338\n    elproto.getPath = function () {                                                                                    // 4339\n        var path,                                                                                                      // 4340\n            getPath = R._getPath[this.type];                                                                           // 4341\n                                                                                                                       // 4342\n        if (this.type == \"text\" || this.type == \"set\") {                                                               // 4343\n            return;                                                                                                    // 4344\n        }                                                                                                              // 4345\n                                                                                                                       // 4346\n        if (getPath) {                                                                                                 // 4347\n            path = getPath(this);                                                                                      // 4348\n        }                                                                                                              // 4349\n                                                                                                                       // 4350\n        return path;                                                                                                   // 4351\n    };                                                                                                                 // 4352\n    /*\\\n     * Element.getSubpath                                                                                              // 4354\n     [ method ]                                                                                                        // 4355\n     **                                                                                                                // 4356\n     * Return subpath of a given element from given length to given length. Only works for element of “path” type.     // 4357\n     **                                                                                                                // 4358\n     > Parameters                                                                                                      // 4359\n     **                                                                                                                // 4360\n     - from (number) position of the start of the segment                                                              // 4361\n     - to (number) position of the end of the segment                                                                  // 4362\n     **                                                                                                                // 4363\n     = (string) pathstring for the segment                                                                             // 4364\n    \\*/                                                                                                                // 4365\n    elproto.getSubpath = function (from, to) {                                                                         // 4366\n        var path = this.getPath();                                                                                     // 4367\n        if (!path) {                                                                                                   // 4368\n            return;                                                                                                    // 4369\n        }                                                                                                              // 4370\n                                                                                                                       // 4371\n        return R.getSubpath(path, from, to);                                                                           // 4372\n    };                                                                                                                 // 4373\n    /*\\\n     * Raphael.easing_formulas                                                                                         // 4375\n     [ property ]                                                                                                      // 4376\n     **                                                                                                                // 4377\n     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n     # <ul>                                                                                                            // 4379\n     #     <li>“linear”</li>                                                                                           // 4380\n     #     <li>“&lt;” or “easeIn” or “ease-in”</li>                                                                    // 4381\n     #     <li>“>” or “easeOut” or “ease-out”</li>                                                                     // 4382\n     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>                                                            // 4383\n     #     <li>“backIn” or “back-in”</li>                                                                              // 4384\n     #     <li>“backOut” or “back-out”</li>                                                                            // 4385\n     #     <li>“elastic”</li>                                                                                          // 4386\n     #     <li>“bounce”</li>                                                                                           // 4387\n     # </ul>                                                                                                           // 4388\n     # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>                                     // 4389\n    \\*/                                                                                                                // 4390\n    var ef = R.easing_formulas = {                                                                                     // 4391\n        linear: function (n) {                                                                                         // 4392\n            return n;                                                                                                  // 4393\n        },                                                                                                             // 4394\n        \"<\": function (n) {                                                                                            // 4395\n            return pow(n, 1.7);                                                                                        // 4396\n        },                                                                                                             // 4397\n        \">\": function (n) {                                                                                            // 4398\n            return pow(n, .48);                                                                                        // 4399\n        },                                                                                                             // 4400\n        \"<>\": function (n) {                                                                                           // 4401\n            var q = .48 - n / 1.04,                                                                                    // 4402\n                Q = math.sqrt(.1734 + q * q),                                                                          // 4403\n                x = Q - q,                                                                                             // 4404\n                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),                                                             // 4405\n                y = -Q - q,                                                                                            // 4406\n                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),                                                             // 4407\n                t = X + Y + .5;                                                                                        // 4408\n            return (1 - t) * 3 * t * t + t * t * t;                                                                    // 4409\n        },                                                                                                             // 4410\n        backIn: function (n) {                                                                                         // 4411\n            var s = 1.70158;                                                                                           // 4412\n            return n * n * ((s + 1) * n - s);                                                                          // 4413\n        },                                                                                                             // 4414\n        backOut: function (n) {                                                                                        // 4415\n            n = n - 1;                                                                                                 // 4416\n            var s = 1.70158;                                                                                           // 4417\n            return n * n * ((s + 1) * n + s) + 1;                                                                      // 4418\n        },                                                                                                             // 4419\n        elastic: function (n) {                                                                                        // 4420\n            if (n == !!n) {                                                                                            // 4421\n                return n;                                                                                              // 4422\n            }                                                                                                          // 4423\n            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;                                         // 4424\n        },                                                                                                             // 4425\n        bounce: function (n) {                                                                                         // 4426\n            var s = 7.5625,                                                                                            // 4427\n                p = 2.75,                                                                                              // 4428\n                l;                                                                                                     // 4429\n            if (n < (1 / p)) {                                                                                         // 4430\n                l = s * n * n;                                                                                         // 4431\n            } else {                                                                                                   // 4432\n                if (n < (2 / p)) {                                                                                     // 4433\n                    n -= (1.5 / p);                                                                                    // 4434\n                    l = s * n * n + .75;                                                                               // 4435\n                } else {                                                                                               // 4436\n                    if (n < (2.5 / p)) {                                                                               // 4437\n                        n -= (2.25 / p);                                                                               // 4438\n                        l = s * n * n + .9375;                                                                         // 4439\n                    } else {                                                                                           // 4440\n                        n -= (2.625 / p);                                                                              // 4441\n                        l = s * n * n + .984375;                                                                       // 4442\n                    }                                                                                                  // 4443\n                }                                                                                                      // 4444\n            }                                                                                                          // 4445\n            return l;                                                                                                  // 4446\n        }                                                                                                              // 4447\n    };                                                                                                                 // 4448\n    ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];                                                                               // 4449\n    ef.easeOut = ef[\"ease-out\"] = ef[\">\"];                                                                             // 4450\n    ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];                                                                       // 4451\n    ef[\"back-in\"] = ef.backIn;                                                                                         // 4452\n    ef[\"back-out\"] = ef.backOut;                                                                                       // 4453\n                                                                                                                       // 4454\n    var animationElements = [],                                                                                        // 4455\n        requestAnimFrame = window.requestAnimationFrame       ||                                                       // 4456\n                           window.webkitRequestAnimationFrame ||                                                       // 4457\n                           window.mozRequestAnimationFrame    ||                                                       // 4458\n                           window.oRequestAnimationFrame      ||                                                       // 4459\n                           window.msRequestAnimationFrame     ||                                                       // 4460\n                           function (callback) {                                                                       // 4461\n                               setTimeout(callback, 16);                                                               // 4462\n                           },                                                                                          // 4463\n        animation = function () {                                                                                      // 4464\n            var Now = +new Date,                                                                                       // 4465\n                l = 0;                                                                                                 // 4466\n            for (; l < animationElements.length; l++) {                                                                // 4467\n                var e = animationElements[l];                                                                          // 4468\n                if (e.el.removed || e.paused) {                                                                        // 4469\n                    continue;                                                                                          // 4470\n                }                                                                                                      // 4471\n                var time = Now - e.start,                                                                              // 4472\n                    ms = e.ms,                                                                                         // 4473\n                    easing = e.easing,                                                                                 // 4474\n                    from = e.from,                                                                                     // 4475\n                    diff = e.diff,                                                                                     // 4476\n                    to = e.to,                                                                                         // 4477\n                    t = e.t,                                                                                           // 4478\n                    that = e.el,                                                                                       // 4479\n                    set = {},                                                                                          // 4480\n                    now,                                                                                               // 4481\n                    init = {},                                                                                         // 4482\n                    key;                                                                                               // 4483\n                if (e.initstatus) {                                                                                    // 4484\n                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;                           // 4485\n                    e.status = e.initstatus;                                                                           // 4486\n                    delete e.initstatus;                                                                               // 4487\n                    e.stop && animationElements.splice(l--, 1);                                                        // 4488\n                } else {                                                                                               // 4489\n                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;                             // 4490\n                }                                                                                                      // 4491\n                if (time < 0) {                                                                                        // 4492\n                    continue;                                                                                          // 4493\n                }                                                                                                      // 4494\n                if (time < ms) {                                                                                       // 4495\n                    var pos = easing(time / ms);                                                                       // 4496\n                    for (var attr in from) if (from[has](attr)) {                                                      // 4497\n                        switch (availableAnimAttrs[attr]) {                                                            // 4498\n                            case nu:                                                                                   // 4499\n                                now = +from[attr] + pos * ms * diff[attr];                                             // 4500\n                                break;                                                                                 // 4501\n                            case \"colour\":                                                                             // 4502\n                                now = \"rgb(\" + [                                                                       // 4503\n                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),                            // 4504\n                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),                            // 4505\n                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))                             // 4506\n                                ].join(\",\") + \")\";                                                                     // 4507\n                                break;                                                                                 // 4508\n                            case \"path\":                                                                               // 4509\n                                now = [];                                                                              // 4510\n                                for (var i = 0, ii = from[attr].length; i < ii; i++) {                                 // 4511\n                                    now[i] = [from[attr][i][0]];                                                       // 4512\n                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {                          // 4513\n                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];                   // 4514\n                                    }                                                                                  // 4515\n                                    now[i] = now[i].join(S);                                                           // 4516\n                                }                                                                                      // 4517\n                                now = now.join(S);                                                                     // 4518\n                                break;                                                                                 // 4519\n                            case \"transform\":                                                                          // 4520\n                                if (diff[attr].real) {                                                                 // 4521\n                                    now = [];                                                                          // 4522\n                                    for (i = 0, ii = from[attr].length; i < ii; i++) {                                 // 4523\n                                        now[i] = [from[attr][i][0]];                                                   // 4524\n                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {                          // 4525\n                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];                // 4526\n                                        }                                                                              // 4527\n                                    }                                                                                  // 4528\n                                } else {                                                                               // 4529\n                                    var get = function (i) {                                                           // 4530\n                                        return +from[attr][i] + pos * ms * diff[attr][i];                              // 4531\n                                    };                                                                                 // 4532\n                                    // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n                                    now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];                     // 4534\n                                }                                                                                      // 4535\n                                break;                                                                                 // 4536\n                            case \"csv\":                                                                                // 4537\n                                if (attr == \"clip-rect\") {                                                             // 4538\n                                    now = [];                                                                          // 4539\n                                    i = 4;                                                                             // 4540\n                                    while (i--) {                                                                      // 4541\n                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];                            // 4542\n                                    }                                                                                  // 4543\n                                }                                                                                      // 4544\n                                break;                                                                                 // 4545\n                            default:                                                                                   // 4546\n                                var from2 = [][concat](from[attr]);                                                    // 4547\n                                now = [];                                                                              // 4548\n                                i = that.paper.customAttributes[attr].length;                                          // 4549\n                                while (i--) {                                                                          // 4550\n                                    now[i] = +from2[i] + pos * ms * diff[attr][i];                                     // 4551\n                                }                                                                                      // 4552\n                                break;                                                                                 // 4553\n                        }                                                                                              // 4554\n                        set[attr] = now;                                                                               // 4555\n                    }                                                                                                  // 4556\n                    that.attr(set);                                                                                    // 4557\n                    (function (id, that, anim) {                                                                       // 4558\n                        setTimeout(function () {                                                                       // 4559\n                            eve(\"raphael.anim.frame.\" + id, that, anim);                                               // 4560\n                        });                                                                                            // 4561\n                    })(that.id, that, e.anim);                                                                         // 4562\n                } else {                                                                                               // 4563\n                    (function(f, el, a) {                                                                              // 4564\n                        setTimeout(function() {                                                                        // 4565\n                            eve(\"raphael.anim.frame.\" + el.id, el, a);                                                 // 4566\n                            eve(\"raphael.anim.finish.\" + el.id, el, a);                                                // 4567\n                            R.is(f, \"function\") && f.call(el);                                                         // 4568\n                        });                                                                                            // 4569\n                    })(e.callback, that, e.anim);                                                                      // 4570\n                    that.attr(to);                                                                                     // 4571\n                    animationElements.splice(l--, 1);                                                                  // 4572\n                    if (e.repeat > 1 && !e.next) {                                                                     // 4573\n                        for (key in to) if (to[has](key)) {                                                            // 4574\n                            init[key] = e.totalOrigin[key];                                                            // 4575\n                        }                                                                                              // 4576\n                        e.el.attr(init);                                                                               // 4577\n                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);             // 4578\n                    }                                                                                                  // 4579\n                    if (e.next && !e.stop) {                                                                           // 4580\n                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);                             // 4581\n                    }                                                                                                  // 4582\n                }                                                                                                      // 4583\n            }                                                                                                          // 4584\n            R.svg && that && that.paper && that.paper.safari();                                                        // 4585\n            animationElements.length && requestAnimFrame(animation);                                                   // 4586\n        },                                                                                                             // 4587\n        upto255 = function (color) {                                                                                   // 4588\n            return color > 255 ? 255 : color < 0 ? 0 : color;                                                          // 4589\n        };                                                                                                             // 4590\n    /*\\\n     * Element.animateWith                                                                                             // 4592\n     [ method ]                                                                                                        // 4593\n     **                                                                                                                // 4594\n     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.      // 4595\n     **                                                                                                                // 4596\n     > Parameters                                                                                                      // 4597\n     **                                                                                                                // 4598\n     - el (object) element to sync with                                                                                // 4599\n     - anim (object) animation to sync with                                                                            // 4600\n     - params (object) #optional final attributes for the element, see also @Element.attr                              // 4601\n     - ms (number) #optional number of milliseconds for animation to run                                               // 4602\n     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n     - callback (function) #optional callback function. Will be called at the end of animation.                        // 4604\n     * or                                                                                                              // 4605\n     - element (object) element to sync with                                                                           // 4606\n     - anim (object) animation to sync with                                                                            // 4607\n     - animation (object) #optional animation object, see @Raphael.animation                                           // 4608\n     **                                                                                                                // 4609\n     = (object) original element                                                                                       // 4610\n    \\*/                                                                                                                // 4611\n    elproto.animateWith = function (el, anim, params, ms, easing, callback) {                                          // 4612\n        var element = this;                                                                                            // 4613\n        if (element.removed) {                                                                                         // 4614\n            callback && callback.call(element);                                                                        // 4615\n            return element;                                                                                            // 4616\n        }                                                                                                              // 4617\n        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),                      // 4618\n            x, y;                                                                                                      // 4619\n        runAnimation(a, element, a.percents[0], null, element.attr());                                                 // 4620\n        for (var i = 0, ii = animationElements.length; i < ii; i++) {                                                  // 4621\n            if (animationElements[i].anim == anim && animationElements[i].el == el) {                                  // 4622\n                animationElements[ii - 1].start = animationElements[i].start;                                          // 4623\n                break;                                                                                                 // 4624\n            }                                                                                                          // 4625\n        }                                                                                                              // 4626\n        return element;                                                                                                // 4627\n        //                                                                                                             // 4628\n        //                                                                                                             // 4629\n        // var a = params ? R.animation(params, ms, easing, callback) : anim,                                          // 4630\n        //     status = element.status(anim);                                                                          // 4631\n        // return this.animate(a).status(a, status * anim.ms / a.ms);                                                  // 4632\n    };                                                                                                                 // 4633\n    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {                                                      // 4634\n        var cx = 3 * p1x,                                                                                              // 4635\n            bx = 3 * (p2x - p1x) - cx,                                                                                 // 4636\n            ax = 1 - cx - bx,                                                                                          // 4637\n            cy = 3 * p1y,                                                                                              // 4638\n            by = 3 * (p2y - p1y) - cy,                                                                                 // 4639\n            ay = 1 - cy - by;                                                                                          // 4640\n        function sampleCurveX(t) {                                                                                     // 4641\n            return ((ax * t + bx) * t + cx) * t;                                                                       // 4642\n        }                                                                                                              // 4643\n        function solve(x, epsilon) {                                                                                   // 4644\n            var t = solveCurveX(x, epsilon);                                                                           // 4645\n            return ((ay * t + by) * t + cy) * t;                                                                       // 4646\n        }                                                                                                              // 4647\n        function solveCurveX(x, epsilon) {                                                                             // 4648\n            var t0, t1, t2, x2, d2, i;                                                                                 // 4649\n            for(t2 = x, i = 0; i < 8; i++) {                                                                           // 4650\n                x2 = sampleCurveX(t2) - x;                                                                             // 4651\n                if (abs(x2) < epsilon) {                                                                               // 4652\n                    return t2;                                                                                         // 4653\n                }                                                                                                      // 4654\n                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;                                                                 // 4655\n                if (abs(d2) < 1e-6) {                                                                                  // 4656\n                    break;                                                                                             // 4657\n                }                                                                                                      // 4658\n                t2 = t2 - x2 / d2;                                                                                     // 4659\n            }                                                                                                          // 4660\n            t0 = 0;                                                                                                    // 4661\n            t1 = 1;                                                                                                    // 4662\n            t2 = x;                                                                                                    // 4663\n            if (t2 < t0) {                                                                                             // 4664\n                return t0;                                                                                             // 4665\n            }                                                                                                          // 4666\n            if (t2 > t1) {                                                                                             // 4667\n                return t1;                                                                                             // 4668\n            }                                                                                                          // 4669\n            while (t0 < t1) {                                                                                          // 4670\n                x2 = sampleCurveX(t2);                                                                                 // 4671\n                if (abs(x2 - x) < epsilon) {                                                                           // 4672\n                    return t2;                                                                                         // 4673\n                }                                                                                                      // 4674\n                if (x > x2) {                                                                                          // 4675\n                    t0 = t2;                                                                                           // 4676\n                } else {                                                                                               // 4677\n                    t1 = t2;                                                                                           // 4678\n                }                                                                                                      // 4679\n                t2 = (t1 - t0) / 2 + t0;                                                                               // 4680\n            }                                                                                                          // 4681\n            return t2;                                                                                                 // 4682\n        }                                                                                                              // 4683\n        return solve(t, 1 / (200 * duration));                                                                         // 4684\n    }                                                                                                                  // 4685\n    elproto.onAnimation = function (f) {                                                                               // 4686\n        f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);                  // 4687\n        return this;                                                                                                   // 4688\n    };                                                                                                                 // 4689\n    function Animation(anim, ms) {                                                                                     // 4690\n        var percents = [],                                                                                             // 4691\n            newAnim = {};                                                                                              // 4692\n        this.ms = ms;                                                                                                  // 4693\n        this.times = 1;                                                                                                // 4694\n        if (anim) {                                                                                                    // 4695\n            for (var attr in anim) if (anim[has](attr)) {                                                              // 4696\n                newAnim[toFloat(attr)] = anim[attr];                                                                   // 4697\n                percents.push(toFloat(attr));                                                                          // 4698\n            }                                                                                                          // 4699\n            percents.sort(sortByNumber);                                                                               // 4700\n        }                                                                                                              // 4701\n        this.anim = newAnim;                                                                                           // 4702\n        this.top = percents[percents.length - 1];                                                                      // 4703\n        this.percents = percents;                                                                                      // 4704\n    }                                                                                                                  // 4705\n    /*\\\n     * Animation.delay                                                                                                 // 4707\n     [ method ]                                                                                                        // 4708\n     **                                                                                                                // 4709\n     * Creates a copy of existing animation object with given delay.                                                   // 4710\n     **                                                                                                                // 4711\n     > Parameters                                                                                                      // 4712\n     **                                                                                                                // 4713\n     - delay (number) number of ms to pass between animation start and actual animation                                // 4714\n     **                                                                                                                // 4715\n     = (object) new altered Animation object                                                                           // 4716\n     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);                                                            // 4717\n     | circle1.animate(anim); // run the given animation immediately                                                   // 4718\n     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms                                       // 4719\n    \\*/                                                                                                                // 4720\n    Animation.prototype.delay = function (delay) {                                                                     // 4721\n        var a = new Animation(this.anim, this.ms);                                                                     // 4722\n        a.times = this.times;                                                                                          // 4723\n        a.del = +delay || 0;                                                                                           // 4724\n        return a;                                                                                                      // 4725\n    };                                                                                                                 // 4726\n    /*\\\n     * Animation.repeat                                                                                                // 4728\n     [ method ]                                                                                                        // 4729\n     **                                                                                                                // 4730\n     * Creates a copy of existing animation object with given repetition.                                              // 4731\n     **                                                                                                                // 4732\n     > Parameters                                                                                                      // 4733\n     **                                                                                                                // 4734\n     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`                          // 4735\n     **                                                                                                                // 4736\n     = (object) new altered Animation object                                                                           // 4737\n    \\*/                                                                                                                // 4738\n    Animation.prototype.repeat = function (times) {                                                                    // 4739\n        var a = new Animation(this.anim, this.ms);                                                                     // 4740\n        a.del = this.del;                                                                                              // 4741\n        a.times = math.floor(mmax(times, 0)) || 1;                                                                     // 4742\n        return a;                                                                                                      // 4743\n    };                                                                                                                 // 4744\n    function runAnimation(anim, element, percent, status, totalOrigin, times) {                                        // 4745\n        percent = toFloat(percent);                                                                                    // 4746\n        var params,                                                                                                    // 4747\n            isInAnim,                                                                                                  // 4748\n            isInAnimSet,                                                                                               // 4749\n            percents = [],                                                                                             // 4750\n            next,                                                                                                      // 4751\n            prev,                                                                                                      // 4752\n            timestamp,                                                                                                 // 4753\n            ms = anim.ms,                                                                                              // 4754\n            from = {},                                                                                                 // 4755\n            to = {},                                                                                                   // 4756\n            diff = {};                                                                                                 // 4757\n        if (status) {                                                                                                  // 4758\n            for (i = 0, ii = animationElements.length; i < ii; i++) {                                                  // 4759\n                var e = animationElements[i];                                                                          // 4760\n                if (e.el.id == element.id && e.anim == anim) {                                                         // 4761\n                    if (e.percent != percent) {                                                                        // 4762\n                        animationElements.splice(i, 1);                                                                // 4763\n                        isInAnimSet = 1;                                                                               // 4764\n                    } else {                                                                                           // 4765\n                        isInAnim = e;                                                                                  // 4766\n                    }                                                                                                  // 4767\n                    element.attr(e.totalOrigin);                                                                       // 4768\n                    break;                                                                                             // 4769\n                }                                                                                                      // 4770\n            }                                                                                                          // 4771\n        } else {                                                                                                       // 4772\n            status = +to; // NaN                                                                                       // 4773\n        }                                                                                                              // 4774\n        for (var i = 0, ii = anim.percents.length; i < ii; i++) {                                                      // 4775\n            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {                                 // 4776\n                percent = anim.percents[i];                                                                            // 4777\n                prev = anim.percents[i - 1] || 0;                                                                      // 4778\n                ms = ms / anim.top * (percent - prev);                                                                 // 4779\n                next = anim.percents[i + 1];                                                                           // 4780\n                params = anim.anim[percent];                                                                           // 4781\n                break;                                                                                                 // 4782\n            } else if (status) {                                                                                       // 4783\n                element.attr(anim.anim[anim.percents[i]]);                                                             // 4784\n            }                                                                                                          // 4785\n        }                                                                                                              // 4786\n        if (!params) {                                                                                                 // 4787\n            return;                                                                                                    // 4788\n        }                                                                                                              // 4789\n        if (!isInAnim) {                                                                                               // 4790\n            for (var attr in params) if (params[has](attr)) {                                                          // 4791\n                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {                      // 4792\n                    from[attr] = element.attr(attr);                                                                   // 4793\n                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);                                       // 4794\n                    to[attr] = params[attr];                                                                           // 4795\n                    switch (availableAnimAttrs[attr]) {                                                                // 4796\n                        case nu:                                                                                       // 4797\n                            diff[attr] = (to[attr] - from[attr]) / ms;                                                 // 4798\n                            break;                                                                                     // 4799\n                        case \"colour\":                                                                                 // 4800\n                            from[attr] = R.getRGB(from[attr]);                                                         // 4801\n                            var toColour = R.getRGB(to[attr]);                                                         // 4802\n                            diff[attr] = {                                                                             // 4803\n                                r: (toColour.r - from[attr].r) / ms,                                                   // 4804\n                                g: (toColour.g - from[attr].g) / ms,                                                   // 4805\n                                b: (toColour.b - from[attr].b) / ms                                                    // 4806\n                            };                                                                                         // 4807\n                            break;                                                                                     // 4808\n                        case \"path\":                                                                                   // 4809\n                            var pathes = path2curve(from[attr], to[attr]),                                             // 4810\n                                toPath = pathes[1];                                                                    // 4811\n                            from[attr] = pathes[0];                                                                    // 4812\n                            diff[attr] = [];                                                                           // 4813\n                            for (i = 0, ii = from[attr].length; i < ii; i++) {                                         // 4814\n                                diff[attr][i] = [0];                                                                   // 4815\n                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {                              // 4816\n                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;                         // 4817\n                                }                                                                                      // 4818\n                            }                                                                                          // 4819\n                            break;                                                                                     // 4820\n                        case \"transform\":                                                                              // 4821\n                            var _ = element._,                                                                         // 4822\n                                eq = equaliseTransform(_[attr], to[attr]);                                             // 4823\n                            if (eq) {                                                                                  // 4824\n                                from[attr] = eq.from;                                                                  // 4825\n                                to[attr] = eq.to;                                                                      // 4826\n                                diff[attr] = [];                                                                       // 4827\n                                diff[attr].real = true;                                                                // 4828\n                                for (i = 0, ii = from[attr].length; i < ii; i++) {                                     // 4829\n                                    diff[attr][i] = [from[attr][i][0]];                                                // 4830\n                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {                              // 4831\n                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;                   // 4832\n                                    }                                                                                  // 4833\n                                }                                                                                      // 4834\n                            } else {                                                                                   // 4835\n                                var m = (element.matrix || new Matrix),                                                // 4836\n                                    to2 = {                                                                            // 4837\n                                        _: {transform: _.transform},                                                   // 4838\n                                        getBBox: function () {                                                         // 4839\n                                            return element.getBBox(1);                                                 // 4840\n                                        }                                                                              // 4841\n                                    };                                                                                 // 4842\n                                from[attr] = [                                                                         // 4843\n                                    m.a,                                                                               // 4844\n                                    m.b,                                                                               // 4845\n                                    m.c,                                                                               // 4846\n                                    m.d,                                                                               // 4847\n                                    m.e,                                                                               // 4848\n                                    m.f                                                                                // 4849\n                                ];                                                                                     // 4850\n                                extractTransform(to2, to[attr]);                                                       // 4851\n                                to[attr] = to2._.transform;                                                            // 4852\n                                diff[attr] = [                                                                         // 4853\n                                    (to2.matrix.a - m.a) / ms,                                                         // 4854\n                                    (to2.matrix.b - m.b) / ms,                                                         // 4855\n                                    (to2.matrix.c - m.c) / ms,                                                         // 4856\n                                    (to2.matrix.d - m.d) / ms,                                                         // 4857\n                                    (to2.matrix.e - m.e) / ms,                                                         // 4858\n                                    (to2.matrix.f - m.f) / ms                                                          // 4859\n                                ];                                                                                     // 4860\n                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];                                       // 4861\n                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};               // 4862\n                                // extractTransform(to2, to[attr]);                                                    // 4863\n                                // diff[attr] = [                                                                      // 4864\n                                //     (to2._.sx - _.sx) / ms,                                                         // 4865\n                                //     (to2._.sy - _.sy) / ms,                                                         // 4866\n                                //     (to2._.deg - _.deg) / ms,                                                       // 4867\n                                //     (to2._.dx - _.dx) / ms,                                                         // 4868\n                                //     (to2._.dy - _.dy) / ms                                                          // 4869\n                                // ];                                                                                  // 4870\n                            }                                                                                          // 4871\n                            break;                                                                                     // 4872\n                        case \"csv\":                                                                                    // 4873\n                            var values = Str(params[attr])[split](separator),                                          // 4874\n                                from2 = Str(from[attr])[split](separator);                                             // 4875\n                            if (attr == \"clip-rect\") {                                                                 // 4876\n                                from[attr] = from2;                                                                    // 4877\n                                diff[attr] = [];                                                                       // 4878\n                                i = from2.length;                                                                      // 4879\n                                while (i--) {                                                                          // 4880\n                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;                                  // 4881\n                                }                                                                                      // 4882\n                            }                                                                                          // 4883\n                            to[attr] = values;                                                                         // 4884\n                            break;                                                                                     // 4885\n                        default:                                                                                       // 4886\n                            values = [][concat](params[attr]);                                                         // 4887\n                            from2 = [][concat](from[attr]);                                                            // 4888\n                            diff[attr] = [];                                                                           // 4889\n                            i = element.paper.customAttributes[attr].length;                                           // 4890\n                            while (i--) {                                                                              // 4891\n                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;                             // 4892\n                            }                                                                                          // 4893\n                            break;                                                                                     // 4894\n                    }                                                                                                  // 4895\n                }                                                                                                      // 4896\n            }                                                                                                          // 4897\n            var easing = params.easing,                                                                                // 4898\n                easyeasy = R.easing_formulas[easing];                                                                  // 4899\n            if (!easyeasy) {                                                                                           // 4900\n                easyeasy = Str(easing).match(bezierrg);                                                                // 4901\n                if (easyeasy && easyeasy.length == 5) {                                                                // 4902\n                    var curve = easyeasy;                                                                              // 4903\n                    easyeasy = function (t) {                                                                          // 4904\n                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);                   // 4905\n                    };                                                                                                 // 4906\n                } else {                                                                                               // 4907\n                    easyeasy = pipe;                                                                                   // 4908\n                }                                                                                                      // 4909\n            }                                                                                                          // 4910\n            timestamp = params.start || anim.start || +new Date;                                                       // 4911\n            e = {                                                                                                      // 4912\n                anim: anim,                                                                                            // 4913\n                percent: percent,                                                                                      // 4914\n                timestamp: timestamp,                                                                                  // 4915\n                start: timestamp + (anim.del || 0),                                                                    // 4916\n                status: 0,                                                                                             // 4917\n                initstatus: status || 0,                                                                               // 4918\n                stop: false,                                                                                           // 4919\n                ms: ms,                                                                                                // 4920\n                easing: easyeasy,                                                                                      // 4921\n                from: from,                                                                                            // 4922\n                diff: diff,                                                                                            // 4923\n                to: to,                                                                                                // 4924\n                el: element,                                                                                           // 4925\n                callback: params.callback,                                                                             // 4926\n                prev: prev,                                                                                            // 4927\n                next: next,                                                                                            // 4928\n                repeat: times || anim.times,                                                                           // 4929\n                origin: element.attr(),                                                                                // 4930\n                totalOrigin: totalOrigin                                                                               // 4931\n            };                                                                                                         // 4932\n            animationElements.push(e);                                                                                 // 4933\n            if (status && !isInAnim && !isInAnimSet) {                                                                 // 4934\n                e.stop = true;                                                                                         // 4935\n                e.start = new Date - ms * status;                                                                      // 4936\n                if (animationElements.length == 1) {                                                                   // 4937\n                    return animation();                                                                                // 4938\n                }                                                                                                      // 4939\n            }                                                                                                          // 4940\n            if (isInAnimSet) {                                                                                         // 4941\n                e.start = new Date - e.ms * status;                                                                    // 4942\n            }                                                                                                          // 4943\n            animationElements.length == 1 && requestAnimFrame(animation);                                              // 4944\n        } else {                                                                                                       // 4945\n            isInAnim.initstatus = status;                                                                              // 4946\n            isInAnim.start = new Date - isInAnim.ms * status;                                                          // 4947\n        }                                                                                                              // 4948\n        eve(\"raphael.anim.start.\" + element.id, element, anim);                                                        // 4949\n    }                                                                                                                  // 4950\n    /*\\\n     * Raphael.animation                                                                                               // 4952\n     [ method ]                                                                                                        // 4953\n     **                                                                                                                // 4954\n     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.         // 4955\n     * See also @Animation.delay and @Animation.repeat methods.                                                        // 4956\n     **                                                                                                                // 4957\n     > Parameters                                                                                                      // 4958\n     **                                                                                                                // 4959\n     - params (object) final attributes for the element, see also @Element.attr                                        // 4960\n     - ms (number) number of milliseconds for animation to run                                                         // 4961\n     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n     - callback (function) #optional callback function. Will be called at the end of animation.                        // 4963\n     **                                                                                                                // 4964\n     = (object) @Animation                                                                                             // 4965\n    \\*/                                                                                                                // 4966\n    R.animation = function (params, ms, easing, callback) {                                                            // 4967\n        if (params instanceof Animation) {                                                                             // 4968\n            return params;                                                                                             // 4969\n        }                                                                                                              // 4970\n        if (R.is(easing, \"function\") || !easing) {                                                                     // 4971\n            callback = callback || easing || null;                                                                     // 4972\n            easing = null;                                                                                             // 4973\n        }                                                                                                              // 4974\n        params = Object(params);                                                                                       // 4975\n        ms = +ms || 0;                                                                                                 // 4976\n        var p = {},                                                                                                    // 4977\n            json,                                                                                                      // 4978\n            attr;                                                                                                      // 4979\n        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {          // 4980\n            json = true;                                                                                               // 4981\n            p[attr] = params[attr];                                                                                    // 4982\n        }                                                                                                              // 4983\n        if (!json) {                                                                                                   // 4984\n            return new Animation(params, ms);                                                                          // 4985\n        } else {                                                                                                       // 4986\n            easing && (p.easing = easing);                                                                             // 4987\n            callback && (p.callback = callback);                                                                       // 4988\n            return new Animation({100: p}, ms);                                                                        // 4989\n        }                                                                                                              // 4990\n    };                                                                                                                 // 4991\n    /*\\\n     * Element.animate                                                                                                 // 4993\n     [ method ]                                                                                                        // 4994\n     **                                                                                                                // 4995\n     * Creates and starts animation for given element.                                                                 // 4996\n     **                                                                                                                // 4997\n     > Parameters                                                                                                      // 4998\n     **                                                                                                                // 4999\n     - params (object) final attributes for the element, see also @Element.attr                                        // 5000\n     - ms (number) number of milliseconds for animation to run                                                         // 5001\n     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n     - callback (function) #optional callback function. Will be called at the end of animation.                        // 5003\n     * or                                                                                                              // 5004\n     - animation (object) animation object, see @Raphael.animation                                                     // 5005\n     **                                                                                                                // 5006\n     = (object) original element                                                                                       // 5007\n    \\*/                                                                                                                // 5008\n    elproto.animate = function (params, ms, easing, callback) {                                                        // 5009\n        var element = this;                                                                                            // 5010\n        if (element.removed) {                                                                                         // 5011\n            callback && callback.call(element);                                                                        // 5012\n            return element;                                                                                            // 5013\n        }                                                                                                              // 5014\n        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);                   // 5015\n        runAnimation(anim, element, anim.percents[0], null, element.attr());                                           // 5016\n        return element;                                                                                                // 5017\n    };                                                                                                                 // 5018\n    /*\\\n     * Element.setTime                                                                                                 // 5020\n     [ method ]                                                                                                        // 5021\n     **                                                                                                                // 5022\n     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.                 // 5023\n     **                                                                                                                // 5024\n     > Parameters                                                                                                      // 5025\n     **                                                                                                                // 5026\n     - anim (object) animation object                                                                                  // 5027\n     - value (number) number of milliseconds from the beginning of the animation                                       // 5028\n     **                                                                                                                // 5029\n     = (object) original element if `value` is specified                                                               // 5030\n     * Note, that during animation following events are triggered:                                                     // 5031\n     *                                                                                                                 // 5032\n     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.      // 5033\n    \\*/                                                                                                                // 5034\n    elproto.setTime = function (anim, value) {                                                                         // 5035\n        if (anim && value != null) {                                                                                   // 5036\n            this.status(anim, mmin(value, anim.ms) / anim.ms);                                                         // 5037\n        }                                                                                                              // 5038\n        return this;                                                                                                   // 5039\n    };                                                                                                                 // 5040\n    /*\\\n     * Element.status                                                                                                  // 5042\n     [ method ]                                                                                                        // 5043\n     **                                                                                                                // 5044\n     * Gets or sets the status of animation of the element.                                                            // 5045\n     **                                                                                                                // 5046\n     > Parameters                                                                                                      // 5047\n     **                                                                                                                // 5048\n     - anim (object) #optional animation object                                                                        // 5049\n     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n     **                                                                                                                // 5051\n     = (number) status                                                                                                 // 5052\n     * or                                                                                                              // 5053\n     = (array) status if `anim` is not specified. Array of objects in format:                                          // 5054\n     o {                                                                                                               // 5055\n     o     anim: (object) animation object                                                                             // 5056\n     o     status: (number) status                                                                                     // 5057\n     o }                                                                                                               // 5058\n     * or                                                                                                              // 5059\n     = (object) original element if `value` is specified                                                               // 5060\n    \\*/                                                                                                                // 5061\n    elproto.status = function (anim, value) {                                                                          // 5062\n        var out = [],                                                                                                  // 5063\n            i = 0,                                                                                                     // 5064\n            len,                                                                                                       // 5065\n            e;                                                                                                         // 5066\n        if (value != null) {                                                                                           // 5067\n            runAnimation(anim, this, -1, mmin(value, 1));                                                              // 5068\n            return this;                                                                                               // 5069\n        } else {                                                                                                       // 5070\n            len = animationElements.length;                                                                            // 5071\n            for (; i < len; i++) {                                                                                     // 5072\n                e = animationElements[i];                                                                              // 5073\n                if (e.el.id == this.id && (!anim || e.anim == anim)) {                                                 // 5074\n                    if (anim) {                                                                                        // 5075\n                        return e.status;                                                                               // 5076\n                    }                                                                                                  // 5077\n                    out.push({                                                                                         // 5078\n                        anim: e.anim,                                                                                  // 5079\n                        status: e.status                                                                               // 5080\n                    });                                                                                                // 5081\n                }                                                                                                      // 5082\n            }                                                                                                          // 5083\n            if (anim) {                                                                                                // 5084\n                return 0;                                                                                              // 5085\n            }                                                                                                          // 5086\n            return out;                                                                                                // 5087\n        }                                                                                                              // 5088\n    };                                                                                                                 // 5089\n    /*\\\n     * Element.pause                                                                                                   // 5091\n     [ method ]                                                                                                        // 5092\n     **                                                                                                                // 5093\n     * Stops animation of the element with ability to resume it later on.                                              // 5094\n     **                                                                                                                // 5095\n     > Parameters                                                                                                      // 5096\n     **                                                                                                                // 5097\n     - anim (object) #optional animation object                                                                        // 5098\n     **                                                                                                                // 5099\n     = (object) original element                                                                                       // 5100\n    \\*/                                                                                                                // 5101\n    elproto.pause = function (anim) {                                                                                  // 5102\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n            if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {                     // 5104\n                animationElements[i].paused = true;                                                                    // 5105\n            }                                                                                                          // 5106\n        }                                                                                                              // 5107\n        return this;                                                                                                   // 5108\n    };                                                                                                                 // 5109\n    /*\\\n     * Element.resume                                                                                                  // 5111\n     [ method ]                                                                                                        // 5112\n     **                                                                                                                // 5113\n     * Resumes animation if it was paused with @Element.pause method.                                                  // 5114\n     **                                                                                                                // 5115\n     > Parameters                                                                                                      // 5116\n     **                                                                                                                // 5117\n     - anim (object) #optional animation object                                                                        // 5118\n     **                                                                                                                // 5119\n     = (object) original element                                                                                       // 5120\n    \\*/                                                                                                                // 5121\n    elproto.resume = function (anim) {                                                                                 // 5122\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n            var e = animationElements[i];                                                                              // 5124\n            if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {                                       // 5125\n                delete e.paused;                                                                                       // 5126\n                this.status(e.anim, e.status);                                                                         // 5127\n            }                                                                                                          // 5128\n        }                                                                                                              // 5129\n        return this;                                                                                                   // 5130\n    };                                                                                                                 // 5131\n    /*\\\n     * Element.stop                                                                                                    // 5133\n     [ method ]                                                                                                        // 5134\n     **                                                                                                                // 5135\n     * Stops animation of the element.                                                                                 // 5136\n     **                                                                                                                // 5137\n     > Parameters                                                                                                      // 5138\n     **                                                                                                                // 5139\n     - anim (object) #optional animation object                                                                        // 5140\n     **                                                                                                                // 5141\n     = (object) original element                                                                                       // 5142\n    \\*/                                                                                                                // 5143\n    elproto.stop = function (anim) {                                                                                   // 5144\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n            if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {                      // 5146\n                animationElements.splice(i--, 1);                                                                      // 5147\n            }                                                                                                          // 5148\n        }                                                                                                              // 5149\n        return this;                                                                                                   // 5150\n    };                                                                                                                 // 5151\n    function stopAnimation(paper) {                                                                                    // 5152\n        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {               // 5153\n            animationElements.splice(i--, 1);                                                                          // 5154\n        }                                                                                                              // 5155\n    }                                                                                                                  // 5156\n    eve.on(\"raphael.remove\", stopAnimation);                                                                           // 5157\n    eve.on(\"raphael.clear\", stopAnimation);                                                                            // 5158\n    elproto.toString = function () {                                                                                   // 5159\n        return \"Rapha\\xebl\\u2019s object\";                                                                             // 5160\n    };                                                                                                                 // 5161\n                                                                                                                       // 5162\n    // Set                                                                                                             // 5163\n    var Set = function (items) {                                                                                       // 5164\n        this.items = [];                                                                                               // 5165\n        this.length = 0;                                                                                               // 5166\n        this.type = \"set\";                                                                                             // 5167\n        if (items) {                                                                                                   // 5168\n            for (var i = 0, ii = items.length; i < ii; i++) {                                                          // 5169\n                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {        // 5170\n                    this[this.items.length] = this.items[this.items.length] = items[i];                                // 5171\n                    this.length++;                                                                                     // 5172\n                }                                                                                                      // 5173\n            }                                                                                                          // 5174\n        }                                                                                                              // 5175\n    },                                                                                                                 // 5176\n    setproto = Set.prototype;                                                                                          // 5177\n    /*\\\n     * Set.push                                                                                                        // 5179\n     [ method ]                                                                                                        // 5180\n     **                                                                                                                // 5181\n     * Adds each argument to the current set.                                                                          // 5182\n     = (object) original element                                                                                       // 5183\n    \\*/                                                                                                                // 5184\n    setproto.push = function () {                                                                                      // 5185\n        var item,                                                                                                      // 5186\n            len;                                                                                                       // 5187\n        for (var i = 0, ii = arguments.length; i < ii; i++) {                                                          // 5188\n            item = arguments[i];                                                                                       // 5189\n            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {                        // 5190\n                len = this.items.length;                                                                               // 5191\n                this[len] = this.items[len] = item;                                                                    // 5192\n                this.length++;                                                                                         // 5193\n            }                                                                                                          // 5194\n        }                                                                                                              // 5195\n        return this;                                                                                                   // 5196\n    };                                                                                                                 // 5197\n    /*\\\n     * Set.pop                                                                                                         // 5199\n     [ method ]                                                                                                        // 5200\n     **                                                                                                                // 5201\n     * Removes last element and returns it.                                                                            // 5202\n     = (object) element                                                                                                // 5203\n    \\*/                                                                                                                // 5204\n    setproto.pop = function () {                                                                                       // 5205\n        this.length && delete this[this.length--];                                                                     // 5206\n        return this.items.pop();                                                                                       // 5207\n    };                                                                                                                 // 5208\n    /*\\\n     * Set.forEach                                                                                                     // 5210\n     [ method ]                                                                                                        // 5211\n     **                                                                                                                // 5212\n     * Executes given function for each element in the set.                                                            // 5213\n     *                                                                                                                 // 5214\n     * If function returns `false` it will stop loop running.                                                          // 5215\n     **                                                                                                                // 5216\n     > Parameters                                                                                                      // 5217\n     **                                                                                                                // 5218\n     - callback (function) function to run                                                                             // 5219\n     - thisArg (object) context object for the callback                                                                // 5220\n     = (object) Set object                                                                                             // 5221\n    \\*/                                                                                                                // 5222\n    setproto.forEach = function (callback, thisArg) {                                                                  // 5223\n        for (var i = 0, ii = this.items.length; i < ii; i++) {                                                         // 5224\n            if (callback.call(thisArg, this.items[i], i) === false) {                                                  // 5225\n                return this;                                                                                           // 5226\n            }                                                                                                          // 5227\n        }                                                                                                              // 5228\n        return this;                                                                                                   // 5229\n    };                                                                                                                 // 5230\n    for (var method in elproto) if (elproto[has](method)) {                                                            // 5231\n        setproto[method] = (function (methodname) {                                                                    // 5232\n            return function () {                                                                                       // 5233\n                var arg = arguments;                                                                                   // 5234\n                return this.forEach(function (el) {                                                                    // 5235\n                    el[methodname][apply](el, arg);                                                                    // 5236\n                });                                                                                                    // 5237\n            };                                                                                                         // 5238\n        })(method);                                                                                                    // 5239\n    }                                                                                                                  // 5240\n    setproto.attr = function (name, value) {                                                                           // 5241\n        if (name && R.is(name, array) && R.is(name[0], \"object\")) {                                                    // 5242\n            for (var j = 0, jj = name.length; j < jj; j++) {                                                           // 5243\n                this.items[j].attr(name[j]);                                                                           // 5244\n            }                                                                                                          // 5245\n        } else {                                                                                                       // 5246\n            for (var i = 0, ii = this.items.length; i < ii; i++) {                                                     // 5247\n                this.items[i].attr(name, value);                                                                       // 5248\n            }                                                                                                          // 5249\n        }                                                                                                              // 5250\n        return this;                                                                                                   // 5251\n    };                                                                                                                 // 5252\n    /*\\\n     * Set.clear                                                                                                       // 5254\n     [ method ]                                                                                                        // 5255\n     **                                                                                                                // 5256\n     * Removeds all elements from the set                                                                              // 5257\n    \\*/                                                                                                                // 5258\n    setproto.clear = function () {                                                                                     // 5259\n        while (this.length) {                                                                                          // 5260\n            this.pop();                                                                                                // 5261\n        }                                                                                                              // 5262\n    };                                                                                                                 // 5263\n    /*\\\n     * Set.splice                                                                                                      // 5265\n     [ method ]                                                                                                        // 5266\n     **                                                                                                                // 5267\n     * Removes given element from the set                                                                              // 5268\n     **                                                                                                                // 5269\n     > Parameters                                                                                                      // 5270\n     **                                                                                                                // 5271\n     - index (number) position of the deletion                                                                         // 5272\n     - count (number) number of element to remove                                                                      // 5273\n     - insertion… (object) #optional elements to insert                                                                // 5274\n     = (object) set elements that were deleted                                                                         // 5275\n    \\*/                                                                                                                // 5276\n    setproto.splice = function (index, count, insertion) {                                                             // 5277\n        index = index < 0 ? mmax(this.length + index, 0) : index;                                                      // 5278\n        count = mmax(0, mmin(this.length - index, count));                                                             // 5279\n        var tail = [],                                                                                                 // 5280\n            todel = [],                                                                                                // 5281\n            args = [],                                                                                                 // 5282\n            i;                                                                                                         // 5283\n        for (i = 2; i < arguments.length; i++) {                                                                       // 5284\n            args.push(arguments[i]);                                                                                   // 5285\n        }                                                                                                              // 5286\n        for (i = 0; i < count; i++) {                                                                                  // 5287\n            todel.push(this[index + i]);                                                                               // 5288\n        }                                                                                                              // 5289\n        for (; i < this.length - index; i++) {                                                                         // 5290\n            tail.push(this[index + i]);                                                                                // 5291\n        }                                                                                                              // 5292\n        var arglen = args.length;                                                                                      // 5293\n        for (i = 0; i < arglen + tail.length; i++) {                                                                   // 5294\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];                         // 5295\n        }                                                                                                              // 5296\n        i = this.items.length = this.length -= count - arglen;                                                         // 5297\n        while (this[i]) {                                                                                              // 5298\n            delete this[i++];                                                                                          // 5299\n        }                                                                                                              // 5300\n        return new Set(todel);                                                                                         // 5301\n    };                                                                                                                 // 5302\n    /*\\\n     * Set.exclude                                                                                                     // 5304\n     [ method ]                                                                                                        // 5305\n     **                                                                                                                // 5306\n     * Removes given element from the set                                                                              // 5307\n     **                                                                                                                // 5308\n     > Parameters                                                                                                      // 5309\n     **                                                                                                                // 5310\n     - element (object) element to remove                                                                              // 5311\n     = (boolean) `true` if object was found & removed from the set                                                     // 5312\n    \\*/                                                                                                                // 5313\n    setproto.exclude = function (el) {                                                                                 // 5314\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {                                            // 5315\n            this.splice(i, 1);                                                                                         // 5316\n            return true;                                                                                               // 5317\n        }                                                                                                              // 5318\n    };                                                                                                                 // 5319\n    setproto.animate = function (params, ms, easing, callback) {                                                       // 5320\n        (R.is(easing, \"function\") || !easing) && (callback = easing || null);                                          // 5321\n        var len = this.items.length,                                                                                   // 5322\n            i = len,                                                                                                   // 5323\n            item,                                                                                                      // 5324\n            set = this,                                                                                                // 5325\n            collector;                                                                                                 // 5326\n        if (!len) {                                                                                                    // 5327\n            return this;                                                                                               // 5328\n        }                                                                                                              // 5329\n        callback && (collector = function () {                                                                         // 5330\n            !--len && callback.call(set);                                                                              // 5331\n        });                                                                                                            // 5332\n        easing = R.is(easing, string) ? easing : collector;                                                            // 5333\n        var anim = R.animation(params, ms, easing, collector);                                                         // 5334\n        item = this.items[--i].animate(anim);                                                                          // 5335\n        while (i--) {                                                                                                  // 5336\n            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);                    // 5337\n            (this.items[i] && !this.items[i].removed) || len--;                                                        // 5338\n        }                                                                                                              // 5339\n        return this;                                                                                                   // 5340\n    };                                                                                                                 // 5341\n    setproto.insertAfter = function (el) {                                                                             // 5342\n        var i = this.items.length;                                                                                     // 5343\n        while (i--) {                                                                                                  // 5344\n            this.items[i].insertAfter(el);                                                                             // 5345\n        }                                                                                                              // 5346\n        return this;                                                                                                   // 5347\n    };                                                                                                                 // 5348\n    setproto.getBBox = function () {                                                                                   // 5349\n        var x = [],                                                                                                    // 5350\n            y = [],                                                                                                    // 5351\n            x2 = [],                                                                                                   // 5352\n            y2 = [];                                                                                                   // 5353\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {                                            // 5354\n            var box = this.items[i].getBBox();                                                                         // 5355\n            x.push(box.x);                                                                                             // 5356\n            y.push(box.y);                                                                                             // 5357\n            x2.push(box.x + box.width);                                                                                // 5358\n            y2.push(box.y + box.height);                                                                               // 5359\n        }                                                                                                              // 5360\n        x = mmin[apply](0, x);                                                                                         // 5361\n        y = mmin[apply](0, y);                                                                                         // 5362\n        x2 = mmax[apply](0, x2);                                                                                       // 5363\n        y2 = mmax[apply](0, y2);                                                                                       // 5364\n        return {                                                                                                       // 5365\n            x: x,                                                                                                      // 5366\n            y: y,                                                                                                      // 5367\n            x2: x2,                                                                                                    // 5368\n            y2: y2,                                                                                                    // 5369\n            width: x2 - x,                                                                                             // 5370\n            height: y2 - y                                                                                             // 5371\n        };                                                                                                             // 5372\n    };                                                                                                                 // 5373\n    setproto.clone = function (s) {                                                                                    // 5374\n        s = this.paper.set();                                                                                          // 5375\n        for (var i = 0, ii = this.items.length; i < ii; i++) {                                                         // 5376\n            s.push(this.items[i].clone());                                                                             // 5377\n        }                                                                                                              // 5378\n        return s;                                                                                                      // 5379\n    };                                                                                                                 // 5380\n    setproto.toString = function () {                                                                                  // 5381\n        return \"Rapha\\xebl\\u2018s set\";                                                                                // 5382\n    };                                                                                                                 // 5383\n                                                                                                                       // 5384\n    setproto.glow = function(glowConfig) {                                                                             // 5385\n        var ret = this.paper.set();                                                                                    // 5386\n        this.forEach(function(shape, index){                                                                           // 5387\n            var g = shape.glow(glowConfig);                                                                            // 5388\n            if(g != null){                                                                                             // 5389\n                g.forEach(function(shape2, index2){                                                                    // 5390\n                    ret.push(shape2);                                                                                  // 5391\n                });                                                                                                    // 5392\n            }                                                                                                          // 5393\n        });                                                                                                            // 5394\n        return ret;                                                                                                    // 5395\n    };                                                                                                                 // 5396\n                                                                                                                       // 5397\n                                                                                                                       // 5398\n    /*\\\n     * Set.isPointInside                                                                                               // 5400\n     [ method ]                                                                                                        // 5401\n     **                                                                                                                // 5402\n     * Determine if given point is inside this set’s elements                                                          // 5403\n     **                                                                                                                // 5404\n     > Parameters                                                                                                      // 5405\n     **                                                                                                                // 5406\n     - x (number) x coordinate of the point                                                                            // 5407\n     - y (number) y coordinate of the point                                                                            // 5408\n     = (boolean) `true` if point is inside any of the set's elements                                                   // 5409\n     \\*/                                                                                                               // 5410\n    setproto.isPointInside = function (x, y) {                                                                         // 5411\n        var isPointInside = false;                                                                                     // 5412\n        this.forEach(function (el) {                                                                                   // 5413\n            if (el.isPointInside(x, y)) {                                                                              // 5414\n                isPointInside = true;                                                                                  // 5415\n                return false; // stop loop                                                                             // 5416\n            }                                                                                                          // 5417\n        });                                                                                                            // 5418\n        return isPointInside;                                                                                          // 5419\n    };                                                                                                                 // 5420\n                                                                                                                       // 5421\n    /*\\\n     * Raphael.registerFont                                                                                            // 5423\n     [ method ]                                                                                                        // 5424\n     **                                                                                                                // 5425\n     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n     * Returns original parameter, so it could be used with chaining.                                                  // 5427\n     # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n     **                                                                                                                // 5429\n     > Parameters                                                                                                      // 5430\n     **                                                                                                                // 5431\n     - font (object) the font to register                                                                              // 5432\n     = (object) the font you passed in                                                                                 // 5433\n     > Usage                                                                                                           // 5434\n     | Cufon.registerFont(Raphael.registerFont({…}));                                                                  // 5435\n    \\*/                                                                                                                // 5436\n    R.registerFont = function (font) {                                                                                 // 5437\n        if (!font.face) {                                                                                              // 5438\n            return font;                                                                                               // 5439\n        }                                                                                                              // 5440\n        this.fonts = this.fonts || {};                                                                                 // 5441\n        var fontcopy = {                                                                                               // 5442\n                w: font.w,                                                                                             // 5443\n                face: {},                                                                                              // 5444\n                glyphs: {}                                                                                             // 5445\n            },                                                                                                         // 5446\n            family = font.face[\"font-family\"];                                                                         // 5447\n        for (var prop in font.face) if (font.face[has](prop)) {                                                        // 5448\n            fontcopy.face[prop] = font.face[prop];                                                                     // 5449\n        }                                                                                                              // 5450\n        if (this.fonts[family]) {                                                                                      // 5451\n            this.fonts[family].push(fontcopy);                                                                         // 5452\n        } else {                                                                                                       // 5453\n            this.fonts[family] = [fontcopy];                                                                           // 5454\n        }                                                                                                              // 5455\n        if (!font.svg) {                                                                                               // 5456\n            fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);                                      // 5457\n            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {                                              // 5458\n                var path = font.glyphs[glyph];                                                                         // 5459\n                fontcopy.glyphs[glyph] = {                                                                             // 5460\n                    w: path.w,                                                                                         // 5461\n                    k: {},                                                                                             // 5462\n                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {                               // 5463\n                            return {l: \"L\", c: \"C\", x: \"z\", t: \"m\", r: \"l\", v: \"c\"}[command] || \"M\";                   // 5464\n                        }) + \"z\"                                                                                       // 5465\n                };                                                                                                     // 5466\n                if (path.k) {                                                                                          // 5467\n                    for (var k in path.k) if (path[has](k)) {                                                          // 5468\n                        fontcopy.glyphs[glyph].k[k] = path.k[k];                                                       // 5469\n                    }                                                                                                  // 5470\n                }                                                                                                      // 5471\n            }                                                                                                          // 5472\n        }                                                                                                              // 5473\n        return font;                                                                                                   // 5474\n    };                                                                                                                 // 5475\n    /*\\\n     * Paper.getFont                                                                                                   // 5477\n     [ method ]                                                                                                        // 5478\n     **                                                                                                                // 5479\n     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n     **                                                                                                                // 5481\n     > Parameters                                                                                                      // 5482\n     **                                                                                                                // 5483\n     - family (string) font family name or any word from it                                                            // 5484\n     - weight (string) #optional font weight                                                                           // 5485\n     - style (string) #optional font style                                                                             // 5486\n     - stretch (string) #optional font stretch                                                                         // 5487\n     = (object) the font object                                                                                        // 5488\n     > Usage                                                                                                           // 5489\n     | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);                                          // 5490\n    \\*/                                                                                                                // 5491\n    paperproto.getFont = function (family, weight, style, stretch) {                                                   // 5492\n        stretch = stretch || \"normal\";                                                                                 // 5493\n        style = style || \"normal\";                                                                                     // 5494\n        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;                        // 5495\n        if (!R.fonts) {                                                                                                // 5496\n            return;                                                                                                    // 5497\n        }                                                                                                              // 5498\n        var font = R.fonts[family];                                                                                    // 5499\n        if (!font) {                                                                                                   // 5500\n            var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");                // 5501\n            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {                                                // 5502\n                if (name.test(fontName)) {                                                                             // 5503\n                    font = R.fonts[fontName];                                                                          // 5504\n                    break;                                                                                             // 5505\n                }                                                                                                      // 5506\n            }                                                                                                          // 5507\n        }                                                                                                              // 5508\n        var thefont;                                                                                                   // 5509\n        if (font) {                                                                                                    // 5510\n            for (var i = 0, ii = font.length; i < ii; i++) {                                                           // 5511\n                thefont = font[i];                                                                                     // 5512\n                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n                    break;                                                                                             // 5514\n                }                                                                                                      // 5515\n            }                                                                                                          // 5516\n        }                                                                                                              // 5517\n        return thefont;                                                                                                // 5518\n    };                                                                                                                 // 5519\n    /*\\\n     * Paper.print                                                                                                     // 5521\n     [ method ]                                                                                                        // 5522\n     **                                                                                                                // 5523\n     * Creates path that represent given text written using given font at given position with given size.              // 5524\n     * Result of the method is path element that contains whole text as a separate path.                               // 5525\n     **                                                                                                                // 5526\n     > Parameters                                                                                                      // 5527\n     **                                                                                                                // 5528\n     - x (number) x position of the text                                                                               // 5529\n     - y (number) y position of the text                                                                               // 5530\n     - string (string) text to print                                                                                   // 5531\n     - font (object) font object, see @Paper.getFont                                                                   // 5532\n     - size (number) #optional size of the font, default is `16`                                                       // 5533\n     - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`                            // 5534\n     - letter_spacing (number) #optional number in range `-1..1`, default is `0`                                       // 5535\n     - line_spacing (number) #optional number in range `1..3`, default is `1`                                          // 5536\n     = (object) resulting path element, which consist of all letters                                                   // 5537\n     > Usage                                                                                                           // 5538\n     | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});                                // 5539\n    \\*/                                                                                                                // 5540\n    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {                     // 5541\n        origin = origin || \"middle\"; // baseline|middle                                                                // 5542\n        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);                                                       // 5543\n        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);                                                            // 5544\n        var letters = Str(string)[split](E),                                                                           // 5545\n            shift = 0,                                                                                                 // 5546\n            notfirst = 0,                                                                                              // 5547\n            path = E,                                                                                                  // 5548\n            scale;                                                                                                     // 5549\n        R.is(font, \"string\") && (font = this.getFont(font));                                                           // 5550\n        if (font) {                                                                                                    // 5551\n            scale = (size || 16) / font.face[\"units-per-em\"];                                                          // 5552\n            var bb = font.face.bbox[split](separator),                                                                 // 5553\n                top = +bb[0],                                                                                          // 5554\n                lineHeight = bb[3] - bb[1],                                                                            // 5555\n                shifty = 0,                                                                                            // 5556\n                height = +bb[1] + (origin == \"baseline\" ? lineHeight + (+font.face.descent) : lineHeight / 2);         // 5557\n            for (var i = 0, ii = letters.length; i < ii; i++) {                                                        // 5558\n                if (letters[i] == \"\\n\") {                                                                              // 5559\n                    shift = 0;                                                                                         // 5560\n                    curr = 0;                                                                                          // 5561\n                    notfirst = 0;                                                                                      // 5562\n                    shifty += lineHeight * line_spacing;                                                               // 5563\n                } else {                                                                                               // 5564\n                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},                                          // 5565\n                        curr = font.glyphs[letters[i]];                                                                // 5566\n                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n                    notfirst = 1;                                                                                      // 5568\n                }                                                                                                      // 5569\n                if (curr && curr.d) {                                                                                  // 5570\n                    path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n                }                                                                                                      // 5572\n            }                                                                                                          // 5573\n        }                                                                                                              // 5574\n        return this.path(path).attr({                                                                                  // 5575\n            fill: \"#000\",                                                                                              // 5576\n            stroke: \"none\"                                                                                             // 5577\n        });                                                                                                            // 5578\n    };                                                                                                                 // 5579\n                                                                                                                       // 5580\n    /*\\\n     * Paper.add                                                                                                       // 5582\n     [ method ]                                                                                                        // 5583\n     **                                                                                                                // 5584\n     * Imports elements in JSON array in format `{type: type, <attributes>}`                                           // 5585\n     **                                                                                                                // 5586\n     > Parameters                                                                                                      // 5587\n     **                                                                                                                // 5588\n     - json (array)                                                                                                    // 5589\n     = (object) resulting set of imported elements                                                                     // 5590\n     > Usage                                                                                                           // 5591\n     | paper.add([                                                                                                     // 5592\n     |     {                                                                                                           // 5593\n     |         type: \"circle\",                                                                                         // 5594\n     |         cx: 10,                                                                                                 // 5595\n     |         cy: 10,                                                                                                 // 5596\n     |         r: 5                                                                                                    // 5597\n     |     },                                                                                                          // 5598\n     |     {                                                                                                           // 5599\n     |         type: \"rect\",                                                                                           // 5600\n     |         x: 10,                                                                                                  // 5601\n     |         y: 10,                                                                                                  // 5602\n     |         width: 10,                                                                                              // 5603\n     |         height: 10,                                                                                             // 5604\n     |         fill: \"#fc0\"                                                                                            // 5605\n     |     }                                                                                                           // 5606\n     | ]);                                                                                                             // 5607\n    \\*/                                                                                                                // 5608\n    paperproto.add = function (json) {                                                                                 // 5609\n        if (R.is(json, \"array\")) {                                                                                     // 5610\n            var res = this.set(),                                                                                      // 5611\n                i = 0,                                                                                                 // 5612\n                ii = json.length,                                                                                      // 5613\n                j;                                                                                                     // 5614\n            for (; i < ii; i++) {                                                                                      // 5615\n                j = json[i] || {};                                                                                     // 5616\n                elements[has](j.type) && res.push(this[j.type]().attr(j));                                             // 5617\n            }                                                                                                          // 5618\n        }                                                                                                              // 5619\n        return res;                                                                                                    // 5620\n    };                                                                                                                 // 5621\n                                                                                                                       // 5622\n    /*\\\n     * Raphael.format                                                                                                  // 5624\n     [ method ]                                                                                                        // 5625\n     **                                                                                                                // 5626\n     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.             // 5627\n     **                                                                                                                // 5628\n     > Parameters                                                                                                      // 5629\n     **                                                                                                                // 5630\n     - token (string) string to format                                                                                 // 5631\n     - … (string) rest of arguments will be treated as parameters for replacement                                      // 5632\n     = (string) formated string                                                                                        // 5633\n     > Usage                                                                                                           // 5634\n     | var x = 10,                                                                                                     // 5635\n     |     y = 20,                                                                                                     // 5636\n     |     width = 40,                                                                                                 // 5637\n     |     height = 50;                                                                                                // 5638\n     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"                                         // 5639\n     | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));                               // 5640\n    \\*/                                                                                                                // 5641\n    R.format = function (token, params) {                                                                              // 5642\n        var args = R.is(params, array) ? [0][concat](params) : arguments;                                              // 5643\n        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {        // 5644\n            return args[++i] == null ? E : args[i];                                                                    // 5645\n        }));                                                                                                           // 5646\n        return token || E;                                                                                             // 5647\n    };                                                                                                                 // 5648\n    /*\\\n     * Raphael.fullfill                                                                                                // 5650\n     [ method ]                                                                                                        // 5651\n     **                                                                                                                // 5652\n     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n     **                                                                                                                // 5654\n     > Parameters                                                                                                      // 5655\n     **                                                                                                                // 5656\n     - token (string) string to format                                                                                 // 5657\n     - json (object) object which properties will be used as a replacement                                             // 5658\n     = (string) formated string                                                                                        // 5659\n     > Usage                                                                                                           // 5660\n     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"                                         // 5661\n     | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {                     // 5662\n     |     x: 10,                                                                                                      // 5663\n     |     y: 20,                                                                                                      // 5664\n     |     dim: {                                                                                                      // 5665\n     |         width: 40,                                                                                              // 5666\n     |         height: 50,                                                                                             // 5667\n     |         \"negative width\": -40                                                                                   // 5668\n     |     }                                                                                                           // 5669\n     | }));                                                                                                            // 5670\n    \\*/                                                                                                                // 5671\n    R.fullfill = (function () {                                                                                        // 5672\n        var tokenRegex = /\\{([^\\}]+)\\}/g,                                                                              // 5673\n            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n            replacer = function (all, key, obj) {                                                                      // 5675\n                var res = obj;                                                                                         // 5676\n                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {                        // 5677\n                    name = name || quotedName;                                                                         // 5678\n                    if (res) {                                                                                         // 5679\n                        if (name in res) {                                                                             // 5680\n                            res = res[name];                                                                           // 5681\n                        }                                                                                              // 5682\n                        typeof res == \"function\" && isFunc && (res = res());                                           // 5683\n                    }                                                                                                  // 5684\n                });                                                                                                    // 5685\n                res = (res == null || res == obj ? all : res) + \"\";                                                    // 5686\n                return res;                                                                                            // 5687\n            };                                                                                                         // 5688\n        return function (str, obj) {                                                                                   // 5689\n            return String(str).replace(tokenRegex, function (all, key) {                                               // 5690\n                return replacer(all, key, obj);                                                                        // 5691\n            });                                                                                                        // 5692\n        };                                                                                                             // 5693\n    })();                                                                                                              // 5694\n    /*\\\n     * Raphael.ninja                                                                                                   // 5696\n     [ method ]                                                                                                        // 5697\n     **                                                                                                                // 5698\n     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n     * Beware, that in this case plugins could stop working, because they are depending on global variable existance.  // 5700\n     **                                                                                                                // 5701\n     = (object) Raphael object                                                                                         // 5702\n     > Usage                                                                                                           // 5703\n     | (function (local_raphael) {                                                                                     // 5704\n     |     var paper = local_raphael(10, 10, 320, 200);                                                                // 5705\n     |     …                                                                                                           // 5706\n     | })(Raphael.ninja());                                                                                            // 5707\n    \\*/                                                                                                                // 5708\n    R.ninja = function () {                                                                                            // 5709\n        oldRaphael.was ? (g.win.Raphael = oldRaphael.is) : delete Raphael;                                             // 5710\n        return R;                                                                                                      // 5711\n    };                                                                                                                 // 5712\n    /*\\\n     * Raphael.st                                                                                                      // 5714\n     [ property (object) ]                                                                                             // 5715\n     **                                                                                                                // 5716\n     * You can add your own method to elements and sets. It is wise to add a set method for each element method        // 5717\n     * you added, so you will be able to call the same method on sets too.                                             // 5718\n     **                                                                                                                // 5719\n     * See also @Raphael.el.                                                                                           // 5720\n     > Usage                                                                                                           // 5721\n     | Raphael.el.red = function () {                                                                                  // 5722\n     |     this.attr({fill: \"#f00\"});                                                                                  // 5723\n     | };                                                                                                              // 5724\n     | Raphael.st.red = function () {                                                                                  // 5725\n     |     this.forEach(function (el) {                                                                                // 5726\n     |         el.red();                                                                                               // 5727\n     |     });                                                                                                         // 5728\n     | };                                                                                                              // 5729\n     | // then use it                                                                                                  // 5730\n     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();                                        // 5731\n    \\*/                                                                                                                // 5732\n    R.st = setproto;                                                                                                   // 5733\n    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html                 // 5734\n    (function (doc, loaded, f) {                                                                                       // 5735\n        if (doc.readyState == null && doc.addEventListener){                                                           // 5736\n            doc.addEventListener(loaded, f = function () {                                                             // 5737\n                doc.removeEventListener(loaded, f, false);                                                             // 5738\n                doc.readyState = \"complete\";                                                                           // 5739\n            }, false);                                                                                                 // 5740\n            doc.readyState = \"loading\";                                                                                // 5741\n        }                                                                                                              // 5742\n        function isLoaded() {                                                                                          // 5743\n            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");                          // 5744\n        }                                                                                                              // 5745\n        isLoaded();                                                                                                    // 5746\n    })(document, \"DOMContentLoaded\");                                                                                  // 5747\n                                                                                                                       // 5748\n    eve.on(\"raphael.DOMload\", function () {                                                                            // 5749\n        loaded = true;                                                                                                 // 5750\n    });                                                                                                                // 5751\n                                                                                                                       // 5752\n// ┌─────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël - JavaScript Vector Library                                 │ \\\\\n// ├─────────────────────────────────────────────────────────────────────┤ \\\\\n// │ SVG Module                                                          │ \\\\\n// ├─────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\\\\n// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\\\\n// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\\\\n// └─────────────────────────────────────────────────────────────────────┘ \\\\\n                                                                                                                       // 5762\n(function(){                                                                                                           // 5763\n    if (!R.svg) {                                                                                                      // 5764\n        return;                                                                                                        // 5765\n    }                                                                                                                  // 5766\n    var has = \"hasOwnProperty\",                                                                                        // 5767\n        Str = String,                                                                                                  // 5768\n        toFloat = parseFloat,                                                                                          // 5769\n        toInt = parseInt,                                                                                              // 5770\n        math = Math,                                                                                                   // 5771\n        mmax = math.max,                                                                                               // 5772\n        abs = math.abs,                                                                                                // 5773\n        pow = math.pow,                                                                                                // 5774\n        separator = /[, ]+/,                                                                                           // 5775\n        eve = R.eve,                                                                                                   // 5776\n        E = \"\",                                                                                                        // 5777\n        S = \" \";                                                                                                       // 5778\n    var xlink = \"http://www.w3.org/1999/xlink\",                                                                        // 5779\n        markers = {                                                                                                    // 5780\n            block: \"M5,0 0,2.5 5,5z\",                                                                                  // 5781\n            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",                                                                    // 5782\n            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",                                                                      // 5783\n            open: \"M6,1 1,3.5 6,6\",                                                                                    // 5784\n            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"                                                    // 5785\n        },                                                                                                             // 5786\n        markerCounter = {};                                                                                            // 5787\n    R.toString = function () {                                                                                         // 5788\n        return  \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;                              // 5789\n    };                                                                                                                 // 5790\n    var $ = function (el, attr) {                                                                                      // 5791\n        if (attr) {                                                                                                    // 5792\n            if (typeof el == \"string\") {                                                                               // 5793\n                el = $(el);                                                                                            // 5794\n            }                                                                                                          // 5795\n            for (var key in attr) if (attr[has](key)) {                                                                // 5796\n                if (key.substring(0, 6) == \"xlink:\") {                                                                 // 5797\n                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));                                        // 5798\n                } else {                                                                                               // 5799\n                    el.setAttribute(key, Str(attr[key]));                                                              // 5800\n                }                                                                                                      // 5801\n            }                                                                                                          // 5802\n        } else {                                                                                                       // 5803\n            el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);                                           // 5804\n            el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");                                          // 5805\n        }                                                                                                              // 5806\n        return el;                                                                                                     // 5807\n    },                                                                                                                 // 5808\n    addGradientFill = function (element, gradient) {                                                                   // 5809\n        var type = \"linear\",                                                                                           // 5810\n            id = element.id + gradient,                                                                                // 5811\n            fx = .5, fy = .5,                                                                                          // 5812\n            o = element.node,                                                                                          // 5813\n            SVG = element.paper,                                                                                       // 5814\n            s = o.style,                                                                                               // 5815\n            el = R._g.doc.getElementById(id);                                                                          // 5816\n        if (!el) {                                                                                                     // 5817\n            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {                            // 5818\n                type = \"radial\";                                                                                       // 5819\n                if (_fx && _fy) {                                                                                      // 5820\n                    fx = toFloat(_fx);                                                                                 // 5821\n                    fy = toFloat(_fy);                                                                                 // 5822\n                    var dir = ((fy > .5) * 2 - 1);                                                                     // 5823\n                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&                                                         // 5824\n                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&                                          // 5825\n                        fy != .5 &&                                                                                    // 5826\n                        (fy = fy.toFixed(5) - 1e-5 * dir);                                                             // 5827\n                }                                                                                                      // 5828\n                return E;                                                                                              // 5829\n            });                                                                                                        // 5830\n            gradient = gradient.split(/\\s*\\-\\s*/);                                                                     // 5831\n            if (type == \"linear\") {                                                                                    // 5832\n                var angle = gradient.shift();                                                                          // 5833\n                angle = -toFloat(angle);                                                                               // 5834\n                if (isNaN(angle)) {                                                                                    // 5835\n                    return null;                                                                                       // 5836\n                }                                                                                                      // 5837\n                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],                                   // 5838\n                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);                                             // 5839\n                vector[2] *= max;                                                                                      // 5840\n                vector[3] *= max;                                                                                      // 5841\n                if (vector[2] < 0) {                                                                                   // 5842\n                    vector[0] = -vector[2];                                                                            // 5843\n                    vector[2] = 0;                                                                                     // 5844\n                }                                                                                                      // 5845\n                if (vector[3] < 0) {                                                                                   // 5846\n                    vector[1] = -vector[3];                                                                            // 5847\n                    vector[3] = 0;                                                                                     // 5848\n                }                                                                                                      // 5849\n            }                                                                                                          // 5850\n            var dots = R._parseDots(gradient);                                                                         // 5851\n            if (!dots) {                                                                                               // 5852\n                return null;                                                                                           // 5853\n            }                                                                                                          // 5854\n            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");                                                                   // 5855\n                                                                                                                       // 5856\n            if (element.gradient && id != element.gradient.id) {                                                       // 5857\n                SVG.defs.removeChild(element.gradient);                                                                // 5858\n                delete element.gradient;                                                                               // 5859\n            }                                                                                                          // 5860\n                                                                                                                       // 5861\n            if (!element.gradient) {                                                                                   // 5862\n                el = $(type + \"Gradient\", {id: id});                                                                   // 5863\n                element.gradient = el;                                                                                 // 5864\n                $(el, type == \"radial\" ? {                                                                             // 5865\n                    fx: fx,                                                                                            // 5866\n                    fy: fy                                                                                             // 5867\n                } : {                                                                                                  // 5868\n                    x1: vector[0],                                                                                     // 5869\n                    y1: vector[1],                                                                                     // 5870\n                    x2: vector[2],                                                                                     // 5871\n                    y2: vector[3],                                                                                     // 5872\n                    gradientTransform: element.matrix.invert()                                                         // 5873\n                });                                                                                                    // 5874\n                SVG.defs.appendChild(el);                                                                              // 5875\n                for (var i = 0, ii = dots.length; i < ii; i++) {                                                       // 5876\n                    el.appendChild($(\"stop\", {                                                                         // 5877\n                        offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",                                   // 5878\n                        \"stop-color\": dots[i].color || \"#fff\"                                                          // 5879\n                    }));                                                                                               // 5880\n                }                                                                                                      // 5881\n            }                                                                                                          // 5882\n        }                                                                                                              // 5883\n        $(o, {                                                                                                         // 5884\n            fill: \"url(#\" + id + \")\",                                                                                  // 5885\n            opacity: 1,                                                                                                // 5886\n            \"fill-opacity\": 1                                                                                          // 5887\n        });                                                                                                            // 5888\n        s.fill = E;                                                                                                    // 5889\n        s.opacity = 1;                                                                                                 // 5890\n        s.fillOpacity = 1;                                                                                             // 5891\n        return 1;                                                                                                      // 5892\n    },                                                                                                                 // 5893\n    updatePosition = function (o) {                                                                                    // 5894\n        var bbox = o.getBBox(1);                                                                                       // 5895\n        $(o.pattern, {patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"});             // 5896\n    },                                                                                                                 // 5897\n    addArrow = function (o, value, isEnd) {                                                                            // 5898\n        if (o.type == \"path\") {                                                                                        // 5899\n            var values = Str(value).toLowerCase().split(\"-\"),                                                          // 5900\n                p = o.paper,                                                                                           // 5901\n                se = isEnd ? \"end\" : \"start\",                                                                          // 5902\n                node = o.node,                                                                                         // 5903\n                attrs = o.attrs,                                                                                       // 5904\n                stroke = attrs[\"stroke-width\"],                                                                        // 5905\n                i = values.length,                                                                                     // 5906\n                type = \"classic\",                                                                                      // 5907\n                from,                                                                                                  // 5908\n                to,                                                                                                    // 5909\n                dx,                                                                                                    // 5910\n                refX,                                                                                                  // 5911\n                attr,                                                                                                  // 5912\n                w = 3,                                                                                                 // 5913\n                h = 3,                                                                                                 // 5914\n                t = 5;                                                                                                 // 5915\n            while (i--) {                                                                                              // 5916\n                switch (values[i]) {                                                                                   // 5917\n                    case \"block\":                                                                                      // 5918\n                    case \"classic\":                                                                                    // 5919\n                    case \"oval\":                                                                                       // 5920\n                    case \"diamond\":                                                                                    // 5921\n                    case \"open\":                                                                                       // 5922\n                    case \"none\":                                                                                       // 5923\n                        type = values[i];                                                                              // 5924\n                        break;                                                                                         // 5925\n                    case \"wide\": h = 5; break;                                                                         // 5926\n                    case \"narrow\": h = 2; break;                                                                       // 5927\n                    case \"long\": w = 5; break;                                                                         // 5928\n                    case \"short\": w = 2; break;                                                                        // 5929\n                }                                                                                                      // 5930\n            }                                                                                                          // 5931\n            if (type == \"open\") {                                                                                      // 5932\n                w += 2;                                                                                                // 5933\n                h += 2;                                                                                                // 5934\n                t += 2;                                                                                                // 5935\n                dx = 1;                                                                                                // 5936\n                refX = isEnd ? 4 : 1;                                                                                  // 5937\n                attr = {                                                                                               // 5938\n                    fill: \"none\",                                                                                      // 5939\n                    stroke: attrs.stroke                                                                               // 5940\n                };                                                                                                     // 5941\n            } else {                                                                                                   // 5942\n                refX = dx = w / 2;                                                                                     // 5943\n                attr = {                                                                                               // 5944\n                    fill: attrs.stroke,                                                                                // 5945\n                    stroke: \"none\"                                                                                     // 5946\n                };                                                                                                     // 5947\n            }                                                                                                          // 5948\n            if (o._.arrows) {                                                                                          // 5949\n                if (isEnd) {                                                                                           // 5950\n                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;                                         // 5951\n                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;                                     // 5952\n                } else {                                                                                               // 5953\n                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;                                     // 5954\n                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;                                 // 5955\n                }                                                                                                      // 5956\n            } else {                                                                                                   // 5957\n                o._.arrows = {};                                                                                       // 5958\n            }                                                                                                          // 5959\n            if (type != \"none\") {                                                                                      // 5960\n                var pathId = \"raphael-marker-\" + type,                                                                 // 5961\n                    markerId = \"raphael-marker-\" + se + type + w + h;                                                  // 5962\n                if (!R._g.doc.getElementById(pathId)) {                                                                // 5963\n                    p.defs.appendChild($($(\"path\"), {                                                                  // 5964\n                        \"stroke-linecap\": \"round\",                                                                     // 5965\n                        d: markers[type],                                                                              // 5966\n                        id: pathId                                                                                     // 5967\n                    }));                                                                                               // 5968\n                    markerCounter[pathId] = 1;                                                                         // 5969\n                } else {                                                                                               // 5970\n                    markerCounter[pathId]++;                                                                           // 5971\n                }                                                                                                      // 5972\n                var marker = R._g.doc.getElementById(markerId),                                                        // 5973\n                    use;                                                                                               // 5974\n                if (!marker) {                                                                                         // 5975\n                    marker = $($(\"marker\"), {                                                                          // 5976\n                        id: markerId,                                                                                  // 5977\n                        markerHeight: h,                                                                               // 5978\n                        markerWidth: w,                                                                                // 5979\n                        orient: \"auto\",                                                                                // 5980\n                        refX: refX,                                                                                    // 5981\n                        refY: h / 2                                                                                    // 5982\n                    });                                                                                                // 5983\n                    use = $($(\"use\"), {                                                                                // 5984\n                        \"xlink:href\": \"#\" + pathId,                                                                    // 5985\n                        transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n                        \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)                                         // 5987\n                    });                                                                                                // 5988\n                    marker.appendChild(use);                                                                           // 5989\n                    p.defs.appendChild(marker);                                                                        // 5990\n                    markerCounter[markerId] = 1;                                                                       // 5991\n                } else {                                                                                               // 5992\n                    markerCounter[markerId]++;                                                                         // 5993\n                    use = marker.getElementsByTagName(\"use\")[0];                                                       // 5994\n                }                                                                                                      // 5995\n                $(use, attr);                                                                                          // 5996\n                var delta = dx * (type != \"diamond\" && type != \"oval\");                                                // 5997\n                if (isEnd) {                                                                                           // 5998\n                    from = o._.arrows.startdx * stroke || 0;                                                           // 5999\n                    to = R.getTotalLength(attrs.path) - delta * stroke;                                                // 6000\n                } else {                                                                                               // 6001\n                    from = delta * stroke;                                                                             // 6002\n                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);                              // 6003\n                }                                                                                                      // 6004\n                attr = {};                                                                                             // 6005\n                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";                                                       // 6006\n                if (to || from) {                                                                                      // 6007\n                    attr.d = R.getSubpath(attrs.path, from, to);                                                       // 6008\n                }                                                                                                      // 6009\n                $(node, attr);                                                                                         // 6010\n                o._.arrows[se + \"Path\"] = pathId;                                                                      // 6011\n                o._.arrows[se + \"Marker\"] = markerId;                                                                  // 6012\n                o._.arrows[se + \"dx\"] = delta;                                                                         // 6013\n                o._.arrows[se + \"Type\"] = type;                                                                        // 6014\n                o._.arrows[se + \"String\"] = value;                                                                     // 6015\n            } else {                                                                                                   // 6016\n                if (isEnd) {                                                                                           // 6017\n                    from = o._.arrows.startdx * stroke || 0;                                                           // 6018\n                    to = R.getTotalLength(attrs.path) - from;                                                          // 6019\n                } else {                                                                                               // 6020\n                    from = 0;                                                                                          // 6021\n                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);                              // 6022\n                }                                                                                                      // 6023\n                o._.arrows[se + \"Path\"] && $(node, {d: R.getSubpath(attrs.path, from, to)});                           // 6024\n                delete o._.arrows[se + \"Path\"];                                                                        // 6025\n                delete o._.arrows[se + \"Marker\"];                                                                      // 6026\n                delete o._.arrows[se + \"dx\"];                                                                          // 6027\n                delete o._.arrows[se + \"Type\"];                                                                        // 6028\n                delete o._.arrows[se + \"String\"];                                                                      // 6029\n            }                                                                                                          // 6030\n            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {                        // 6031\n                var item = R._g.doc.getElementById(attr);                                                              // 6032\n                item && item.parentNode.removeChild(item);                                                             // 6033\n            }                                                                                                          // 6034\n        }                                                                                                              // 6035\n    },                                                                                                                 // 6036\n    dasharray = {                                                                                                      // 6037\n        \"\": [0],                                                                                                       // 6038\n        \"none\": [0],                                                                                                   // 6039\n        \"-\": [3, 1],                                                                                                   // 6040\n        \".\": [1, 1],                                                                                                   // 6041\n        \"-.\": [3, 1, 1, 1],                                                                                            // 6042\n        \"-..\": [3, 1, 1, 1, 1, 1],                                                                                     // 6043\n        \". \": [1, 3],                                                                                                  // 6044\n        \"- \": [4, 3],                                                                                                  // 6045\n        \"--\": [8, 3],                                                                                                  // 6046\n        \"- .\": [4, 3, 1, 3],                                                                                           // 6047\n        \"--.\": [8, 3, 1, 3],                                                                                           // 6048\n        \"--..\": [8, 3, 1, 3, 1, 3]                                                                                     // 6049\n    },                                                                                                                 // 6050\n    addDashes = function (o, value, params) {                                                                          // 6051\n        value = dasharray[Str(value).toLowerCase()];                                                                   // 6052\n        if (value) {                                                                                                   // 6053\n            var width = o.attrs[\"stroke-width\"] || \"1\",                                                                // 6054\n                butt = {round: width, square: width, butt: 0}[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n                dashes = [],                                                                                           // 6056\n                i = value.length;                                                                                      // 6057\n            while (i--) {                                                                                              // 6058\n                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;                                              // 6059\n            }                                                                                                          // 6060\n            $(o.node, {\"stroke-dasharray\": dashes.join(\",\")});                                                         // 6061\n        }                                                                                                              // 6062\n    },                                                                                                                 // 6063\n    setFillAndStroke = function (o, params) {                                                                          // 6064\n        var node = o.node,                                                                                             // 6065\n            attrs = o.attrs,                                                                                           // 6066\n            vis = node.style.visibility;                                                                               // 6067\n        node.style.visibility = \"hidden\";                                                                              // 6068\n        for (var att in params) {                                                                                      // 6069\n            if (params[has](att)) {                                                                                    // 6070\n                if (!R._availableAttrs[has](att)) {                                                                    // 6071\n                    continue;                                                                                          // 6072\n                }                                                                                                      // 6073\n                var value = params[att];                                                                               // 6074\n                attrs[att] = value;                                                                                    // 6075\n                switch (att) {                                                                                         // 6076\n                    case \"blur\":                                                                                       // 6077\n                        o.blur(value);                                                                                 // 6078\n                        break;                                                                                         // 6079\n                    case \"title\":                                                                                      // 6080\n                        var title = node.getElementsByTagName(\"title\");                                                // 6081\n                                                                                                                       // 6082\n                        // Use the existing <title>.                                                                   // 6083\n                        if (title.length && (title = title[0])) {                                                      // 6084\n                          title.firstChild.nodeValue = value;                                                          // 6085\n                        } else {                                                                                       // 6086\n                          title = $(\"title\");                                                                          // 6087\n                          var val = R._g.doc.createTextNode(value);                                                    // 6088\n                          title.appendChild(val);                                                                      // 6089\n                          node.appendChild(title);                                                                     // 6090\n                        }                                                                                              // 6091\n                        break;                                                                                         // 6092\n                    case \"href\":                                                                                       // 6093\n                    case \"target\":                                                                                     // 6094\n                        var pn = node.parentNode;                                                                      // 6095\n                        if (pn.tagName.toLowerCase() != \"a\") {                                                         // 6096\n                            var hl = $(\"a\");                                                                           // 6097\n                            pn.insertBefore(hl, node);                                                                 // 6098\n                            hl.appendChild(node);                                                                      // 6099\n                            pn = hl;                                                                                   // 6100\n                        }                                                                                              // 6101\n                        if (att == \"target\") {                                                                         // 6102\n                            pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);                        // 6103\n                        } else {                                                                                       // 6104\n                            pn.setAttributeNS(xlink, att, value);                                                      // 6105\n                        }                                                                                              // 6106\n                        break;                                                                                         // 6107\n                    case \"cursor\":                                                                                     // 6108\n                        node.style.cursor = value;                                                                     // 6109\n                        break;                                                                                         // 6110\n                    case \"transform\":                                                                                  // 6111\n                        o.transform(value);                                                                            // 6112\n                        break;                                                                                         // 6113\n                    case \"arrow-start\":                                                                                // 6114\n                        addArrow(o, value);                                                                            // 6115\n                        break;                                                                                         // 6116\n                    case \"arrow-end\":                                                                                  // 6117\n                        addArrow(o, value, 1);                                                                         // 6118\n                        break;                                                                                         // 6119\n                    case \"clip-rect\":                                                                                  // 6120\n                        var rect = Str(value).split(separator);                                                        // 6121\n                        if (rect.length == 4) {                                                                        // 6122\n                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);                     // 6123\n                            var el = $(\"clipPath\"),                                                                    // 6124\n                                rc = $(\"rect\");                                                                        // 6125\n                            el.id = R.createUUID();                                                                    // 6126\n                            $(rc, {                                                                                    // 6127\n                                x: rect[0],                                                                            // 6128\n                                y: rect[1],                                                                            // 6129\n                                width: rect[2],                                                                        // 6130\n                                height: rect[3]                                                                        // 6131\n                            });                                                                                        // 6132\n                            el.appendChild(rc);                                                                        // 6133\n                            o.paper.defs.appendChild(el);                                                              // 6134\n                            $(node, {\"clip-path\": \"url(#\" + el.id + \")\"});                                             // 6135\n                            o.clip = rc;                                                                               // 6136\n                        }                                                                                              // 6137\n                        if (!value) {                                                                                  // 6138\n                            var path = node.getAttribute(\"clip-path\");                                                 // 6139\n                            if (path) {                                                                                // 6140\n                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));                 // 6141\n                                clip && clip.parentNode.removeChild(clip);                                             // 6142\n                                $(node, {\"clip-path\": E});                                                             // 6143\n                                delete o.clip;                                                                         // 6144\n                            }                                                                                          // 6145\n                        }                                                                                              // 6146\n                    break;                                                                                             // 6147\n                    case \"path\":                                                                                       // 6148\n                        if (o.type == \"path\") {                                                                        // 6149\n                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"});                      // 6150\n                            o._.dirty = 1;                                                                             // 6151\n                            if (o._.arrows) {                                                                          // 6152\n                                \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);                    // 6153\n                                \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);                     // 6154\n                            }                                                                                          // 6155\n                        }                                                                                              // 6156\n                        break;                                                                                         // 6157\n                    case \"width\":                                                                                      // 6158\n                        node.setAttribute(att, value);                                                                 // 6159\n                        o._.dirty = 1;                                                                                 // 6160\n                        if (attrs.fx) {                                                                                // 6161\n                            att = \"x\";                                                                                 // 6162\n                            value = attrs.x;                                                                           // 6163\n                        } else {                                                                                       // 6164\n                            break;                                                                                     // 6165\n                        }                                                                                              // 6166\n                    case \"x\":                                                                                          // 6167\n                        if (attrs.fx) {                                                                                // 6168\n                            value = -attrs.x - (attrs.width || 0);                                                     // 6169\n                        }                                                                                              // 6170\n                    case \"rx\":                                                                                         // 6171\n                        if (att == \"rx\" && o.type == \"rect\") {                                                         // 6172\n                            break;                                                                                     // 6173\n                        }                                                                                              // 6174\n                    case \"cx\":                                                                                         // 6175\n                        node.setAttribute(att, value);                                                                 // 6176\n                        o.pattern && updatePosition(o);                                                                // 6177\n                        o._.dirty = 1;                                                                                 // 6178\n                        break;                                                                                         // 6179\n                    case \"height\":                                                                                     // 6180\n                        node.setAttribute(att, value);                                                                 // 6181\n                        o._.dirty = 1;                                                                                 // 6182\n                        if (attrs.fy) {                                                                                // 6183\n                            att = \"y\";                                                                                 // 6184\n                            value = attrs.y;                                                                           // 6185\n                        } else {                                                                                       // 6186\n                            break;                                                                                     // 6187\n                        }                                                                                              // 6188\n                    case \"y\":                                                                                          // 6189\n                        if (attrs.fy) {                                                                                // 6190\n                            value = -attrs.y - (attrs.height || 0);                                                    // 6191\n                        }                                                                                              // 6192\n                    case \"ry\":                                                                                         // 6193\n                        if (att == \"ry\" && o.type == \"rect\") {                                                         // 6194\n                            break;                                                                                     // 6195\n                        }                                                                                              // 6196\n                    case \"cy\":                                                                                         // 6197\n                        node.setAttribute(att, value);                                                                 // 6198\n                        o.pattern && updatePosition(o);                                                                // 6199\n                        o._.dirty = 1;                                                                                 // 6200\n                        break;                                                                                         // 6201\n                    case \"r\":                                                                                          // 6202\n                        if (o.type == \"rect\") {                                                                        // 6203\n                            $(node, {rx: value, ry: value});                                                           // 6204\n                        } else {                                                                                       // 6205\n                            node.setAttribute(att, value);                                                             // 6206\n                        }                                                                                              // 6207\n                        o._.dirty = 1;                                                                                 // 6208\n                        break;                                                                                         // 6209\n                    case \"src\":                                                                                        // 6210\n                        if (o.type == \"image\") {                                                                       // 6211\n                            node.setAttributeNS(xlink, \"href\", value);                                                 // 6212\n                        }                                                                                              // 6213\n                        break;                                                                                         // 6214\n                    case \"stroke-width\":                                                                               // 6215\n                        if (o._.sx != 1 || o._.sy != 1) {                                                              // 6216\n                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;                                              // 6217\n                        }                                                                                              // 6218\n                        if (o.paper._vbSize) {                                                                         // 6219\n                            value *= o.paper._vbSize;                                                                  // 6220\n                        }                                                                                              // 6221\n                        node.setAttribute(att, value);                                                                 // 6222\n                        if (attrs[\"stroke-dasharray\"]) {                                                               // 6223\n                            addDashes(o, attrs[\"stroke-dasharray\"], params);                                           // 6224\n                        }                                                                                              // 6225\n                        if (o._.arrows) {                                                                              // 6226\n                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);                        // 6227\n                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);                         // 6228\n                        }                                                                                              // 6229\n                        break;                                                                                         // 6230\n                    case \"stroke-dasharray\":                                                                           // 6231\n                        addDashes(o, value, params);                                                                   // 6232\n                        break;                                                                                         // 6233\n                    case \"fill\":                                                                                       // 6234\n                        var isURL = Str(value).match(R._ISURL);                                                        // 6235\n                        if (isURL) {                                                                                   // 6236\n                            el = $(\"pattern\");                                                                         // 6237\n                            var ig = $(\"image\");                                                                       // 6238\n                            el.id = R.createUUID();                                                                    // 6239\n                            $(el, {x: 0, y: 0, patternUnits: \"userSpaceOnUse\", height: 1, width: 1});                  // 6240\n                            $(ig, {x: 0, y: 0, \"xlink:href\": isURL[1]});                                               // 6241\n                            el.appendChild(ig);                                                                        // 6242\n                                                                                                                       // 6243\n                            (function (el) {                                                                           // 6244\n                                R._preload(isURL[1], function () {                                                     // 6245\n                                    var w = this.offsetWidth,                                                          // 6246\n                                        h = this.offsetHeight;                                                         // 6247\n                                    $(el, {width: w, height: h});                                                      // 6248\n                                    $(ig, {width: w, height: h});                                                      // 6249\n                                    o.paper.safari();                                                                  // 6250\n                                });                                                                                    // 6251\n                            })(el);                                                                                    // 6252\n                            o.paper.defs.appendChild(el);                                                              // 6253\n                            $(node, {fill: \"url(#\" + el.id + \")\"});                                                    // 6254\n                            o.pattern = el;                                                                            // 6255\n                            o.pattern && updatePosition(o);                                                            // 6256\n                            break;                                                                                     // 6257\n                        }                                                                                              // 6258\n                        var clr = R.getRGB(value);                                                                     // 6259\n                        if (!clr.error) {                                                                              // 6260\n                            delete params.gradient;                                                                    // 6261\n                            delete attrs.gradient;                                                                     // 6262\n                            !R.is(attrs.opacity, \"undefined\") &&                                                       // 6263\n                                R.is(params.opacity, \"undefined\") &&                                                   // 6264\n                                $(node, {opacity: attrs.opacity});                                                     // 6265\n                            !R.is(attrs[\"fill-opacity\"], \"undefined\") &&                                               // 6266\n                                R.is(params[\"fill-opacity\"], \"undefined\") &&                                           // 6267\n                                $(node, {\"fill-opacity\": attrs[\"fill-opacity\"]});                                      // 6268\n                        } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n                            if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {                                       // 6270\n                                var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n                                if (gradient) {                                                                        // 6272\n                                    var stops = gradient.getElementsByTagName(\"stop\");                                 // 6273\n                                    $(stops[stops.length - 1], {\"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)});\n                                }                                                                                      // 6275\n                            }                                                                                          // 6276\n                            attrs.gradient = value;                                                                    // 6277\n                            attrs.fill = \"none\";                                                                       // 6278\n                            break;                                                                                     // 6279\n                        }                                                                                              // 6280\n                        clr[has](\"opacity\") && $(node, {\"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n                    case \"stroke\":                                                                                     // 6282\n                        clr = R.getRGB(value);                                                                         // 6283\n                        node.setAttribute(att, clr.hex);                                                               // 6284\n                        att == \"stroke\" && clr[has](\"opacity\") && $(node, {\"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n                        if (att == \"stroke\" && o._.arrows) {                                                           // 6286\n                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);                        // 6287\n                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);                         // 6288\n                        }                                                                                              // 6289\n                        break;                                                                                         // 6290\n                    case \"gradient\":                                                                                   // 6291\n                        (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n                        break;                                                                                         // 6293\n                    case \"opacity\":                                                                                    // 6294\n                        if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {                                         // 6295\n                            $(node, {\"stroke-opacity\": value > 1 ? value / 100 : value});                              // 6296\n                        }                                                                                              // 6297\n                        // fall                                                                                        // 6298\n                    case \"fill-opacity\":                                                                               // 6299\n                        if (attrs.gradient) {                                                                          // 6300\n                            gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));  // 6301\n                            if (gradient) {                                                                            // 6302\n                                stops = gradient.getElementsByTagName(\"stop\");                                         // 6303\n                                $(stops[stops.length - 1], {\"stop-opacity\": value});                                   // 6304\n                            }                                                                                          // 6305\n                            break;                                                                                     // 6306\n                        }                                                                                              // 6307\n                    default:                                                                                           // 6308\n                        att == \"font-size\" && (value = toInt(value, 10) + \"px\");                                       // 6309\n                        var cssrule = att.replace(/(\\-.)/g, function (w) {                                             // 6310\n                            return w.substring(1).toUpperCase();                                                       // 6311\n                        });                                                                                            // 6312\n                        node.style[cssrule] = value;                                                                   // 6313\n                        o._.dirty = 1;                                                                                 // 6314\n                        node.setAttribute(att, value);                                                                 // 6315\n                        break;                                                                                         // 6316\n                }                                                                                                      // 6317\n            }                                                                                                          // 6318\n        }                                                                                                              // 6319\n                                                                                                                       // 6320\n        tuneText(o, params);                                                                                           // 6321\n        node.style.visibility = vis;                                                                                   // 6322\n    },                                                                                                                 // 6323\n    leading = 1.2,                                                                                                     // 6324\n    tuneText = function (el, params) {                                                                                 // 6325\n        if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n            return;                                                                                                    // 6327\n        }                                                                                                              // 6328\n        var a = el.attrs,                                                                                              // 6329\n            node = el.node,                                                                                            // 6330\n            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n                                                                                                                       // 6332\n        if (params[has](\"text\")) {                                                                                     // 6333\n            a.text = params.text;                                                                                      // 6334\n            while (node.firstChild) {                                                                                  // 6335\n                node.removeChild(node.firstChild);                                                                     // 6336\n            }                                                                                                          // 6337\n            var texts = Str(params.text).split(\"\\n\"),                                                                  // 6338\n                tspans = [],                                                                                           // 6339\n                tspan;                                                                                                 // 6340\n            for (var i = 0, ii = texts.length; i < ii; i++) {                                                          // 6341\n                tspan = $(\"tspan\");                                                                                    // 6342\n                i && $(tspan, {dy: fontSize * leading, x: a.x});                                                       // 6343\n                tspan.appendChild(R._g.doc.createTextNode(texts[i]));                                                  // 6344\n                node.appendChild(tspan);                                                                               // 6345\n                tspans[i] = tspan;                                                                                     // 6346\n            }                                                                                                          // 6347\n        } else {                                                                                                       // 6348\n            tspans = node.getElementsByTagName(\"tspan\");                                                               // 6349\n            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {                                                      // 6350\n                $(tspans[i], {dy: fontSize * leading, x: a.x});                                                        // 6351\n            } else {                                                                                                   // 6352\n                $(tspans[0], {dy: 0});                                                                                 // 6353\n            }                                                                                                          // 6354\n        }                                                                                                              // 6355\n        $(node, {x: a.x, y: a.y});                                                                                     // 6356\n        el._.dirty = 1;                                                                                                // 6357\n        var bb = el._getBBox(),                                                                                        // 6358\n            dif = a.y - (bb.y + bb.height / 2);                                                                        // 6359\n        dif && R.is(dif, \"finite\") && $(tspans[0], {dy: dif});                                                         // 6360\n    },                                                                                                                 // 6361\n    Element = function (node, svg) {                                                                                   // 6362\n        var X = 0,                                                                                                     // 6363\n            Y = 0;                                                                                                     // 6364\n        /*\\\n         * Element.node                                                                                                // 6366\n         [ property (object) ]                                                                                         // 6367\n         **                                                                                                            // 6368\n         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.              // 6369\n         **                                                                                                            // 6370\n         * Note: Don’t mess with it.                                                                                   // 6371\n         > Usage                                                                                                       // 6372\n         | // draw a circle at coordinate 10,10 with radius of 10                                                      // 6373\n         | var c = paper.circle(10, 10, 10);                                                                           // 6374\n         | c.node.onclick = function () {                                                                              // 6375\n         |     c.attr(\"fill\", \"red\");                                                                                  // 6376\n         | };                                                                                                          // 6377\n        \\*/                                                                                                            // 6378\n        this[0] = this.node = node;                                                                                    // 6379\n        /*\\\n         * Element.raphael                                                                                             // 6381\n         [ property (object) ]                                                                                         // 6382\n         **                                                                                                            // 6383\n         * Internal reference to @Raphael object. In case it is not available.                                         // 6384\n         > Usage                                                                                                       // 6385\n         | Raphael.el.red = function () {                                                                              // 6386\n         |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));                                                // 6387\n         |     hsb.h = 1;                                                                                              // 6388\n         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});                                                 // 6389\n         | }                                                                                                           // 6390\n        \\*/                                                                                                            // 6391\n        node.raphael = true;                                                                                           // 6392\n        /*\\\n         * Element.id                                                                                                  // 6394\n         [ property (number) ]                                                                                         // 6395\n         **                                                                                                            // 6396\n         * Unique id of the element. Especially usesful when you want to listen to events of the element,              // 6397\n         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.     // 6398\n        \\*/                                                                                                            // 6399\n        this.id = R._oid++;                                                                                            // 6400\n        node.raphaelid = this.id;                                                                                      // 6401\n        this.matrix = R.matrix();                                                                                      // 6402\n        this.realPath = null;                                                                                          // 6403\n        /*\\\n         * Element.paper                                                                                               // 6405\n         [ property (object) ]                                                                                         // 6406\n         **                                                                                                            // 6407\n         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.         // 6408\n         > Usage                                                                                                       // 6409\n         | Raphael.el.cross = function () {                                                                            // 6410\n         |     this.attr({fill: \"red\"});                                                                               // 6411\n         |     this.paper.path(\"M10,10L50,50M50,10L10,50\")                                                             // 6412\n         |         .attr({stroke: \"red\"});                                                                             // 6413\n         | }                                                                                                           // 6414\n        \\*/                                                                                                            // 6415\n        this.paper = svg;                                                                                              // 6416\n        this.attrs = this.attrs || {};                                                                                 // 6417\n        this._ = {                                                                                                     // 6418\n            transform: [],                                                                                             // 6419\n            sx: 1,                                                                                                     // 6420\n            sy: 1,                                                                                                     // 6421\n            deg: 0,                                                                                                    // 6422\n            dx: 0,                                                                                                     // 6423\n            dy: 0,                                                                                                     // 6424\n            dirty: 1                                                                                                   // 6425\n        };                                                                                                             // 6426\n        !svg.bottom && (svg.bottom = this);                                                                            // 6427\n        /*\\\n         * Element.prev                                                                                                // 6429\n         [ property (object) ]                                                                                         // 6430\n         **                                                                                                            // 6431\n         * Reference to the previous element in the hierarchy.                                                         // 6432\n        \\*/                                                                                                            // 6433\n        this.prev = svg.top;                                                                                           // 6434\n        svg.top && (svg.top.next = this);                                                                              // 6435\n        svg.top = this;                                                                                                // 6436\n        /*\\\n         * Element.next                                                                                                // 6438\n         [ property (object) ]                                                                                         // 6439\n         **                                                                                                            // 6440\n         * Reference to the next element in the hierarchy.                                                             // 6441\n        \\*/                                                                                                            // 6442\n        this.next = null;                                                                                              // 6443\n    },                                                                                                                 // 6444\n    elproto = R.el;                                                                                                    // 6445\n                                                                                                                       // 6446\n    Element.prototype = elproto;                                                                                       // 6447\n    elproto.constructor = Element;                                                                                     // 6448\n                                                                                                                       // 6449\n    R._engine.path = function (pathString, SVG) {                                                                      // 6450\n        var el = $(\"path\");                                                                                            // 6451\n        SVG.canvas && SVG.canvas.appendChild(el);                                                                      // 6452\n        var p = new Element(el, SVG);                                                                                  // 6453\n        p.type = \"path\";                                                                                               // 6454\n        setFillAndStroke(p, {                                                                                          // 6455\n            fill: \"none\",                                                                                              // 6456\n            stroke: \"#000\",                                                                                            // 6457\n            path: pathString                                                                                           // 6458\n        });                                                                                                            // 6459\n        return p;                                                                                                      // 6460\n    };                                                                                                                 // 6461\n    /*\\\n     * Element.rotate                                                                                                  // 6463\n     [ method ]                                                                                                        // 6464\n     **                                                                                                                // 6465\n     * Deprecated! Use @Element.transform instead.                                                                     // 6466\n     * Adds rotation by given angle around given point to the list of                                                  // 6467\n     * transformations of the element.                                                                                 // 6468\n     > Parameters                                                                                                      // 6469\n     - deg (number) angle in degrees                                                                                   // 6470\n     - cx (number) #optional x coordinate of the centre of rotation                                                    // 6471\n     - cy (number) #optional y coordinate of the centre of rotation                                                    // 6472\n     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.                                 // 6473\n     = (object) @Element                                                                                               // 6474\n    \\*/                                                                                                                // 6475\n    elproto.rotate = function (deg, cx, cy) {                                                                          // 6476\n        if (this.removed) {                                                                                            // 6477\n            return this;                                                                                               // 6478\n        }                                                                                                              // 6479\n        deg = Str(deg).split(separator);                                                                               // 6480\n        if (deg.length - 1) {                                                                                          // 6481\n            cx = toFloat(deg[1]);                                                                                      // 6482\n            cy = toFloat(deg[2]);                                                                                      // 6483\n        }                                                                                                              // 6484\n        deg = toFloat(deg[0]);                                                                                         // 6485\n        (cy == null) && (cx = cy);                                                                                     // 6486\n        if (cx == null || cy == null) {                                                                                // 6487\n            var bbox = this.getBBox(1);                                                                                // 6488\n            cx = bbox.x + bbox.width / 2;                                                                              // 6489\n            cy = bbox.y + bbox.height / 2;                                                                             // 6490\n        }                                                                                                              // 6491\n        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));                                                 // 6492\n        return this;                                                                                                   // 6493\n    };                                                                                                                 // 6494\n    /*\\\n     * Element.scale                                                                                                   // 6496\n     [ method ]                                                                                                        // 6497\n     **                                                                                                                // 6498\n     * Deprecated! Use @Element.transform instead.                                                                     // 6499\n     * Adds scale by given amount relative to given point to the list of                                               // 6500\n     * transformations of the element.                                                                                 // 6501\n     > Parameters                                                                                                      // 6502\n     - sx (number) horisontal scale amount                                                                             // 6503\n     - sy (number) vertical scale amount                                                                               // 6504\n     - cx (number) #optional x coordinate of the centre of scale                                                       // 6505\n     - cy (number) #optional y coordinate of the centre of scale                                                       // 6506\n     * If cx & cy aren’t specified centre of the shape is used instead.                                                // 6507\n     = (object) @Element                                                                                               // 6508\n    \\*/                                                                                                                // 6509\n    elproto.scale = function (sx, sy, cx, cy) {                                                                        // 6510\n        if (this.removed) {                                                                                            // 6511\n            return this;                                                                                               // 6512\n        }                                                                                                              // 6513\n        sx = Str(sx).split(separator);                                                                                 // 6514\n        if (sx.length - 1) {                                                                                           // 6515\n            sy = toFloat(sx[1]);                                                                                       // 6516\n            cx = toFloat(sx[2]);                                                                                       // 6517\n            cy = toFloat(sx[3]);                                                                                       // 6518\n        }                                                                                                              // 6519\n        sx = toFloat(sx[0]);                                                                                           // 6520\n        (sy == null) && (sy = sx);                                                                                     // 6521\n        (cy == null) && (cx = cy);                                                                                     // 6522\n        if (cx == null || cy == null) {                                                                                // 6523\n            var bbox = this.getBBox(1);                                                                                // 6524\n        }                                                                                                              // 6525\n        cx = cx == null ? bbox.x + bbox.width / 2 : cx;                                                                // 6526\n        cy = cy == null ? bbox.y + bbox.height / 2 : cy;                                                               // 6527\n        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));                                              // 6528\n        return this;                                                                                                   // 6529\n    };                                                                                                                 // 6530\n    /*\\\n     * Element.translate                                                                                               // 6532\n     [ method ]                                                                                                        // 6533\n     **                                                                                                                // 6534\n     * Deprecated! Use @Element.transform instead.                                                                     // 6535\n     * Adds translation by given amount to the list of transformations of the element.                                 // 6536\n     > Parameters                                                                                                      // 6537\n     - dx (number) horisontal shift                                                                                    // 6538\n     - dy (number) vertical shift                                                                                      // 6539\n     = (object) @Element                                                                                               // 6540\n    \\*/                                                                                                                // 6541\n    elproto.translate = function (dx, dy) {                                                                            // 6542\n        if (this.removed) {                                                                                            // 6543\n            return this;                                                                                               // 6544\n        }                                                                                                              // 6545\n        dx = Str(dx).split(separator);                                                                                 // 6546\n        if (dx.length - 1) {                                                                                           // 6547\n            dy = toFloat(dx[1]);                                                                                       // 6548\n        }                                                                                                              // 6549\n        dx = toFloat(dx[0]) || 0;                                                                                      // 6550\n        dy = +dy || 0;                                                                                                 // 6551\n        this.transform(this._.transform.concat([[\"t\", dx, dy]]));                                                      // 6552\n        return this;                                                                                                   // 6553\n    };                                                                                                                 // 6554\n    /*\\\n     * Element.transform                                                                                               // 6556\n     [ method ]                                                                                                        // 6557\n     **                                                                                                                // 6558\n     * Adds transformation to the element which is separate to other attributes,                                       // 6559\n     * i.e. translation doesn’t change `x` or `y` of the rectange. The format                                          // 6560\n     * of transformation string is similar to the path string syntax:                                                  // 6561\n     | \"t100,100r30,100,100s2,2,100,100r45s1.5\"                                                                        // 6562\n     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for          // 6563\n     * scale and `m` is for matrix.                                                                                    // 6564\n     *                                                                                                                 // 6565\n     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n     *                                                                                                                 // 6567\n     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n     * coordinates as optional parameters, the default is the centre point of the element.                             // 6570\n     * Matrix accepts six parameters.                                                                                  // 6571\n     > Usage                                                                                                           // 6572\n     | var el = paper.rect(10, 20, 300, 200);                                                                          // 6573\n     | // translate 100, 100, rotate 45°, translate -100, 0                                                            // 6574\n     | el.transform(\"t100,100r45t-100,0\");                                                                             // 6575\n     | // if you want you can append or prepend transformations                                                        // 6576\n     | el.transform(\"...t50,50\");                                                                                      // 6577\n     | el.transform(\"s2...\");                                                                                          // 6578\n     | // or even wrap                                                                                                 // 6579\n     | el.transform(\"t50,50...t-50-50\");                                                                               // 6580\n     | // to reset transformation call method with empty string                                                        // 6581\n     | el.transform(\"\");                                                                                               // 6582\n     | // to get current value call it without parameters                                                              // 6583\n     | console.log(el.transform());                                                                                    // 6584\n     > Parameters                                                                                                      // 6585\n     - tstr (string) #optional transformation string                                                                   // 6586\n     * If tstr isn’t specified                                                                                         // 6587\n     = (string) current transformation string                                                                          // 6588\n     * else                                                                                                            // 6589\n     = (object) @Element                                                                                               // 6590\n    \\*/                                                                                                                // 6591\n    elproto.transform = function (tstr) {                                                                              // 6592\n        var _ = this._;                                                                                                // 6593\n        if (tstr == null) {                                                                                            // 6594\n            return _.transform;                                                                                        // 6595\n        }                                                                                                              // 6596\n        R._extractTransform(this, tstr);                                                                               // 6597\n                                                                                                                       // 6598\n        this.clip && $(this.clip, {transform: this.matrix.invert()});                                                  // 6599\n        this.pattern && updatePosition(this);                                                                          // 6600\n        this.node && $(this.node, {transform: this.matrix});                                                           // 6601\n                                                                                                                       // 6602\n        if (_.sx != 1 || _.sy != 1) {                                                                                  // 6603\n            var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;                                 // 6604\n            this.attr({\"stroke-width\": sw});                                                                           // 6605\n        }                                                                                                              // 6606\n                                                                                                                       // 6607\n        return this;                                                                                                   // 6608\n    };                                                                                                                 // 6609\n    /*\\\n     * Element.hide                                                                                                    // 6611\n     [ method ]                                                                                                        // 6612\n     **                                                                                                                // 6613\n     * Makes element invisible. See @Element.show.                                                                     // 6614\n     = (object) @Element                                                                                               // 6615\n    \\*/                                                                                                                // 6616\n    elproto.hide = function () {                                                                                       // 6617\n        !this.removed && this.paper.safari(this.node.style.display = \"none\");                                          // 6618\n        return this;                                                                                                   // 6619\n    };                                                                                                                 // 6620\n    /*\\\n     * Element.show                                                                                                    // 6622\n     [ method ]                                                                                                        // 6623\n     **                                                                                                                // 6624\n     * Makes element visible. See @Element.hide.                                                                       // 6625\n     = (object) @Element                                                                                               // 6626\n    \\*/                                                                                                                // 6627\n    elproto.show = function () {                                                                                       // 6628\n        !this.removed && this.paper.safari(this.node.style.display = \"\");                                              // 6629\n        return this;                                                                                                   // 6630\n    };                                                                                                                 // 6631\n    /*\\\n     * Element.remove                                                                                                  // 6633\n     [ method ]                                                                                                        // 6634\n     **                                                                                                                // 6635\n     * Removes element from the paper.                                                                                 // 6636\n    \\*/                                                                                                                // 6637\n    elproto.remove = function () {                                                                                     // 6638\n        if (this.removed || !this.node.parentNode) {                                                                   // 6639\n            return;                                                                                                    // 6640\n        }                                                                                                              // 6641\n        var paper = this.paper;                                                                                        // 6642\n        paper.__set__ && paper.__set__.exclude(this);                                                                  // 6643\n        eve.unbind(\"raphael.*.*.\" + this.id);                                                                          // 6644\n        if (this.gradient) {                                                                                           // 6645\n            paper.defs.removeChild(this.gradient);                                                                     // 6646\n        }                                                                                                              // 6647\n        R._tear(this, paper);                                                                                          // 6648\n        if (this.node.parentNode.tagName.toLowerCase() == \"a\") {                                                       // 6649\n            this.node.parentNode.parentNode.removeChild(this.node.parentNode);                                         // 6650\n        } else {                                                                                                       // 6651\n            this.node.parentNode.removeChild(this.node);                                                               // 6652\n        }                                                                                                              // 6653\n        for (var i in this) {                                                                                          // 6654\n            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;                                      // 6655\n        }                                                                                                              // 6656\n        this.removed = true;                                                                                           // 6657\n    };                                                                                                                 // 6658\n    elproto._getBBox = function () {                                                                                   // 6659\n        if (this.node.style.display == \"none\") {                                                                       // 6660\n            this.show();                                                                                               // 6661\n            var hide = true;                                                                                           // 6662\n        }                                                                                                              // 6663\n        var bbox = {};                                                                                                 // 6664\n        try {                                                                                                          // 6665\n            bbox = this.node.getBBox();                                                                                // 6666\n        } catch(e) {                                                                                                   // 6667\n            // Firefox 3.0.x plays badly here                                                                          // 6668\n        } finally {                                                                                                    // 6669\n            bbox = bbox || {};                                                                                         // 6670\n        }                                                                                                              // 6671\n        hide && this.hide();                                                                                           // 6672\n        return bbox;                                                                                                   // 6673\n    };                                                                                                                 // 6674\n    /*\\\n     * Element.attr                                                                                                    // 6676\n     [ method ]                                                                                                        // 6677\n     **                                                                                                                // 6678\n     * Sets the attributes of the element.                                                                             // 6679\n     > Parameters                                                                                                      // 6680\n     - attrName (string) attribute’s name                                                                              // 6681\n     - value (string) value                                                                                            // 6682\n     * or                                                                                                              // 6683\n     - params (object) object of name/value pairs                                                                      // 6684\n     * or                                                                                                              // 6685\n     - attrName (string) attribute’s name                                                                              // 6686\n     * or                                                                                                              // 6687\n     - attrNames (array) in this case method returns array of current values for given attribute names                 // 6688\n     = (object) @Element if attrsName & value or params are passed in.                                                 // 6689\n     = (...) value of the attribute if only attrsName is passed in.                                                    // 6690\n     = (array) array of values of the attribute if attrsNames is passed in.                                            // 6691\n     = (object) object of attributes if nothing is passed in.                                                          // 6692\n     > Possible parameters                                                                                             // 6693\n     # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n     o clip-rect (string) comma or space separated values: x, y, width and height                                      // 6696\n     o cursor (string) CSS type of the cursor                                                                          // 6697\n     o cx (number) the x-axis coordinate of the center of the circle, or ellipse                                       // 6698\n     o cy (number) the y-axis coordinate of the center of the circle, or ellipse                                       // 6699\n     o fill (string) colour, gradient or image                                                                         // 6700\n     o fill-opacity (number)                                                                                           // 6701\n     o font (string)                                                                                                   // 6702\n     o font-family (string)                                                                                            // 6703\n     o font-size (number) font size in pixels                                                                          // 6704\n     o font-weight (string)                                                                                            // 6705\n     o height (number)                                                                                                 // 6706\n     o href (string) URL, if specified element behaves as hyperlink                                                    // 6707\n     o opacity (number)                                                                                                // 6708\n     o path (string) SVG path string format                                                                            // 6709\n     o r (number) radius of the circle, ellipse or rounded corner on the rect                                          // 6710\n     o rx (number) horisontal radius of the ellipse                                                                    // 6711\n     o ry (number) vertical radius of the ellipse                                                                      // 6712\n     o src (string) image URL, only works for @Element.image element                                                   // 6713\n     o stroke (string) stroke colour                                                                                   // 6714\n     o stroke-dasharray (string) [“”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]                                                       // 6716\n     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]                                                      // 6717\n     o stroke-miterlimit (number)                                                                                      // 6718\n     o stroke-opacity (number)                                                                                         // 6719\n     o stroke-width (number) stroke width in pixels, default is '1'                                                    // 6720\n     o target (string) used with href                                                                                  // 6721\n     o text (string) contents of the text element. Use `\\n` for multiline text                                         // 6722\n     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”                                    // 6723\n     o title (string) will create tooltip with a given text                                                            // 6724\n     o transform (string) see @Element.transform                                                                       // 6725\n     o width (number)                                                                                                  // 6726\n     o x (number)                                                                                                      // 6727\n     o y (number)                                                                                                      // 6728\n     > Gradients                                                                                                       // 6729\n     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°   // 6730\n     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.     // 6731\n     *                                                                                                                 // 6732\n     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –         // 6733\n     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point      // 6734\n     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n     > Path String                                                                                                     // 6736\n     # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n     > Colour Parsing                                                                                                  // 6738\n     # <ul>                                                                                                            // 6739\n     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>         // 6740\n     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>                      // 6741\n     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>                // 6742\n     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>    // 6744\n     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>                                                    // 6748\n     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>                                         // 6749\n     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>                                                    // 6751\n     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>                                         // 6752\n     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n     # </ul>                                                                                                           // 6754\n    \\*/                                                                                                                // 6755\n    elproto.attr = function (name, value) {                                                                            // 6756\n        if (this.removed) {                                                                                            // 6757\n            return this;                                                                                               // 6758\n        }                                                                                                              // 6759\n        if (name == null) {                                                                                            // 6760\n            var res = {};                                                                                              // 6761\n            for (var a in this.attrs) if (this.attrs[has](a)) {                                                        // 6762\n                res[a] = this.attrs[a];                                                                                // 6763\n            }                                                                                                          // 6764\n            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;                    // 6765\n            res.transform = this._.transform;                                                                          // 6766\n            return res;                                                                                                // 6767\n        }                                                                                                              // 6768\n        if (value == null && R.is(name, \"string\")) {                                                                   // 6769\n            if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {                                  // 6770\n                return this.attrs.gradient;                                                                            // 6771\n            }                                                                                                          // 6772\n            if (name == \"transform\") {                                                                                 // 6773\n                return this._.transform;                                                                               // 6774\n            }                                                                                                          // 6775\n            var names = name.split(separator),                                                                         // 6776\n                out = {};                                                                                              // 6777\n            for (var i = 0, ii = names.length; i < ii; i++) {                                                          // 6778\n                name = names[i];                                                                                       // 6779\n                if (name in this.attrs) {                                                                              // 6780\n                    out[name] = this.attrs[name];                                                                      // 6781\n                } else if (R.is(this.paper.customAttributes[name], \"function\")) {                                      // 6782\n                    out[name] = this.paper.customAttributes[name].def;                                                 // 6783\n                } else {                                                                                               // 6784\n                    out[name] = R._availableAttrs[name];                                                               // 6785\n                }                                                                                                      // 6786\n            }                                                                                                          // 6787\n            return ii - 1 ? out : out[names[0]];                                                                       // 6788\n        }                                                                                                              // 6789\n        if (value == null && R.is(name, \"array\")) {                                                                    // 6790\n            out = {};                                                                                                  // 6791\n            for (i = 0, ii = name.length; i < ii; i++) {                                                               // 6792\n                out[name[i]] = this.attr(name[i]);                                                                     // 6793\n            }                                                                                                          // 6794\n            return out;                                                                                                // 6795\n        }                                                                                                              // 6796\n        if (value != null) {                                                                                           // 6797\n            var params = {};                                                                                           // 6798\n            params[name] = value;                                                                                      // 6799\n        } else if (name != null && R.is(name, \"object\")) {                                                             // 6800\n            params = name;                                                                                             // 6801\n        }                                                                                                              // 6802\n        for (var key in params) {                                                                                      // 6803\n            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);                                             // 6804\n        }                                                                                                              // 6805\n        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));                            // 6807\n            this.attrs[key] = params[key];                                                                             // 6808\n            for (var subkey in par) if (par[has](subkey)) {                                                            // 6809\n                params[subkey] = par[subkey];                                                                          // 6810\n            }                                                                                                          // 6811\n        }                                                                                                              // 6812\n        setFillAndStroke(this, params);                                                                                // 6813\n        return this;                                                                                                   // 6814\n    };                                                                                                                 // 6815\n    /*\\\n     * Element.toFront                                                                                                 // 6817\n     [ method ]                                                                                                        // 6818\n     **                                                                                                                // 6819\n     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.                          // 6820\n     = (object) @Element                                                                                               // 6821\n    \\*/                                                                                                                // 6822\n    elproto.toFront = function () {                                                                                    // 6823\n        if (this.removed) {                                                                                            // 6824\n            return this;                                                                                               // 6825\n        }                                                                                                              // 6826\n        if (this.node.parentNode.tagName.toLowerCase() == \"a\") {                                                       // 6827\n            this.node.parentNode.parentNode.appendChild(this.node.parentNode);                                         // 6828\n        } else {                                                                                                       // 6829\n            this.node.parentNode.appendChild(this.node);                                                               // 6830\n        }                                                                                                              // 6831\n        var svg = this.paper;                                                                                          // 6832\n        svg.top != this && R._tofront(this, svg);                                                                      // 6833\n        return this;                                                                                                   // 6834\n    };                                                                                                                 // 6835\n    /*\\\n     * Element.toBack                                                                                                  // 6837\n     [ method ]                                                                                                        // 6838\n     **                                                                                                                // 6839\n     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.                          // 6840\n     = (object) @Element                                                                                               // 6841\n    \\*/                                                                                                                // 6842\n    elproto.toBack = function () {                                                                                     // 6843\n        if (this.removed) {                                                                                            // 6844\n            return this;                                                                                               // 6845\n        }                                                                                                              // 6846\n        var parent = this.node.parentNode;                                                                             // 6847\n        if (parent.tagName.toLowerCase() == \"a\") {                                                                     // 6848\n            parent.parentNode.insertBefore(this.node.parentNode, this.node.parentNode.parentNode.firstChild);          // 6849\n        } else if (parent.firstChild != this.node) {                                                                   // 6850\n            parent.insertBefore(this.node, this.node.parentNode.firstChild);                                           // 6851\n        }                                                                                                              // 6852\n        R._toback(this, this.paper);                                                                                   // 6853\n        var svg = this.paper;                                                                                          // 6854\n        return this;                                                                                                   // 6855\n    };                                                                                                                 // 6856\n    /*\\\n     * Element.insertAfter                                                                                             // 6858\n     [ method ]                                                                                                        // 6859\n     **                                                                                                                // 6860\n     * Inserts current object after the given one.                                                                     // 6861\n     = (object) @Element                                                                                               // 6862\n    \\*/                                                                                                                // 6863\n    elproto.insertAfter = function (element) {                                                                         // 6864\n        if (this.removed) {                                                                                            // 6865\n            return this;                                                                                               // 6866\n        }                                                                                                              // 6867\n        var node = element.node || element[element.length - 1].node;                                                   // 6868\n        if (node.nextSibling) {                                                                                        // 6869\n            node.parentNode.insertBefore(this.node, node.nextSibling);                                                 // 6870\n        } else {                                                                                                       // 6871\n            node.parentNode.appendChild(this.node);                                                                    // 6872\n        }                                                                                                              // 6873\n        R._insertafter(this, element, this.paper);                                                                     // 6874\n        return this;                                                                                                   // 6875\n    };                                                                                                                 // 6876\n    /*\\\n     * Element.insertBefore                                                                                            // 6878\n     [ method ]                                                                                                        // 6879\n     **                                                                                                                // 6880\n     * Inserts current object before the given one.                                                                    // 6881\n     = (object) @Element                                                                                               // 6882\n    \\*/                                                                                                                // 6883\n    elproto.insertBefore = function (element) {                                                                        // 6884\n        if (this.removed) {                                                                                            // 6885\n            return this;                                                                                               // 6886\n        }                                                                                                              // 6887\n        var node = element.node || element[0].node;                                                                    // 6888\n        node.parentNode.insertBefore(this.node, node);                                                                 // 6889\n        R._insertbefore(this, element, this.paper);                                                                    // 6890\n        return this;                                                                                                   // 6891\n    };                                                                                                                 // 6892\n    elproto.blur = function (size) {                                                                                   // 6893\n        // Experimental. No Safari support. Use it on your own risk.                                                   // 6894\n        var t = this;                                                                                                  // 6895\n        if (+size !== 0) {                                                                                             // 6896\n            var fltr = $(\"filter\"),                                                                                    // 6897\n                blur = $(\"feGaussianBlur\");                                                                            // 6898\n            t.attrs.blur = size;                                                                                       // 6899\n            fltr.id = R.createUUID();                                                                                  // 6900\n            $(blur, {stdDeviation: +size || 1.5});                                                                     // 6901\n            fltr.appendChild(blur);                                                                                    // 6902\n            t.paper.defs.appendChild(fltr);                                                                            // 6903\n            t._blur = fltr;                                                                                            // 6904\n            $(t.node, {filter: \"url(#\" + fltr.id + \")\"});                                                              // 6905\n        } else {                                                                                                       // 6906\n            if (t._blur) {                                                                                             // 6907\n                t._blur.parentNode.removeChild(t._blur);                                                               // 6908\n                delete t._blur;                                                                                        // 6909\n                delete t.attrs.blur;                                                                                   // 6910\n            }                                                                                                          // 6911\n            t.node.removeAttribute(\"filter\");                                                                          // 6912\n        }                                                                                                              // 6913\n        return t;                                                                                                      // 6914\n    };                                                                                                                 // 6915\n    R._engine.circle = function (svg, x, y, r) {                                                                       // 6916\n        var el = $(\"circle\");                                                                                          // 6917\n        svg.canvas && svg.canvas.appendChild(el);                                                                      // 6918\n        var res = new Element(el, svg);                                                                                // 6919\n        res.attrs = {cx: x, cy: y, r: r, fill: \"none\", stroke: \"#000\"};                                                // 6920\n        res.type = \"circle\";                                                                                           // 6921\n        $(el, res.attrs);                                                                                              // 6922\n        return res;                                                                                                    // 6923\n    };                                                                                                                 // 6924\n    R._engine.rect = function (svg, x, y, w, h, r) {                                                                   // 6925\n        var el = $(\"rect\");                                                                                            // 6926\n        svg.canvas && svg.canvas.appendChild(el);                                                                      // 6927\n        var res = new Element(el, svg);                                                                                // 6928\n        res.attrs = {x: x, y: y, width: w, height: h, r: r || 0, rx: r || 0, ry: r || 0, fill: \"none\", stroke: \"#000\"};\n        res.type = \"rect\";                                                                                             // 6930\n        $(el, res.attrs);                                                                                              // 6931\n        return res;                                                                                                    // 6932\n    };                                                                                                                 // 6933\n    R._engine.ellipse = function (svg, x, y, rx, ry) {                                                                 // 6934\n        var el = $(\"ellipse\");                                                                                         // 6935\n        svg.canvas && svg.canvas.appendChild(el);                                                                      // 6936\n        var res = new Element(el, svg);                                                                                // 6937\n        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: \"none\", stroke: \"#000\"};                                      // 6938\n        res.type = \"ellipse\";                                                                                          // 6939\n        $(el, res.attrs);                                                                                              // 6940\n        return res;                                                                                                    // 6941\n    };                                                                                                                 // 6942\n    R._engine.image = function (svg, src, x, y, w, h) {                                                                // 6943\n        var el = $(\"image\");                                                                                           // 6944\n        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: \"none\"});                                         // 6945\n        el.setAttributeNS(xlink, \"href\", src);                                                                         // 6946\n        svg.canvas && svg.canvas.appendChild(el);                                                                      // 6947\n        var res = new Element(el, svg);                                                                                // 6948\n        res.attrs = {x: x, y: y, width: w, height: h, src: src};                                                       // 6949\n        res.type = \"image\";                                                                                            // 6950\n        return res;                                                                                                    // 6951\n    };                                                                                                                 // 6952\n    R._engine.text = function (svg, x, y, text) {                                                                      // 6953\n        var el = $(\"text\");                                                                                            // 6954\n        svg.canvas && svg.canvas.appendChild(el);                                                                      // 6955\n        var res = new Element(el, svg);                                                                                // 6956\n        res.attrs = {                                                                                                  // 6957\n            x: x,                                                                                                      // 6958\n            y: y,                                                                                                      // 6959\n            \"text-anchor\": \"middle\",                                                                                   // 6960\n            text: text,                                                                                                // 6961\n            font: R._availableAttrs.font,                                                                              // 6962\n            stroke: \"none\",                                                                                            // 6963\n            fill: \"#000\"                                                                                               // 6964\n        };                                                                                                             // 6965\n        res.type = \"text\";                                                                                             // 6966\n        setFillAndStroke(res, res.attrs);                                                                              // 6967\n        return res;                                                                                                    // 6968\n    };                                                                                                                 // 6969\n    R._engine.setSize = function (width, height) {                                                                     // 6970\n        this.width = width || this.width;                                                                              // 6971\n        this.height = height || this.height;                                                                           // 6972\n        this.canvas.setAttribute(\"width\", this.width);                                                                 // 6973\n        this.canvas.setAttribute(\"height\", this.height);                                                               // 6974\n        if (this._viewBox) {                                                                                           // 6975\n            this.setViewBox.apply(this, this._viewBox);                                                                // 6976\n        }                                                                                                              // 6977\n        return this;                                                                                                   // 6978\n    };                                                                                                                 // 6979\n    R._engine.create = function () {                                                                                   // 6980\n        var con = R._getContainer.apply(0, arguments),                                                                 // 6981\n            container = con && con.container,                                                                          // 6982\n            x = con.x,                                                                                                 // 6983\n            y = con.y,                                                                                                 // 6984\n            width = con.width,                                                                                         // 6985\n            height = con.height;                                                                                       // 6986\n        if (!container) {                                                                                              // 6987\n            throw new Error(\"SVG container not found.\");                                                               // 6988\n        }                                                                                                              // 6989\n        var cnvs = $(\"svg\"),                                                                                           // 6990\n            css = \"overflow:hidden;\",                                                                                  // 6991\n            isFloating;                                                                                                // 6992\n        x = x || 0;                                                                                                    // 6993\n        y = y || 0;                                                                                                    // 6994\n        width = width || 512;                                                                                          // 6995\n        height = height || 342;                                                                                        // 6996\n        $(cnvs, {                                                                                                      // 6997\n            height: height,                                                                                            // 6998\n            version: 1.1,                                                                                              // 6999\n            width: width,                                                                                              // 7000\n            xmlns: \"http://www.w3.org/2000/svg\"                                                                        // 7001\n        });                                                                                                            // 7002\n        if (container == 1) {                                                                                          // 7003\n            cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";                           // 7004\n            R._g.doc.body.appendChild(cnvs);                                                                           // 7005\n            isFloating = 1;                                                                                            // 7006\n        } else {                                                                                                       // 7007\n            cnvs.style.cssText = css + \"position:relative\";                                                            // 7008\n            if (container.firstChild) {                                                                                // 7009\n                container.insertBefore(cnvs, container.firstChild);                                                    // 7010\n            } else {                                                                                                   // 7011\n                container.appendChild(cnvs);                                                                           // 7012\n            }                                                                                                          // 7013\n        }                                                                                                              // 7014\n        container = new R._Paper;                                                                                      // 7015\n        container.width = width;                                                                                       // 7016\n        container.height = height;                                                                                     // 7017\n        container.canvas = cnvs;                                                                                       // 7018\n        container.clear();                                                                                             // 7019\n        container._left = container._top = 0;                                                                          // 7020\n        isFloating && (container.renderfix = function () {});                                                          // 7021\n        container.renderfix();                                                                                         // 7022\n        return container;                                                                                              // 7023\n    };                                                                                                                 // 7024\n    R._engine.setViewBox = function (x, y, w, h, fit) {                                                                // 7025\n        eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);                                             // 7026\n        var size = mmax(w / this.width, h / this.height),                                                              // 7027\n            top = this.top,                                                                                            // 7028\n            aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",                                                          // 7029\n            vb,                                                                                                        // 7030\n            sw;                                                                                                        // 7031\n        if (x == null) {                                                                                               // 7032\n            if (this._vbSize) {                                                                                        // 7033\n                size = 1;                                                                                              // 7034\n            }                                                                                                          // 7035\n            delete this._vbSize;                                                                                       // 7036\n            vb = \"0 0 \" + this.width + S + this.height;                                                                // 7037\n        } else {                                                                                                       // 7038\n            this._vbSize = size;                                                                                       // 7039\n            vb = x + S + y + S + w + S + h;                                                                            // 7040\n        }                                                                                                              // 7041\n        $(this.canvas, {                                                                                               // 7042\n            viewBox: vb,                                                                                               // 7043\n            preserveAspectRatio: aspectRatio                                                                           // 7044\n        });                                                                                                            // 7045\n        while (size && top) {                                                                                          // 7046\n            sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;                                          // 7047\n            top.attr({\"stroke-width\": sw});                                                                            // 7048\n            top._.dirty = 1;                                                                                           // 7049\n            top._.dirtyT = 1;                                                                                          // 7050\n            top = top.prev;                                                                                            // 7051\n        }                                                                                                              // 7052\n        this._viewBox = [x, y, w, h, !!fit];                                                                           // 7053\n        return this;                                                                                                   // 7054\n    };                                                                                                                 // 7055\n    /*\\\n     * Paper.renderfix                                                                                                 // 7057\n     [ method ]                                                                                                        // 7058\n     **                                                                                                                // 7059\n     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependant                          // 7060\n     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.         // 7061\n     * This method fixes the issue.                                                                                    // 7062\n     **                                                                                                                // 7063\n       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.                                      // 7064\n    \\*/                                                                                                                // 7065\n    R.prototype.renderfix = function () {                                                                              // 7066\n        var cnvs = this.canvas,                                                                                        // 7067\n            s = cnvs.style,                                                                                            // 7068\n            pos;                                                                                                       // 7069\n        try {                                                                                                          // 7070\n            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();                                                       // 7071\n        } catch (e) {                                                                                                  // 7072\n            pos = cnvs.createSVGMatrix();                                                                              // 7073\n        }                                                                                                              // 7074\n        var left = -pos.e % 1,                                                                                         // 7075\n            top = -pos.f % 1;                                                                                          // 7076\n        if (left || top) {                                                                                             // 7077\n            if (left) {                                                                                                // 7078\n                this._left = (this._left + left) % 1;                                                                  // 7079\n                s.left = this._left + \"px\";                                                                            // 7080\n            }                                                                                                          // 7081\n            if (top) {                                                                                                 // 7082\n                this._top = (this._top + top) % 1;                                                                     // 7083\n                s.top = this._top + \"px\";                                                                              // 7084\n            }                                                                                                          // 7085\n        }                                                                                                              // 7086\n    };                                                                                                                 // 7087\n    /*\\\n     * Paper.clear                                                                                                     // 7089\n     [ method ]                                                                                                        // 7090\n     **                                                                                                                // 7091\n     * Clears the paper, i.e. removes all the elements.                                                                // 7092\n    \\*/                                                                                                                // 7093\n    R.prototype.clear = function () {                                                                                  // 7094\n        R.eve(\"raphael.clear\", this);                                                                                  // 7095\n        var c = this.canvas;                                                                                           // 7096\n        while (c.firstChild) {                                                                                         // 7097\n            c.removeChild(c.firstChild);                                                                               // 7098\n        }                                                                                                              // 7099\n        this.bottom = this.top = null;                                                                                 // 7100\n        (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));          // 7101\n        c.appendChild(this.desc);                                                                                      // 7102\n        c.appendChild(this.defs = $(\"defs\"));                                                                          // 7103\n    };                                                                                                                 // 7104\n    /*\\\n     * Paper.remove                                                                                                    // 7106\n     [ method ]                                                                                                        // 7107\n     **                                                                                                                // 7108\n     * Removes the paper from the DOM.                                                                                 // 7109\n    \\*/                                                                                                                // 7110\n    R.prototype.remove = function () {                                                                                 // 7111\n        eve(\"raphael.remove\", this);                                                                                   // 7112\n        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);                                     // 7113\n        for (var i in this) {                                                                                          // 7114\n            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;                                      // 7115\n        }                                                                                                              // 7116\n    };                                                                                                                 // 7117\n    var setproto = R.st;                                                                                               // 7118\n    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {                                  // 7119\n        setproto[method] = (function (methodname) {                                                                    // 7120\n            return function () {                                                                                       // 7121\n                var arg = arguments;                                                                                   // 7122\n                return this.forEach(function (el) {                                                                    // 7123\n                    el[methodname].apply(el, arg);                                                                     // 7124\n                });                                                                                                    // 7125\n            };                                                                                                         // 7126\n        })(method);                                                                                                    // 7127\n    }                                                                                                                  // 7128\n})();                                                                                                                  // 7129\n                                                                                                                       // 7130\n// ┌─────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël - JavaScript Vector Library                                 │ \\\\\n// ├─────────────────────────────────────────────────────────────────────┤ \\\\\n// │ VML Module                                                          │ \\\\\n// ├─────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright (c) 2008-2011 Dmitry Baranovskiy (http://raphaeljs.com)   │ \\\\\n// │ Copyright (c) 2008-2011 Sencha Labs (http://sencha.com)             │ \\\\\n// │ Licensed under the MIT (http://raphaeljs.com/license.html) license. │ \\\\\n// └─────────────────────────────────────────────────────────────────────┘ \\\\\n                                                                                                                       // 7140\n(function(){                                                                                                           // 7141\n    if (!R.vml) {                                                                                                      // 7142\n        return;                                                                                                        // 7143\n    }                                                                                                                  // 7144\n    var has = \"hasOwnProperty\",                                                                                        // 7145\n        Str = String,                                                                                                  // 7146\n        toFloat = parseFloat,                                                                                          // 7147\n        math = Math,                                                                                                   // 7148\n        round = math.round,                                                                                            // 7149\n        mmax = math.max,                                                                                               // 7150\n        mmin = math.min,                                                                                               // 7151\n        abs = math.abs,                                                                                                // 7152\n        fillString = \"fill\",                                                                                           // 7153\n        separator = /[, ]+/,                                                                                           // 7154\n        eve = R.eve,                                                                                                   // 7155\n        ms = \" progid:DXImageTransform.Microsoft\",                                                                     // 7156\n        S = \" \",                                                                                                       // 7157\n        E = \"\",                                                                                                        // 7158\n        map = {M: \"m\", L: \"l\", C: \"c\", Z: \"x\", m: \"t\", l: \"r\", c: \"v\", z: \"x\"},                                        // 7159\n        bites = /([clmz]),?([^clmz]*)/gi,                                                                              // 7160\n        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,                                                                     // 7161\n        val = /-?[^,\\s-]+/g,                                                                                           // 7162\n        cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px\",                                                // 7163\n        zoom = 21600,                                                                                                  // 7164\n        pathTypes = {path: 1, rect: 1, image: 1},                                                                      // 7165\n        ovalTypes = {circle: 1, ellipse: 1},                                                                           // 7166\n        path2vml = function (path) {                                                                                   // 7167\n            var total =  /[ahqstv]/ig,                                                                                 // 7168\n                command = R._pathToAbsolute;                                                                           // 7169\n            Str(path).match(total) && (command = R._path2curve);                                                       // 7170\n            total = /[clmz]/g;                                                                                         // 7171\n            if (command == R._pathToAbsolute && !Str(path).match(total)) {                                             // 7172\n                var res = Str(path).replace(bites, function (all, command, args) {                                     // 7173\n                    var vals = [],                                                                                     // 7174\n                        isMove = command.toLowerCase() == \"m\",                                                         // 7175\n                        res = map[command];                                                                            // 7176\n                    args.replace(val, function (value) {                                                               // 7177\n                        if (isMove && vals.length == 2) {                                                              // 7178\n                            res += vals + map[command == \"m\" ? \"l\" : \"L\"];                                             // 7179\n                            vals = [];                                                                                 // 7180\n                        }                                                                                              // 7181\n                        vals.push(round(value * zoom));                                                                // 7182\n                    });                                                                                                // 7183\n                    return res + vals;                                                                                 // 7184\n                });                                                                                                    // 7185\n                return res;                                                                                            // 7186\n            }                                                                                                          // 7187\n            var pa = command(path), p, r;                                                                              // 7188\n            res = [];                                                                                                  // 7189\n            for (var i = 0, ii = pa.length; i < ii; i++) {                                                             // 7190\n                p = pa[i];                                                                                             // 7191\n                r = pa[i][0].toLowerCase();                                                                            // 7192\n                r == \"z\" && (r = \"x\");                                                                                 // 7193\n                for (var j = 1, jj = p.length; j < jj; j++) {                                                          // 7194\n                    r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);                                                 // 7195\n                }                                                                                                      // 7196\n                res.push(r);                                                                                           // 7197\n            }                                                                                                          // 7198\n            return res.join(S);                                                                                        // 7199\n        },                                                                                                             // 7200\n        compensation = function (deg, dx, dy) {                                                                        // 7201\n            var m = R.matrix();                                                                                        // 7202\n            m.rotate(-deg, .5, .5);                                                                                    // 7203\n            return {                                                                                                   // 7204\n                dx: m.x(dx, dy),                                                                                       // 7205\n                dy: m.y(dx, dy)                                                                                        // 7206\n            };                                                                                                         // 7207\n        },                                                                                                             // 7208\n        setCoords = function (p, sx, sy, dx, dy, deg) {                                                                // 7209\n            var _ = p._,                                                                                               // 7210\n                m = p.matrix,                                                                                          // 7211\n                fillpos = _.fillpos,                                                                                   // 7212\n                o = p.node,                                                                                            // 7213\n                s = o.style,                                                                                           // 7214\n                y = 1,                                                                                                 // 7215\n                flip = \"\",                                                                                             // 7216\n                dxdy,                                                                                                  // 7217\n                kx = zoom / sx,                                                                                        // 7218\n                ky = zoom / sy;                                                                                        // 7219\n            s.visibility = \"hidden\";                                                                                   // 7220\n            if (!sx || !sy) {                                                                                          // 7221\n                return;                                                                                                // 7222\n            }                                                                                                          // 7223\n            o.coordsize = abs(kx) + S + abs(ky);                                                                       // 7224\n            s.rotation = deg * (sx * sy < 0 ? -1 : 1);                                                                 // 7225\n            if (deg) {                                                                                                 // 7226\n                var c = compensation(deg, dx, dy);                                                                     // 7227\n                dx = c.dx;                                                                                             // 7228\n                dy = c.dy;                                                                                             // 7229\n            }                                                                                                          // 7230\n            sx < 0 && (flip += \"x\");                                                                                   // 7231\n            sy < 0 && (flip += \" y\") && (y = -1);                                                                      // 7232\n            s.flip = flip;                                                                                             // 7233\n            o.coordorigin = (dx * -kx) + S + (dy * -ky);                                                               // 7234\n            if (fillpos || _.fillsize) {                                                                               // 7235\n                var fill = o.getElementsByTagName(fillString);                                                         // 7236\n                fill = fill && fill[0];                                                                                // 7237\n                o.removeChild(fill);                                                                                   // 7238\n                if (fillpos) {                                                                                         // 7239\n                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));                   // 7240\n                    fill.position = c.dx * y + S + c.dy * y;                                                           // 7241\n                }                                                                                                      // 7242\n                if (_.fillsize) {                                                                                      // 7243\n                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);                                 // 7244\n                }                                                                                                      // 7245\n                o.appendChild(fill);                                                                                   // 7246\n            }                                                                                                          // 7247\n            s.visibility = \"visible\";                                                                                  // 7248\n        };                                                                                                             // 7249\n    R.toString = function () {                                                                                         // 7250\n        return  \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl \" + this.version;\n    };                                                                                                                 // 7252\n    var addArrow = function (o, value, isEnd) {                                                                        // 7253\n        var values = Str(value).toLowerCase().split(\"-\"),                                                              // 7254\n            se = isEnd ? \"end\" : \"start\",                                                                              // 7255\n            i = values.length,                                                                                         // 7256\n            type = \"classic\",                                                                                          // 7257\n            w = \"medium\",                                                                                              // 7258\n            h = \"medium\";                                                                                              // 7259\n        while (i--) {                                                                                                  // 7260\n            switch (values[i]) {                                                                                       // 7261\n                case \"block\":                                                                                          // 7262\n                case \"classic\":                                                                                        // 7263\n                case \"oval\":                                                                                           // 7264\n                case \"diamond\":                                                                                        // 7265\n                case \"open\":                                                                                           // 7266\n                case \"none\":                                                                                           // 7267\n                    type = values[i];                                                                                  // 7268\n                    break;                                                                                             // 7269\n                case \"wide\":                                                                                           // 7270\n                case \"narrow\": h = values[i]; break;                                                                   // 7271\n                case \"long\":                                                                                           // 7272\n                case \"short\": w = values[i]; break;                                                                    // 7273\n            }                                                                                                          // 7274\n        }                                                                                                              // 7275\n        var stroke = o.node.getElementsByTagName(\"stroke\")[0];                                                         // 7276\n        stroke[se + \"arrow\"] = type;                                                                                   // 7277\n        stroke[se + \"arrowlength\"] = w;                                                                                // 7278\n        stroke[se + \"arrowwidth\"] = h;                                                                                 // 7279\n    },                                                                                                                 // 7280\n    setFillAndStroke = function (o, params) {                                                                          // 7281\n        // o.paper.canvas.style.display = \"none\";                                                                      // 7282\n        o.attrs = o.attrs || {};                                                                                       // 7283\n        var node = o.node,                                                                                             // 7284\n            a = o.attrs,                                                                                               // 7285\n            s = node.style,                                                                                            // 7286\n            xy,                                                                                                        // 7287\n            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n            res = o;                                                                                                   // 7290\n                                                                                                                       // 7291\n                                                                                                                       // 7292\n        for (var par in params) if (params[has](par)) {                                                                // 7293\n            a[par] = params[par];                                                                                      // 7294\n        }                                                                                                              // 7295\n        if (newpath) {                                                                                                 // 7296\n            a.path = R._getPath[o.type](o);                                                                            // 7297\n            o._.dirty = 1;                                                                                             // 7298\n        }                                                                                                              // 7299\n        params.href && (node.href = params.href);                                                                      // 7300\n        params.title && (node.title = params.title);                                                                   // 7301\n        params.target && (node.target = params.target);                                                                // 7302\n        params.cursor && (s.cursor = params.cursor);                                                                   // 7303\n        \"blur\" in params && o.blur(params.blur);                                                                       // 7304\n        if (params.path && o.type == \"path\" || newpath) {                                                              // 7305\n            node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);        // 7306\n            if (o.type == \"image\") {                                                                                   // 7307\n                o._.fillpos = [a.x, a.y];                                                                              // 7308\n                o._.fillsize = [a.width, a.height];                                                                    // 7309\n                setCoords(o, 1, 1, 0, 0, 0);                                                                           // 7310\n            }                                                                                                          // 7311\n        }                                                                                                              // 7312\n        \"transform\" in params && o.transform(params.transform);                                                        // 7313\n        if (isOval) {                                                                                                  // 7314\n            var cx = +a.cx,                                                                                            // 7315\n                cy = +a.cy,                                                                                            // 7316\n                rx = +a.rx || +a.r || 0,                                                                               // 7317\n                ry = +a.ry || +a.r || 0;                                                                               // 7318\n            node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n            o._.dirty = 1;                                                                                             // 7320\n        }                                                                                                              // 7321\n        if (\"clip-rect\" in params) {                                                                                   // 7322\n            var rect = Str(params[\"clip-rect\"]).split(separator);                                                      // 7323\n            if (rect.length == 4) {                                                                                    // 7324\n                rect[2] = +rect[2] + (+rect[0]);                                                                       // 7325\n                rect[3] = +rect[3] + (+rect[1]);                                                                       // 7326\n                var div = node.clipRect || R._g.doc.createElement(\"div\"),                                              // 7327\n                    dstyle = div.style;                                                                                // 7328\n                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);                                         // 7329\n                if (!node.clipRect) {                                                                                  // 7330\n                    dstyle.position = \"absolute\";                                                                      // 7331\n                    dstyle.top = 0;                                                                                    // 7332\n                    dstyle.left = 0;                                                                                   // 7333\n                    dstyle.width = o.paper.width + \"px\";                                                               // 7334\n                    dstyle.height = o.paper.height + \"px\";                                                             // 7335\n                    node.parentNode.insertBefore(div, node);                                                           // 7336\n                    div.appendChild(node);                                                                             // 7337\n                    node.clipRect = div;                                                                               // 7338\n                }                                                                                                      // 7339\n            }                                                                                                          // 7340\n            if (!params[\"clip-rect\"]) {                                                                                // 7341\n                node.clipRect && (node.clipRect.style.clip = \"auto\");                                                  // 7342\n            }                                                                                                          // 7343\n        }                                                                                                              // 7344\n        if (o.textpath) {                                                                                              // 7345\n            var textpathStyle = o.textpath.style;                                                                      // 7346\n            params.font && (textpathStyle.font = params.font);                                                         // 7347\n            params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n            params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);                                     // 7349\n            params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);                               // 7350\n            params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);                                  // 7351\n        }                                                                                                              // 7352\n        if (\"arrow-start\" in params) {                                                                                 // 7353\n            addArrow(res, params[\"arrow-start\"]);                                                                      // 7354\n        }                                                                                                              // 7355\n        if (\"arrow-end\" in params) {                                                                                   // 7356\n            addArrow(res, params[\"arrow-end\"], 1);                                                                     // 7357\n        }                                                                                                              // 7358\n        if (params.opacity != null ||                                                                                  // 7359\n            params[\"stroke-width\"] != null ||                                                                          // 7360\n            params.fill != null ||                                                                                     // 7361\n            params.src != null ||                                                                                      // 7362\n            params.stroke != null ||                                                                                   // 7363\n            params[\"stroke-width\"] != null ||                                                                          // 7364\n            params[\"stroke-opacity\"] != null ||                                                                        // 7365\n            params[\"fill-opacity\"] != null ||                                                                          // 7366\n            params[\"stroke-dasharray\"] != null ||                                                                      // 7367\n            params[\"stroke-miterlimit\"] != null ||                                                                     // 7368\n            params[\"stroke-linejoin\"] != null ||                                                                       // 7369\n            params[\"stroke-linecap\"] != null) {                                                                        // 7370\n            var fill = node.getElementsByTagName(fillString),                                                          // 7371\n                newfill = false;                                                                                       // 7372\n            fill = fill && fill[0];                                                                                    // 7373\n            !fill && (newfill = fill = createNode(fillString));                                                        // 7374\n            if (o.type == \"image\" && params.src) {                                                                     // 7375\n                fill.src = params.src;                                                                                 // 7376\n            }                                                                                                          // 7377\n            params.fill && (fill.on = true);                                                                           // 7378\n            if (fill.on == null || params.fill == \"none\" || params.fill === null) {                                    // 7379\n                fill.on = false;                                                                                       // 7380\n            }                                                                                                          // 7381\n            if (fill.on && params.fill) {                                                                              // 7382\n                var isURL = Str(params.fill).match(R._ISURL);                                                          // 7383\n                if (isURL) {                                                                                           // 7384\n                    fill.parentNode == node && node.removeChild(fill);                                                 // 7385\n                    fill.rotate = true;                                                                                // 7386\n                    fill.src = isURL[1];                                                                               // 7387\n                    fill.type = \"tile\";                                                                                // 7388\n                    var bbox = o.getBBox(1);                                                                           // 7389\n                    fill.position = bbox.x + S + bbox.y;                                                               // 7390\n                    o._.fillpos = [bbox.x, bbox.y];                                                                    // 7391\n                                                                                                                       // 7392\n                    R._preload(isURL[1], function () {                                                                 // 7393\n                        o._.fillsize = [this.offsetWidth, this.offsetHeight];                                          // 7394\n                    });                                                                                                // 7395\n                } else {                                                                                               // 7396\n                    fill.color = R.getRGB(params.fill).hex;                                                            // 7397\n                    fill.src = E;                                                                                      // 7398\n                    fill.type = \"solid\";                                                                               // 7399\n                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n                        a.fill = \"none\";                                                                               // 7401\n                        a.gradient = params.fill;                                                                      // 7402\n                        fill.rotate = false;                                                                           // 7403\n                    }                                                                                                  // 7404\n                }                                                                                                      // 7405\n            }                                                                                                          // 7406\n            if (\"fill-opacity\" in params || \"opacity\" in params) {                                                     // 7407\n                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n                opacity = mmin(mmax(opacity, 0), 1);                                                                   // 7409\n                fill.opacity = opacity;                                                                                // 7410\n                if (fill.src) {                                                                                        // 7411\n                    fill.color = \"none\";                                                                               // 7412\n                }                                                                                                      // 7413\n            }                                                                                                          // 7414\n            node.appendChild(fill);                                                                                    // 7415\n            var stroke = (node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0]),              // 7416\n            newstroke = false;                                                                                         // 7417\n            !stroke && (newstroke = stroke = createNode(\"stroke\"));                                                    // 7418\n            if ((params.stroke && params.stroke != \"none\") ||                                                          // 7419\n                params[\"stroke-width\"] ||                                                                              // 7420\n                params[\"stroke-opacity\"] != null ||                                                                    // 7421\n                params[\"stroke-dasharray\"] ||                                                                          // 7422\n                params[\"stroke-miterlimit\"] ||                                                                         // 7423\n                params[\"stroke-linejoin\"] ||                                                                           // 7424\n                params[\"stroke-linecap\"]) {                                                                            // 7425\n                stroke.on = true;                                                                                      // 7426\n            }                                                                                                          // 7427\n            (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n            var strokeColor = R.getRGB(params.stroke);                                                                 // 7429\n            stroke.on && params.stroke && (stroke.color = strokeColor.hex);                                            // 7430\n            opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n            var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;                                                  // 7432\n            opacity = mmin(mmax(opacity, 0), 1);                                                                       // 7433\n            params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);                                             // 7434\n            params[\"stroke-width\"] && (stroke.weight = width);                                                         // 7435\n            width && width < 1 && (opacity *= width) && (stroke.weight = 1);                                           // 7436\n            stroke.opacity = opacity;                                                                                  // 7437\n                                                                                                                       // 7438\n            params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");                    // 7439\n            stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;                                                      // 7440\n            params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n            if (\"stroke-dasharray\" in params) {                                                                        // 7442\n                var dasharray = {                                                                                      // 7443\n                    \"-\": \"shortdash\",                                                                                  // 7444\n                    \".\": \"shortdot\",                                                                                   // 7445\n                    \"-.\": \"shortdashdot\",                                                                              // 7446\n                    \"-..\": \"shortdashdotdot\",                                                                          // 7447\n                    \". \": \"dot\",                                                                                       // 7448\n                    \"- \": \"dash\",                                                                                      // 7449\n                    \"--\": \"longdash\",                                                                                  // 7450\n                    \"- .\": \"dashdot\",                                                                                  // 7451\n                    \"--.\": \"longdashdot\",                                                                              // 7452\n                    \"--..\": \"longdashdotdot\"                                                                           // 7453\n                };                                                                                                     // 7454\n                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n            }                                                                                                          // 7456\n            newstroke && node.appendChild(stroke);                                                                     // 7457\n        }                                                                                                              // 7458\n        if (res.type == \"text\") {                                                                                      // 7459\n            res.paper.canvas.style.display = E;                                                                        // 7460\n            var span = res.paper.span,                                                                                 // 7461\n                m = 100,                                                                                               // 7462\n                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);                                              // 7463\n            s = span.style;                                                                                            // 7464\n            a.font && (s.font = a.font);                                                                               // 7465\n            a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);                                                     // 7466\n            a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);                                                     // 7467\n            a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);                                                        // 7468\n            fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;                                       // 7469\n            s.fontSize = fontSize * m + \"px\";                                                                          // 7470\n            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n            var brect = span.getBoundingClientRect();                                                                  // 7472\n            res.W = a.w = (brect.right - brect.left) / m;                                                              // 7473\n            res.H = a.h = (brect.bottom - brect.top) / m;                                                              // 7474\n            // res.paper.canvas.style.display = \"none\";                                                                // 7475\n            res.X = a.x;                                                                                               // 7476\n            res.Y = a.y + res.H / 2;                                                                                   // 7477\n                                                                                                                       // 7478\n            (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n            var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];      // 7480\n            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {                        // 7481\n                res._.dirty = 1;                                                                                       // 7482\n                break;                                                                                                 // 7483\n            }                                                                                                          // 7484\n                                                                                                                       // 7485\n            // text-anchor emulation                                                                                   // 7486\n            switch (a[\"text-anchor\"]) {                                                                                // 7487\n                case \"start\":                                                                                          // 7488\n                    res.textpath.style[\"v-text-align\"] = \"left\";                                                       // 7489\n                    res.bbx = res.W / 2;                                                                               // 7490\n                break;                                                                                                 // 7491\n                case \"end\":                                                                                            // 7492\n                    res.textpath.style[\"v-text-align\"] = \"right\";                                                      // 7493\n                    res.bbx = -res.W / 2;                                                                              // 7494\n                break;                                                                                                 // 7495\n                default:                                                                                               // 7496\n                    res.textpath.style[\"v-text-align\"] = \"center\";                                                     // 7497\n                    res.bbx = 0;                                                                                       // 7498\n                break;                                                                                                 // 7499\n            }                                                                                                          // 7500\n            res.textpath.style[\"v-text-kern\"] = true;                                                                  // 7501\n        }                                                                                                              // 7502\n        // res.paper.canvas.style.display = E;                                                                         // 7503\n    },                                                                                                                 // 7504\n    addGradientFill = function (o, gradient, fill) {                                                                   // 7505\n        o.attrs = o.attrs || {};                                                                                       // 7506\n        var attrs = o.attrs,                                                                                           // 7507\n            pow = Math.pow,                                                                                            // 7508\n            opacity,                                                                                                   // 7509\n            oindex,                                                                                                    // 7510\n            type = \"linear\",                                                                                           // 7511\n            fxfy = \".5 .5\";                                                                                            // 7512\n        o.attrs.gradient = gradient;                                                                                   // 7513\n        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {                                  // 7514\n            type = \"radial\";                                                                                           // 7515\n            if (fx && fy) {                                                                                            // 7516\n                fx = toFloat(fx);                                                                                      // 7517\n                fy = toFloat(fy);                                                                                      // 7518\n                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n                fxfy = fx + S + fy;                                                                                    // 7520\n            }                                                                                                          // 7521\n            return E;                                                                                                  // 7522\n        });                                                                                                            // 7523\n        gradient = gradient.split(/\\s*\\-\\s*/);                                                                         // 7524\n        if (type == \"linear\") {                                                                                        // 7525\n            var angle = gradient.shift();                                                                              // 7526\n            angle = -toFloat(angle);                                                                                   // 7527\n            if (isNaN(angle)) {                                                                                        // 7528\n                return null;                                                                                           // 7529\n            }                                                                                                          // 7530\n        }                                                                                                              // 7531\n        var dots = R._parseDots(gradient);                                                                             // 7532\n        if (!dots) {                                                                                                   // 7533\n            return null;                                                                                               // 7534\n        }                                                                                                              // 7535\n        o = o.shape || o.node;                                                                                         // 7536\n        if (dots.length) {                                                                                             // 7537\n            o.removeChild(fill);                                                                                       // 7538\n            fill.on = true;                                                                                            // 7539\n            fill.method = \"none\";                                                                                      // 7540\n            fill.color = dots[0].color;                                                                                // 7541\n            fill.color2 = dots[dots.length - 1].color;                                                                 // 7542\n            var clrs = [];                                                                                             // 7543\n            for (var i = 0, ii = dots.length; i < ii; i++) {                                                           // 7544\n                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);                                       // 7545\n            }                                                                                                          // 7546\n            fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;                                              // 7547\n            if (type == \"radial\") {                                                                                    // 7548\n                fill.type = \"gradientTitle\";                                                                           // 7549\n                fill.focus = \"100%\";                                                                                   // 7550\n                fill.focussize = \"0 0\";                                                                                // 7551\n                fill.focusposition = fxfy;                                                                             // 7552\n                fill.angle = 0;                                                                                        // 7553\n            } else {                                                                                                   // 7554\n                // fill.rotate= true;                                                                                  // 7555\n                fill.type = \"gradient\";                                                                                // 7556\n                fill.angle = (270 - angle) % 360;                                                                      // 7557\n            }                                                                                                          // 7558\n            o.appendChild(fill);                                                                                       // 7559\n        }                                                                                                              // 7560\n        return 1;                                                                                                      // 7561\n    },                                                                                                                 // 7562\n    Element = function (node, vml) {                                                                                   // 7563\n        this[0] = this.node = node;                                                                                    // 7564\n        node.raphael = true;                                                                                           // 7565\n        this.id = R._oid++;                                                                                            // 7566\n        node.raphaelid = this.id;                                                                                      // 7567\n        this.X = 0;                                                                                                    // 7568\n        this.Y = 0;                                                                                                    // 7569\n        this.attrs = {};                                                                                               // 7570\n        this.paper = vml;                                                                                              // 7571\n        this.matrix = R.matrix();                                                                                      // 7572\n        this._ = {                                                                                                     // 7573\n            transform: [],                                                                                             // 7574\n            sx: 1,                                                                                                     // 7575\n            sy: 1,                                                                                                     // 7576\n            dx: 0,                                                                                                     // 7577\n            dy: 0,                                                                                                     // 7578\n            deg: 0,                                                                                                    // 7579\n            dirty: 1,                                                                                                  // 7580\n            dirtyT: 1                                                                                                  // 7581\n        };                                                                                                             // 7582\n        !vml.bottom && (vml.bottom = this);                                                                            // 7583\n        this.prev = vml.top;                                                                                           // 7584\n        vml.top && (vml.top.next = this);                                                                              // 7585\n        vml.top = this;                                                                                                // 7586\n        this.next = null;                                                                                              // 7587\n    };                                                                                                                 // 7588\n    var elproto = R.el;                                                                                                // 7589\n                                                                                                                       // 7590\n    Element.prototype = elproto;                                                                                       // 7591\n    elproto.constructor = Element;                                                                                     // 7592\n    elproto.transform = function (tstr) {                                                                              // 7593\n        if (tstr == null) {                                                                                            // 7594\n            return this._.transform;                                                                                   // 7595\n        }                                                                                                              // 7596\n        var vbs = this.paper._viewBoxShift,                                                                            // 7597\n            vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,                                 // 7598\n            oldt;                                                                                                      // 7599\n        if (vbs) {                                                                                                     // 7600\n            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);                                   // 7601\n        }                                                                                                              // 7602\n        R._extractTransform(this, vbt + tstr);                                                                         // 7603\n        var matrix = this.matrix.clone(),                                                                              // 7604\n            skew = this.skew,                                                                                          // 7605\n            o = this.node,                                                                                             // 7606\n            split,                                                                                                     // 7607\n            isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),                                                               // 7608\n            isPatt = !Str(this.attrs.fill).indexOf(\"url(\");                                                            // 7609\n        matrix.translate(1, 1);                                                                                        // 7610\n        if (isPatt || isGrad || this.type == \"image\") {                                                                // 7611\n            skew.matrix = \"1 0 0 1\";                                                                                   // 7612\n            skew.offset = \"0 0\";                                                                                       // 7613\n            split = matrix.split();                                                                                    // 7614\n            if ((isGrad && split.noRotation) || !split.isSimple) {                                                     // 7615\n                o.style.filter = matrix.toFilter();                                                                    // 7616\n                var bb = this.getBBox(),                                                                               // 7617\n                    bbt = this.getBBox(1),                                                                             // 7618\n                    dx = bb.x - bbt.x,                                                                                 // 7619\n                    dy = bb.y - bbt.y;                                                                                 // 7620\n                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);                                                       // 7621\n                setCoords(this, 1, 1, dx, dy, 0);                                                                      // 7622\n            } else {                                                                                                   // 7623\n                o.style.filter = E;                                                                                    // 7624\n                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);                         // 7625\n            }                                                                                                          // 7626\n        } else {                                                                                                       // 7627\n            o.style.filter = E;                                                                                        // 7628\n            skew.matrix = Str(matrix);                                                                                 // 7629\n            skew.offset = matrix.offset();                                                                             // 7630\n        }                                                                                                              // 7631\n        oldt && (this._.transform = oldt);                                                                             // 7632\n        return this;                                                                                                   // 7633\n    };                                                                                                                 // 7634\n    elproto.rotate = function (deg, cx, cy) {                                                                          // 7635\n        if (this.removed) {                                                                                            // 7636\n            return this;                                                                                               // 7637\n        }                                                                                                              // 7638\n        if (deg == null) {                                                                                             // 7639\n            return;                                                                                                    // 7640\n        }                                                                                                              // 7641\n        deg = Str(deg).split(separator);                                                                               // 7642\n        if (deg.length - 1) {                                                                                          // 7643\n            cx = toFloat(deg[1]);                                                                                      // 7644\n            cy = toFloat(deg[2]);                                                                                      // 7645\n        }                                                                                                              // 7646\n        deg = toFloat(deg[0]);                                                                                         // 7647\n        (cy == null) && (cx = cy);                                                                                     // 7648\n        if (cx == null || cy == null) {                                                                                // 7649\n            var bbox = this.getBBox(1);                                                                                // 7650\n            cx = bbox.x + bbox.width / 2;                                                                              // 7651\n            cy = bbox.y + bbox.height / 2;                                                                             // 7652\n        }                                                                                                              // 7653\n        this._.dirtyT = 1;                                                                                             // 7654\n        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));                                                 // 7655\n        return this;                                                                                                   // 7656\n    };                                                                                                                 // 7657\n    elproto.translate = function (dx, dy) {                                                                            // 7658\n        if (this.removed) {                                                                                            // 7659\n            return this;                                                                                               // 7660\n        }                                                                                                              // 7661\n        dx = Str(dx).split(separator);                                                                                 // 7662\n        if (dx.length - 1) {                                                                                           // 7663\n            dy = toFloat(dx[1]);                                                                                       // 7664\n        }                                                                                                              // 7665\n        dx = toFloat(dx[0]) || 0;                                                                                      // 7666\n        dy = +dy || 0;                                                                                                 // 7667\n        if (this._.bbox) {                                                                                             // 7668\n            this._.bbox.x += dx;                                                                                       // 7669\n            this._.bbox.y += dy;                                                                                       // 7670\n        }                                                                                                              // 7671\n        this.transform(this._.transform.concat([[\"t\", dx, dy]]));                                                      // 7672\n        return this;                                                                                                   // 7673\n    };                                                                                                                 // 7674\n    elproto.scale = function (sx, sy, cx, cy) {                                                                        // 7675\n        if (this.removed) {                                                                                            // 7676\n            return this;                                                                                               // 7677\n        }                                                                                                              // 7678\n        sx = Str(sx).split(separator);                                                                                 // 7679\n        if (sx.length - 1) {                                                                                           // 7680\n            sy = toFloat(sx[1]);                                                                                       // 7681\n            cx = toFloat(sx[2]);                                                                                       // 7682\n            cy = toFloat(sx[3]);                                                                                       // 7683\n            isNaN(cx) && (cx = null);                                                                                  // 7684\n            isNaN(cy) && (cy = null);                                                                                  // 7685\n        }                                                                                                              // 7686\n        sx = toFloat(sx[0]);                                                                                           // 7687\n        (sy == null) && (sy = sx);                                                                                     // 7688\n        (cy == null) && (cx = cy);                                                                                     // 7689\n        if (cx == null || cy == null) {                                                                                // 7690\n            var bbox = this.getBBox(1);                                                                                // 7691\n        }                                                                                                              // 7692\n        cx = cx == null ? bbox.x + bbox.width / 2 : cx;                                                                // 7693\n        cy = cy == null ? bbox.y + bbox.height / 2 : cy;                                                               // 7694\n                                                                                                                       // 7695\n        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));                                              // 7696\n        this._.dirtyT = 1;                                                                                             // 7697\n        return this;                                                                                                   // 7698\n    };                                                                                                                 // 7699\n    elproto.hide = function () {                                                                                       // 7700\n        !this.removed && (this.node.style.display = \"none\");                                                           // 7701\n        return this;                                                                                                   // 7702\n    };                                                                                                                 // 7703\n    elproto.show = function () {                                                                                       // 7704\n        !this.removed && (this.node.style.display = E);                                                                // 7705\n        return this;                                                                                                   // 7706\n    };                                                                                                                 // 7707\n    elproto._getBBox = function () {                                                                                   // 7708\n        if (this.removed) {                                                                                            // 7709\n            return {};                                                                                                 // 7710\n        }                                                                                                              // 7711\n        return {                                                                                                       // 7712\n            x: this.X + (this.bbx || 0) - this.W / 2,                                                                  // 7713\n            y: this.Y - this.H,                                                                                        // 7714\n            width: this.W,                                                                                             // 7715\n            height: this.H                                                                                             // 7716\n        };                                                                                                             // 7717\n    };                                                                                                                 // 7718\n    elproto.remove = function () {                                                                                     // 7719\n        if (this.removed || !this.node.parentNode) {                                                                   // 7720\n            return;                                                                                                    // 7721\n        }                                                                                                              // 7722\n        this.paper.__set__ && this.paper.__set__.exclude(this);                                                        // 7723\n        R.eve.unbind(\"raphael.*.*.\" + this.id);                                                                        // 7724\n        R._tear(this, this.paper);                                                                                     // 7725\n        this.node.parentNode.removeChild(this.node);                                                                   // 7726\n        this.shape && this.shape.parentNode.removeChild(this.shape);                                                   // 7727\n        for (var i in this) {                                                                                          // 7728\n            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;                                      // 7729\n        }                                                                                                              // 7730\n        this.removed = true;                                                                                           // 7731\n    };                                                                                                                 // 7732\n    elproto.attr = function (name, value) {                                                                            // 7733\n        if (this.removed) {                                                                                            // 7734\n            return this;                                                                                               // 7735\n        }                                                                                                              // 7736\n        if (name == null) {                                                                                            // 7737\n            var res = {};                                                                                              // 7738\n            for (var a in this.attrs) if (this.attrs[has](a)) {                                                        // 7739\n                res[a] = this.attrs[a];                                                                                // 7740\n            }                                                                                                          // 7741\n            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;                    // 7742\n            res.transform = this._.transform;                                                                          // 7743\n            return res;                                                                                                // 7744\n        }                                                                                                              // 7745\n        if (value == null && R.is(name, \"string\")) {                                                                   // 7746\n            if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {                              // 7747\n                return this.attrs.gradient;                                                                            // 7748\n            }                                                                                                          // 7749\n            var names = name.split(separator),                                                                         // 7750\n                out = {};                                                                                              // 7751\n            for (var i = 0, ii = names.length; i < ii; i++) {                                                          // 7752\n                name = names[i];                                                                                       // 7753\n                if (name in this.attrs) {                                                                              // 7754\n                    out[name] = this.attrs[name];                                                                      // 7755\n                } else if (R.is(this.paper.customAttributes[name], \"function\")) {                                      // 7756\n                    out[name] = this.paper.customAttributes[name].def;                                                 // 7757\n                } else {                                                                                               // 7758\n                    out[name] = R._availableAttrs[name];                                                               // 7759\n                }                                                                                                      // 7760\n            }                                                                                                          // 7761\n            return ii - 1 ? out : out[names[0]];                                                                       // 7762\n        }                                                                                                              // 7763\n        if (this.attrs && value == null && R.is(name, \"array\")) {                                                      // 7764\n            out = {};                                                                                                  // 7765\n            for (i = 0, ii = name.length; i < ii; i++) {                                                               // 7766\n                out[name[i]] = this.attr(name[i]);                                                                     // 7767\n            }                                                                                                          // 7768\n            return out;                                                                                                // 7769\n        }                                                                                                              // 7770\n        var params;                                                                                                    // 7771\n        if (value != null) {                                                                                           // 7772\n            params = {};                                                                                               // 7773\n            params[name] = value;                                                                                      // 7774\n        }                                                                                                              // 7775\n        value == null && R.is(name, \"object\") && (params = name);                                                      // 7776\n        for (var key in params) {                                                                                      // 7777\n            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);                                             // 7778\n        }                                                                                                              // 7779\n        if (params) {                                                                                                  // 7780\n            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));                        // 7782\n                this.attrs[key] = params[key];                                                                         // 7783\n                for (var subkey in par) if (par[has](subkey)) {                                                        // 7784\n                    params[subkey] = par[subkey];                                                                      // 7785\n                }                                                                                                      // 7786\n            }                                                                                                          // 7787\n            // this.paper.canvas.style.display = \"none\";                                                               // 7788\n            if (params.text && this.type == \"text\") {                                                                  // 7789\n                this.textpath.string = params.text;                                                                    // 7790\n            }                                                                                                          // 7791\n            setFillAndStroke(this, params);                                                                            // 7792\n            // this.paper.canvas.style.display = E;                                                                    // 7793\n        }                                                                                                              // 7794\n        return this;                                                                                                   // 7795\n    };                                                                                                                 // 7796\n    elproto.toFront = function () {                                                                                    // 7797\n        !this.removed && this.node.parentNode.appendChild(this.node);                                                  // 7798\n        this.paper && this.paper.top != this && R._tofront(this, this.paper);                                          // 7799\n        return this;                                                                                                   // 7800\n    };                                                                                                                 // 7801\n    elproto.toBack = function () {                                                                                     // 7802\n        if (this.removed) {                                                                                            // 7803\n            return this;                                                                                               // 7804\n        }                                                                                                              // 7805\n        if (this.node.parentNode.firstChild != this.node) {                                                            // 7806\n            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);                             // 7807\n            R._toback(this, this.paper);                                                                               // 7808\n        }                                                                                                              // 7809\n        return this;                                                                                                   // 7810\n    };                                                                                                                 // 7811\n    elproto.insertAfter = function (element) {                                                                         // 7812\n        if (this.removed) {                                                                                            // 7813\n            return this;                                                                                               // 7814\n        }                                                                                                              // 7815\n        if (element.constructor == R.st.constructor) {                                                                 // 7816\n            element = element[element.length - 1];                                                                     // 7817\n        }                                                                                                              // 7818\n        if (element.node.nextSibling) {                                                                                // 7819\n            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);                                 // 7820\n        } else {                                                                                                       // 7821\n            element.node.parentNode.appendChild(this.node);                                                            // 7822\n        }                                                                                                              // 7823\n        R._insertafter(this, element, this.paper);                                                                     // 7824\n        return this;                                                                                                   // 7825\n    };                                                                                                                 // 7826\n    elproto.insertBefore = function (element) {                                                                        // 7827\n        if (this.removed) {                                                                                            // 7828\n            return this;                                                                                               // 7829\n        }                                                                                                              // 7830\n        if (element.constructor == R.st.constructor) {                                                                 // 7831\n            element = element[0];                                                                                      // 7832\n        }                                                                                                              // 7833\n        element.node.parentNode.insertBefore(this.node, element.node);                                                 // 7834\n        R._insertbefore(this, element, this.paper);                                                                    // 7835\n        return this;                                                                                                   // 7836\n    };                                                                                                                 // 7837\n    elproto.blur = function (size) {                                                                                   // 7838\n        var s = this.node.runtimeStyle,                                                                                // 7839\n            f = s.filter;                                                                                              // 7840\n        f = f.replace(blurregexp, E);                                                                                  // 7841\n        if (+size !== 0) {                                                                                             // 7842\n            this.attrs.blur = size;                                                                                    // 7843\n            s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";                                       // 7844\n            s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));                                             // 7845\n        } else {                                                                                                       // 7846\n            s.filter = f;                                                                                              // 7847\n            s.margin = 0;                                                                                              // 7848\n            delete this.attrs.blur;                                                                                    // 7849\n        }                                                                                                              // 7850\n        return this;                                                                                                   // 7851\n    };                                                                                                                 // 7852\n                                                                                                                       // 7853\n    R._engine.path = function (pathString, vml) {                                                                      // 7854\n        var el = createNode(\"shape\");                                                                                  // 7855\n        el.style.cssText = cssDot;                                                                                     // 7856\n        el.coordsize = zoom + S + zoom;                                                                                // 7857\n        el.coordorigin = vml.coordorigin;                                                                              // 7858\n        var p = new Element(el, vml),                                                                                  // 7859\n            attr = {fill: \"none\", stroke: \"#000\"};                                                                     // 7860\n        pathString && (attr.path = pathString);                                                                        // 7861\n        p.type = \"path\";                                                                                               // 7862\n        p.path = [];                                                                                                   // 7863\n        p.Path = E;                                                                                                    // 7864\n        setFillAndStroke(p, attr);                                                                                     // 7865\n        vml.canvas.appendChild(el);                                                                                    // 7866\n        var skew = createNode(\"skew\");                                                                                 // 7867\n        skew.on = true;                                                                                                // 7868\n        el.appendChild(skew);                                                                                          // 7869\n        p.skew = skew;                                                                                                 // 7870\n        p.transform(E);                                                                                                // 7871\n        return p;                                                                                                      // 7872\n    };                                                                                                                 // 7873\n    R._engine.rect = function (vml, x, y, w, h, r) {                                                                   // 7874\n        var path = R._rectPath(x, y, w, h, r),                                                                         // 7875\n            res = vml.path(path),                                                                                      // 7876\n            a = res.attrs;                                                                                             // 7877\n        res.X = a.x = x;                                                                                               // 7878\n        res.Y = a.y = y;                                                                                               // 7879\n        res.W = a.width = w;                                                                                           // 7880\n        res.H = a.height = h;                                                                                          // 7881\n        a.r = r;                                                                                                       // 7882\n        a.path = path;                                                                                                 // 7883\n        res.type = \"rect\";                                                                                             // 7884\n        return res;                                                                                                    // 7885\n    };                                                                                                                 // 7886\n    R._engine.ellipse = function (vml, x, y, rx, ry) {                                                                 // 7887\n        var res = vml.path(),                                                                                          // 7888\n            a = res.attrs;                                                                                             // 7889\n        res.X = x - rx;                                                                                                // 7890\n        res.Y = y - ry;                                                                                                // 7891\n        res.W = rx * 2;                                                                                                // 7892\n        res.H = ry * 2;                                                                                                // 7893\n        res.type = \"ellipse\";                                                                                          // 7894\n        setFillAndStroke(res, {                                                                                        // 7895\n            cx: x,                                                                                                     // 7896\n            cy: y,                                                                                                     // 7897\n            rx: rx,                                                                                                    // 7898\n            ry: ry                                                                                                     // 7899\n        });                                                                                                            // 7900\n        return res;                                                                                                    // 7901\n    };                                                                                                                 // 7902\n    R._engine.circle = function (vml, x, y, r) {                                                                       // 7903\n        var res = vml.path(),                                                                                          // 7904\n            a = res.attrs;                                                                                             // 7905\n        res.X = x - r;                                                                                                 // 7906\n        res.Y = y - r;                                                                                                 // 7907\n        res.W = res.H = r * 2;                                                                                         // 7908\n        res.type = \"circle\";                                                                                           // 7909\n        setFillAndStroke(res, {                                                                                        // 7910\n            cx: x,                                                                                                     // 7911\n            cy: y,                                                                                                     // 7912\n            r: r                                                                                                       // 7913\n        });                                                                                                            // 7914\n        return res;                                                                                                    // 7915\n    };                                                                                                                 // 7916\n    R._engine.image = function (vml, src, x, y, w, h) {                                                                // 7917\n        var path = R._rectPath(x, y, w, h),                                                                            // 7918\n            res = vml.path(path).attr({stroke: \"none\"}),                                                               // 7919\n            a = res.attrs,                                                                                             // 7920\n            node = res.node,                                                                                           // 7921\n            fill = node.getElementsByTagName(fillString)[0];                                                           // 7922\n        a.src = src;                                                                                                   // 7923\n        res.X = a.x = x;                                                                                               // 7924\n        res.Y = a.y = y;                                                                                               // 7925\n        res.W = a.width = w;                                                                                           // 7926\n        res.H = a.height = h;                                                                                          // 7927\n        a.path = path;                                                                                                 // 7928\n        res.type = \"image\";                                                                                            // 7929\n        fill.parentNode == node && node.removeChild(fill);                                                             // 7930\n        fill.rotate = true;                                                                                            // 7931\n        fill.src = src;                                                                                                // 7932\n        fill.type = \"tile\";                                                                                            // 7933\n        res._.fillpos = [x, y];                                                                                        // 7934\n        res._.fillsize = [w, h];                                                                                       // 7935\n        node.appendChild(fill);                                                                                        // 7936\n        setCoords(res, 1, 1, 0, 0, 0);                                                                                 // 7937\n        return res;                                                                                                    // 7938\n    };                                                                                                                 // 7939\n    R._engine.text = function (vml, x, y, text) {                                                                      // 7940\n        var el = createNode(\"shape\"),                                                                                  // 7941\n            path = createNode(\"path\"),                                                                                 // 7942\n            o = createNode(\"textpath\");                                                                                // 7943\n        x = x || 0;                                                                                                    // 7944\n        y = y || 0;                                                                                                    // 7945\n        text = text || \"\";                                                                                             // 7946\n        path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);                  // 7947\n        path.textpathok = true;                                                                                        // 7948\n        o.string = Str(text);                                                                                          // 7949\n        o.on = true;                                                                                                   // 7950\n        el.style.cssText = cssDot;                                                                                     // 7951\n        el.coordsize = zoom + S + zoom;                                                                                // 7952\n        el.coordorigin = \"0 0\";                                                                                        // 7953\n        var p = new Element(el, vml),                                                                                  // 7954\n            attr = {                                                                                                   // 7955\n                fill: \"#000\",                                                                                          // 7956\n                stroke: \"none\",                                                                                        // 7957\n                font: R._availableAttrs.font,                                                                          // 7958\n                text: text                                                                                             // 7959\n            };                                                                                                         // 7960\n        p.shape = el;                                                                                                  // 7961\n        p.path = path;                                                                                                 // 7962\n        p.textpath = o;                                                                                                // 7963\n        p.type = \"text\";                                                                                               // 7964\n        p.attrs.text = Str(text);                                                                                      // 7965\n        p.attrs.x = x;                                                                                                 // 7966\n        p.attrs.y = y;                                                                                                 // 7967\n        p.attrs.w = 1;                                                                                                 // 7968\n        p.attrs.h = 1;                                                                                                 // 7969\n        setFillAndStroke(p, attr);                                                                                     // 7970\n        el.appendChild(o);                                                                                             // 7971\n        el.appendChild(path);                                                                                          // 7972\n        vml.canvas.appendChild(el);                                                                                    // 7973\n        var skew = createNode(\"skew\");                                                                                 // 7974\n        skew.on = true;                                                                                                // 7975\n        el.appendChild(skew);                                                                                          // 7976\n        p.skew = skew;                                                                                                 // 7977\n        p.transform(E);                                                                                                // 7978\n        return p;                                                                                                      // 7979\n    };                                                                                                                 // 7980\n    R._engine.setSize = function (width, height) {                                                                     // 7981\n        var cs = this.canvas.style;                                                                                    // 7982\n        this.width = width;                                                                                            // 7983\n        this.height = height;                                                                                          // 7984\n        width == +width && (width += \"px\");                                                                            // 7985\n        height == +height && (height += \"px\");                                                                         // 7986\n        cs.width = width;                                                                                              // 7987\n        cs.height = height;                                                                                            // 7988\n        cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";                                                            // 7989\n        if (this._viewBox) {                                                                                           // 7990\n            R._engine.setViewBox.apply(this, this._viewBox);                                                           // 7991\n        }                                                                                                              // 7992\n        return this;                                                                                                   // 7993\n    };                                                                                                                 // 7994\n    R._engine.setViewBox = function (x, y, w, h, fit) {                                                                // 7995\n        R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);                                           // 7996\n        var width = this.width,                                                                                        // 7997\n            height = this.height,                                                                                      // 7998\n            size = 1 / mmax(w / width, h / height),                                                                    // 7999\n            H, W;                                                                                                      // 8000\n        if (fit) {                                                                                                     // 8001\n            H = height / h;                                                                                            // 8002\n            W = width / w;                                                                                             // 8003\n            if (w * H < width) {                                                                                       // 8004\n                x -= (width - w * H) / 2 / H;                                                                          // 8005\n            }                                                                                                          // 8006\n            if (h * W < height) {                                                                                      // 8007\n                y -= (height - h * W) / 2 / W;                                                                         // 8008\n            }                                                                                                          // 8009\n        }                                                                                                              // 8010\n        this._viewBox = [x, y, w, h, !!fit];                                                                           // 8011\n        this._viewBoxShift = {                                                                                         // 8012\n            dx: -x,                                                                                                    // 8013\n            dy: -y,                                                                                                    // 8014\n            scale: size                                                                                                // 8015\n        };                                                                                                             // 8016\n        this.forEach(function (el) {                                                                                   // 8017\n            el.transform(\"...\");                                                                                       // 8018\n        });                                                                                                            // 8019\n        return this;                                                                                                   // 8020\n    };                                                                                                                 // 8021\n    var createNode;                                                                                                    // 8022\n    R._engine.initWin = function (win) {                                                                               // 8023\n            var doc = win.document;                                                                                    // 8024\n            doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");                                     // 8025\n            try {                                                                                                      // 8026\n                !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");                   // 8027\n                createNode = function (tagName) {                                                                      // 8028\n                    return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');                                   // 8029\n                };                                                                                                     // 8030\n            } catch (e) {                                                                                              // 8031\n                createNode = function (tagName) {                                                                      // 8032\n                    return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');  // 8033\n                };                                                                                                     // 8034\n            }                                                                                                          // 8035\n        };                                                                                                             // 8036\n    R._engine.initWin(R._g.win);                                                                                       // 8037\n    R._engine.create = function () {                                                                                   // 8038\n        var con = R._getContainer.apply(0, arguments),                                                                 // 8039\n            container = con.container,                                                                                 // 8040\n            height = con.height,                                                                                       // 8041\n            s,                                                                                                         // 8042\n            width = con.width,                                                                                         // 8043\n            x = con.x,                                                                                                 // 8044\n            y = con.y;                                                                                                 // 8045\n        if (!container) {                                                                                              // 8046\n            throw new Error(\"VML container not found.\");                                                               // 8047\n        }                                                                                                              // 8048\n        var res = new R._Paper,                                                                                        // 8049\n            c = res.canvas = R._g.doc.createElement(\"div\"),                                                            // 8050\n            cs = c.style;                                                                                              // 8051\n        x = x || 0;                                                                                                    // 8052\n        y = y || 0;                                                                                                    // 8053\n        width = width || 512;                                                                                          // 8054\n        height = height || 342;                                                                                        // 8055\n        res.width = width;                                                                                             // 8056\n        res.height = height;                                                                                           // 8057\n        width == +width && (width += \"px\");                                                                            // 8058\n        height == +height && (height += \"px\");                                                                         // 8059\n        res.coordsize = zoom * 1e3 + S + zoom * 1e3;                                                                   // 8060\n        res.coordorigin = \"0 0\";                                                                                       // 8061\n        res.span = R._g.doc.createElement(\"span\");                                                                     // 8062\n        res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";       // 8063\n        c.appendChild(res.span);                                                                                       // 8064\n        cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n        if (container == 1) {                                                                                          // 8066\n            R._g.doc.body.appendChild(c);                                                                              // 8067\n            cs.left = x + \"px\";                                                                                        // 8068\n            cs.top = y + \"px\";                                                                                         // 8069\n            cs.position = \"absolute\";                                                                                  // 8070\n        } else {                                                                                                       // 8071\n            if (container.firstChild) {                                                                                // 8072\n                container.insertBefore(c, container.firstChild);                                                       // 8073\n            } else {                                                                                                   // 8074\n                container.appendChild(c);                                                                              // 8075\n            }                                                                                                          // 8076\n        }                                                                                                              // 8077\n        res.renderfix = function () {};                                                                                // 8078\n        return res;                                                                                                    // 8079\n    };                                                                                                                 // 8080\n    R.prototype.clear = function () {                                                                                  // 8081\n        R.eve(\"raphael.clear\", this);                                                                                  // 8082\n        this.canvas.innerHTML = E;                                                                                     // 8083\n        this.span = R._g.doc.createElement(\"span\");                                                                    // 8084\n        this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n        this.canvas.appendChild(this.span);                                                                            // 8086\n        this.bottom = this.top = null;                                                                                 // 8087\n    };                                                                                                                 // 8088\n    R.prototype.remove = function () {                                                                                 // 8089\n        R.eve(\"raphael.remove\", this);                                                                                 // 8090\n        this.canvas.parentNode.removeChild(this.canvas);                                                               // 8091\n        for (var i in this) {                                                                                          // 8092\n            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;                                      // 8093\n        }                                                                                                              // 8094\n        return true;                                                                                                   // 8095\n    };                                                                                                                 // 8096\n                                                                                                                       // 8097\n    var setproto = R.st;                                                                                               // 8098\n    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {                                  // 8099\n        setproto[method] = (function (methodname) {                                                                    // 8100\n            return function () {                                                                                       // 8101\n                var arg = arguments;                                                                                   // 8102\n                return this.forEach(function (el) {                                                                    // 8103\n                    el[methodname].apply(el, arg);                                                                     // 8104\n                });                                                                                                    // 8105\n            };                                                                                                         // 8106\n        })(method);                                                                                                    // 8107\n    }                                                                                                                  // 8108\n})();                                                                                                                  // 8109\n                                                                                                                       // 8110\n    // EXPOSE                                                                                                          // 8111\n    // SVG and VML are appended just before the EXPOSE line                                                            // 8112\n    // Even with AMD, Raphael should be defined globally                                                               // 8113\n    oldRaphael.was ? (g.win.Raphael = R) : (Raphael = R);                                                              // 8114\n                                                                                                                       // 8115\n    return R;                                                                                                          // 8116\n}));                                                                                                                   // 8117\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}