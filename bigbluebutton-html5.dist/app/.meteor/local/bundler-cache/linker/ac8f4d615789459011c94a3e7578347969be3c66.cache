[{"type":"js","data":"/* Imports for global scope */\n\nredis = Package['mrt:redis'].redis;\nAsync = Package['arunoda:npm'].Async;\n_ = Package.underscore._;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nWinston = Package['duongthienduc:meteor-winston'].Winston;\nHammer = Package['chriswessels:hammer'].Hammer;\nPowerQueue = Package['cfs:power-queue'].PowerQueue;\nReactiveList = Package['cfs:reactive-list'].ReactiveList;\nMicroQueue = Package['cfs:micro-queue'].MicroQueue;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nIron = Package['iron:core'].Iron;\nHTML = Package.htmljs.HTML;\nTAPi18next = Package['tap:i18n'].TAPi18next;\nTAPi18n = Package['tap:i18n'].TAPi18n;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\nLog = Package.logging.Log;\nTracker = Package.deps.Tracker;\nDeps = Package.deps.Deps;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/environment.coffee.js                                           //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.BREAK_LINE = '<br/>';                                             // 2\n                                                                       //\nthis.CARRIAGE_RETURN = '\\r';                                           // 2\n                                                                       //\nthis.NEW_LINE = '\\n';                                                  // 2\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/environment.coffee.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/environment.coffee"],"names":[],"mappings":";;;;;;;;;AACA,IAAC,WAAD,GAAY,OAAZ;;AAAA,IAEC,gBAAD,GAAiB,IAFjB;;AAAA,IAIC,SAAD,GAAU,IAJV","file":"/lib/environment.coffee.js","sourcesContent":["# used in Flash and HTML to show a legitimate break in the line\r\n@BREAK_LINE='<br/>'\r\n# soft return in HTML to signify a broken line without displaying the escaped '<br/>' line break text\r\n@CARRIAGE_RETURN='\\r'\r\n# handle this the same as carriage return, in case text copied has this\r\n@NEW_LINE='\\n'\r\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/router.coffee.js                                                //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.Router.configure({                                                // 1\n  layoutTemplate: 'layout'                                             // 1\n});                                                                    //\n                                                                       //\nthis.Router.map(function() {                                           // 1\n  this.route(\"main\", {                                                 // 5\n    path: \"/html5client/:meeting_id/:user_id/:auth_token\",             // 6\n    onBeforeAction: function() {                                       // 6\n      var applyNewSessionVars, authToken, meetingId, userId;           // 8\n      meetingId = this.params.meeting_id;                              // 8\n      userId = this.params.user_id;                                    // 8\n      authToken = this.params.auth_token;                              // 8\n      if ((authToken == null) || (meetingId == null) || (userId == null)) {\n        document.location = getInSession('logoutURL');                 // 15\n      } else {                                                         //\n        Meteor.call(\"validateAuthToken\", meetingId, userId, authToken);\n        applyNewSessionVars = function() {                             // 18\n          setInSession(\"authToken\", authToken);                        // 21\n          setInSession(\"meetingId\", meetingId);                        // 21\n          setInSession(\"userId\", userId);                              // 21\n          return Router.go('/html5client');                            //\n        };                                                             //\n        clearSessionVar(applyNewSessionVars);                          // 18\n      }                                                                //\n      return this.next();                                              //\n    }                                                                  //\n  });                                                                  //\n  this.route(\"signedin\", {                                             // 5\n    path: \"/html5client\",                                              // 33\n    action: function() {                                               // 33\n      var authToken, meetingId, onErrorFunction, userId;               // 35\n      meetingId = getInSession(\"meetingId\");                           // 35\n      userId = getInSession(\"userId\");                                 // 35\n      authToken = getInSession(\"authToken\");                           // 35\n      onErrorFunction = function(error, result) {                      // 35\n        console.log(\"ONERRORFUNCTION\");                                // 40\n        Meteor.call(\"userLogout\", meetingId, userId, authToken);       // 40\n        clearSessionVar(alert(\"Please sign in again\"));                // 40\n        document.location = getInSession('logoutURL') || '/';          // 40\n      };                                                               //\n      Meteor.subscribe('chat', meetingId, userId, authToken, {         // 35\n        onError: onErrorFunction,                                      // 52\n        onReady: (function(_this) {                                    // 52\n          return function() {                                          //\n            return Meteor.subscribe('shapes', meetingId, {             //\n              onReady: function() {                                    // 53\n                return Meteor.subscribe('slides', meetingId, {         //\n                  onReady: function() {                                // 54\n                    return Meteor.subscribe('meetings', meetingId, {   //\n                      onReady: function() {                            // 55\n                        return Meteor.subscribe('presentations', meetingId, {\n                          onReady: function() {                        // 56\n                            return Meteor.subscribe('users', meetingId, userId, authToken, {\n                              onError: onErrorFunction,                // 57\n                              onReady: function() {                    // 57\n                                return Meteor.subscribe('whiteboard-clean-status', meetingId, {\n                                  onReady: function() {                // 58\n                                    var a, handleLogourUrlError;       // 59\n                                    Meteor.subscribe('bbb_poll', meetingId, userId, authToken, {\n                                      onReady: function() {}           // 59\n                                    });                                //\n                                    _this.render('main');              // 59\n                                    onLoadComplete();                  // 59\n                                    handleLogourUrlError = function() {\n                                      alert(\"Error: could not find the logoutURL\");\n                                      setInSession(\"logoutURL\", document.location.hostname);\n                                    };                                 //\n                                    a = $.ajax({                       // 59\n                                      dataType: 'json',                // 70\n                                      url: '/bigbluebutton/api/enter'  // 70\n                                    });                                //\n                                    a.done(function(data) {            // 59\n                                      if (data.response.logoutURL != null) {\n                                        setInSession(\"logoutURL\", data.response.logoutURL);\n                                      } else {                         //\n                                        if (data.response.logoutUrl != null) {\n                                          setInSession(\"logoutURL\", data.response.logoutUrl);\n                                        } else {                       //\n                                          return handleLogourUrlError();\n                                        }                              //\n                                      }                                //\n                                    });                                //\n                                    return a.fail(function(data, textStatus, errorThrown) {\n                                      return handleLogourUrlError();   //\n                                    });                                //\n                                  }                                    //\n                                });                                    //\n                              }                                        //\n                            });                                        //\n                          }                                            //\n                        });                                            //\n                      }                                                //\n                    });                                                //\n                  }                                                    //\n                });                                                    //\n              }                                                        //\n            });                                                        //\n          };                                                           //\n        })(this)                                                       //\n      });                                                              //\n      return this.render('loading');                                   //\n    }                                                                  //\n  });                                                                  //\n  this.route('meteorEndpoint', {                                       // 5\n    path: '/check',                                                    // 90\n    where: 'server',                                                   // 90\n    action: function() {                                               // 90\n      this.response.writeHead(200, {                                   // 93\n        'Content-Type': 'application/json'                             // 93\n      });                                                              //\n      this.response.end(JSON.stringify({                               // 93\n        \"html5clientStatus\": \"running\"                                 // 96\n      }));                                                             //\n    }                                                                  //\n  });                                                                  //\n});                                                                    // 3\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/router.coffee.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/router.coffee"],"names":[],"mappings":"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","file":"/lib/router.coffee.js","sourcesContent":["@Router.configure layoutTemplate: 'layout'\n\n@Router.map ->\n  # this is how we handle login attempts\n  @route \"main\",\n    path: \"/html5client/:meeting_id/:user_id/:auth_token\"\n    onBeforeAction: ->\n      meetingId = @params.meeting_id\n      userId = @params.user_id\n      authToken = @params.auth_token\n\n      # catch if any of the user's meeting data is invalid\n      if not authToken? or not meetingId? or not userId?\n        # if their data is invalid, redirect the user to the logout page\n        document.location = getInSession 'logoutURL'\n\n      else\n        Meteor.call(\"validateAuthToken\", meetingId, userId, authToken)\n\n        applyNewSessionVars = ->\n          setInSession(\"authToken\", authToken)\n          setInSession(\"meetingId\", meetingId)\n          setInSession(\"userId\", userId)\n          Router.go('/html5client')\n\n        clearSessionVar(applyNewSessionVars)\n\n      @next()\n\n\n  # the user successfully logged in\n  @route \"signedin\",\n    path: \"/html5client\"\n    action: ->\n      meetingId = getInSession \"meetingId\"\n      userId = getInSession \"userId\"\n      authToken = getInSession \"authToken\"\n\n      onErrorFunction = (error, result) ->\n        console.log \"ONERRORFUNCTION\"\n        #if error\n        #  # Was unable to authorize the user. Redirect to the home page\n        #  # alert error.reason\n\n        #make sure the user is not let through\n        Meteor.call(\"userLogout\", meetingId, userId, authToken)\n\n        clearSessionVar (alert \"Please sign in again\")\n        document.location = getInSession('logoutURL') or '/'\n        return\n\n      Meteor.subscribe 'chat', meetingId, userId, authToken, onError: onErrorFunction, onReady: =>\n        Meteor.subscribe 'shapes', meetingId, onReady: =>\n          Meteor.subscribe 'slides', meetingId, onReady: =>\n            Meteor.subscribe 'meetings', meetingId, onReady: =>\n              Meteor.subscribe 'presentations', meetingId, onReady: =>\n                Meteor.subscribe 'users', meetingId, userId, authToken, onError: onErrorFunction, onReady: =>\n                  Meteor.subscribe 'whiteboard-clean-status', meetingId, onReady: =>\n                    Meteor.subscribe 'bbb_poll', meetingId,  userId, authToken, onReady: =>\n                    # done subscribing, start rendering the client and set default settings\n                    @render('main')\n                    onLoadComplete()\n\n                    handleLogourUrlError = () ->\n                      alert \"Error: could not find the logoutURL\"\n                      setInSession(\"logoutURL\", document.location.hostname)\n                      return\n\n                    # obtain the logoutURL\n                    a = $.ajax({dataType: 'json', url: '/bigbluebutton/api/enter'})\n                    a.done (data) ->\n                      if data.response.logoutURL? # for a meeting with 0 users\n                        setInSession(\"logoutURL\", data.response.logoutURL)\n                        return\n                      else\n                        if data.response.logoutUrl? # for a running meeting\n                          setInSession(\"logoutURL\", data.response.logoutUrl)\n                          return\n                        else\n                          handleLogourUrlError()\n\n                    a.fail (data, textStatus, errorThrown) ->\n                      handleLogourUrlError()\n\n      @render('loading')\n\n\n  # endpoint - is the html5client running (ready to handle a user)\n  @route 'meteorEndpoint',\n    path: '/check'\n    where: 'server'\n    action: ->\n      @response.writeHead 200, 'Content-Type': 'application/json'\n\n      # reply that the html5client is running\n      @response.end JSON.stringify {\"html5clientStatus\":\"running\"}\n      return\n  return\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/collection_methods/chat.coffee.js                            //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({                                                       // 1\n  sendChatMessagetoServer: function(meetingId, chatObject, requesterUserId, requesterToken) {\n    var action, chatType, eventName, message, recipient;               // 7\n    chatType = chatObject.chat_type;                                   // 7\n    recipient = chatObject.to_userid;                                  // 7\n    eventName = null;                                                  // 7\n    action = function() {                                              // 7\n      if (chatType === \"PUBLIC_CHAT\") {                                // 11\n        eventName = \"send_public_chat_message\";                        // 12\n        return 'chatPublic';                                           // 13\n      } else {                                                         //\n        eventName = \"send_private_chat_message\";                       // 15\n        if (recipient === requesterUserId) {                           // 16\n          return 'chatSelf';                                           // 17\n        } else {                                                       //\n          return 'chatPrivate';                                        // 19\n        }                                                              //\n      }                                                                //\n    };                                                                 //\n    if (isAllowedTo(action(), meetingId, requesterUserId, requesterToken) && chatObject.from_userid === requesterUserId) {\n      chatObject.message = translateHTML5ToFlash(chatObject.message);  // 22\n      message = {                                                      // 22\n        header: {                                                      // 24\n          timestamp: new Date().getTime(),                             // 25\n          name: eventName                                              // 25\n        },                                                             //\n        payload: {                                                     // 24\n          message: chatObject,                                         // 28\n          meeting_id: meetingId,                                       // 28\n          requester_id: chatObject.from_userid                         // 28\n        }                                                              //\n      };                                                               //\n      Meteor.log.info(\"publishing chat to redis\");                     // 22\n      publish(Meteor.config.redis.channels.toBBBApps.chat, message);   // 22\n    }                                                                  //\n  },                                                                   //\n  deletePrivateChatMessages: function(userId, contact_id) {            // 6\n    var contact, requester;                                            // 38\n    requester = Meteor.Users.findOne({                                 // 38\n      userId: userId                                                   // 38\n    });                                                                //\n    contact = Meteor.Users.findOne({                                   // 38\n      _id: contact_id                                                  // 39\n    });                                                                //\n    return deletePrivateChatMessages(requester.userId, contact.userId);\n  }                                                                    //\n});                                                                    //\n                                                                       //\nthis.addChatToCollection = function(meetingId, messageObject) {        // 1\n  var id;                                                              // 47\n  messageObject.from_time = messageObject.from_time.toString().split('.').join(\"\").split(\"E\")[0];\n  if ((messageObject.from_userid != null) && (messageObject.to_userid != null)) {\n    messageObject.message = translateFlashToHTML5(messageObject.message);\n    return id = Meteor.Chat.upsert({                                   //\n      meetingId: meetingId,                                            // 52\n      'message.message': messageObject.message,                        // 52\n      'message.from_time': messageObject.from_time,                    // 52\n      'message.from_userid': messageObject.from_userid                 // 52\n    }, {                                                               //\n      meetingId: meetingId,                                            // 57\n      message: {                                                       // 57\n        chat_type: messageObject.chat_type,                            // 60\n        message: messageObject.message,                                // 60\n        to_username: messageObject.to_username,                        // 60\n        from_tz_offset: messageObject.from_tz_offset,                  // 60\n        from_color: messageObject.from_color,                          // 60\n        to_userid: messageObject.to_userid,                            // 60\n        from_userid: messageObject.from_userid,                        // 60\n        from_time: messageObject.from_time,                            // 60\n        from_username: messageObject.from_username,                    // 60\n        from_lang: messageObject.from_lang                             // 60\n      }                                                                //\n    }, function(err, numChanged) {                                     //\n      if (err != null) {                                               // 71\n        Meteor.log.error(\"_error \" + err + \" when adding chat to collection\");\n      }                                                                //\n      if (numChanged.insertedId != null) {                             // 73\n        return Meteor.log.info(\"_added chat id=[\" + numChanged.insertedId + \"] \" + messageObject.from_username + \" to \" + (messageObject.to_username != null ? 'PUBLIC' : void 0) + \":\" + messageObject.message);\n      }                                                                //\n    });                                                                //\n  }                                                                    //\n};                                                                     // 44\n                                                                       //\nthis.clearChatCollection = function(meetingId) {                       // 1\n  if (meetingId != null) {                                             // 79\n    return Meteor.Chat.remove({                                        //\n      meetingId: meetingId                                             // 80\n    }, Meteor.log.info(\"cleared Chat Collection (meetingId: \" + meetingId + \"!\"));\n  } else {                                                             //\n    return Meteor.Chat.remove({}, Meteor.log.info(\"cleared Chat Collection (all meetings)!\"));\n  }                                                                    //\n};                                                                     // 78\n                                                                       //\nthis.translateHTML5ToFlash = function(message) {                       // 1\n  var result;                                                          // 90\n  result = message;                                                    // 90\n  result = result.replace(new RegExp(CARRIAGE_RETURN, 'g'), BREAK_LINE);\n  result = result.replace(new RegExp(NEW_LINE, 'g'), BREAK_LINE);      // 90\n  return result;                                                       //\n};                                                                     // 89\n                                                                       //\nthis.translateFlashToHTML5 = function(message) {                       // 1\n  var result;                                                          // 97\n  result = message;                                                    // 97\n  result = result.replace(new RegExp(BREAK_LINE, 'g'), CARRIAGE_RETURN);\n  return result;                                                       //\n};                                                                     // 96\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/collection_methods/chat.coffee.js","sourceMap":{"version":3,"sources":["/server/collection_methods/chat.coffee"],"names":[],"mappings":"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","file":"/server/collection_methods/chat.coffee.js","sourcesContent":["Meteor.methods\n\t# meetingId: the id of the meeting\n\t# chatObject: the object including info on the chat message, including the text\n\t# requesterUserId: the userId of the user sending chat\n\t# requesterToken: the authToken of the requester\n\tsendChatMessagetoServer: (meetingId, chatObject, requesterUserId, requesterToken) ->\n\t\tchatType = chatObject.chat_type\n\t\trecipient = chatObject.to_userid\n\t\teventName = null\n\t\taction = ->\n\t\t\tif chatType is \"PUBLIC_CHAT\"\n\t\t\t\teventName = \"send_public_chat_message\"\n\t\t\t\treturn 'chatPublic'\n\t\t\telse\n\t\t\t\teventName = \"send_private_chat_message\"\n\t\t\t\tif recipient is requesterUserId\n\t\t\t\t\treturn 'chatSelf' #not allowed\n\t\t\t\telse\n\t\t\t\t\treturn 'chatPrivate'\n\n\t\tif isAllowedTo(action(), meetingId, requesterUserId, requesterToken) and chatObject.from_userid is requesterUserId\n\t\t\tchatObject.message = translateHTML5ToFlash(chatObject.message)\n\t\t\tmessage =\n\t\t\t\theader :\n\t\t\t\t\ttimestamp: new Date().getTime()\n\t\t\t\t\tname: eventName\n\t\t\t\tpayload:\n\t\t\t\t\tmessage: chatObject\n\t\t\t\t\tmeeting_id: meetingId\n\t\t\t\t\trequester_id: chatObject.from_userid\n\n\t\t\tMeteor.log.info \"publishing chat to redis\"\n\t\t\tpublish Meteor.config.redis.channels.toBBBApps.chat, message\n\t\treturn\n\n\tdeletePrivateChatMessages: (userId, contact_id) ->\n\t\t# if authorized pass through\n\t\trequester = Meteor.Users.findOne({userId: userId})\n\t\tcontact = Meteor.Users.findOne({_id: contact_id})\n\t\tdeletePrivateChatMessages(requester.userId, contact.userId)\n# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n@addChatToCollection = (meetingId, messageObject) ->\n\t# manually convert time from 1.408645053653E12 to 1408645053653 if necessary\n\t# (this is the time_from that the Flash client outputs)\n\tmessageObject.from_time = (messageObject.from_time).toString().split('.').join(\"\").split(\"E\")[0]\n\n\tif messageObject.from_userid? and messageObject.to_userid?\n\t\tmessageObject.message = translateFlashToHTML5(messageObject.message)\n\n\t\tid = Meteor.Chat.upsert({\n\t\t\tmeetingId:meetingId\n\t\t\t'message.message': messageObject.message\n\t\t\t'message.from_time': messageObject.from_time\n\t\t\t'message.from_userid': messageObject.from_userid\n\t\t\t}, {\n\t\t\tmeetingId: meetingId\n\t\t\tmessage:\n\t\t\t\tchat_type: messageObject.chat_type\n\t\t\t\tmessage: messageObject.message\n\t\t\t\tto_username: messageObject.to_username\n\t\t\t\tfrom_tz_offset: messageObject.from_tz_offset\n\t\t\t\tfrom_color: messageObject.from_color\n\t\t\t\tto_userid: messageObject.to_userid\n\t\t\t\tfrom_userid: messageObject.from_userid\n\t\t\t\tfrom_time: messageObject.from_time\n\t\t\t\tfrom_username: messageObject.from_username\n\t\t\t\tfrom_lang: messageObject.from_lang\n\t\t\t}, (err, numChanged) ->\n\t\t\t\tif err?\n\t\t\t\t\tMeteor.log.error \"_error #{err} when adding chat to collection\"\n\t\t\t\tif numChanged.insertedId?\n\t\t\t\t\tMeteor.log.info \"_added chat id=[#{numChanged.insertedId}]\n\t\t\t\t\t#{messageObject.from_username} to #{'PUBLIC' if messageObject.to_username?}:#{messageObject.message}\")\n\n# called on server start and meeting end\n@clearChatCollection = (meetingId) ->\n\tif meetingId?\n\t\tMeteor.Chat.remove({meetingId: meetingId}, Meteor.log.info \"cleared Chat Collection (meetingId: #{meetingId}!\")\n\telse\n\t\tMeteor.Chat.remove({}, Meteor.log.info \"cleared Chat Collection (all meetings)!\")\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n\n# translate '\\n' newline character and '\\r' carriage returns to '<br/>' breakline character for Flash\n@translateHTML5ToFlash = (message) ->\n\tresult = message\n\tresult = result.replace(new RegExp(CARRIAGE_RETURN, 'g'), BREAK_LINE)\n\tresult = result.replace(new RegExp(NEW_LINE, 'g'), BREAK_LINE)\n\tresult\n\n# translate '<br/>' breakline character to '\\r' carriage return character for HTML5\n@translateFlashToHTML5 = (message) ->\n\tresult = message\n\tresult = result.replace(new RegExp(BREAK_LINE, 'g'), CARRIAGE_RETURN)\n\tresult\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/collection_methods/meetings.coffee.js                        //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.addMeetingToCollection = function(meetingId, name, intendedForRecording, voiceConf, duration, callback) {\n  var obj;                                                             // 8\n  return obj = Meteor.Meetings.upsert({                                //\n    meetingId: meetingId                                               // 8\n  }, {                                                                 //\n    $set: {                                                            // 8\n      meetingName: name,                                               // 8\n      intendedForRecording: intendedForRecording,                      // 8\n      currentlyBeingRecorded: false,                                   // 8\n      voiceConf: voiceConf,                                            // 8\n      duration: duration,                                              // 8\n      roomLockSettings: {                                              // 8\n        disablePrivateChat: false,                                     // 16\n        disableCam: false,                                             // 16\n        disableMic: false,                                             // 16\n        lockOnJoin: Meteor.config.lockOnJoin,                          // 16\n        lockedLayout: false,                                           // 16\n        disablePublicChat: false,                                      // 16\n        lockOnJoinConfigurable: false                                  // 16\n      }                                                                //\n    }                                                                  //\n  }, (function(_this) {                                                //\n    return function(err, numChanged) {                                 //\n      var funct;                                                       // 24\n      if (numChanged.insertedId != null) {                             // 24\n        funct = function(cbk) {                                        // 25\n          Meteor.log.info(\"__added MEETING \" + meetingId);             // 26\n          return cbk();                                                //\n        };                                                             //\n        return funct(callback);                                        //\n      } else {                                                         //\n        Meteor.log.error(\"nothing happened\");                          // 30\n        return callback();                                             //\n      }                                                                //\n    };                                                                 //\n  })(this));                                                           //\n};                                                                     // 5\n                                                                       //\nthis.clearMeetingsCollection = function(meetingId) {                   // 5\n  if (meetingId != null) {                                             // 37\n    return Meteor.Meetings.remove({                                    //\n      meetingId: meetingId                                             // 38\n    }, Meteor.log.info(\"cleared Meetings Collection (meetingId: \" + meetingId + \"!\"));\n  } else {                                                             //\n    return Meteor.Meetings.remove({}, Meteor.log.info(\"cleared Meetings Collection (all meetings)!\"));\n  }                                                                    //\n};                                                                     // 36\n                                                                       //\nthis.removeMeetingFromCollection = function(meetingId, callback) {     // 5\n  var funct;                                                           // 46\n  if (Meteor.Meetings.findOne({                                        // 46\n    meetingId: meetingId                                               //\n  }) != null) {                                                        //\n    Meteor.log.info(\"end of meeting \" + meetingId + \". Clear the meeting data from all collections\");\n    clearUsersCollection(meetingId);                                   // 47\n    clearSlidesCollection(meetingId);                                  // 47\n    clearShapesCollection(meetingId);                                  // 47\n    clearPresentationsCollection(meetingId);                           // 47\n    clearChatCollection(meetingId);                                    // 47\n    clearMeetingsCollection(meetingId);                                // 47\n    return callback();                                                 //\n  } else {                                                             //\n    funct = function(localCallback) {                                  // 68\n      Meteor.log.error(\"Error! There was no such meeting \" + meetingId);\n      return localCallback();                                          //\n    };                                                                 //\n    return funct(callback);                                            //\n  }                                                                    //\n};                                                                     // 45\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/collection_methods/meetings.coffee.js","sourceMap":{"version":3,"sources":["/server/collection_methods/meetings.coffee"],"names":[],"mappings":";;;;;;;;;AAIA,IAAC,uBAAD,GAA0B,SAAC,SAAD,EAAY,IAAZ,EAAkB,oBAAlB,EAAwC,SAAxC,EAAmD,QAAnD,EAA6D,QAA7D;AAGzB;SAAA,MAAM,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAuB;AAAA,IAAC,WAAU,SAAX;GAAvB,EAA8C;AAAA,IAAC,MAAM;AAAA,MAC1D,aAAY,IAD8C;AAAA,MAE1D,sBAAsB,oBAFoC;AAAA,MAG1D,wBAAwB,KAHkC;AAAA,MAI1D,WAAW,SAJ+C;AAAA,MAK1D,UAAU,QALgD;AAAA,MAM1D,kBAEC;AAAA,4BAAoB,KAApB;AAAA,QACA,YAAY,KADZ;AAAA,QAEA,YAAY,KAFZ;AAAA,QAGA,YAAY,MAAM,CAAC,MAAM,CAAC,UAH1B;AAAA,QAIA,cAAc,KAJd;AAAA,QAKA,mBAAmB,KALnB;AAAA,QAMA,wBAAwB,KANxB;OARyD;KAAP;GAA9C,EAeF;WAAA,SAAC,GAAD,EAAM,UAAN;AACH;AAAA,UAAG,6BAAH;AACC,gBAAQ,SAAC,GAAD;AACP,gBAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,qBAAmB,SAAnC;iBACA,MAFO;QAAA,CAAR;eAGA,MAAM,QAAN,EAJD;OAAA;AAMC,cAAM,CAAC,GAAG,CAAC,KAAX,CAAiB,kBAAjB;eACA,WAPD;OADG;IAAA;EAAA,QAfE,EAHmB;AAAA,CAA1B;;AAAA,IA+BC,wBAAD,GAA2B,SAAC,SAAD;AAC1B,MAAG,iBAAH;WACC,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAuB;AAAA,MAAC,WAAW,SAAZ;KAAvB,EACC,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,6CAA2C,SAA3C,GAAqD,GAArE,CADD,EADD;GAAA;WAIC,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAuB,EAAvB,EAA2B,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,6CAAhB,CAA3B,EAJD;GAD0B;AAAA,CA/B3B;;AAAA,IAwCC,4BAAD,GAA+B,SAAC,SAAD,EAAY,QAAZ;AAC9B;AAAA,MAAG;;YAAH;AACC,UAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,oBAAkB,SAAlB,GAA4B,+CAA5C;AAAA,IAEA,qBAAqB,SAArB,CAFA;AAAA,IAKA,sBAAsB,SAAtB,CALA;AAAA,IAQA,sBAAsB,SAAtB,CARA;AAAA,IAWA,6BAA6B,SAA7B,CAXA;AAAA,IAcA,oBAAoB,SAApB,CAdA;AAAA,IAiBA,wBAAwB,SAAxB,CAjBA;WAmBA,WApBD;GAAA;AAsBC,YAAQ,SAAC,aAAD;AACP,YAAM,CAAC,GAAG,CAAC,KAAX,CAAkB,sCAAoC,SAAtD;aACA,gBAFO;IAAA,CAAR;WAGA,MAAM,QAAN,EAzBD;GAD8B;AAAA,CAxC/B","file":"/server/collection_methods/meetings.coffee.js","sourcesContent":["# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n\n@addMeetingToCollection = (meetingId, name, intendedForRecording, voiceConf, duration, callback) ->\n\t#check if the meeting is already in the collection\n\n\tobj = Meteor.Meetings.upsert({meetingId:meetingId}, {$set: {\n\t\tmeetingName:name\n\t\tintendedForRecording: intendedForRecording\n\t\tcurrentlyBeingRecorded: false # default value\n\t\tvoiceConf: voiceConf\n\t\tduration: duration\n\t\troomLockSettings:\n\t\t\t# by default the lock settings will be disabled on meeting create\n\t\t\tdisablePrivateChat: false\n\t\t\tdisableCam: false\n\t\t\tdisableMic: false\n\t\t\tlockOnJoin: Meteor.config.lockOnJoin\n\t\t\tlockedLayout: false\n\t\t\tdisablePublicChat: false\n\t\t\tlockOnJoinConfigurable: false # TODO\n\t}}, (err, numChanged) =>\n\t\tif numChanged.insertedId?\n\t\t\tfunct = (cbk) ->\n\t\t\t\tMeteor.log.info \"__added MEETING #{meetingId}\"\n\t\t\t\tcbk()\n\t\t\tfunct(callback)\n\t\telse\n\t\t\tMeteor.log.error \"nothing happened\"\n\t\t\tcallback()\n\t)\n\n\n\n@clearMeetingsCollection = (meetingId) ->\n\tif meetingId?\n\t\tMeteor.Meetings.remove({meetingId: meetingId},\n\t\t\tMeteor.log.info \"cleared Meetings Collection (meetingId: #{meetingId}!\")\n\telse\n\t\tMeteor.Meetings.remove({}, Meteor.log.info \"cleared Meetings Collection (all meetings)!\")\n\n\n#clean up upon a meeting's end\n@removeMeetingFromCollection = (meetingId, callback) ->\n\tif Meteor.Meetings.findOne({meetingId: meetingId})?\n\t\tMeteor.log.info \"end of meeting #{meetingId}. Clear the meeting data from all collections\"\n\t\t# delete all users in the meeting\n\t\tclearUsersCollection(meetingId)\n\n\t\t# delete all slides in the meeting\n\t\tclearSlidesCollection(meetingId)\n\n\t\t# delete all shapes in the meeting\n\t\tclearShapesCollection(meetingId)\n\n\t\t# delete all presentations in the meeting\n\t\tclearPresentationsCollection(meetingId)\n\n\t\t# delete all chat messages in the meeting\n\t\tclearChatCollection(meetingId)\n\n\t\t# delete the meeting\n\t\tclearMeetingsCollection(meetingId)\n\n\t\tcallback()\n\telse\n\t\tfunct = (localCallback) ->\n\t\t\tMeteor.log.error (\"Error! There was no such meeting #{meetingId}\")\n\t\t\tlocalCallback()\n\t\tfunct(callback)\n\n\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/collection_methods/poll.coffee.js                            //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({                                                       // 4\n  publishVoteMessage: function(meetingId, pollAnswerId, requesterUserId, requesterToken) {\n    var _poll_id, eventName, message, result;                          // 7\n    if (isAllowedTo(\"subscribePoll\", meetingId, requesterUserId, requesterToken)) {\n      eventName = \"vote_poll_user_request_message\";                    // 8\n      result = Meteor.Polls.findOne({                                  // 8\n        \"poll_info.users\": requesterUserId,                            // 10\n        \"poll_info.meetingId\": meetingId,                              // 10\n        \"poll_info.poll.answers.id\": pollAnswerId                      // 10\n      }, {                                                             //\n        fields: {                                                      // 11\n          \"poll_info.poll.id\": 1,                                      // 11\n          _id: 0                                                       // 11\n        }                                                              //\n      });                                                              //\n      _poll_id = result.poll_info.poll.id;                             // 8\n      if ((eventName != null) && (meetingId != null) && (requesterUserId != null) && (_poll_id != null) && (pollAnswerId != null)) {\n        message = {                                                    // 15\n          header: {                                                    // 16\n            timestamp: new Date().getTime(),                           // 17\n            name: eventName                                            // 17\n          },                                                           //\n          payload: {                                                   // 16\n            meeting_id: meetingId,                                     // 20\n            user_id: requesterUserId,                                  // 20\n            poll_id: _poll_id,                                         // 20\n            question_id: 0,                                            // 20\n            answer_id: pollAnswerId                                    // 20\n          }                                                            //\n        };                                                             //\n        Meteor.Polls.update({                                          // 15\n          \"poll_info.users\": requesterUserId,                          // 26\n          \"poll_info.meetingId\": meetingId,                            // 26\n          \"poll_info.poll.answers.id\": pollAnswerId                    // 26\n        }, {                                                           //\n          $pull: {                                                     // 27\n            \"poll_info.users\": requesterUserId                         // 27\n          }                                                            //\n        });                                                            //\n        Meteor.log.info(\"publishing Poll response to redis\");          // 15\n        return publish(Meteor.config.redis.channels.toBBBApps.polling, message);\n      }                                                                //\n    }                                                                  //\n  }                                                                    //\n});                                                                    //\n                                                                       //\nthis.addPollToCollection = function(poll, requester_id, users, meetingId) {\n  var _users, answer, entry, i, j, len, len1, ref, user;               // 38\n  _users = [];                                                         // 38\n  for (i = 0, len = users.length; i < len; i++) {                      // 39\n    user = users[i];                                                   //\n    _users.push(user.user.userid);                                     // 40\n  }                                                                    // 39\n  ref = poll.answers;                                                  // 42\n  for (j = 0, len1 = ref.length; j < len1; j++) {                      // 42\n    answer = ref[j];                                                   //\n    answer.num_votes = 0;                                              // 43\n  }                                                                    // 42\n  poll.num_responders = -1;                                            // 38\n  poll.num_respondents = -1;                                           // 38\n  entry = {                                                            // 38\n    poll_info: {                                                       // 50\n      \"meetingId\": meetingId,                                          // 51\n      \"poll\": poll,                                                    // 51\n      \"requester\": requester_id,                                       // 51\n      \"users\": _users                                                  // 51\n    }                                                                  //\n  };                                                                   //\n  Meteor.log.info(\"added poll _id=[\" + poll.id + \"]:meetingId=[\" + meetingId + \"].\");\n  return Meteor.Polls.insert(entry);                                   //\n};                                                                     // 36\n                                                                       //\nthis.clearPollCollection = function(meetingId, poll_id) {              // 4\n  if ((meetingId != null) && (poll_id != null) && (Meteor.Polls.findOne({\n    \"poll_info.meetingId\": meetingId,                                  //\n    \"poll_info.poll.id\": poll_id                                       //\n  }) != null)) {                                                       //\n    return Meteor.Polls.remove({                                       //\n      \"poll_info.meetingId\": meetingId,                                // 60\n      \"poll_info.poll.id\": poll_id                                     // 60\n    }, Meteor.log.info(\"cleared Polls Collection (meetingId: \" + meetingId + \", pollId: \" + poll_id + \"!)\"));\n  } else {                                                             //\n    return Meteor.Polls.remove({}, Meteor.log.info(\"cleared Polls Collection (all meetings)!\"));\n  }                                                                    //\n};                                                                     // 58\n                                                                       //\nthis.updatePollCollection = function(poll, meetingId, requesterId) {   // 4\n  if ((poll.answers != null) && (poll.num_responders != null) && (poll.num_respondents != null) && (poll.id != null) && (meetingId != null) && (requesterId != null)) {\n    return Meteor.Polls.update({                                       //\n      \"poll_info.meetingId\": meetingId,                                // 69\n      \"poll_info.requester\": requesterId,                              // 69\n      \"poll_info.poll.id\": poll.id                                     // 69\n    }, {                                                               //\n      $set: {                                                          // 70\n        \"poll_info.poll.answers\": poll.answers,                        // 71\n        \"poll_info.poll.num_responders\": poll.num_responders,          // 71\n        \"poll_info.poll.num_respondents\": poll.num_respondents         // 71\n      }                                                                //\n    }, Meteor.log.info(\"updating Polls Collection (meetingId: \" + meetingId + \", pollId: \" + poll.id + \"!)\"));\n  }                                                                    //\n};                                                                     // 67\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/collection_methods/poll.coffee.js","sourceMap":{"version":3,"sources":["/server/collection_methods/poll.coffee"],"names":[],"mappings":"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","file":"/server/collection_methods/poll.coffee.js","sourcesContent":["# --------------------------------------------------------------------------------------------\r\n# Public methods on server\r\n# --------------------------------------------------------------------------------------------\r\nMeteor.methods\r\n\r\n  publishVoteMessage: (meetingId, pollAnswerId, requesterUserId, requesterToken) ->\r\n    if isAllowedTo(\"subscribePoll\", meetingId, requesterUserId, requesterToken)\r\n      eventName = \"vote_poll_user_request_message\"\r\n\r\n      result = Meteor.Polls.findOne({\"poll_info.users\": requesterUserId, \"poll_info.meetingId\": meetingId, \"poll_info.poll.answers.id\": pollAnswerId},\r\n        {fields: {\"poll_info.poll.id\": 1, _id: 0}})\r\n      _poll_id = result.poll_info.poll.id\r\n\r\n      if eventName? and meetingId? and requesterUserId? and _poll_id? and pollAnswerId?\r\n        message =\r\n          header:\r\n            timestamp: new Date().getTime()\r\n            name: eventName\r\n          payload:\r\n            meeting_id: meetingId\r\n            user_id: requesterUserId\r\n            poll_id: _poll_id\r\n            question_id: 0\r\n            answer_id: pollAnswerId\r\n\r\n        Meteor.Polls.update({\"poll_info.users\": requesterUserId, \"poll_info.meetingId\": meetingId, \"poll_info.poll.answers.id\": pollAnswerId},\r\n          { $pull: {\"poll_info.users\": requesterUserId}});\r\n\r\n        Meteor.log.info \"publishing Poll response to redis\"\r\n        publish Meteor.config.redis.channels.toBBBApps.polling, message\r\n\r\n\r\n# --------------------------------------------------------------------------------------------\r\n# Private methods on server\r\n# --------------------------------------------------------------------------------------------\r\n@addPollToCollection = (poll, requester_id, users, meetingId) ->\r\n  #copying all the userids into an array\r\n  _users = []\r\n  for user in users\r\n    _users.push user.user.userid\r\n  #adding the initial number of votes for each answer\r\n  for answer in poll.answers\r\n    answer.num_votes = 0\r\n  #adding the initial number of responders and respondents to the poll, which will be displayed for presenter (in HTML5 client) when he starts the poll\r\n  poll.num_responders = -1\r\n  poll.num_respondents = -1\r\n\r\n  #adding all together and inserting into the Polls collection\r\n  entry =\r\n    poll_info:\r\n      \"meetingId\": meetingId\r\n      \"poll\": poll\r\n      \"requester\": requester_id\r\n      \"users\": _users\r\n  Meteor.log.info \"added poll _id=[#{poll.id}]:meetingId=[#{meetingId}].\"\r\n  Meteor.Polls.insert(entry)\r\n\r\n@clearPollCollection = (meetingId, poll_id) ->\r\n  if meetingId? and poll_id? and Meteor.Polls.findOne({\"poll_info.meetingId\": meetingId, \"poll_info.poll.id\": poll_id})?\r\n    Meteor.Polls.remove({\r\n      \"poll_info.meetingId\": meetingId, \r\n      \"poll_info.poll.id\": poll_id}, \r\n      Meteor.log.info \"cleared Polls Collection (meetingId: #{meetingId}, pollId: #{poll_id}!)\")\r\n  else\r\n    Meteor.Polls.remove({}, Meteor.log.info \"cleared Polls Collection (all meetings)!\")\r\n\r\n@updatePollCollection = (poll, meetingId, requesterId) ->\r\n  if poll.answers? and poll.num_responders? and poll.num_respondents? and poll.id? and meetingId? and requesterId?\r\n    Meteor.Polls.update({\"poll_info.meetingId\": meetingId, \"poll_info.requester\": requesterId, \"poll_info.poll.id\": poll.id},\r\n      {$set:\r\n        {\"poll_info.poll.answers\": poll.answers, \"poll_info.poll.num_responders\": poll.num_responders, \"poll_info.poll.num_respondents\": poll.num_respondents}\r\n      }, Meteor.log.info \"updating Polls Collection (meetingId: #{meetingId}, pollId: #{poll.id}!)\")\r\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/collection_methods/presentations.coffee.js                   //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({                                                       // 2\n  publishSwitchToPreviousSlideMessage: function(meetingId, userId, authToken) {\n    var currentPresentationDoc, currentSlideDoc, message, previousSlideDoc;\n    currentPresentationDoc = Meteor.Presentations.findOne({            // 4\n      \"meetingId\": meetingId,                                          // 4\n      \"presentation.current\": true                                     // 4\n    });                                                                //\n    currentSlideDoc = Meteor.Slides.findOne({                          // 4\n      \"meetingId\": meetingId,                                          // 7\n      \"presentationId\": currentPresentationDoc != null ? currentPresentationDoc.presentation.id : void 0,\n      \"slide.current\": true                                            // 7\n    });                                                                //\n    previousSlideDoc = Meteor.Slides.findOne({                         // 4\n      \"meetingId\": meetingId,                                          // 11\n      \"presentationId\": currentPresentationDoc != null ? currentPresentationDoc.presentation.id : void 0,\n      \"slide.num\": (currentSlideDoc != null ? currentSlideDoc.slide.num : void 0) - 1\n    });                                                                //\n    if ((previousSlideDoc != null) && isAllowedTo('switchSlide', meetingId, userId, authToken)) {\n      message = {                                                      // 17\n        \"payload\": {                                                   // 18\n          \"page\": previousSlideDoc.slide.id,                           // 19\n          \"meeting_id\": meetingId                                      // 19\n        },                                                             //\n        \"header\": {                                                    // 18\n          \"name\": \"go_to_slide\"                                        // 22\n        }                                                              //\n      };                                                               //\n      return publish(Meteor.config.redis.channels.toBBBApps.presentation, message);\n    }                                                                  //\n  },                                                                   //\n  publishSwitchToNextSlideMessage: function(meetingId, userId, authToken) {\n    var currentPresentationDoc, currentSlideDoc, message, nextSlideDoc;\n    currentPresentationDoc = Meteor.Presentations.findOne({            // 28\n      \"meetingId\": meetingId,                                          // 28\n      \"presentation.current\": true                                     // 28\n    });                                                                //\n    currentSlideDoc = Meteor.Slides.findOne({                          // 28\n      \"meetingId\": meetingId,                                          // 31\n      \"presentationId\": currentPresentationDoc != null ? currentPresentationDoc.presentation.id : void 0,\n      \"slide.current\": true                                            // 31\n    });                                                                //\n    nextSlideDoc = Meteor.Slides.findOne({                             // 28\n      \"meetingId\": meetingId,                                          // 35\n      \"presentationId\": currentPresentationDoc != null ? currentPresentationDoc.presentation.id : void 0,\n      \"slide.num\": (currentSlideDoc != null ? currentSlideDoc.slide.num : void 0) + 1\n    });                                                                //\n    if ((nextSlideDoc != null) && isAllowedTo('switchSlide', meetingId, userId, authToken)) {\n      message = {                                                      // 41\n        \"payload\": {                                                   // 42\n          \"page\": nextSlideDoc.slide.id,                               // 43\n          \"meeting_id\": meetingId                                      // 43\n        },                                                             //\n        \"header\": {                                                    // 42\n          \"name\": \"go_to_slide\"                                        // 46\n        }                                                              //\n      };                                                               //\n      return publish(Meteor.config.redis.channels.toBBBApps.presentation, message);\n    }                                                                  //\n  }                                                                    //\n});                                                                    //\n                                                                       //\nthis.addPresentationToCollection = function(meetingId, presentationObject) {\n  var entry, id;                                                       // 56\n  if (Meteor.Presentations.findOne({                                   // 56\n    meetingId: meetingId,                                              //\n    'presentation.id': presentationObject.id                           //\n  }) == null) {                                                        //\n    entry = {                                                          // 57\n      meetingId: meetingId,                                            // 58\n      presentation: {                                                  // 58\n        id: presentationObject.id,                                     // 60\n        name: presentationObject.name,                                 // 60\n        current: presentationObject.current                            // 60\n      },                                                               //\n      pointer: {                                                       // 58\n        x: 0.0,                                                        // 65\n        y: 0.0                                                         // 65\n      }                                                                //\n    };                                                                 //\n    return id = Meteor.Presentations.insert(entry);                    //\n  }                                                                    //\n};                                                                     // 54\n                                                                       //\nthis.removePresentationFromCollection = function(meetingId, presentationId) {\n  var id;                                                              // 72\n  if ((meetingId != null) && (presentationId != null) && (Meteor.Presentations.findOne({\n    meetingId: meetingId,                                              //\n    \"presentation.id\": presentationId                                  //\n  }) != null)) {                                                       //\n    id = Meteor.Presentations.findOne({                                // 73\n      meetingId: meetingId,                                            // 73\n      \"presentation.id\": presentationId                                // 73\n    });                                                                //\n    if (id != null) {                                                  // 74\n      Meteor.Slides.remove({                                           // 75\n        presentationId: presentationId                                 // 75\n      }, Meteor.log.info(\"cleared Slides Collection (presentationId: \" + presentationId + \"!\"));\n      Meteor.Presentations.remove(id._id);                             // 75\n      return Meteor.log.info(\"----removed presentation[\" + presentationId + \"] from \" + meetingId);\n    }                                                                  //\n  }                                                                    //\n};                                                                     // 71\n                                                                       //\nthis.clearPresentationsCollection = function(meetingId) {              // 2\n  if (meetingId != null) {                                             // 82\n    return Meteor.Presentations.remove({                               //\n      meetingId: meetingId                                             // 83\n    }, Meteor.log.info(\"cleared Presentations Collection (meetingId: \" + meetingId + \"!\"));\n  } else {                                                             //\n    return Meteor.Presentations.remove({}, Meteor.log.info(\"cleared Presentations Collection (all meetings)!\"));\n  }                                                                    //\n};                                                                     // 81\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/collection_methods/presentations.coffee.js","sourceMap":{"version":3,"sources":["/server/collection_methods/presentations.coffee"],"names":[],"mappings":"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","file":"/server/collection_methods/presentations.coffee.js","sourcesContent":["\nMeteor.methods\n  publishSwitchToPreviousSlideMessage: (meetingId, userId, authToken) ->\n    currentPresentationDoc = Meteor.Presentations.findOne({\n      \"meetingId\": meetingId\n      \"presentation.current\" : true})\n    currentSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.current\" : true})\n    previousSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.num\" : currentSlideDoc?.slide.num-1})\n\n    if previousSlideDoc? and isAllowedTo('switchSlide', meetingId, userId, authToken)\n      message =\n        \"payload\":\n          \"page\": previousSlideDoc.slide.id\n          \"meeting_id\": meetingId\n        \"header\":\n          \"name\": \"go_to_slide\"\n\n      publish Meteor.config.redis.channels.toBBBApps.presentation, message\n\n\n  publishSwitchToNextSlideMessage: (meetingId, userId, authToken) ->\n    currentPresentationDoc = Meteor.Presentations.findOne({\n      \"meetingId\": meetingId\n      \"presentation.current\" : true})\n    currentSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.current\" : true})\n    nextSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.num\" : currentSlideDoc?.slide.num+1})\n\n    if nextSlideDoc? and isAllowedTo('switchSlide', meetingId, userId, authToken)\n      message =\n        \"payload\":\n          \"page\": nextSlideDoc.slide.id\n          \"meeting_id\": meetingId\n        \"header\":\n          \"name\": \"go_to_slide\"\n\n      publish Meteor.config.redis.channels.toBBBApps.presentation, message\n\n\n# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n@addPresentationToCollection = (meetingId, presentationObject) ->\n  #check if the presentation is already in the collection\n  unless Meteor.Presentations.findOne({meetingId: meetingId, 'presentation.id': presentationObject.id})?\n    entry =\n      meetingId: meetingId\n      presentation:\n        id: presentationObject.id\n        name: presentationObject.name\n        current: presentationObject.current\n\n      pointer: #initially we have no data about the cursor\n        x: 0.0\n        y: 0.0\n\n    id = Meteor.Presentations.insert(entry)\n    #Meteor.log.info \"presentation added id =[#{id}]:#{presentationObject.id} in #{meetingId}. Presentations.size is now #{Meteor.Presentations.find({meetingId: meetingId}).count()}\"\n\n@removePresentationFromCollection = (meetingId, presentationId) ->\n  if meetingId? and presentationId? and Meteor.Presentations.findOne({meetingId: meetingId, \"presentation.id\": presentationId})?\n    id = Meteor.Presentations.findOne({meetingId: meetingId, \"presentation.id\": presentationId})\n    if id?\n      Meteor.Slides.remove({presentationId: presentationId}, Meteor.log.info \"cleared Slides Collection (presentationId: #{presentationId}!\")\n      Meteor.Presentations.remove(id._id)\n      Meteor.log.info \"----removed presentation[\" + presentationId + \"] from \" + meetingId\n\n\n# called on server start and meeting end\n@clearPresentationsCollection = (meetingId) ->\n  if meetingId?\n    Meteor.Presentations.remove({meetingId: meetingId}, Meteor.log.info \"cleared Presentations Collection (meetingId: #{meetingId}!\")\n  else\n    Meteor.Presentations.remove({}, Meteor.log.info \"cleared Presentations Collection (all meetings)!\")\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/collection_methods/shapes.coffee.js                          //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.addShapeToCollection = function(meetingId, whiteboardId, shapeObject) {\n  var entry, id, removeTempTextShape;                                  // 5\n  if ((shapeObject != null ? shapeObject.shape_type : void 0) === \"text\") {\n    Meteor.log.info(\"we are dealing with a text shape and the event is:\" + shapeObject.status);\n    entry = {                                                          // 6\n      meetingId: meetingId,                                            // 9\n      whiteboardId: whiteboardId,                                      // 9\n      shape: {                                                         // 9\n        type: shapeObject.shape.type,                                  // 12\n        textBoxHeight: shapeObject.shape.textBoxHeight,                // 12\n        backgroundColor: shapeObject.shape.backgroundColor,            // 12\n        fontColor: shapeObject.shape.fontColor,                        // 12\n        status: shapeObject.shape.status,                              // 12\n        dataPoints: shapeObject.shape.dataPoints,                      // 12\n        x: shapeObject.shape.x,                                        // 12\n        textBoxWidth: shapeObject.shape.textBoxWidth,                  // 12\n        whiteboardId: shapeObject.shape.whiteboardId,                  // 12\n        fontSize: shapeObject.shape.fontSize,                          // 12\n        id: shapeObject.shape.id,                                      // 12\n        y: shapeObject.shape.y,                                        // 12\n        calcedFontSize: shapeObject.shape.calcedFontSize,              // 12\n        text: shapeObject.shape.text,                                  // 12\n        background: shapeObject.shape.background                       // 12\n      }                                                                //\n    };                                                                 //\n    if (shapeObject.status === \"textEdited\" || shapeObject.status === \"textPublished\") {\n      removeTempTextShape = function(callback) {                       // 30\n        Meteor.Shapes.remove({                                         // 31\n          'shape.id': shapeObject.shape.id                             // 31\n        });                                                            //\n        return callback();                                             //\n      };                                                               //\n      return removeTempTextShape(function() {                          //\n        var id;                                                        // 38\n        id = Meteor.Shapes.insert(entry);                              // 38\n        return Meteor.log.info(shapeObject.status + \" substituting the temp shapes with the newer one\");\n      });                                                              //\n    }                                                                  //\n  } else {                                                             //\n    if ((shapeObject != null ? shapeObject.status : void 0) === \"DRAW_END\" || ((shapeObject != null ? shapeObject.status : void 0) === \"DRAW_START\" && (shapeObject != null ? shapeObject.shape_type : void 0) === \"pencil\")) {\n      entry = {                                                        // 46\n        meetingId: meetingId,                                          // 47\n        whiteboardId: whiteboardId,                                    // 47\n        shape: {                                                       // 47\n          wb_id: shapeObject.wb_id,                                    // 50\n          shape_type: shapeObject.shape_type,                          // 50\n          status: shapeObject.status,                                  // 50\n          id: shapeObject.id,                                          // 50\n          shape: {                                                     // 50\n            type: shapeObject.shape.type,                              // 55\n            status: shapeObject.shape.status,                          // 55\n            points: shapeObject.shape.points,                          // 55\n            whiteboardId: shapeObject.shape.whiteboardId,              // 55\n            id: shapeObject.shape.id,                                  // 55\n            square: shapeObject.shape.square,                          // 55\n            transparency: shapeObject.shape.transparency,              // 55\n            thickness: shapeObject.shape.thickness,                    // 55\n            color: shapeObject.shape.color,                            // 55\n            result: shapeObject.shape.result,                          // 55\n            num_respondents: shapeObject.shape.num_respondents,        // 55\n            num_responders: shapeObject.shape.num_responders           // 55\n          }                                                            //\n        }                                                              //\n      };                                                               //\n      return id = Meteor.Shapes.insert(entry);                         //\n    }                                                                  //\n  }                                                                    //\n};                                                                     // 4\n                                                                       //\nthis.removeAllShapesFromSlide = function(meetingId, whiteboardId) {    // 4\n  Meteor.log.info(\"removeAllShapesFromSlide__\" + whiteboardId);        // 71\n  if ((meetingId != null) && (whiteboardId != null) && (Meteor.Shapes.find({\n    meetingId: meetingId,                                              //\n    whiteboardId: whiteboardId                                         //\n  }) != null)) {                                                       //\n    return Meteor.Shapes.remove({                                      //\n      meetingId: meetingId,                                            // 73\n      whiteboardId: whiteboardId                                       // 73\n    }, function() {                                                    //\n      Meteor.log.info(\"clearing all shapes from slide\");               // 74\n      return Meteor.setTimeout(function() {                            //\n        return Meteor.WhiteboardCleanStatus.update({                   //\n          meetingId: meetingId                                         // 78\n        }, {                                                           //\n          $set: {                                                      // 78\n            in_progress: false                                         // 78\n          }                                                            //\n        });                                                            //\n      }, 1000);                                                        //\n    });                                                                //\n  }                                                                    //\n};                                                                     // 70\n                                                                       //\nthis.removeShapeFromSlide = function(meetingId, whiteboardId, shapeId) {\n  var shapeToRemove;                                                   // 82\n  shapeToRemove = Meteor.Shapes.findOne({                              // 82\n    meetingId: meetingId,                                              // 82\n    whiteboardId: whiteboardId,                                        // 82\n    \"shape.id\": shapeId                                                // 82\n  });                                                                  //\n  if ((meetingId != null) && (whiteboardId != null) && (shapeId != null) && (shapeToRemove != null)) {\n    Meteor.Shapes.remove(shapeToRemove._id);                           // 84\n    Meteor.log.info(\"----removed shape[\" + shapeId + \"] from \" + whiteboardId);\n    return Meteor.log.info(\"remaining shapes on the slide:\" + Meteor.Shapes.find({\n      meetingId: meetingId,                                            // 86\n      whiteboardId: whiteboardId                                       // 86\n    }).count());                                                       //\n  }                                                                    //\n};                                                                     // 81\n                                                                       //\nthis.clearShapesCollection = function(meetingId) {                     // 4\n  if (meetingId != null) {                                             // 91\n    return Meteor.Shapes.remove({}, function() {                       //\n      Meteor.log.info(\"cleared Shapes Collection (meetingId: \" + meetingId + \"!\");\n      return Meteor.WhiteboardCleanStatus.update({                     //\n        meetingId: meetingId                                           // 94\n      }, {                                                             //\n        $set: {                                                        // 94\n          in_progress: false                                           // 94\n        }                                                              //\n      });                                                              //\n    });                                                                //\n  } else {                                                             //\n    return Meteor.Shapes.remove({}, function() {                       //\n      Meteor.log.info(\"cleared Shapes Collection (all meetings)!\");    // 97\n      return Meteor.WhiteboardCleanStatus.update({                     //\n        meetingId: meetingId                                           // 98\n      }, {                                                             //\n        $set: {                                                        // 98\n          in_progress: false                                           // 98\n        }                                                              //\n      });                                                              //\n    });                                                                //\n  }                                                                    //\n};                                                                     // 90\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/collection_methods/shapes.coffee.js","sourceMap":{"version":3,"sources":["/server/collection_methods/shapes.coffee"],"names":[],"mappings":"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","file":"/server/collection_methods/shapes.coffee.js","sourcesContent":["# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n@addShapeToCollection = (meetingId, whiteboardId, shapeObject) ->\n  if shapeObject?.shape_type is \"text\"\n    Meteor.log.info \"we are dealing with a text shape and the event is:#{shapeObject.status}\"\n\n    entry =\n      meetingId: meetingId\n      whiteboardId: whiteboardId\n      shape:\n        type: shapeObject.shape.type\n        textBoxHeight: shapeObject.shape.textBoxHeight\n        backgroundColor: shapeObject.shape.backgroundColor\n        fontColor: shapeObject.shape.fontColor\n        status: shapeObject.shape.status\n        dataPoints: shapeObject.shape.dataPoints\n        x: shapeObject.shape.x\n        textBoxWidth: shapeObject.shape.textBoxWidth\n        whiteboardId: shapeObject.shape.whiteboardId\n        fontSize: shapeObject.shape.fontSize\n        id: shapeObject.shape.id\n        y: shapeObject.shape.y\n        calcedFontSize: shapeObject.shape.calcedFontSize\n        text: shapeObject.shape.text\n        background: shapeObject.shape.background\n\n    if shapeObject.status is \"textEdited\" or shapeObject.status is \"textPublished\"\n      # only keep the final version of the text shape\n      removeTempTextShape = (callback) ->\n        Meteor.Shapes.remove({'shape.id':shapeObject.shape.id})\n        # for s in Meteor.Shapes.find({'shape.id':shapeObject.shape.id}).fetch()\n        #   Meteor.log.info \"there is this shape: #{s.shape.text}\"\n        callback()\n\n      removeTempTextShape( ->\n        # display as the prestenter is typing\n        id = Meteor.Shapes.insert(entry)\n        Meteor.log.info \"#{shapeObject.status} substituting the temp shapes with the newer one\"\n      )\n\n  else\n    # the mouse button was released - the drawing is complete\n    # TODO: pencil messages currently don't send draw_end and are labeled all as DRAW_START\n    if shapeObject?.status is \"DRAW_END\" or (shapeObject?.status is \"DRAW_START\" and shapeObject?.shape_type is \"pencil\")\n      entry =\n        meetingId: meetingId\n        whiteboardId: whiteboardId\n        shape:\n          wb_id: shapeObject.wb_id\n          shape_type: shapeObject.shape_type\n          status: shapeObject.status\n          id: shapeObject.id\n          shape:\n            type: shapeObject.shape.type\n            status: shapeObject.shape.status\n            points: shapeObject.shape.points\n            whiteboardId: shapeObject.shape.whiteboardId\n            id: shapeObject.shape.id\n            square: shapeObject.shape.square\n            transparency: shapeObject.shape.transparency\n            thickness: shapeObject.shape.thickness\n            color: shapeObject.shape.color\n            result: shapeObject.shape.result\n            num_respondents: shapeObject.shape.num_respondents\n            num_responders: shapeObject.shape.num_responders\n\n      id = Meteor.Shapes.insert(entry)\n\n@removeAllShapesFromSlide = (meetingId, whiteboardId) ->\n  Meteor.log.info \"removeAllShapesFromSlide__\" + whiteboardId\n  if meetingId? and whiteboardId? and Meteor.Shapes.find({meetingId: meetingId, whiteboardId: whiteboardId})?\n    Meteor.Shapes.remove {meetingId: meetingId, whiteboardId: whiteboardId}, ->\n      Meteor.log.info \"clearing all shapes from slide\"\n\n      # After shapes are cleared, wait 1 second and set cleaning off\n      Meteor.setTimeout ->\n        Meteor.WhiteboardCleanStatus.update({meetingId: meetingId}, {$set: {in_progress: false}})\n      , 1000\n\n@removeShapeFromSlide = (meetingId, whiteboardId, shapeId) ->\n  shapeToRemove = Meteor.Shapes.findOne({meetingId: meetingId, whiteboardId: whiteboardId, \"shape.id\": shapeId})\n  if meetingId? and whiteboardId? and shapeId? and shapeToRemove?\n    Meteor.Shapes.remove(shapeToRemove._id)\n    Meteor.log.info \"----removed shape[\" + shapeId + \"] from \" + whiteboardId\n    Meteor.log.info \"remaining shapes on the slide:\" + Meteor.Shapes.find({meetingId: meetingId, whiteboardId: whiteboardId}).count()\n\n\n# called on server start and meeting end\n@clearShapesCollection = (meetingId) ->\n  if meetingId?\n    Meteor.Shapes.remove {}, ->\n      Meteor.log.info \"cleared Shapes Collection (meetingId: #{meetingId}!\"\n      Meteor.WhiteboardCleanStatus.update({meetingId: meetingId}, {$set: {in_progress: false}})\n  else\n    Meteor.Shapes.remove {}, ->\n      Meteor.log.info \"cleared Shapes Collection (all meetings)!\"\n      Meteor.WhiteboardCleanStatus.update({meetingId: meetingId}, {$set: {in_progress: false}})\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/collection_methods/slides.coffee.js                          //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.displayThisSlide = function(meetingId, newSlideId, slideObject) {\n  var presentationId;                                                  // 5\n  presentationId = newSlideId.split(\"/\")[0];                           // 5\n  Meteor.Slides.update({                                               // 5\n    presentationId: presentationId,                                    // 7\n    \"slide.current\": true                                              // 7\n  }, {                                                                 //\n    $set: {                                                            // 7\n      \"slide.current\": false                                           // 7\n    }                                                                  //\n  });                                                                  //\n  removeSlideFromCollection(meetingId, newSlideId);                    // 5\n  return addSlideToCollection(meetingId, presentationId, slideObject);\n};                                                                     // 4\n                                                                       //\nthis.addSlideToCollection = function(meetingId, presentationId, slideObject) {\n  var entry, id;                                                       // 16\n  if (Meteor.Slides.findOne({                                          // 16\n    meetingId: meetingId,                                              //\n    \"slide.id\": slideObject.id                                         //\n  }) == null) {                                                        //\n    entry = {                                                          // 17\n      meetingId: meetingId,                                            // 18\n      presentationId: presentationId,                                  // 18\n      slide: {                                                         // 18\n        height_ratio: slideObject.height_ratio,                        // 21\n        y_offset: slideObject.y_offset,                                // 21\n        num: slideObject.num,                                          // 21\n        x_offset: slideObject.x_offset,                                // 21\n        current: slideObject.current,                                  // 21\n        img_uri: slideObject.svg_uri !== void 0 ? slideObject.svg_uri : slideObject.png_uri,\n        txt_uri: slideObject.txt_uri,                                  // 21\n        id: slideObject.id,                                            // 21\n        width_ratio: slideObject.width_ratio,                          // 21\n        swf_uri: slideObject.swf_uri,                                  // 21\n        thumb_uri: slideObject.thumb_uri                               // 21\n      }                                                                //\n    };                                                                 //\n    return id = Meteor.Slides.insert(entry);                           //\n  }                                                                    //\n};                                                                     // 15\n                                                                       //\nthis.removeSlideFromCollection = function(meetingId, slideId) {        // 4\n  var id;                                                              // 37\n  if ((meetingId != null) && (slideId != null) && (Meteor.Slides.findOne({\n    meetingId: meetingId,                                              //\n    \"slide.id\": slideId                                                //\n  }) != null)) {                                                       //\n    id = Meteor.Slides.findOne({                                       // 38\n      meetingId: meetingId,                                            // 38\n      \"slide.id\": slideId                                              // 38\n    });                                                                //\n    if (id != null) {                                                  // 39\n      Meteor.Slides.remove(id._id);                                    // 40\n      return Meteor.log.info(\"----removed slide[\" + slideId + \"] from \" + meetingId);\n    }                                                                  //\n  }                                                                    //\n};                                                                     // 36\n                                                                       //\nthis.clearSlidesCollection = function(meetingId) {                     // 4\n  if (meetingId != null) {                                             // 45\n    return Meteor.Slides.remove({                                      //\n      meetingId: meetingId                                             // 46\n    }, Meteor.log.info(\"cleared Slides Collection (meetingId: \" + meetingId + \"!\"));\n  } else {                                                             //\n    return Meteor.Slides.remove({}, Meteor.log.info(\"cleared Slides Collection (all meetings)!\"));\n  }                                                                    //\n};                                                                     // 44\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/collection_methods/slides.coffee.js","sourceMap":{"version":3,"sources":["/server/collection_methods/slides.coffee"],"names":[],"mappings":";;;;;;;;;AAGA,IAAC,iBAAD,GAAoB,SAAC,SAAD,EAAY,UAAZ,EAAwB,WAAxB;AACnB;AAAA,mBAAiB,UAAU,CAAC,KAAX,CAAiB,GAAjB,CAAsB,GAAvC;AAAA,EAEA,MAAM,CAAC,MAAM,CAAC,MAAd,CAAqB;AAAA,IAAC,gBAAgB,cAAjB;AAAA,IAAiC,iBAAiB,IAAlD;GAArB,EAA8E;AAAA,IAAC,MAAM;AAAA,MAAC,iBAAiB,KAAlB;KAAP;GAA9E,CAFA;AAAA,EAKA,0BAA0B,SAA1B,EAAqC,UAArC,CALA;SAOA,qBAAqB,SAArB,EAAgC,cAAhC,EAAgD,WAAhD,EARmB;AAAA,CAApB;;AAAA,IAWC,qBAAD,GAAwB,SAAC,SAAD,EAAY,cAAZ,EAA4B,WAA5B;AACvB;AAAA,MAAO;;;YAAP;AACC,YACC;AAAA,iBAAW,SAAX;AAAA,MACA,gBAAgB,cADhB;AAAA,MAEA,OACC;AAAA,sBAAc,WAAW,CAAC,YAA1B;AAAA,QACA,UAAU,WAAW,CAAC,QADtB;AAAA,QAEA,KAAK,WAAW,CAAC,GAFjB;AAAA,QAGA,UAAU,WAAW,CAAC,QAHtB;AAAA,QAIA,SAAS,WAAW,CAAC,OAJrB;AAAA,QAKA,SAAY,WAAW,CAAC,OAAZ,KAAyB,MAA5B,GAA2C,WAAW,CAAC,OAAvD,GAAoE,WAAW,CAAC,OALzF;AAAA,QAMA,SAAS,WAAW,CAAC,OANrB;AAAA,QAOA,IAAI,WAAW,CAAC,EAPhB;AAAA,QAQA,aAAa,WAAW,CAAC,WARzB;AAAA,QASA,SAAS,WAAW,CAAC,OATrB;AAAA,QAUA,WAAW,WAAW,CAAC,SAVvB;OAHD;KADD;WAgBA,KAAK,MAAM,CAAC,MAAM,CAAC,MAAd,CAAqB,KAArB,EAjBN;GADuB;AAAA,CAXxB;;AAAA,IAgCC,0BAAD,GAA6B,SAAC,SAAD,EAAY,OAAZ;AAC5B;AAAA,MAAG,uBAAe,iBAAf,IAA4B;;;aAA/B;AACC,SAAK,MAAM,CAAC,MAAM,CAAC,OAAd,CAAsB;AAAA,MAAC,WAAW,SAAZ;AAAA,MAAuB,YAAY,OAAnC;KAAtB,CAAL;AACA,QAAG,UAAH;AACC,YAAM,CAAC,MAAM,CAAC,MAAd,CAAqB,EAAE,CAAC,GAAxB;aACA,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,uBAAuB,OAAvB,GAAiC,SAAjC,GAA6C,SAA7D,EAFD;KAFD;GAD4B;AAAA,CAhC7B;;AAAA,IAwCC,sBAAD,GAAyB,SAAC,SAAD;AACxB,MAAG,iBAAH;WACC,MAAM,CAAC,MAAM,CAAC,MAAd,CAAqB;AAAA,MAAC,WAAW,SAAZ;KAArB,EAA6C,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,2CAAyC,SAAzC,GAAmD,GAAnE,CAA7C,EADD;GAAA;WAGC,MAAM,CAAC,MAAM,CAAC,MAAd,CAAqB,EAArB,EAAyB,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,2CAAhB,CAAzB,EAHD;GADwB;AAAA,CAxCzB","file":"/server/collection_methods/slides.coffee.js","sourcesContent":["# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n@displayThisSlide = (meetingId, newSlideId, slideObject) ->\n\tpresentationId = newSlideId.split(\"/\")[0] # grab the presentationId part of the slideId\n\t# change current to false for the old slide\n\tMeteor.Slides.update({presentationId: presentationId, \"slide.current\": true}, {$set: {\"slide.current\": false}})\n\t# for the new slide: remove the version which came with presentation_shared_message from the Collection\n\t# to avoid using old data (this message contains everything we need for the new slide)\n\tremoveSlideFromCollection(meetingId, newSlideId)\n\t# add the new slide to the collection\n\taddSlideToCollection(meetingId, presentationId, slideObject)\n\n\n@addSlideToCollection = (meetingId, presentationId, slideObject) ->\n\tunless Meteor.Slides.findOne({meetingId: meetingId, \"slide.id\": slideObject.id})?\n\t\tentry =\n\t\t\tmeetingId: meetingId\n\t\t\tpresentationId: presentationId\n\t\t\tslide:\n\t\t\t\theight_ratio: slideObject.height_ratio\n\t\t\t\ty_offset: slideObject.y_offset\n\t\t\t\tnum: slideObject.num\n\t\t\t\tx_offset: slideObject.x_offset\n\t\t\t\tcurrent: slideObject.current\n\t\t\t\timg_uri: if slideObject.svg_uri isnt undefined then slideObject.svg_uri else slideObject.png_uri\n\t\t\t\ttxt_uri: slideObject.txt_uri\n\t\t\t\tid: slideObject.id\n\t\t\t\twidth_ratio: slideObject.width_ratio\n\t\t\t\tswf_uri: slideObject.swf_uri\n\t\t\t\tthumb_uri: slideObject.thumb_uri\n\n\t\tid = Meteor.Slides.insert(entry)\n\t\t#Meteor.log.info \"added slide id =[#{id}]:#{slideObject.id} in #{meetingId}. Now there are #{Meteor.Slides.find({meetingId: meetingId}).count()} slides in the meeting\"\n\n@removeSlideFromCollection = (meetingId, slideId) ->\n\tif meetingId? and slideId? and Meteor.Slides.findOne({meetingId: meetingId, \"slide.id\": slideId})?\n\t\tid = Meteor.Slides.findOne({meetingId: meetingId, \"slide.id\": slideId})\n\t\tif id?\n\t\t\tMeteor.Slides.remove(id._id)\n\t\t\tMeteor.log.info \"----removed slide[\" + slideId + \"] from \" + meetingId\n\n# called on server start and meeting end\n@clearSlidesCollection = (meetingId) ->\n\tif meetingId?\n\t\tMeteor.Slides.remove({meetingId: meetingId}, Meteor.log.info \"cleared Slides Collection (meetingId: #{meetingId}!\")\n\telse\n\t\tMeteor.Slides.remove({}, Meteor.log.info \"cleared Slides Collection (all meetings)!\")\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/collection_methods/users.coffee.js                           //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({                                                       // 8\n  listenOnlyRequestToggle: function(meetingId, userId, authToken, isJoining) {\n    var message, ref, ref1, username, voiceConf;                       // 14\n    voiceConf = (ref = Meteor.Meetings.findOne({                       // 14\n      meetingId: meetingId                                             //\n    })) != null ? ref.voiceConf : void 0;                              //\n    username = (ref1 = Meteor.Users.findOne({                          // 14\n      meetingId: meetingId,                                            //\n      userId: userId                                                   //\n    })) != null ? ref1.user.name : void 0;                             //\n    if (isJoining) {                                                   // 16\n      if (isAllowedTo('joinListenOnly', meetingId, userId, authToken)) {\n        message = {                                                    // 18\n          payload: {                                                   // 19\n            userid: userId,                                            // 20\n            meeting_id: meetingId,                                     // 20\n            voice_conf: voiceConf,                                     // 20\n            name: username                                             // 20\n          },                                                           //\n          header: {                                                    // 19\n            timestamp: new Date().getTime(),                           // 25\n            name: \"user_connected_to_global_audio\",                    // 25\n            version: \"0.0.1\"                                           // 25\n          }                                                            //\n        };                                                             //\n        Meteor.log.info(\"publishing a user listenOnly toggleRequest \" + isJoining + \" request for \" + userId);\n        publish(Meteor.config.redis.channels.toBBBApps.meeting, message);\n      }                                                                //\n    } else {                                                           //\n      if (isAllowedTo('leaveListenOnly', meetingId, userId, authToken)) {\n        message = {                                                    // 35\n          payload: {                                                   // 36\n            userid: userId,                                            // 37\n            meeting_id: meetingId,                                     // 37\n            voice_conf: voiceConf,                                     // 37\n            name: username                                             // 37\n          },                                                           //\n          header: {                                                    // 36\n            timestamp: new Date().getTime(),                           // 42\n            name: \"user_disconnected_from_global_audio\",               // 42\n            version: \"0.0.1\"                                           // 42\n          }                                                            //\n        };                                                             //\n        Meteor.log.info(\"publishing a user listenOnly toggleRequest \" + isJoining + \" request for \" + userId);\n        publish(Meteor.config.redis.channels.toBBBApps.meeting, message);\n      }                                                                //\n    }                                                                  //\n  },                                                                   //\n  muteUser: function(meetingId, toMuteUserId, requesterUserId, requesterToken) {\n    var action, message;                                               // 57\n    action = function() {                                              // 57\n      if (toMuteUserId === requesterUserId) {                          // 58\n        return 'muteSelf';                                             // 59\n      } else {                                                         //\n        return 'muteOther';                                            // 61\n      }                                                                //\n    };                                                                 //\n    if (isAllowedTo(action(), meetingId, requesterUserId, requesterToken)) {\n      message = {                                                      // 64\n        payload: {                                                     // 65\n          user_id: toMuteUserId,                                       // 66\n          meeting_id: meetingId,                                       // 66\n          mute: true,                                                  // 66\n          requester_id: requesterUserId                                // 66\n        },                                                             //\n        header: {                                                      // 65\n          timestamp: new Date().getTime(),                             // 71\n          name: \"mute_user_request_message\",                           // 71\n          version: \"0.0.1\"                                             // 71\n        }                                                              //\n      };                                                               //\n      Meteor.log.info(\"publishing a user mute request for \" + toMuteUserId);\n      publish(Meteor.config.redis.channels.toBBBApps.users, message);  // 64\n      updateVoiceUser(meetingId, {                                     // 64\n        'web_userid': toMuteUserId,                                    // 78\n        talking: false,                                                // 78\n        muted: true                                                    // 78\n      });                                                              //\n    }                                                                  //\n  },                                                                   //\n  unmuteUser: function(meetingId, toMuteUserId, requesterUserId, requesterToken) {\n    var action, message;                                               // 86\n    action = function() {                                              // 86\n      if (toMuteUserId === requesterUserId) {                          // 87\n        return 'unmuteSelf';                                           // 88\n      } else {                                                         //\n        return 'unmuteOther';                                          // 90\n      }                                                                //\n    };                                                                 //\n    if (isAllowedTo(action(), meetingId, requesterUserId, requesterToken)) {\n      message = {                                                      // 93\n        payload: {                                                     // 94\n          user_id: toMuteUserId,                                       // 95\n          meeting_id: meetingId,                                       // 95\n          mute: false,                                                 // 95\n          requester_id: requesterUserId                                // 95\n        },                                                             //\n        header: {                                                      // 94\n          timestamp: new Date().getTime(),                             // 100\n          name: \"mute_user_request_message\",                           // 100\n          version: \"0.0.1\"                                             // 100\n        }                                                              //\n      };                                                               //\n      Meteor.log.info(\"publishing a user unmute request for \" + toMuteUserId);\n      publish(Meteor.config.redis.channels.toBBBApps.users, message);  // 93\n      updateVoiceUser(meetingId, {                                     // 93\n        'web_userid': toMuteUserId,                                    // 107\n        talking: false,                                                // 107\n        muted: false                                                   // 107\n      });                                                              //\n    }                                                                  //\n  },                                                                   //\n  userSetEmoji: function(meetingId, toRaiseUserId, raisedByUserId, raisedByToken, status) {\n    var message;                                                       // 111\n    if (isAllowedTo('setEmojiStatus', meetingId, raisedByUserId, raisedByToken)) {\n      message = {                                                      // 112\n        payload: {                                                     // 113\n          emoji_status: status,                                        // 114\n          userid: toRaiseUserId,                                       // 114\n          meeting_id: meetingId                                        // 114\n        },                                                             //\n        header: {                                                      // 113\n          timestamp: new Date().getTime(),                             // 118\n          name: \"user_emoji_status_message\",                           // 118\n          version: \"0.0.1\"                                             // 118\n        }                                                              //\n      };                                                               //\n      publish(Meteor.config.redis.channels.toBBBApps.users, message);  // 112\n    }                                                                  //\n  },                                                                   //\n  userLogout: function(meetingId, userId, authToken) {                 // 13\n    if (isAllowedTo('logoutSelf', meetingId, userId, authToken)) {     // 130\n      Meteor.log.info((\"a user is logging out from \" + meetingId + \":\") + userId);\n      return requestUserLeaving(meetingId, userId);                    //\n    }                                                                  //\n  }                                                                    //\n});                                                                    //\n                                                                       //\nthis.markUserOffline = function(meetingId, userId, callback) {         // 8\n  var user;                                                            // 145\n  user = Meteor.Users.findOne({                                        // 145\n    meetingId: meetingId,                                              // 145\n    userId: userId                                                     // 145\n  });                                                                  //\n  if ((user != null ? user.clientType : void 0) === \"HTML5\") {         // 146\n    Meteor.log.info(\"marking html5 user [\" + userId + \"] as offline in meeting[\" + meetingId + \"]\");\n    return Meteor.Users.update({                                       //\n      meetingId: meetingId,                                            // 148\n      userId: userId                                                   // 148\n    }, {                                                               //\n      $set: {                                                          // 148\n        'user.connection_status': 'offline',                           // 148\n        'voiceUser.talking': false,                                    // 148\n        'voiceUser.joined': false,                                     // 148\n        'voiceUser.muted': false,                                      // 148\n        'user.time_of_joining': 0,                                     // 148\n        'user.listenOnly': false                                       // 148\n      }                                                                //\n    }, function(err, numChanged) {                                     //\n      var funct;                                                       // 156\n      if (err != null) {                                               // 156\n        Meteor.log.error(\"_unsucc update (mark as offline) of user \" + (user != null ? user.user.name : void 0) + \" \" + userId + \" err=\" + (JSON.stringify(err)));\n        return callback();                                             //\n      } else {                                                         //\n        funct = function(cbk) {                                        // 161\n          Meteor.log.info(\"_marking as offline html5 user \" + (user != null ? user.user.name : void 0) + \" \" + userId + \"  numChanged=\" + numChanged);\n          return cbk();                                                //\n        };                                                             //\n        return funct(callback);                                        //\n      }                                                                //\n    });                                                                //\n  } else {                                                             //\n    return Meteor.Users.remove({                                       //\n      meetingId: meetingId,                                            // 169\n      userId: userId                                                   // 169\n    }, function(err, numDeletions) {                                   //\n      var funct;                                                       // 170\n      if (err != null) {                                               // 170\n        Meteor.log.error(\"_unsucc deletion of user \" + (user != null ? user.user.name : void 0) + \" \" + userId + \" err=\" + (JSON.stringify(err)));\n        return callback();                                             //\n      } else {                                                         //\n        funct = function(cbk) {                                        // 175\n          Meteor.log.info(\"_deleting info for user \" + (user != null ? user.user.name : void 0) + \" \" + userId + \" numDeletions=\" + numDeletions);\n          return cbk();                                                //\n        };                                                             //\n        return funct(callback);                                        //\n      }                                                                //\n    });                                                                //\n  }                                                                    //\n};                                                                     // 143\n                                                                       //\nthis.requestUserLeaving = function(meetingId, userId) {                // 8\n  var listenOnlyMessage, message, ref, userObject, voiceConf;          // 188\n  userObject = Meteor.Users.findOne({                                  // 188\n    'meetingId': meetingId,                                            // 188\n    'userId': userId                                                   // 188\n  });                                                                  //\n  voiceConf = (ref = Meteor.Meetings.findOne({                         // 188\n    meetingId: meetingId                                               //\n  })) != null ? ref.voiceConf : void 0;                                //\n  if ((userObject != null) && (voiceConf != null) && (userId != null) && (meetingId != null)) {\n    if (userObject.user.listenOnly) {                                  // 193\n      listenOnlyMessage = {                                            // 194\n        payload: {                                                     // 195\n          userid: userId,                                              // 196\n          meeting_id: meetingId,                                       // 196\n          voice_conf: voiceConf,                                       // 196\n          name: userObject.user.name                                   // 196\n        },                                                             //\n        header: {                                                      // 195\n          timestamp: new Date().getTime(),                             // 201\n          name: \"user_disconnected_from_global_audio\"                  // 201\n        }                                                              //\n      };                                                               //\n      publish(Meteor.config.redis.channels.toBBBApps.meeting, listenOnlyMessage);\n    }                                                                  //\n    message = {                                                        // 193\n      payload: {                                                       // 208\n        meeting_id: meetingId,                                         // 209\n        userid: userId                                                 // 209\n      },                                                               //\n      header: {                                                        // 208\n        timestamp: new Date().getTime(),                               // 212\n        name: \"user_leaving_request\"                                   // 212\n      }                                                                //\n    };                                                                 //\n    Meteor.log.info(\"sending a user_leaving_request for \" + meetingId + \":\" + userId);\n    return publish(Meteor.config.redis.channels.toBBBApps.users, message);\n  } else {                                                             //\n    return Meteor.log.info(\"did not have enough information to send a user_leaving_request\");\n  }                                                                    //\n};                                                                     // 187\n                                                                       //\nthis.updateVoiceUser = function(meetingId, voiceUserObject, callback) {\n  var u;                                                               // 223\n  u = Meteor.Users.findOne({                                           // 223\n    userId: voiceUserObject.web_userid                                 // 223\n  });                                                                  //\n  if (u != null) {                                                     // 224\n    if (voiceUserObject.talking != null) {                             // 225\n      Meteor.Users.update({                                            // 226\n        meetingId: meetingId,                                          // 226\n        userId: voiceUserObject.web_userid                             // 226\n      }, {                                                             //\n        $set: {                                                        // 227\n          'user.voiceUser.talking': voiceUserObject.talking            // 227\n        }                                                              //\n      }, function(err, numChanged) {                                   //\n        if (err != null) {                                             // 229\n          Meteor.log.error(\"_unsucc update of voiceUser \" + voiceUserObject.web_userid + \" [talking] err=\" + (JSON.stringify(err)));\n        }                                                              //\n        return callback();                                             //\n      });                                                              //\n    }                                                                  //\n    if (voiceUserObject.joined != null) {                              // 234\n      Meteor.Users.update({                                            // 235\n        meetingId: meetingId,                                          // 235\n        userId: voiceUserObject.web_userid                             // 235\n      }, {                                                             //\n        $set: {                                                        // 236\n          'user.voiceUser.joined': voiceUserObject.joined              // 236\n        }                                                              //\n      }, function(err, numChanged) {                                   //\n        if (err != null) {                                             // 238\n          Meteor.log.error(\"_unsucc update of voiceUser \" + voiceUserObject.web_userid + \" [joined] err=\" + (JSON.stringify(err)));\n        }                                                              //\n        return callback();                                             //\n      });                                                              //\n    }                                                                  //\n    if (voiceUserObject.locked != null) {                              // 243\n      Meteor.Users.update({                                            // 244\n        meetingId: meetingId,                                          // 244\n        userId: voiceUserObject.web_userid                             // 244\n      }, {                                                             //\n        $set: {                                                        // 245\n          'user.voiceUser.locked': voiceUserObject.locked              // 245\n        }                                                              //\n      }, function(err, numChanged) {                                   //\n        if (err != null) {                                             // 247\n          Meteor.log.error(\"_unsucc update of voiceUser \" + voiceUserObject.web_userid + \" [locked] err=\" + (JSON.stringify(err)));\n        }                                                              //\n        return callback();                                             //\n      });                                                              //\n    }                                                                  //\n    if (voiceUserObject.muted != null) {                               // 252\n      Meteor.Users.update({                                            // 253\n        meetingId: meetingId,                                          // 253\n        userId: voiceUserObject.web_userid                             // 253\n      }, {                                                             //\n        $set: {                                                        // 254\n          'user.voiceUser.muted': voiceUserObject.muted                // 254\n        }                                                              //\n      }, function(err, numChanged) {                                   //\n        if (err != null) {                                             // 256\n          Meteor.log.error(\"_unsucc update of voiceUser \" + voiceUserObject.web_userid + \" [muted] err=\" + (JSON.stringify(err)));\n        }                                                              //\n        return callback();                                             //\n      });                                                              //\n    }                                                                  //\n    if (voiceUserObject.listen_only != null) {                         // 261\n      return Meteor.Users.update({                                     //\n        meetingId: meetingId,                                          // 262\n        userId: voiceUserObject.web_userid                             // 262\n      }, {                                                             //\n        $set: {                                                        // 263\n          'user.listenOnly': voiceUserObject.listen_only               // 263\n        }                                                              //\n      }, function(err, numChanged) {                                   //\n        if (err != null) {                                             // 265\n          Meteor.log.error(\"_unsucc update of voiceUser \" + voiceUserObject.web_userid + \" [listenOnly] err=\" + (JSON.stringify(err)));\n        }                                                              //\n        return callback();                                             //\n      });                                                              //\n    }                                                                  //\n  } else {                                                             //\n    Meteor.log.error(\"ERROR! did not find such voiceUser!\");           // 271\n    return callback();                                                 //\n  }                                                                    //\n};                                                                     // 222\n                                                                       //\nthis.userJoined = function(meetingId, user, callback) {                // 8\n  var ref, ref1, u, userId, welcomeMessage;                            // 275\n  userId = user.userid;                                                // 275\n  u = Meteor.Users.findOne({                                           // 275\n    userId: user.userid,                                               // 277\n    meetingId: meetingId                                               // 277\n  });                                                                  //\n  if ((u != null) && (u.authToken != null)) {                          // 282\n    Meteor.Users.update({                                              // 284\n      userId: user.userid,                                             // 284\n      meetingId: meetingId                                             // 284\n    }, {                                                               //\n      $set: {                                                          // 284\n        user: {                                                        // 284\n          userid: user.userid,                                         // 286\n          presenter: user.presenter,                                   // 286\n          name: user.name,                                             // 286\n          _sort_name: user.name.toLowerCase(),                         // 286\n          phone_user: user.phone_user,                                 // 286\n          set_emoji_time: user.set_emoji_time,                         // 286\n          emoji_status: user.emoji_status,                             // 286\n          has_stream: user.has_stream,                                 // 286\n          role: user.role,                                             // 286\n          listenOnly: user.listenOnly,                                 // 286\n          extern_userid: user.extern_userid,                           // 286\n          locked: user.locked,                                         // 286\n          time_of_joining: user.timeOfJoining,                         // 286\n          connection_status: \"online\",                                 // 286\n          voiceUser: {                                                 // 286\n            web_userid: user.voiceUser.web_userid,                     // 301\n            callernum: user.voiceUser.callernum,                       // 301\n            userid: user.voiceUser.userid,                             // 301\n            talking: user.voiceUser.talking,                           // 301\n            joined: user.voiceUser.joined,                             // 301\n            callername: user.voiceUser.callername,                     // 301\n            locked: user.voiceUser.locked,                             // 301\n            muted: user.voiceUser.muted                                // 301\n          },                                                           //\n          webcam_stream: user.webcam_stream                            // 286\n        }                                                              //\n      }                                                                //\n    }, function(err) {                                                 //\n      var funct;                                                       // 311\n      if (err != null) {                                               // 311\n        Meteor.log.error(\"_error \" + err + \" when trying to insert user \" + userId);\n        return callback();                                             //\n      } else {                                                         //\n        funct = function(cbk) {                                        // 315\n          Meteor.log.info(\"_(case1) UPDATING USER \" + user.userid + \", authToken= \" + u.authToken + \", locked=\" + user.locked + \", username=\" + user.name);\n          return cbk();                                                //\n        };                                                             //\n        return funct(callback);                                        //\n      }                                                                //\n    });                                                                //\n    welcomeMessage = Meteor.config.defaultWelcomeMessage.replace(/%%CONFNAME%%/, (ref = Meteor.Meetings.findOne({\n      meetingId: meetingId                                             //\n    })) != null ? ref.meetingName : void 0);                           //\n    welcomeMessage = welcomeMessage + Meteor.config.defaultWelcomeMessageFooter;\n    return Meteor.Chat.upsert({                                        //\n      meetingId: meetingId,                                            // 327\n      userId: userId,                                                  // 327\n      'message.chat_type': 'SYSTEM_MESSAGE',                           // 327\n      'message.to_userid': userId                                      // 327\n    }, {                                                               //\n      meetingId: meetingId,                                            // 332\n      userId: userId,                                                  // 332\n      message: {                                                       // 332\n        chat_type: 'SYSTEM_MESSAGE',                                   // 336\n        message: welcomeMessage,                                       // 336\n        from_color: '0x3399FF',                                        // 336\n        to_userid: userId,                                             // 336\n        from_userid: 'SYSTEM_MESSAGE',                                 // 336\n        from_username: '',                                             // 336\n        from_time: (ref1 = user.timeOfJoining) != null ? ref1.toString() : void 0\n      }                                                                //\n    }, function(err) {                                                 //\n      if (err != null) {                                               // 344\n        return Meteor.log.error(\"_error \" + err + \" when trying to insert welcome message for \" + userId);\n      } else {                                                         //\n        return Meteor.log.info(\"_added/updated a system message in chat for user \" + userId);\n      }                                                                //\n    });                                                                //\n  } else {                                                             //\n    return Meteor.Users.upsert({                                       //\n      meetingId: meetingId,                                            // 355\n      userId: userId                                                   // 355\n    }, {                                                               //\n      meetingId: meetingId,                                            // 355\n      userId: userId,                                                  // 355\n      user: {                                                          // 355\n        userid: user.userid,                                           // 359\n        presenter: user.presenter,                                     // 359\n        name: user.name,                                               // 359\n        _sort_name: user.name.toLowerCase(),                           // 359\n        phone_user: user.phone_user,                                   // 359\n        emoji_status: user.emoji_status,                               // 359\n        set_emoji_time: user.set_emoji_time,                           // 359\n        has_stream: user.has_stream,                                   // 359\n        role: user.role,                                               // 359\n        listenOnly: user.listenOnly,                                   // 359\n        extern_userid: user.extern_userid,                             // 359\n        locked: user.locked,                                           // 359\n        time_of_joining: user.timeOfJoining,                           // 359\n        connection_status: \"\",                                         // 359\n        voiceUser: {                                                   // 359\n          web_userid: user.voiceUser.web_userid,                       // 374\n          callernum: user.voiceUser.callernum,                         // 374\n          userid: user.voiceUser.userid,                               // 374\n          talking: user.voiceUser.talking,                             // 374\n          joined: user.voiceUser.joined,                               // 374\n          callername: user.voiceUser.callername,                       // 374\n          locked: user.voiceUser.locked,                               // 374\n          muted: user.voiceUser.muted                                  // 374\n        },                                                             //\n        webcam_stream: user.webcam_stream                              // 359\n      }                                                                //\n    }, function(err, numChanged) {                                     //\n      var funct;                                                       // 384\n      if (numChanged.insertedId != null) {                             // 384\n        funct = function(cbk) {                                        // 385\n          Meteor.log.info(\"_joining user (case2) userid=[\" + userId + \"]:\" + user.name + \". Users.size is now \" + (Meteor.Users.find({\n            meetingId: meetingId                                       // 387\n          }).count()));                                                //\n          return cbk();                                                //\n        };                                                             //\n        return funct(callback);                                        //\n      } else {                                                         //\n        return callback();                                             //\n      }                                                                //\n    });                                                                //\n  }                                                                    //\n};                                                                     // 274\n                                                                       //\nthis.createDummyUser = function(meetingId, userId, authToken) {        // 8\n  if (Meteor.Users.findOne({                                           // 398\n    userId: userId,                                                    //\n    meetingId: meetingId,                                              //\n    authToken: authToken                                               //\n  }) != null) {                                                        //\n    return Meteor.log.info(\"html5 user userId:[\" + userId + \"] from [\" + meetingId + \"] tried to revalidate token\");\n  } else {                                                             //\n    return Meteor.Users.insert({                                       //\n      meetingId: meetingId,                                            // 401\n      userId: userId,                                                  // 401\n      authToken: authToken,                                            // 401\n      clientType: \"HTML5\",                                             // 401\n      validated: false                                                 // 401\n    }, function(err, id) {                                             //\n      return Meteor.log.info(\"_added a dummy html5 user with: userId=[\" + userId + \"] Users.size is now \" + (Meteor.Users.find({\n        meetingId: meetingId                                           // 409\n      }).count()));                                                    //\n    });                                                                //\n  }                                                                    //\n};                                                                     // 397\n                                                                       //\nthis.handleLockingMic = function(meetingId, newSettings) {             // 8\n  var i, len, ref, ref1, results, u;                                   // 416\n  ref1 = (ref = Meteor.Users.find({                                    // 416\n    meetingId: meetingId,                                              //\n    'user.role': 'VIEWER',                                             //\n    'user.listenOnly': false,                                          //\n    'user.locked': true,                                               //\n    'user.voiceUser.joined': true,                                     //\n    'user.voiceUser.muted': false                                      //\n  })) != null ? ref.fetch() : void 0;                                  //\n  results = [];                                                        // 416\n  for (i = 0, len = ref1.length; i < len; i++) {                       //\n    u = ref1[i];                                                       //\n    results.push(Meteor.call('muteUser', meetingId, u.userId, u.userId, u.authToken, true));\n  }                                                                    // 416\n  return results;                                                      //\n};                                                                     // 414\n                                                                       //\nthis.setUserLockedStatus = function(meetingId, userId, isLocked) {     // 8\n  var u;                                                               // 428\n  u = Meteor.Users.findOne({                                           // 428\n    meetingId: meetingId,                                              // 428\n    userId: userId                                                     // 428\n  });                                                                  //\n  if (u != null) {                                                     // 429\n    Meteor.Users.update({                                              // 430\n      userId: userId,                                                  // 430\n      meetingId: meetingId                                             // 430\n    }, {                                                               //\n      $set: {                                                          // 431\n        'user.locked': isLocked                                        // 431\n      }                                                                //\n    }, function(err, numChanged) {                                     //\n      if (err != null) {                                               // 433\n        return Meteor.log.error(\"_error \" + err + \" while updating user \" + userId + \" with lock settings\");\n      } else {                                                         //\n        return Meteor.log.info(\"_setting user locked status for userid:[\" + userId + \"] from [\" + meetingId + \"] locked=\" + isLocked);\n      }                                                                //\n    });                                                                //\n    if (u.user.role === 'VIEWER' && !u.user.listenOnly && u.user.voiceUser.joined && !u.user.voiceUser.muted && isLocked) {\n      return Meteor.call('muteUser', meetingId, u.userId, u.userId, u.authToken, true);\n    }                                                                  //\n  } else {                                                             //\n    return Meteor.log.error(\"(unsuccessful-no such user) setting user locked status for userid:[\" + userId + \"] from [\" + meetingId + \"] locked=\" + isLocked);\n  }                                                                    //\n};                                                                     // 427\n                                                                       //\nthis.clearUsersCollection = function(meetingId) {                      // 8\n  if (meetingId != null) {                                             // 448\n    return Meteor.Users.remove({                                       //\n      meetingId: meetingId                                             // 449\n    }, function(err) {                                                 //\n      if (err != null) {                                               // 450\n        return Meteor.log.error(\"_error \" + (JSON.stringify(err)) + \" while removing users from meeting \" + meetingId);\n      } else {                                                         //\n        return Meteor.log.info(\"_cleared Users Collection (meetingId: \" + meetingId + \")!\");\n      }                                                                //\n    });                                                                //\n  } else {                                                             //\n    return Meteor.Users.remove({}, function(err) {                     //\n      if (err != null) {                                               // 457\n        return Meteor.log.error(\"_error \" + (JSON.stringify(err)) + \" while removing users from all meetings!\");\n      } else {                                                         //\n        return Meteor.log.info(\"_cleared Users Collection (all meetings)!\");\n      }                                                                //\n    });                                                                //\n  }                                                                    //\n};                                                                     // 447\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/collection_methods/users.coffee.js","sourceMap":{"version":3,"sources":["/server/collection_methods/users.coffee"],"names":[],"mappings":"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","file":"/server/collection_methods/users.coffee.js","sourcesContent":["# --------------------------------------------------------------------------------------------\r\n# Public methods on server\r\n# All these method must first authenticate the user before it calls the private function counterpart below\r\n# which sends the request to bbbApps. If the method is modifying the media the current user is sharing,\r\n# you should perform the request before sending the request to bbbApps. This allows the user request to be performed\r\n# immediately, since they do not require permission for things such as muting themsevles.\r\n# --------------------------------------------------------------------------------------------\r\nMeteor.methods\r\n  # meetingId: the meetingId of the meeting the user is in\r\n  # toSetUserId: the userId of the user joining\r\n  # requesterUserId: the userId of the requester\r\n  # requesterToken: the authToken of the requester\r\n  listenOnlyRequestToggle: (meetingId, userId, authToken, isJoining) ->\r\n    voiceConf = Meteor.Meetings.findOne({meetingId:meetingId})?.voiceConf\r\n    username = Meteor.Users.findOne({meetingId:meetingId, userId:userId})?.user.name\r\n    if isJoining\r\n      if isAllowedTo('joinListenOnly', meetingId, userId, authToken)\r\n        message =\r\n          payload:\r\n            userid: userId\r\n            meeting_id: meetingId\r\n            voice_conf: voiceConf\r\n            name: username\r\n          header:\r\n            timestamp: new Date().getTime()\r\n            name: \"user_connected_to_global_audio\"\r\n            version: \"0.0.1\"\r\n\r\n        Meteor.log.info \"publishing a user listenOnly toggleRequest #{isJoining} request for #{userId}\"\r\n\r\n        publish Meteor.config.redis.channels.toBBBApps.meeting, message\r\n\r\n    else\r\n      if isAllowedTo('leaveListenOnly', meetingId, userId, authToken)\r\n        message =\r\n          payload:\r\n            userid: userId\r\n            meeting_id: meetingId\r\n            voice_conf: voiceConf\r\n            name: username\r\n          header:\r\n            timestamp: new Date().getTime()\r\n            name: \"user_disconnected_from_global_audio\"\r\n            version: \"0.0.1\"\r\n\r\n        Meteor.log.info \"publishing a user listenOnly toggleRequest #{isJoining} request for #{userId}\"\r\n\r\n        publish Meteor.config.redis.channels.toBBBApps.meeting, message\r\n\r\n    return\r\n\r\n  # meetingId: the meetingId of the meeting the user[s] is in\r\n  # toMuteUserId: the userId of the user to be muted\r\n  # requesterUserId: the userId of the requester\r\n  # requesterToken: the authToken of the requester\r\n  muteUser: (meetingId, toMuteUserId, requesterUserId, requesterToken) ->\r\n    action = ->\r\n      if toMuteUserId is requesterUserId\r\n        return 'muteSelf'\r\n      else\r\n        return 'muteOther'\r\n\r\n    if isAllowedTo(action(), meetingId, requesterUserId, requesterToken)\r\n      message =\r\n        payload:\r\n          user_id: toMuteUserId\r\n          meeting_id: meetingId\r\n          mute: true\r\n          requester_id: requesterUserId\r\n        header:\r\n          timestamp: new Date().getTime()\r\n          name: \"mute_user_request_message\"\r\n          version: \"0.0.1\"\r\n\r\n      Meteor.log.info \"publishing a user mute request for #{toMuteUserId}\"\r\n\r\n      publish Meteor.config.redis.channels.toBBBApps.users, message\r\n      updateVoiceUser meetingId, {'web_userid': toMuteUserId, talking:false, muted:true}\r\n    return\r\n\r\n  # meetingId: the meetingId of the meeting the user[s] is in\r\n  # toMuteUserId: the userId of the user to be unmuted\r\n  # requesterUserId: the userId of the requester\r\n  # requesterToken: the authToken of the requester\r\n  unmuteUser: (meetingId, toMuteUserId, requesterUserId, requesterToken) ->\r\n    action = ->\r\n      if toMuteUserId is requesterUserId\r\n        return 'unmuteSelf'\r\n      else\r\n        return 'unmuteOther'\r\n\r\n    if isAllowedTo(action(), meetingId, requesterUserId, requesterToken)\r\n      message =\r\n        payload:\r\n          user_id: toMuteUserId\r\n          meeting_id: meetingId\r\n          mute: false\r\n          requester_id: requesterUserId\r\n        header:\r\n          timestamp: new Date().getTime()\r\n          name: \"mute_user_request_message\"\r\n          version: \"0.0.1\"\r\n\r\n      Meteor.log.info \"publishing a user unmute request for #{toMuteUserId}\"\r\n\r\n      publish Meteor.config.redis.channels.toBBBApps.users, message\r\n      updateVoiceUser meetingId, {'web_userid': toMuteUserId, talking:false, muted:false}\r\n    return\r\n\r\n  userSetEmoji: (meetingId, toRaiseUserId, raisedByUserId, raisedByToken, status) ->\r\n    if isAllowedTo('setEmojiStatus', meetingId, raisedByUserId, raisedByToken)\r\n      message =\r\n        payload:\r\n          emoji_status: status\r\n          userid: toRaiseUserId\r\n          meeting_id: meetingId\r\n        header:\r\n          timestamp: new Date().getTime()\r\n          name: \"user_emoji_status_message\"\r\n          version: \"0.0.1\"\r\n\r\n      # publish to pubsub\r\n      publish Meteor.config.redis.channels.toBBBApps.users, message\r\n    return\r\n\r\n  # meetingId: the meeting where the user is\r\n  # userId: the userid of the user logging out\r\n  # authToken: the authToken of the user\r\n  userLogout: (meetingId, userId, authToken) ->\r\n    if isAllowedTo('logoutSelf', meetingId, userId, authToken)\r\n      Meteor.log.info \"a user is logging out from #{meetingId}:\" + userId\r\n      requestUserLeaving meetingId, userId\r\n\r\n# --------------------------------------------------------------------------------------------\r\n# Private methods on server\r\n# --------------------------------------------------------------------------------------------\r\n\r\n# Only callable from server\r\n# Received information from BBB-Apps that a user left\r\n# Need to update the collection\r\n# params: meetingid, userid as defined in BBB-Apps\r\n# callback\r\n@markUserOffline = (meetingId, userId, callback) ->\r\n  # mark the user as offline. remove from the collection on meeting_end #TODO\r\n  user = Meteor.Users.findOne({meetingId: meetingId, userId: userId})\r\n  if user?.clientType is \"HTML5\"\r\n    Meteor.log.info \"marking html5 user [#{userId}] as offline in meeting[#{meetingId}]\"\r\n    Meteor.Users.update({meetingId: meetingId, userId: userId}, {$set:{\r\n    'user.connection_status':'offline'\r\n    'voiceUser.talking': false\r\n    'voiceUser.joined': false\r\n    'voiceUser.muted': false\r\n    'user.time_of_joining': 0\r\n    'user.listenOnly': false\r\n    }}, (err, numChanged) ->\r\n      if err?\r\n        Meteor.log.error \"_unsucc update (mark as offline) of user #{user?.user.name} #{userId}\r\n          err=#{JSON.stringify err}\"\r\n        callback()\r\n      else\r\n        funct = (cbk) ->\r\n          Meteor.log.info \"_marking as offline html5 user #{user?.user.name}\r\n           #{userId}  numChanged=#{numChanged}\"\r\n          cbk()\r\n\r\n        funct(callback)\r\n    )\r\n  else\r\n    Meteor.Users.remove({meetingId: meetingId, userId: userId}, (err, numDeletions) ->\r\n      if err?\r\n        Meteor.log.error \"_unsucc deletion of user #{user?.user.name} #{userId}\r\n          err=#{JSON.stringify err}\"\r\n        callback()\r\n      else\r\n        funct = (cbk) ->\r\n          Meteor.log.info \"_deleting info for user #{user?.user.name} #{userId}\r\n            numDeletions=#{numDeletions}\"\r\n          cbk()\r\n\r\n        funct(callback)\r\n    )\r\n\r\n\r\n# Corresponds to a valid action on the HTML clientside\r\n# After authorization, publish a user_leaving_request in redis\r\n# params: meetingid, userid as defined in BBB-App\r\n@requestUserLeaving = (meetingId, userId) ->\r\n  userObject = Meteor.Users.findOne({'meetingId': meetingId, 'userId': userId})\r\n  voiceConf = Meteor.Meetings.findOne({meetingId:meetingId})?.voiceConf\r\n  if userObject? and voiceConf? and userId? and meetingId?\r\n\r\n    # end listenOnly audio for the departing user\r\n    if userObject.user.listenOnly\r\n      listenOnlyMessage =\r\n        payload:\r\n          userid: userId\r\n          meeting_id: meetingId\r\n          voice_conf: voiceConf\r\n          name: userObject.user.name\r\n        header:\r\n          timestamp: new Date().getTime()\r\n          name: \"user_disconnected_from_global_audio\"\r\n\r\n      publish Meteor.config.redis.channels.toBBBApps.meeting, listenOnlyMessage\r\n\r\n    # remove user from meeting\r\n    message =\r\n      payload:\r\n        meeting_id: meetingId\r\n        userid: userId\r\n      header:\r\n        timestamp: new Date().getTime()\r\n        name: \"user_leaving_request\"\r\n\r\n    Meteor.log.info \"sending a user_leaving_request for #{meetingId}:#{userId}\"\r\n    publish Meteor.config.redis.channels.toBBBApps.users, message\r\n  else\r\n    Meteor.log.info \"did not have enough information to send a user_leaving_request\"\r\n\r\n\r\n#update a voiceUser - a helper method\r\n@updateVoiceUser = (meetingId, voiceUserObject, callback) ->\r\n  u = Meteor.Users.findOne userId: voiceUserObject.web_userid\r\n  if u?\r\n    if voiceUserObject.talking?\r\n      Meteor.Users.update({meetingId: meetingId ,userId: voiceUserObject.web_userid},\r\n       {$set: {'user.voiceUser.talking':voiceUserObject.talking}},\r\n       (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_unsucc update of voiceUser #{voiceUserObject.web_userid}\r\n           [talking] err=#{JSON.stringify err}\"\r\n        callback()\r\n      ) # talking\r\n    if voiceUserObject.joined?\r\n      Meteor.Users.update({meetingId: meetingId ,userId: voiceUserObject.web_userid},\r\n       {$set: {'user.voiceUser.joined':voiceUserObject.joined}},\r\n       (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_unsucc update of voiceUser #{voiceUserObject.web_userid}\r\n           [joined] err=#{JSON.stringify err}\"\r\n        callback()\r\n      ) # joined\r\n    if voiceUserObject.locked?\r\n      Meteor.Users.update({meetingId: meetingId ,userId: voiceUserObject.web_userid},\r\n       {$set: {'user.voiceUser.locked':voiceUserObject.locked}},\r\n       (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_unsucc update of voiceUser #{voiceUserObject.web_userid}\r\n           [locked] err=#{JSON.stringify err}\"\r\n        callback()\r\n      ) # locked\r\n    if voiceUserObject.muted?\r\n      Meteor.Users.update({meetingId: meetingId ,userId: voiceUserObject.web_userid},\r\n       {$set: {'user.voiceUser.muted':voiceUserObject.muted}},\r\n       (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_unsucc update of voiceUser #{voiceUserObject.web_userid}\r\n           [muted] err=#{JSON.stringify err}\"\r\n        callback()\r\n      ) # muted\r\n    if voiceUserObject.listen_only?\r\n      Meteor.Users.update({meetingId: meetingId ,userId: voiceUserObject.web_userid},\r\n       {$set: {'user.listenOnly':voiceUserObject.listen_only}},\r\n       (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_unsucc update of voiceUser #{voiceUserObject.web_userid}\r\n           [listenOnly] err=#{JSON.stringify err}\"\r\n        callback()\r\n      ) # listenOnly\r\n  else\r\n    Meteor.log.error \"ERROR! did not find such voiceUser!\"\r\n    callback()\r\n\r\n@userJoined = (meetingId, user, callback) ->\r\n  userId = user.userid\r\n\r\n  u = Meteor.Users.findOne({userId:user.userid, meetingId: meetingId})\r\n  # the collection already contains an entry for this user\r\n  # because the user is reconnecting OR\r\n  # in the case of an html5 client user we added a dummy user on\r\n  # register_user_message (to save authToken)\r\n  if u? and u.authToken?\r\n\r\n    Meteor.Users.update({userId:user.userid, meetingId: meetingId}, {$set:{\r\n      user:\r\n        userid: user.userid\r\n        presenter: user.presenter\r\n        name: user.name\r\n        _sort_name: user.name.toLowerCase()\r\n        phone_user: user.phone_user\r\n        set_emoji_time: user.set_emoji_time\r\n        emoji_status: user.emoji_status\r\n        has_stream: user.has_stream\r\n        role: user.role\r\n        listenOnly: user.listenOnly\r\n        extern_userid: user.extern_userid\r\n        locked: user.locked\r\n        time_of_joining: user.timeOfJoining\r\n        connection_status: \"online\" # TODO consider other default value\r\n        voiceUser:\r\n          web_userid: user.voiceUser.web_userid\r\n          callernum: user.voiceUser.callernum\r\n          userid: user.voiceUser.userid\r\n          talking: user.voiceUser.talking\r\n          joined: user.voiceUser.joined\r\n          callername: user.voiceUser.callername\r\n          locked: user.voiceUser.locked\r\n          muted: user.voiceUser.muted\r\n        webcam_stream: user.webcam_stream\r\n      }}, (err) ->\r\n        if err?\r\n          Meteor.log.error \"_error #{err} when trying to insert user #{userId}\"\r\n          callback()\r\n        else\r\n          funct = (cbk) ->\r\n            Meteor.log.info \"_(case1) UPDATING USER #{user.userid}, authToken=\r\n            #{u.authToken}, locked=#{user.locked}, username=#{user.name}\"\r\n            cbk()\r\n\r\n          funct(callback)\r\n    )\r\n\r\n    welcomeMessage = Meteor.config.defaultWelcomeMessage\r\n    .replace /%%CONFNAME%%/, Meteor.Meetings.findOne({meetingId: meetingId})?.meetingName\r\n    welcomeMessage = welcomeMessage + Meteor.config.defaultWelcomeMessageFooter\r\n    # add the welcome message if it's not there already OR update time_of_joining\r\n    Meteor.Chat.upsert({\r\n      meetingId: meetingId\r\n      userId: userId\r\n      'message.chat_type': 'SYSTEM_MESSAGE'\r\n      'message.to_userid': userId\r\n    }, {\r\n      meetingId: meetingId\r\n      userId: userId\r\n      message:\r\n        chat_type: 'SYSTEM_MESSAGE'\r\n        message: welcomeMessage\r\n        from_color: '0x3399FF'\r\n        to_userid: userId\r\n        from_userid: 'SYSTEM_MESSAGE'\r\n        from_username: ''\r\n        from_time: user.timeOfJoining?.toString()\r\n    }, (err) ->\r\n      if err?\r\n        Meteor.log.error \"_error #{err} when trying to insert welcome message for #{userId}\"\r\n      else\r\n        Meteor.log.info \"_added/updated a system message in chat for user #{userId}\"\r\n      # note that we already called callback() when updating the user. Adding\r\n      # the welcome message in the chat is not as vital and we can afford to\r\n      # complete it when possible, without blocking the serial event messages processing\r\n    )\r\n\r\n  else\r\n    # Meteor.log.info \"NOTE: got user_joined_message #{user.name} #{user.userid}\"\r\n    Meteor.Users.upsert({meetingId: meetingId, userId: userId}, {\r\n      meetingId: meetingId\r\n      userId: userId\r\n      user:\r\n        userid: user.userid\r\n        presenter: user.presenter\r\n        name: user.name\r\n        _sort_name: user.name.toLowerCase()\r\n        phone_user: user.phone_user\r\n        emoji_status: user.emoji_status\r\n        set_emoji_time: user.set_emoji_time\r\n        has_stream: user.has_stream\r\n        role: user.role\r\n        listenOnly: user.listenOnly\r\n        extern_userid: user.extern_userid\r\n        locked: user.locked\r\n        time_of_joining: user.timeOfJoining\r\n        connection_status: \"\" # TODO consider other default value\r\n        voiceUser:\r\n          web_userid: user.voiceUser.web_userid\r\n          callernum: user.voiceUser.callernum\r\n          userid: user.voiceUser.userid\r\n          talking: user.voiceUser.talking\r\n          joined: user.voiceUser.joined\r\n          callername: user.voiceUser.callername\r\n          locked: user.voiceUser.locked\r\n          muted: user.voiceUser.muted\r\n        webcam_stream: user.webcam_stream\r\n      }, (err, numChanged) ->\r\n        if numChanged.insertedId?\r\n          funct = (cbk) ->\r\n            Meteor.log.info \"_joining user (case2) userid=[#{userId}]:#{user.name}.\r\n            Users.size is now #{Meteor.Users.find({meetingId: meetingId}).count()}\"\r\n            cbk()\r\n\r\n          funct(callback)\r\n        else\r\n          callback()\r\n    )\r\n\r\n\r\n\r\n@createDummyUser = (meetingId, userId, authToken) ->\r\n  if Meteor.Users.findOne({userId:userId, meetingId: meetingId, authToken:authToken})?\r\n    Meteor.log.info \"html5 user userId:[#{userId}] from [#{meetingId}] tried to revalidate token\"\r\n  else\r\n    Meteor.Users.insert({\r\n      meetingId: meetingId\r\n      userId: userId\r\n      authToken: authToken\r\n      clientType: \"HTML5\"\r\n      validated: false #will be validated on validate_auth_token_reply\r\n      }, (err, id) ->\r\n        Meteor.log.info \"_added a dummy html5 user with: userId=[#{userId}]\r\n      Users.size is now #{Meteor.Users.find({meetingId: meetingId}).count()}\"\r\n    )\r\n\r\n# when new lock settings including disableMic are set,\r\n# all viewers that are in the audio bridge with a mic should be muted and locked\r\n@handleLockingMic = (meetingId, newSettings) ->\r\n  # send mute requests for the viewer users joined with mic\r\n  for u in Meteor.Users.find({\r\n        meetingId:meetingId\r\n        'user.role':'VIEWER'\r\n        'user.listenOnly':false\r\n        'user.locked':true\r\n        'user.voiceUser.joined':true\r\n        'user.voiceUser.muted':false})?.fetch()\r\n    # Meteor.log.info u.user.name #\r\n    Meteor.call('muteUser', meetingId, u.userId, u.userId, u.authToken, true) #true for muted\r\n\r\n# change the locked status of a user (lock settings)\r\n@setUserLockedStatus = (meetingId, userId, isLocked) ->\r\n  u = Meteor.Users.findOne({meetingId:meetingId, userId:userId})\r\n  if u?\r\n    Meteor.Users.update({userId:userId, meetingId: meetingId},\r\n      {$set:{'user.locked': isLocked}},\r\n      (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_error #{err} while updating user #{userId} with lock settings\"\r\n        else\r\n          Meteor.log.info \"_setting user locked status for userid:[#{userId}] from [#{meetingId}] locked=#{isLocked}\"\r\n    )\r\n    # if the user is sharing audio, he should be muted upon locking involving disableMic\r\n    if u.user.role is 'VIEWER' and !u.user.listenOnly and u.user.voiceUser.joined and !u.user.voiceUser.muted and isLocked\r\n      Meteor.call('muteUser', meetingId, u.userId, u.userId, u.authToken, true) #true for muted\r\n\r\n  else\r\n    Meteor.log.error \"(unsuccessful-no such user) setting user locked status for userid:[#{userId}] from [#{meetingId}] locked=#{isLocked}\"\r\n\r\n\r\n# called on server start and on meeting end\r\n@clearUsersCollection = (meetingId) ->\r\n  if meetingId?\r\n    Meteor.Users.remove({meetingId: meetingId}, (err) ->\r\n      if err?\r\n        Meteor.log.error \"_error #{JSON.stringify err} while removing users from meeting #{meetingId}\"\r\n      else\r\n        Meteor.log.info \"_cleared Users Collection (meetingId: #{meetingId})!\"\r\n    )\r\n  else\r\n    Meteor.Users.remove({}, (err) ->\r\n      if err?\r\n        Meteor.log.error \"_error #{JSON.stringify err} while removing users from all meetings!\"\r\n      else\r\n        Meteor.log.info \"_cleared Users Collection (all meetings)!\"\r\n    )\r\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// collections/collections.coffee.js                                   //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.Users = new Meteor.Collection(\"bbb_users\");                     // 1\n                                                                       //\nMeteor.Chat = new Meteor.Collection(\"bbb_chat\");                       // 1\n                                                                       //\nMeteor.Meetings = new Meteor.Collection(\"meetings\");                   // 1\n                                                                       //\nMeteor.Presentations = new Meteor.Collection(\"presentations\");         // 1\n                                                                       //\nMeteor.Shapes = new Meteor.Collection(\"shapes\");                       // 1\n                                                                       //\nMeteor.Slides = new Meteor.Collection(\"slides\");                       // 1\n                                                                       //\nMeteor.Polls = new Meteor.Collection(\"bbb_poll\");                      // 1\n                                                                       //\nMeteor.WhiteboardCleanStatus = new Meteor.Collection(\"whiteboard-clean-status\");\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/collections/collections.coffee.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/collections/collections.coffee"],"names":[],"mappings":";;;;;;;;;AAAA,MAAM,CAAC,KAAP,GAAmB,UAAM,CAAC,UAAP,CAAkB,WAAlB,CAAnB;;AAAA,MACM,CAAC,IAAP,GAAkB,UAAM,CAAC,UAAP,CAAkB,UAAlB,CADlB;;AAAA,MAEM,CAAC,QAAP,GAAsB,UAAM,CAAC,UAAP,CAAkB,UAAlB,CAFtB;;AAAA,MAGM,CAAC,aAAP,GAA2B,UAAM,CAAC,UAAP,CAAkB,eAAlB,CAH3B;;AAAA,MAIM,CAAC,MAAP,GAAoB,UAAM,CAAC,UAAP,CAAkB,QAAlB,CAJpB;;AAAA,MAKM,CAAC,MAAP,GAAoB,UAAM,CAAC,UAAP,CAAkB,QAAlB,CALpB;;AAAA,MAMM,CAAC,KAAP,GAAmB,UAAM,CAAC,UAAP,CAAkB,UAAlB,CANnB;;AAAA,MAQM,CAAC,qBAAP,GAAmC,UAAM,CAAC,UAAP,CAAkB,yBAAlB,CARnC","file":"/collections/collections.coffee.js","sourcesContent":["Meteor.Users = new Meteor.Collection(\"bbb_users\")\r\nMeteor.Chat = new Meteor.Collection(\"bbb_chat\")\r\nMeteor.Meetings = new Meteor.Collection(\"meetings\")\r\nMeteor.Presentations = new Meteor.Collection(\"presentations\")\r\nMeteor.Shapes = new Meteor.Collection(\"shapes\")\r\nMeteor.Slides = new Meteor.Collection(\"slides\")\r\nMeteor.Polls = new Meteor.Collection(\"bbb_poll\")\r\n\r\nMeteor.WhiteboardCleanStatus = new Meteor.Collection(\"whiteboard-clean-status\")"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/bbblogger.coffee.js                                          //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                                                                       // 1\n/*                                                                     // 1\nbunyan = Meteor.require 'bunyan'                                       //\n                                                                       //\nlogger = bunyan.createLogger({                                         //\n  name: 'bbbnode',                                                     //\n  streams: [                                                           //\n    {                                                                  //\n      level: 'debug',                                                  //\n      stream: process.stdout,                                          //\n    },                                                                 //\n    {                                                                  //\n      level: 'info',                                                   //\n      path: Meteor.config.log.path                                     //\n    }                                                                  //\n  ]                                                                    //\n})                                                                     //\n */                                                                    //\n                                                                       // 1\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/bbblogger.coffee.js","sourceMap":{"version":3,"sources":["/server/bbblogger.coffee"],"names":[],"mappings":";;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;GAAA;AAAA","file":"/server/bbblogger.coffee.js","sourcesContent":["###\r\nbunyan = Meteor.require 'bunyan'\r\n\r\nlogger = bunyan.createLogger({\r\n  name: 'bbbnode',\r\n  streams: [\r\n    {\r\n      level: 'debug',\r\n      stream: process.stdout,\r\n    },\r\n    {\r\n      level: 'info',\r\n      path: Meteor.config.log.path\r\n    }\r\n  ]\r\n})\r\n###\r\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/publish.coffee.js                                            //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.publish('users', function(meetingId, userid, authToken) {       // 3\n  var ref, ref1, u, username;                                          // 4\n  Meteor.log.info(\"attempt publishing users for \" + meetingId + \", \" + userid + \", \" + authToken);\n  u = Meteor.Users.findOne({                                           // 4\n    'userId': userid,                                                  // 5\n    'meetingId': meetingId                                             // 5\n  });                                                                  //\n  if (u != null) {                                                     // 6\n    Meteor.log.info(\"found it from the first time \" + userid);         // 7\n    if (isAllowedTo('subscribeUsers', meetingId, userid, authToken)) {\n      Meteor.log.info(userid + \" was allowed to subscribe to 'users'\");\n      username = (u != null ? (ref = u.user) != null ? ref.name : void 0 : void 0) || \"UNKNOWN\";\n      if (((ref1 = u.user) != null ? ref1.connection_status : void 0) !== 'online') {\n        Meteor.call(\"validateAuthToken\", meetingId, userid, authToken);\n      }                                                                //\n      Meteor.Users.update({                                            // 9\n        'meetingId': meetingId,                                        // 16\n        'userId': userid                                               // 16\n      }, {                                                             //\n        $set: {                                                        // 16\n          'user.connection_status': \"online\"                           // 16\n        }                                                              //\n      });                                                              //\n      Meteor.log.info(\"username of the subscriber: \" + username + \", connection_status becomes online\");\n      this._session.socket.on(\"close\", Meteor.bindEnvironment((function(_this) {\n        return function() {                                            //\n          Meteor.log.info(\"\\na user lost connection: session.id=\" + _this._session.id + \" userId = \" + userid + \", username=\" + username + \", meeting=\" + meetingId);\n          Meteor.Users.update({                                        // 20\n            'meetingId': meetingId,                                    // 21\n            'userId': userid                                           // 21\n          }, {                                                         //\n            $set: {                                                    // 21\n              'user.connection_status': \"offline\"                      // 21\n            }                                                          //\n          });                                                          //\n          Meteor.log.info(\"username of the user losing connection: \" + username + \", connection_status: becomes offline\");\n          return requestUserLeaving(meetingId, userid);                //\n        };                                                             //\n      })(this)));                                                      //\n      return Meteor.Users.find({                                       //\n        meetingId: meetingId,                                          // 29\n        'user.connection_status': {                                    // 29\n          $in: [\"online\", \"\"]                                          // 29\n        }                                                              //\n      }, {                                                             //\n        fields: {                                                      // 30\n          'authToken': false                                           // 30\n        }                                                              //\n      });                                                              //\n    } else {                                                           //\n      Meteor.log.warn(\"was not authorized to subscribe to 'users'\");   // 33\n      return this.error(new Meteor.Error(402, \"The user was not authorized to subscribe to 'users'\"));\n    }                                                                  //\n  } else {                                                             //\n    Meteor.call(\"validateAuthToken\", meetingId, userid, authToken);    // 37\n    Meteor.log.error(\"there was no such user \" + userid + \"  in \" + meetingId);\n    return Meteor.Users.find({                                         //\n      meetingId: meetingId,                                            // 40\n      'user.connection_status': {                                      // 40\n        $in: [\"online\", \"\"]                                            // 40\n      }                                                                //\n    }, {                                                               //\n      fields: {                                                        // 41\n        'authToken': false                                             // 41\n      }                                                                //\n    });                                                                //\n  }                                                                    //\n});                                                                    // 3\n                                                                       //\nMeteor.publish('chat', function(meetingId, userid, authToken) {        // 3\n  if (isAllowedTo('subscribeChat', meetingId, userid, authToken)) {    // 46\n    Meteor.log.info(\"publishing chat for \" + meetingId + \" \" + userid + \" \" + authToken);\n    return Meteor.Chat.find({                                          // 49\n      $or: [                                                           // 49\n        {                                                              //\n          'message.chat_type': 'PUBLIC_CHAT',                          // 50\n          'meetingId': meetingId                                       // 50\n        }, {                                                           //\n          'message.from_userid': userid,                               // 51\n          'meetingId': meetingId                                       // 51\n        }, {                                                           //\n          'message.to_userid': userid,                                 // 52\n          'meetingId': meetingId                                       // 52\n        }                                                              //\n      ]                                                                //\n    });                                                                //\n  } else {                                                             //\n    this.error(new Meteor.Error(402, \"The user was not authorized to subscribe for 'chats'\"));\n  }                                                                    //\n});                                                                    // 45\n                                                                       //\nMeteor.publish('bbb_poll', function(meetingId, userid, authToken) {    // 3\n  if (isAllowedTo('subscribePoll', meetingId, userid, authToken)) {    // 61\n    if (isAllowedTo('subscribeAnswers', meetingId, userid, authToken)) {\n      Meteor.log.info(\"publishing Poll for presenter: \" + meetingId + \" \" + userid + \" \" + authToken);\n      return Meteor.Polls.find({                                       // 65\n        \"poll_info.meetingId\": meetingId,                              // 65\n        \"poll_info.users\": userid                                      // 65\n      });                                                              //\n    } else {                                                           //\n      Meteor.log.info(\"publishing Poll for viewer: \" + meetingId + \" \" + userid + \" \" + authToken);\n      return Meteor.Polls.find({                                       // 68\n        \"poll_info.meetingId\": meetingId,                              // 68\n        \"poll_info.users\": userid                                      // 68\n      }, {                                                             //\n        fields: {                                                      // 69\n          \"poll_info.poll.answers.num_votes\": 0                        // 69\n        }                                                              //\n      });                                                              //\n    }                                                                  //\n  } else {                                                             //\n    this.error(new Meteor.Error(402, \"The user was not authorized to subscribe for 'bbb_poll'\"));\n  }                                                                    //\n});                                                                    // 59\n                                                                       //\nMeteor.publish('shapes', function(meetingId) {                         // 3\n  return Meteor.Shapes.find({                                          //\n    meetingId: meetingId                                               // 75\n  });                                                                  //\n});                                                                    // 74\n                                                                       //\nMeteor.publish('slides', function(meetingId) {                         // 3\n  Meteor.log.info(\"publishing slides for \" + meetingId);               // 78\n  return Meteor.Slides.find({                                          //\n    meetingId: meetingId                                               // 79\n  });                                                                  //\n});                                                                    // 77\n                                                                       //\nMeteor.publish('meetings', function(meetingId) {                       // 3\n  Meteor.log.info(\"publishing meetings for \" + meetingId);             // 82\n  return Meteor.Meetings.find({                                        //\n    meetingId: meetingId                                               // 83\n  });                                                                  //\n});                                                                    // 81\n                                                                       //\nMeteor.publish('presentations', function(meetingId) {                  // 3\n  Meteor.log.info(\"publishing presentations for \" + meetingId);        // 86\n  return Meteor.Presentations.find({                                   //\n    meetingId: meetingId                                               // 87\n  });                                                                  //\n});                                                                    // 85\n                                                                       //\nMeteor.publish('whiteboard-clean-status', function(meetingId) {        // 3\n  Meteor.log.info(\"whiteboard clean status \" + meetingId);             // 90\n  return Meteor.WhiteboardCleanStatus.find({                           //\n    meetingId: meetingId                                               // 91\n  });                                                                  //\n});                                                                    // 89\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/publish.coffee.js","sourceMap":{"version":3,"sources":["/server/publish.coffee"],"names":[],"mappings":"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","file":"/server/publish.coffee.js","sourcesContent":["# Publish only the online users that are in the particular meetingId\r\n# On the client side we pass the meetingId parameter\r\nMeteor.publish 'users', (meetingId, userid, authToken) ->\r\n  Meteor.log.info \"attempt publishing users for #{meetingId}, #{userid}, #{authToken}\"\r\n  u = Meteor.Users.findOne({'userId': userid, 'meetingId': meetingId})\r\n  if u?\r\n    Meteor.log.info \"found it from the first time #{userid}\"\r\n    if isAllowedTo('subscribeUsers', meetingId, userid, authToken)\r\n      Meteor.log.info \"#{userid} was allowed to subscribe to 'users'\"\r\n      username = u?.user?.name or \"UNKNOWN\"\r\n\r\n      # offline -> online\r\n      if u.user?.connection_status isnt 'online'\r\n        Meteor.call \"validateAuthToken\", meetingId, userid, authToken\r\n\r\n      Meteor.Users.update({'meetingId':meetingId, 'userId': userid}, {$set:{'user.connection_status': \"online\"}})\r\n      Meteor.log.info \"username of the subscriber: \" + username + \", connection_status becomes online\"\r\n\r\n      @_session.socket.on(\"close\", Meteor.bindEnvironment(=>\r\n        Meteor.log.info \"\\na user lost connection: session.id=#{@_session.id} userId = #{userid}, username=#{username}, meeting=#{meetingId}\"\r\n        Meteor.Users.update({'meetingId':meetingId, 'userId': userid}, {$set:{'user.connection_status': \"offline\"}})\r\n        Meteor.log.info \"username of the user losing connection: \" + username + \", connection_status: becomes offline\"\r\n        requestUserLeaving meetingId, userid\r\n        )\r\n      )\r\n\r\n      #publish the users which are not offline\r\n      Meteor.Users.find(\r\n        {meetingId: meetingId, 'user.connection_status':{$in: [\"online\", \"\"]}},\r\n        {fields:{'authToken': false}\r\n        })\r\n    else\r\n      Meteor.log.warn \"was not authorized to subscribe to 'users'\"\r\n      @error(new Meteor.Error(402, \"The user was not authorized to subscribe to 'users'\"))\r\n\r\n  else #subscribing before the user was added to the collection\r\n    Meteor.call \"validateAuthToken\", meetingId, userid, authToken\r\n    Meteor.log.error \"there was no such user #{userid}  in #{meetingId}\"\r\n    Meteor.Users.find(\r\n      {meetingId: meetingId, 'user.connection_status':{$in: [\"online\", \"\"]}},\r\n      {fields:{'authToken': false}\r\n      })\r\n\r\n\r\nMeteor.publish 'chat', (meetingId, userid, authToken) ->\r\n  if isAllowedTo('subscribeChat', meetingId, userid, authToken)\r\n  \r\n    Meteor.log.info \"publishing chat for #{meetingId} #{userid} #{authToken}\"\r\n    return Meteor.Chat.find({$or: [\r\n      {'message.chat_type': 'PUBLIC_CHAT', 'meetingId': meetingId},\r\n      {'message.from_userid': userid, 'meetingId': meetingId},\r\n      {'message.to_userid': userid, 'meetingId': meetingId}\r\n    ]})\r\n\r\n  else\r\n    @error new Meteor.Error(402, \"The user was not authorized to subscribe for 'chats'\")\r\n    return\r\n\r\nMeteor.publish 'bbb_poll', (meetingId, userid, authToken) ->\r\n  #checking if it is allowed to see Poll Collection in general\r\n  if isAllowedTo('subscribePoll', meetingId, userid, authToken)\r\n    #checking if it is allowed to see a number of votes (presenter only)\r\n    if isAllowedTo('subscribeAnswers', meetingId, userid, authToken)\r\n      Meteor.log.info \"publishing Poll for presenter: #{meetingId} #{userid} #{authToken}\"\r\n      return Meteor.Polls.find({\"poll_info.meetingId\": meetingId, \"poll_info.users\": userid})\r\n    else\r\n      Meteor.log.info \"publishing Poll for viewer: #{meetingId} #{userid} #{authToken}\"\r\n      return Meteor.Polls.find({\"poll_info.meetingId\": meetingId, \"poll_info.users\": userid},\r\n        {fields: {\"poll_info.poll.answers.num_votes\": 0}})\r\n  else\r\n    @error new Meteor.Error(402, \"The user was not authorized to subscribe for 'bbb_poll'\")\r\n    return\r\n\r\nMeteor.publish 'shapes', (meetingId) ->\r\n  Meteor.Shapes.find({meetingId: meetingId})\r\n\r\nMeteor.publish 'slides', (meetingId) ->\r\n  Meteor.log.info \"publishing slides for #{meetingId}\"\r\n  Meteor.Slides.find({meetingId: meetingId})\r\n\r\nMeteor.publish 'meetings', (meetingId) ->\r\n  Meteor.log.info \"publishing meetings for #{meetingId}\"\r\n  Meteor.Meetings.find({meetingId: meetingId})\r\n\r\nMeteor.publish 'presentations', (meetingId) ->\r\n  Meteor.log.info \"publishing presentations for #{meetingId}\"\r\n  Meteor.Presentations.find({meetingId: meetingId})\r\n\r\nMeteor.publish 'whiteboard-clean-status', (meetingId) ->\r\n  Meteor.log.info \"whiteboard clean status #{meetingId}\"\r\n  Meteor.WhiteboardCleanStatus.find({meetingId: meetingId})\r\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/redispubsub.coffee.js                                        //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n                                                                       //\nMeteor.methods({                                                       // 1\n  validateAuthToken: function(meetingId, userId, authToken) {          // 3\n    var message;                                                       // 4\n    Meteor.log.info(\"sending a validate_auth_token with\", {            // 4\n      userid: userId,                                                  // 5\n      authToken: authToken,                                            // 5\n      meetingid: meetingId                                             // 5\n    });                                                                //\n    message = {                                                        // 4\n      \"payload\": {                                                     // 10\n        \"auth_token\": authToken,                                       // 11\n        \"userid\": userId,                                              // 11\n        \"meeting_id\": meetingId                                        // 11\n      },                                                               //\n      \"header\": {                                                      // 10\n        \"timestamp\": new Date().getTime(),                             // 15\n        \"reply_to\": meetingId + \"/\" + userId,                          // 15\n        \"name\": \"validate_auth_token\"                                  // 15\n      }                                                                //\n    };                                                                 //\n    if ((authToken != null) && (userId != null) && (meetingId != null)) {\n      createDummyUser(meetingId, userId, authToken);                   // 20\n      return publish(Meteor.config.redis.channels.toBBBApps.meeting, message);\n    } else {                                                           //\n      return Meteor.log.info(\"did not have enough information to send a validate_auth_token message\");\n    }                                                                  //\n  }                                                                    //\n});                                                                    //\n                                                                       //\nMeteor.RedisPubSub = (function() {                                     // 1\n  function RedisPubSub(callback) {                                     // 27\n    this._addToQueue = bind(this._addToQueue, this);                   // 28\n    this._onSubscribe = bind(this._onSubscribe, this);                 // 28\n    Meteor.log.info(\"constructor RedisPubSub\");                        // 28\n    this.pubClient = redis.createClient();                             // 28\n    this.subClient = redis.createClient();                             // 28\n    Meteor.log.info(\"Subscribing message on channel: \" + Meteor.config.redis.channels.fromBBBApps);\n    this.subClient.on(\"psubscribe\", Meteor.bindEnvironment(this._onSubscribe));\n    this.subClient.on(\"pmessage\", Meteor.bindEnvironment(this._addToQueue));\n    this.subClient.psubscribe(Meteor.config.redis.channels.fromBBBApps);\n    callback(this);                                                    // 28\n  }                                                                    //\n                                                                       //\n  RedisPubSub.prototype._onSubscribe = function(channel, count) {      // 27\n    var message;                                                       // 43\n    Meteor.log.info(\"Subscribed to \" + channel);                       // 43\n    message = {                                                        // 43\n      \"header\": {                                                      // 47\n        \"name\": \"get_all_meetings_request\"                             // 48\n      },                                                               //\n      \"payload\": {}                                                    // 47\n    };                                                                 //\n    return publish(Meteor.config.redis.channels.toBBBApps.meeting, message);\n  };                                                                   //\n                                                                       //\n  RedisPubSub.prototype._addToQueue = function(pattern, channel, jsonMsg) {\n    var eventName, message, messagesWeIgnore;                          // 54\n    message = JSON.parse(jsonMsg);                                     // 54\n    eventName = message.header.name;                                   // 54\n    messagesWeIgnore = [\"BbbPubSubPongMessage\", \"bbb_apps_is_alive_message\", \"broadcast_layout_message\"];\n    if (indexOf.call(messagesWeIgnore, eventName) < 0) {               // 63\n      console.log(\"Q \" + eventName + \" \" + (Meteor.myQueue.total()));  // 64\n      return Meteor.myQueue.add({                                      //\n        pattern: pattern,                                              // 65\n        channel: channel,                                              // 65\n        jsonMsg: jsonMsg                                               // 65\n      });                                                              //\n    }                                                                  //\n  };                                                                   //\n                                                                       //\n  return RedisPubSub;                                                  //\n                                                                       //\n})();                                                                  //\n                                                                       //\nthis.publish = function(channel, message) {                            // 1\n  Meteor.log.info(\"redis outgoing message  \" + message.header.name, {  // 77\n    channel: channel,                                                  // 78\n    message: message                                                   // 78\n  });                                                                  //\n  if (Meteor.redisPubSub != null) {                                    // 81\n    return Meteor.redisPubSub.pubClient.publish(channel, JSON.stringify(message), function(err, res) {\n      if (err) {                                                       // 83\n        return Meteor.log.info(\"error\", {                              //\n          error: err                                                   // 85\n        });                                                            //\n      }                                                                //\n    });                                                                //\n  } else {                                                             //\n    return Meteor.log.info(\"ERROR!! Meteor.redisPubSub was undefined\");\n  }                                                                    //\n};                                                                     // 76\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/redispubsub.coffee.js","sourceMap":{"version":3,"sources":["/server/redispubsub.coffee"],"names":[],"mappings":"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","file":"/server/redispubsub.coffee.js","sourcesContent":["Meteor.methods\n  # Construct and send a message to bbb-web to validate the user\n  validateAuthToken: (meetingId, userId, authToken) ->\n    Meteor.log.info \"sending a validate_auth_token with\",\n      userid: userId\n      authToken: authToken\n      meetingid: meetingId\n\n    message =\n      \"payload\":\n        \"auth_token\": authToken\n        \"userid\": userId\n        \"meeting_id\": meetingId\n      \"header\":\n        \"timestamp\": new Date().getTime()\n        \"reply_to\": meetingId + \"/\" + userId\n        \"name\": \"validate_auth_token\"\n\n    if authToken? and userId? and meetingId?\n      createDummyUser meetingId, userId, authToken\n      publish Meteor.config.redis.channels.toBBBApps.meeting, message\n    else\n      Meteor.log.info \"did not have enough information to send a validate_auth_token message\"\n\n\nclass Meteor.RedisPubSub\n  constructor: (callback) ->\n    Meteor.log.info \"constructor RedisPubSub\"\n\n    @pubClient = redis.createClient()\n    @subClient = redis.createClient()\n\n    Meteor.log.info(\"Subscribing message on channel: #{Meteor.config.redis.channels.fromBBBApps}\")\n\n    @subClient.on \"psubscribe\", Meteor.bindEnvironment(@_onSubscribe)\n    @subClient.on \"pmessage\", Meteor.bindEnvironment(@_addToQueue)\n\n    @subClient.psubscribe(Meteor.config.redis.channels.fromBBBApps)\n\n    callback @\n\n  _onSubscribe: (channel, count) =>\n    Meteor.log.info \"Subscribed to #{channel}\"\n\n    #grab data about all active meetings on the server\n    message =\n      \"header\":\n        \"name\": \"get_all_meetings_request\"\n      \"payload\": {} # I need this, otherwise bbb-apps won't recognize the message\n    publish Meteor.config.redis.channels.toBBBApps.meeting, message\n\n\n  _addToQueue: (pattern, channel, jsonMsg) =>\n    message = JSON.parse(jsonMsg)\n    eventName = message.header.name\n\n    messagesWeIgnore = [\n      \"BbbPubSubPongMessage\"\n      \"bbb_apps_is_alive_message\"\n      \"broadcast_layout_message\"\n    ]\n\n    unless eventName in messagesWeIgnore\n      console.log \"Q #{eventName} #{Meteor.myQueue.total()}\"\n      Meteor.myQueue.add({\n        pattern: pattern\n        channel: channel\n        jsonMsg: jsonMsg\n      })\n\n# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n\n# message should be an object\n@publish = (channel, message) ->\n  Meteor.log.info \"redis outgoing message  #{message.header.name}\",\n    channel: channel\n    message: message\n\n  if Meteor.redisPubSub?\n    Meteor.redisPubSub.pubClient.publish channel, JSON.stringify(message), (err, res) ->\n      if err\n        Meteor.log.info \"error\",\n          error: err\n\n  else\n    Meteor.log.info \"ERROR!! Meteor.redisPubSub was undefined\"\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/server.coffee.js                                             //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n                                                                       //\nMeteor.startup(function() {                                            // 1\n  Meteor.log.info(\"server start\");                                     // 2\n  Meteor.WhiteboardCleanStatus.remove({});                             // 2\n  clearUsersCollection();                                              // 2\n  clearChatCollection();                                               // 2\n  clearMeetingsCollection();                                           // 2\n  clearShapesCollection();                                             // 2\n  clearSlidesCollection();                                             // 2\n  clearPresentationsCollection();                                      // 2\n  clearPollCollection();                                               // 2\n  Meteor.redisPubSub = new Meteor.RedisPubSub(function() {             // 2\n    return Meteor.log.info(\"created pubsub\");                          //\n  });                                                                  //\n  Meteor.myQueue = new PowerQueue({});                                 // 2\n  Meteor.myQueue.taskHandler = function(data, next, failures) {        // 2\n    var eventName, ref;                                                // 24\n    eventName = (ref = JSON.parse(data.jsonMsg)) != null ? ref.header.name : void 0;\n    if (failures > 0) {                                                // 25\n      return Meteor.log.error(\"got a failure on taskHandler \" + eventName + \" \" + failures);\n    } else {                                                           //\n      return handleRedisMessage(data, function() {                     //\n        var length, lengthString;                                      // 29\n        length = Meteor.myQueue.length();                              // 29\n        lengthString = function() {                                    // 29\n          if (length > 0) {                                            // 31\n            return \"In the queue we have \" + length + \" event(s) to process.\";\n          } else {                                                     //\n            return \"\";                                                 //\n          }                                                            //\n        };                                                             //\n        Meteor.log.info(\"in callback after handleRedisMessage \" + eventName + \". \" + (lengthString()));\n        return next();                                                 //\n      });                                                              //\n    }                                                                  //\n  };                                                                   //\n  return this.handleRedisMessage = function(data, callback) {          //\n    var chatMessage, currentlyBeingRecorded, dbUser, duration, emojiStatus, eventName, heightRatio, i, intendedForRecording, isLocked, j, k, l, len, len1, len2, len3, len4, listOfMeetings, m, meetingId, meetingName, message, messageObject, newPresenterId, newSettings, newSlide, notLoggedEventTypes, oldSettings, page, pollObj, poll_id, presentation, presentationId, processMeeting, processUser, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref3, ref4, ref5, ref6, ref7, ref8, ref9, requesterId, set_emoji_time, shape, shapeId, slide, slideId, status, user, userId, userObj, users, validStatus, voiceConf, voiceUserObj, whiteboardId, widthRatio, x, xOffset, y, yOffset;\n    message = JSON.parse(data.jsonMsg);                                // 51\n    meetingId = (ref = message.payload) != null ? ref.meeting_id : void 0;\n    notLoggedEventTypes = [\"keep_alive_reply\", \"page_resized_message\", \"presentation_page_resized_message\", \"presentation_cursor_updated_message\", \"get_presentation_info_reply\", \"get_chat_history_reply\", \"get_whiteboard_shapes_reply\", \"presentation_shared_message\", \"presentation_conversion_done_message\", \"presentation_conversion_progress_message\", \"presentation_page_generated_message\", \"BbbPubSubPongMessage\", \"bbb_apps_is_alive_message\", \"user_voice_talking_message\", \"meeting_state_message\", \"get_recording_status_reply\"];\n    eventName = message.header.name;                                   // 51\n    meetingId = (ref1 = message.payload) != null ? ref1.meeting_id : void 0;\n    if (!(((message != null ? message.header : void 0) != null) && (message.payload != null))) {\n      Meteor.log.error(\"ERROR!! No header or payload\");                // 84\n      callback();                                                      // 84\n    }                                                                  //\n    if (ref2 = message.header.name, indexOf.call(notLoggedEventTypes, ref2) < 0) {\n      Meteor.log.info(\"redis incoming message  \" + eventName + \"  \", {\n        message: data.jsonMsg                                          // 89\n      });                                                              //\n    }                                                                  //\n    if (((message != null ? message.header : void 0) != null) && (message.payload != null)) {\n      if (eventName === 'meeting_created_message') {                   // 93\n        meetingName = message.payload.name;                            // 95\n        intendedForRecording = message.payload.recorded;               // 95\n        voiceConf = message.payload.voice_conf;                        // 95\n        duration = message.payload.duration;                           // 95\n        return addMeetingToCollection(meetingId, meetingName, intendedForRecording, voiceConf, duration, callback);\n      } else if ((message.payload.user != null) && (eventName === 'user_left_voice_message' || eventName === 'user_joined_voice_message' || eventName === 'user_voice_talking_message' || eventName === 'user_voice_muted_message')) {\n        voiceUserObj = {                                               // 109\n          'web_userid': message.payload.user.voiceUser.web_userid,     // 109\n          'listen_only': message.payload.listen_only,                  // 109\n          'talking': message.payload.user.voiceUser.talking,           // 109\n          'joined': message.payload.user.voiceUser.joined,             // 109\n          'locked': message.payload.user.voiceUser.locked,             // 109\n          'muted': message.payload.user.voiceUser.muted                // 109\n        };                                                             //\n        return updateVoiceUser(meetingId, voiceUserObj, callback);     //\n      } else if (eventName === 'user_listening_only') {                //\n        voiceUserObj = {                                               // 120\n          'web_userid': message.payload.userid,                        // 120\n          'listen_only': message.payload.listen_only                   // 120\n        };                                                             //\n        return updateVoiceUser(meetingId, voiceUserObj, callback);     //\n      } else if (eventName === 'get_all_meetings_reply') {             //\n        Meteor.log.info(\"Let's store some data for the running meetings so that when an HTML5 client joins everything is ready!\");\n        Meteor.log.info(JSON.stringify(message));                      // 127\n        listOfMeetings = message.payload.meetings;                     // 127\n        processMeeting = function() {                                  // 127\n          var meeting;                                                 // 135\n          meeting = listOfMeetings.pop();                              // 135\n          if (meeting != null) {                                       // 136\n            return addMeetingToCollection(meeting.meetingID, meeting.meetingName, meeting.recorded, meeting.voiceBridge, meeting.duration, processMeeting);\n          } else {                                                     //\n            return callback();                                         //\n          }                                                            //\n        };                                                             //\n        return processMeeting();                                       //\n      } else if (eventName === 'user_joined_message') {                //\n        userObj = message.payload.user;                                // 145\n        dbUser = Meteor.Users.findOne({                                // 145\n          userId: userObj.userid,                                      // 146\n          meetingId: message.payload.meeting_id                        // 146\n        });                                                            //\n        if ((dbUser != null ? (ref3 = dbUser.user) != null ? ref3.connection_status : void 0 : void 0) === \"offline\" && ((ref4 = message.payload.user) != null ? ref4.phone_user : void 0)) {\n          Meteor.log.error(\"offline AND phone user\");                  // 152\n          return callback();                                           //\n        } else {                                                       //\n          if ((dbUser != null ? dbUser.clientType : void 0) === \"HTML5\") {\n            status = dbUser != null ? dbUser.validated : void 0;       // 157\n            Meteor.log.info(\"in user_joined_message the validStatus of the user was \" + status);\n            userObj.timeOfJoining = message.header.current_time;       // 157\n            return userJoined(meetingId, userObj, callback);           //\n          } else {                                                     //\n            return userJoined(meetingId, userObj, callback);           //\n          }                                                            //\n        }                                                              //\n      } else if (eventName === 'get_users_reply' && message.payload.requester_id === 'nodeJSapp') {\n        users = message.payload.users;                                 // 169\n        processUser = function() {                                     // 169\n          var user;                                                    // 177\n          user = users.pop();                                          // 177\n          if (user != null) {                                          // 178\n            user.timeOfJoining = message.header.current_time;          // 179\n            if (user.emoji_status !== 'none' && typeof user.emoji_status === 'string') {\n              console.log(\"3\");                                        // 181\n              user.set_emoji_time = new Date();                        // 181\n              return userJoined(meetingId, user, processUser);         //\n            } else {                                                   //\n              return userJoined(meetingId, user, processUser);         //\n            }                                                          //\n          } else {                                                     //\n            return callback();                                         //\n          }                                                            //\n        };                                                             //\n        return processUser();                                          //\n      } else if (eventName === 'validate_auth_token_reply') {          //\n        userId = message.payload.userid;                               // 194\n        user = Meteor.Users.findOne({                                  // 194\n          userId: userId,                                              // 195\n          meetingId: meetingId                                         // 195\n        });                                                            //\n        validStatus = message.payload.valid;                           // 194\n        if ((user != null ? user.clientType : void 0) === \"HTML5\") {   // 199\n          return Meteor.Users.update({                                 //\n            userId: userId,                                            // 201\n            meetingId: message.payload.meeting_id                      // 201\n          }, {                                                         //\n            $set: {                                                    // 202\n              validated: validStatus                                   // 202\n            }                                                          //\n          }, function(err, numChanged) {                               //\n            var funct;                                                 // 204\n            if (numChanged.insertedId != null) {                       // 204\n              funct = function(cbk) {                                  // 205\n                var ref5, val;                                         // 206\n                val = (ref5 = Meteor.Users.findOne({                   // 206\n                  userId: userId,                                      //\n                  meetingId: message.payload.meeting_id                //\n                })) != null ? ref5.validated : void 0;                 //\n                Meteor.log.info(\"user.validated for user \" + userId + \" in meeting \" + user.meetingId + \" just became \" + val);\n                return cbk();                                          //\n              };                                                       //\n              return funct(callback);                                  //\n            } else {                                                   //\n              return callback();                                       //\n            }                                                          //\n          });                                                          //\n        } else {                                                       //\n          Meteor.log.info(\"a non-html5 user got validate_auth_token_reply.\");\n          return callback();                                           //\n        }                                                              //\n      } else if (eventName === 'user_left_message') {                  //\n        userId = (ref5 = message.payload.user) != null ? ref5.userid : void 0;\n        if ((userId != null) && (meetingId != null)) {                 // 221\n          return markUserOffline(meetingId, userId, callback);         //\n        } else {                                                       //\n          return callback();                                           //\n        }                                                              //\n      } else if (eventName === 'presenter_assigned_message') {         //\n        newPresenterId = message.payload.new_presenter_id;             // 229\n        if (newPresenterId != null) {                                  // 230\n          Meteor.Users.update({                                        // 232\n            \"user.presenter\": true,                                    // 232\n            meetingId: meetingId                                       // 232\n          }, {                                                         //\n            $set: {                                                    // 233\n              \"user.presenter\": false                                  // 233\n            }                                                          //\n          }, function(err, numUpdated) {                               //\n            return Meteor.log.info(\" Updating old presenter numUpdated=\" + numUpdated + \", err=\" + err);\n          });                                                          //\n          Meteor.Users.update({                                        // 232\n            \"user.userid\": newPresenterId,                             // 239\n            meetingId: meetingId                                       // 239\n          }, {                                                         //\n            $set: {                                                    // 240\n              \"user.presenter\": true                                   // 240\n            }                                                          //\n          }, function(err, numUpdated) {                               //\n            return Meteor.log.info(\" Updating new presenter numUpdated=\" + numUpdated + \", err=\" + err);\n          });                                                          //\n        }                                                              //\n        return callback();                                             //\n      } else if (eventName === 'user_emoji_status_message') {          //\n        userId = message.payload.userid;                               // 249\n        meetingId = message.payload.meeting_id;                        // 249\n        emojiStatus = message.payload.emoji_status;                    // 249\n        if ((userId != null) && (meetingId != null)) {                 // 252\n          set_emoji_time = new Date();                                 // 253\n          Meteor.Users.update({                                        // 253\n            \"user.userid\": userId                                      // 254\n          }, {                                                         //\n            $set: {                                                    // 255\n              \"user.set_emoji_time\": set_emoji_time,                   // 255\n              \"user.emoji_status\": emojiStatus                         // 255\n            }                                                          //\n          }, function(err, numUpdated) {                               //\n            return Meteor.log.info(\" Updating emoji numUpdated=\" + numUpdated + \", err=\" + err);\n          });                                                          //\n        }                                                              //\n        return callback();                                             //\n      } else if (eventName === 'user_locked_message' || eventName === 'user_unlocked_message') {\n        userId = message.payload.userid;                               // 263\n        isLocked = message.payload.locked;                             // 263\n        setUserLockedStatus(meetingId, userId, isLocked);              // 263\n        return callback();                                             //\n      } else if (eventName === \"meeting_ended_message\" || eventName === \"meeting_destroyed_event\" || eventName === \"end_and_kick_all_message\" || eventName === \"disconnect_all_users_message\") {\n        Meteor.log.info(\"DESTROYING MEETING \" + meetingId);            // 271\n        return removeMeetingFromCollection(meetingId, callback);       //\n                                                                       // 274\n        /*                                                             // 274\n         if Meteor.Meetings.findOne({meetingId: meetingId})?           //\n          count=Meteor.Users.find({meetingId: meetingId}).count()      //\n          Meteor.log.info \"there are #{count} users in the meeting\"    //\n          for user in Meteor.Users.find({meetingId: meetingId}).fetch()\n            markUserOffline meetingId, user.userId                     //\n          #TODO should we clear the chat messages for that meeting?!   //\n          unless eventName is \"disconnect_all_users_message\"           //\n            removeMeetingFromCollection meetingId                      //\n         */                                                            //\n      } else if (eventName === \"get_chat_history_reply\" && message.payload.requester_id === \"nodeJSapp\") {\n        if (Meteor.Meetings.findOne({                                  // 287\n          MeetingId: message.payload.meeting_id                        //\n        }) == null) {                                                  //\n          ref6 = message.payload.chat_history;                         // 288\n          for (i = 0, len = ref6.length; i < len; i++) {               // 288\n            chatMessage = ref6[i];                                     //\n            addChatToCollection(meetingId, chatMessage);               // 289\n          }                                                            // 288\n        }                                                              //\n        return callback();                                             //\n      } else if (eventName === \"send_public_chat_message\" || eventName === \"send_private_chat_message\") {\n        messageObject = message.payload.message;                       // 294\n        messageObject.from_time = message.header.current_time;         // 294\n        addChatToCollection(meetingId, messageObject);                 // 294\n        return callback();                                             //\n      } else if (eventName === \"presentation_shared_message\") {        //\n        presentationId = (ref7 = message.payload.presentation) != null ? ref7.id : void 0;\n        Meteor.Presentations.update({                                  // 302\n          \"presentation.current\": true,                                // 304\n          meetingId: meetingId                                         // 304\n        }, {                                                           //\n          $set: {                                                      // 305\n            \"presentation.current\": false                              // 305\n          }                                                            //\n        });                                                            //\n        removePresentationFromCollection(meetingId, presentationId);   // 302\n        addPresentationToCollection(meetingId, message.payload.presentation);\n        ref9 = (ref8 = message.payload.presentation) != null ? ref8.pages : void 0;\n        for (j = 0, len1 = ref9.length; j < len1; j++) {               // 311\n          slide = ref9[j];                                             //\n          addSlideToCollection(meetingId, (ref10 = message.payload.presentation) != null ? ref10.id : void 0, slide);\n          if (slide.current) {                                         // 313\n            displayThisSlide(meetingId, slide.id, slide);              // 314\n          }                                                            //\n        }                                                              // 311\n        return callback();                                             //\n      } else if (eventName === \"get_presentation_info_reply\" && message.payload.requester_id === \"nodeJSapp\") {\n        ref11 = message.payload.presentations;                         // 319\n        for (k = 0, len2 = ref11.length; k < len2; k++) {              // 319\n          presentation = ref11[k];                                     //\n          addPresentationToCollection(meetingId, presentation);        // 320\n          ref12 = presentation.pages;                                  // 322\n          for (l = 0, len3 = ref12.length; l < len3; l++) {            // 322\n            page = ref12[l];                                           //\n            addSlideToCollection(meetingId, presentation.id, page);    // 324\n            whiteboardId = presentation.id + \"/\" + page.num;           // 324\n            message = {                                                // 324\n              \"payload\": {                                             // 331\n                \"meeting_id\": meetingId,                               // 332\n                \"requester_id\": \"nodeJSapp\",                           // 332\n                \"whiteboard_id\": whiteboardId                          // 332\n              },                                                       //\n              \"header\": {                                              // 331\n                \"timestamp\": new Date().getTime(),                     // 336\n                \"name\": \"get_whiteboard_shapes_request\",               // 336\n                \"version\": \"0.0.1\"                                     // 336\n              }                                                        //\n            };                                                         //\n            if ((whiteboardId != null) && (meetingId != null)) {       // 340\n              publish(Meteor.config.redis.channels.toBBBApps.whiteboard, message);\n            } else {                                                   //\n              Meteor.log.info(\"did not have enough information to send a user_leaving_request\");\n            }                                                          //\n          }                                                            // 322\n        }                                                              // 319\n        return callback();                                             //\n      } else if (eventName === \"presentation_page_changed_message\") {  //\n        newSlide = message.payload.page;                               // 348\n        displayThisSlide(meetingId, newSlide != null ? newSlide.id : void 0, newSlide);\n        return callback();                                             //\n      } else if (eventName === \"presentation_removed_message\") {       //\n        presentationId = message.payload.presentation_id;              // 354\n        meetingId = message.payload.meeting_id;                        // 354\n        removePresentationFromCollection(meetingId, presentationId);   // 354\n        return callback();                                             //\n      } else if (eventName === \"get_whiteboard_shapes_reply\" && message.payload.requester_id === \"nodeJSapp\") {\n        if (Meteor.WhiteboardCleanStatus.findOne({                     // 362\n          meetingId: meetingId                                         //\n        }) == null) {                                                  //\n          Meteor.WhiteboardCleanStatus.insert({                        // 363\n            meetingId: meetingId,                                      // 363\n            in_progress: false                                         // 363\n          });                                                          //\n        }                                                              //\n        ref13 = message.payload.shapes;                                // 365\n        for (m = 0, len4 = ref13.length; m < len4; m++) {              // 365\n          shape = ref13[m];                                            //\n          whiteboardId = shape.wb_id;                                  // 366\n          addShapeToCollection(meetingId, whiteboardId, shape);        // 366\n        }                                                              // 365\n        return callback();                                             //\n      } else if (eventName === \"send_whiteboard_shape_message\") {      //\n        if (message.payload.shape.shape_type === \"poll_result\" && typeof message.payload.shape.shape.result === 'string') {\n          message.payload.shape.shape.result = JSON.parse(message.payload.shape.shape.result);\n        }                                                              //\n        shape = message.payload.shape;                                 // 374\n        whiteboardId = shape != null ? shape.wb_id : void 0;           // 374\n        addShapeToCollection(meetingId, whiteboardId, shape);          // 374\n        return callback();                                             //\n      } else if (eventName === \"presentation_cursor_updated_message\") {\n        x = message.payload.x_percent;                                 // 384\n        y = message.payload.y_percent;                                 // 384\n        Meteor.Presentations.update({                                  // 384\n          \"presentation.current\": true,                                // 386\n          meetingId: meetingId                                         // 386\n        }, {                                                           //\n          $set: {                                                      // 387\n            \"pointer.x\": x,                                            // 387\n            \"pointer.y\": y                                             // 387\n          }                                                            //\n        });                                                            //\n        return callback();                                             //\n      } else if (eventName === \"whiteboard_cleared_message\") {         //\n        whiteboardId = message.payload.whiteboard_id;                  // 392\n        Meteor.WhiteboardCleanStatus.update({                          // 392\n          meetingId: meetingId                                         // 393\n        }, {                                                           //\n          $set: {                                                      // 393\n            'in_progress': true                                        // 393\n          }                                                            //\n        });                                                            //\n        removeAllShapesFromSlide(meetingId, whiteboardId);             // 392\n        return callback();                                             //\n      } else if (eventName === \"undo_whiteboard_request\") {            //\n        whiteboardId = message.payload.whiteboard_id;                  // 399\n        shapeId = message.payload.shape_id;                            // 399\n        removeShapeFromSlide(meetingId, whiteboardId, shapeId);        // 399\n        return callback();                                             //\n      } else if (eventName === \"presentation_page_resized_message\") {  //\n        slideId = (ref14 = message.payload.page) != null ? ref14.id : void 0;\n        heightRatio = (ref15 = message.payload.page) != null ? ref15.height_ratio : void 0;\n        widthRatio = (ref16 = message.payload.page) != null ? ref16.width_ratio : void 0;\n        xOffset = (ref17 = message.payload.page) != null ? ref17.x_offset : void 0;\n        yOffset = (ref18 = message.payload.page) != null ? ref18.y_offset : void 0;\n        presentationId = slideId.split(\"/\")[0];                        // 407\n        Meteor.Slides.update({                                         // 407\n          presentationId: presentationId,                              // 413\n          \"slide.current\": true                                        // 413\n        }, {                                                           //\n          $set: {                                                      // 414\n            \"slide.height_ratio\": heightRatio,                         // 414\n            \"slide.width_ratio\": widthRatio,                           // 414\n            \"slide.x_offset\": xOffset,                                 // 414\n            \"slide.y_offset\": yOffset                                  // 414\n          }                                                            //\n        });                                                            //\n        return callback();                                             //\n      } else if (eventName === \"recording_status_changed_message\") {   //\n        intendedForRecording = message.payload.recorded;               // 421\n        currentlyBeingRecorded = message.payload.recording;            // 421\n        Meteor.Meetings.update({                                       // 421\n          meetingId: meetingId,                                        // 423\n          intendedForRecording: intendedForRecording                   // 423\n        }, {                                                           //\n          $set: {                                                      // 424\n            currentlyBeingRecorded: currentlyBeingRecorded             // 424\n          }                                                            //\n        });                                                            //\n        return callback();                                             //\n      } else if (eventName === \"eject_voice_user_message\") {           //\n        return callback();                                             //\n      } else if (eventName === \"new_permission_settings\") {            //\n        oldSettings = (ref19 = Meteor.Meetings.findOne({               // 436\n          meetingId: meetingId                                         //\n        })) != null ? ref19.roomLockSettings : void 0;                 //\n        newSettings = (ref20 = message.payload) != null ? ref20.permissions : void 0;\n        if (!(oldSettings != null ? oldSettings.disableMic : void 0) && newSettings.disableMic) {\n          handleLockingMic(meetingId, newSettings);                    // 441\n        }                                                              //\n        Meteor.Meetings.update({                                       // 436\n          meetingId: meetingId                                         // 444\n        }, {                                                           //\n          $set: {                                                      // 444\n            'roomLockSettings.disablePrivateChat': newSettings.disablePrivateChat,\n            'roomLockSettings.disableCam': newSettings.disableCam,     // 444\n            'roomLockSettings.disableMic': newSettings.disableMic,     // 444\n            'roomLockSettings.lockOnJoin': newSettings.lockOnJoin,     // 444\n            'roomLockSettings.lockedLayout': newSettings.lockedLayout,\n            'roomLockSettings.disablePublicChat': newSettings.disablePublicChat,\n            'roomLockSettings.lockOnJoinConfigurable': newSettings.lockOnJoinConfigurable\n          }                                                            //\n        });                                                            //\n        return callback();                                             //\n      } else if (eventName === \"poll_started_message\") {               //\n        if ((message.payload.meeting_id != null) && (message.payload.requester_id != null) && (message.payload.poll != null)) {\n          if (Meteor.Meetings.findOne({                                // 459\n            meetingId: message.payload.meeting_id                      //\n          }) != null) {                                                //\n            users = Meteor.Users.find({                                // 461\n              meetingId: message.payload.meeting_id                    // 461\n            }, {                                                       //\n              fields: {                                                // 462\n                \"user.userid\": 1,                                      // 462\n                _id: 0                                                 // 462\n              }                                                        //\n            }).fetch();                                                //\n            addPollToCollection(message.payload.poll, message.payload.requester_id, users, message.payload.meeting_id);\n          }                                                            //\n        }                                                              //\n        return callback();                                             //\n      } else if (eventName === \"poll_stopped_message\") {               //\n        meetingId = message.payload.meeting_id;                        // 469\n        poll_id = message.payload.poll_id;                             // 469\n        clearPollCollection(meetingId, poll_id);                       // 469\n        return callback();                                             //\n      } else if (eventName === \"user_voted_poll_message\") {            //\n        if ((((ref21 = message.payload) != null ? ref21.poll : void 0) != null) && (message.payload.meeting_id != null) && (message.payload.presenter_id != null)) {\n          pollObj = message.payload.poll;                              // 477\n          meetingId = message.payload.meeting_id;                      // 477\n          requesterId = message.payload.presenter_id;                  // 477\n          updatePollCollection(pollObj, meetingId, requesterId);       // 477\n          return callback();                                           //\n        }                                                              //\n      } else if (eventName === \"poll_show_result_message\") {           //\n        if ((message.payload.poll.id != null) && (message.payload.meeting_id != null)) {\n          poll_id = message.payload.poll.id;                           // 486\n          meetingId = message.payload.meeting_id;                      // 486\n          clearPollCollection(meetingId, poll_id);                     // 486\n        }                                                              //\n        return callback();                                             //\n      } else {                                                         //\n        if (indexOf.call(notLoggedEventTypes, eventName) < 0) {        // 493\n          Meteor.log.info(\"WARNING!!! THE JSON MESSAGE WAS NOT OF TYPE SUPPORTED BY THIS APPLICATION\\n \" + eventName + \"   {JSON.stringify message}\");\n        }                                                              //\n        return callback();                                             //\n      }                                                                //\n    } else {                                                           //\n      return callback();                                               //\n    }                                                                  //\n  };                                                                   //\n});                                                                    // 1\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/server.coffee.js","sourceMap":{"version":3,"sources":["/server/server.coffee"],"names":[],"mappings":"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","file":"/server/server.coffee.js","sourcesContent":["Meteor.startup ->\r\n  Meteor.log.info \"server start\"\r\n\r\n  #remove all data\r\n  Meteor.WhiteboardCleanStatus.remove({})\r\n  clearUsersCollection()\r\n  clearChatCollection()\r\n  clearMeetingsCollection()\r\n  clearShapesCollection()\r\n  clearSlidesCollection()\r\n  clearPresentationsCollection()\r\n  clearPollCollection()\r\n\r\n  # create create a PubSub connection, start listening\r\n  Meteor.redisPubSub = new Meteor.RedisPubSub(->\r\n    Meteor.log.info \"created pubsub\")\r\n\r\n\r\n  Meteor.myQueue = new PowerQueue({\r\n    # autoStart:true\r\n    # isPaused: true\r\n  })\r\n  Meteor.myQueue.taskHandler = (data, next, failures) ->\r\n    eventName = JSON.parse(data.jsonMsg)?.header.name\r\n    if failures > 0\r\n      Meteor.log.error \"got a failure on taskHandler #{eventName} #{failures}\"\r\n    else\r\n      handleRedisMessage(data, ()->\r\n        length = Meteor.myQueue.length()\r\n        lengthString = ->\r\n          if length>0\r\n            \"In the queue we have #{length} event(s) to process.\"\r\n          else \"\"\r\n\r\n        Meteor.log.info \"in callback after handleRedisMessage #{eventName}.\r\n          #{lengthString()}\"\r\n        next()\r\n      )\r\n\r\n\r\n  # To ensure that we process the redis json event messages serially we use a\r\n  # callback. This callback is to be called when the Meteor collection is\r\n  # updated with the information coming in the payload of the json message. The\r\n  # callback signalizes to the queue that we are done processing the current\r\n  # message in the queue and are ready to move on to the next one. If we do not\r\n  # use the callback mechanism we may encounter a race condition situation\r\n  # due to not following the order of events coming through the redis pubsub.\r\n  # for example: a user_left event reaching the collection before a user_joined\r\n  # for the same user.\r\n  @handleRedisMessage = (data, callback) ->\r\n    message = JSON.parse(data.jsonMsg)\r\n    # correlationId = message.payload?.reply_to or message.header?.reply_to\r\n    meetingId = message.payload?.meeting_id\r\n\r\n    # Avoid cluttering the log with json messages carrying little or repetitive\r\n    # information. Comment out a message type in the array to be able to see it\r\n    # in the log upon restarting of the Meteor process.\r\n    notLoggedEventTypes = [\r\n      \"keep_alive_reply\"\r\n      \"page_resized_message\"\r\n      \"presentation_page_resized_message\"\r\n      \"presentation_cursor_updated_message\"\r\n      \"get_presentation_info_reply\"\r\n#      \"get_users_reply\"\r\n      \"get_chat_history_reply\"\r\n#      \"get_all_meetings_reply\"\r\n      \"get_whiteboard_shapes_reply\"\r\n      \"presentation_shared_message\"\r\n      \"presentation_conversion_done_message\"\r\n      \"presentation_conversion_progress_message\"\r\n      \"presentation_page_generated_message\"\r\n      # \"presentation_page_changed_message\"\r\n      \"BbbPubSubPongMessage\"\r\n      \"bbb_apps_is_alive_message\"\r\n      \"user_voice_talking_message\"\r\n      \"meeting_state_message\"\r\n      \"get_recording_status_reply\"\r\n    ]\r\n\r\n    eventName = message.header.name\r\n    meetingId = message.payload?.meeting_id\r\n\r\n    unless message?.header? and message.payload?\r\n      Meteor.log.error \"ERROR!! No header or payload\"\r\n      callback()\r\n\r\n    unless message.header.name in notLoggedEventTypes\r\n      Meteor.log.info \"redis incoming message  #{eventName}  \",\r\n        message: data.jsonMsg\r\n\r\n    # we currently disregard the pattern and channel\r\n    if message?.header? and message.payload?\r\n      if eventName is 'meeting_created_message'\r\n        # Meteor.log.error JSON.stringify message\r\n        meetingName = message.payload.name\r\n        intendedForRecording = message.payload.recorded\r\n        voiceConf = message.payload.voice_conf\r\n        duration = message.payload.duration\r\n        addMeetingToCollection meetingId, meetingName, intendedForRecording,\r\n         voiceConf, duration, callback\r\n\r\n      # handle voice events\r\n      else if message.payload.user? and eventName in [\r\n       'user_left_voice_message'\r\n       'user_joined_voice_message'\r\n       'user_voice_talking_message'\r\n       'user_voice_muted_message']\r\n\r\n        voiceUserObj = {\r\n          'web_userid': message.payload.user.voiceUser.web_userid\r\n          'listen_only': message.payload.listen_only\r\n          'talking': message.payload.user.voiceUser.talking\r\n          'joined': message.payload.user.voiceUser.joined\r\n          'locked': message.payload.user.voiceUser.locked\r\n          'muted': message.payload.user.voiceUser.muted\r\n        }\r\n        updateVoiceUser meetingId, voiceUserObj, callback\r\n\r\n      else if eventName is 'user_listening_only'\r\n        voiceUserObj = {\r\n          'web_userid': message.payload.userid\r\n          'listen_only': message.payload.listen_only\r\n        }\r\n        updateVoiceUser meetingId, voiceUserObj, callback\r\n\r\n      else if eventName is 'get_all_meetings_reply'\r\n        Meteor.log.info \"Let's store some data for the running meetings\r\n         so that when an HTML5 client joins everything is ready!\"\r\n        Meteor.log.info JSON.stringify(message)\r\n        listOfMeetings = message.payload.meetings\r\n\r\n        # Processing the meetings recursively with a callback to notify us,\r\n        # ensuring that we update the meeting collection serially\r\n        processMeeting = () ->\r\n          meeting = listOfMeetings.pop()\r\n          if meeting?\r\n            addMeetingToCollection meeting.meetingID, meeting.meetingName,\r\n              meeting.recorded, meeting.voiceBridge, meeting.duration, processMeeting\r\n          else\r\n            callback() # all meeting arrays (if any) have been processed\r\n\r\n        processMeeting()\r\n\r\n      else if eventName is 'user_joined_message'\r\n        userObj = message.payload.user\r\n        dbUser = Meteor.Users.findOne({userId: userObj.userid, meetingId: message.payload.meeting_id})\r\n\r\n        # On attempting reconnection of Flash clients (in voiceBridge) we receive\r\n        # an extra user_joined_message. Ignore it as it will add an extra user\r\n        # in the user list, creating discrepancy with the list in the Flash client\r\n        if dbUser?.user?.connection_status is \"offline\" and message.payload.user?.phone_user\r\n          Meteor.log.error \"offline AND phone user\"\r\n          callback() #return without joining the user\r\n        else\r\n          if dbUser?.clientType is \"HTML5\" # typically html5 users will be in\r\n            # the db [as a dummy user] before the joining message\r\n            status = dbUser?.validated\r\n            Meteor.log.info \"in user_joined_message the validStatus\r\n             of the user was #{status}\"\r\n            userObj.timeOfJoining = message.header.current_time\r\n            userJoined meetingId, userObj, callback\r\n          else\r\n            userJoined meetingId, userObj, callback\r\n\r\n\r\n      # only process if requester is nodeJSapp means only process in the case when\r\n      # we explicitly request the users\r\n      else if eventName is 'get_users_reply' and message.payload.requester_id is 'nodeJSapp'\r\n        users = message.payload.users\r\n\r\n        #TODO make the serialization be split per meeting. This will allow us to\r\n        # use N threads vs 1 and we'll take advantage of Mongo's concurrency tricks\r\n\r\n        # Processing the users recursively with a callback to notify us,\r\n        # ensuring that we update the users collection serially\r\n        processUser = () ->\r\n          user = users.pop()\r\n          if user?\r\n            user.timeOfJoining = message.header.current_time\r\n            if user.emoji_status isnt 'none' and typeof user.emoji_status is 'string'\r\n              console.log \"3\"\r\n              user.set_emoji_time = new Date()\r\n              userJoined meetingId, user, processUser\r\n            else\r\n              # console.error(\"this is not supposed to happen\")\r\n              userJoined meetingId, user, processUser\r\n          else\r\n            callback() # all meeting arrays (if any) have been processed\r\n\r\n        processUser()\r\n\r\n\r\n      else if eventName is 'validate_auth_token_reply'\r\n        userId = message.payload.userid\r\n        user = Meteor.Users.findOne({userId:userId, meetingId: meetingId})\r\n        validStatus = message.payload.valid\r\n\r\n        # if the user already exists in the db\r\n        if user?.clientType is \"HTML5\"\r\n          #if the html5 client user was validated successfully, add a flag\r\n          Meteor.Users.update({userId:userId, meetingId:message.payload.meeting_id},\r\n            {$set:{validated: validStatus}},\r\n            (err, numChanged) ->\r\n              if numChanged.insertedId?\r\n                funct = (cbk) ->\r\n                  val=Meteor.Users.findOne({userId:userId, meetingId: message.payload.meeting_id})?.validated\r\n                  Meteor.log.info \"user.validated for user #{userId} in meeting #{user.meetingId} just became #{val}\"\r\n                  cbk()\r\n\r\n                funct(callback)\r\n              else\r\n                callback()\r\n          )\r\n        else\r\n          Meteor.log.info \"a non-html5 user got validate_auth_token_reply.\"\r\n          callback()\r\n\r\n\r\n      else if eventName is 'user_left_message'\r\n        userId = message.payload.user?.userid\r\n        if userId? and meetingId?\r\n          markUserOffline meetingId, userId, callback\r\n        else\r\n          callback() #TODO check how to get these cases out and reuse code\r\n\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is 'presenter_assigned_message'\r\n        newPresenterId = message.payload.new_presenter_id\r\n        if newPresenterId?\r\n          # reset the previous presenter\r\n          Meteor.Users.update({\"user.presenter\": true, meetingId: meetingId},\r\n            {$set: {\"user.presenter\": false}},\r\n            (err, numUpdated) ->\r\n              Meteor.log.info(\" Updating old presenter numUpdated=#{numUpdated},\r\n               err=#{err}\")\r\n          )\r\n          # set the new presenter\r\n          Meteor.Users.update({\"user.userid\": newPresenterId, meetingId: meetingId},\r\n            {$set: {\"user.presenter\": true}},\r\n            (err, numUpdated) ->\r\n              Meteor.log.info(\" Updating new presenter numUpdated=#{numUpdated},\r\n               err=#{err}\")\r\n          )\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is 'user_emoji_status_message'\r\n        userId = message.payload.userid\r\n        meetingId = message.payload.meeting_id\r\n        emojiStatus = message.payload.emoji_status\r\n        if userId? and meetingId?\r\n          set_emoji_time = new Date()\r\n          Meteor.Users.update({\"user.userid\": userId},\r\n            {$set:{\"user.set_emoji_time\":set_emoji_time,\"user.emoji_status\":emojiStatus}},\r\n            (err, numUpdated) ->\r\n              Meteor.log.info(\" Updating emoji numUpdated=#{numUpdated}, err=#{err}\")\r\n          )\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName in ['user_locked_message', 'user_unlocked_message']\r\n        userId = message.payload.userid\r\n        isLocked = message.payload.locked\r\n        setUserLockedStatus(meetingId, userId, isLocked)\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName in [\"meeting_ended_message\", \"meeting_destroyed_event\",\r\n        \"end_and_kick_all_message\", \"disconnect_all_users_message\"]\r\n        Meteor.log.info(\"DESTROYING MEETING #{meetingId}\")\r\n        removeMeetingFromCollection meetingId, callback\r\n\r\n        ###\r\n         if Meteor.Meetings.findOne({meetingId: meetingId})?\r\n          count=Meteor.Users.find({meetingId: meetingId}).count()\r\n          Meteor.log.info \"there are #{count} users in the meeting\"\r\n          for user in Meteor.Users.find({meetingId: meetingId}).fetch()\r\n            markUserOffline meetingId, user.userId\r\n          #TODO should we clear the chat messages for that meeting?!\r\n          unless eventName is \"disconnect_all_users_message\"\r\n            removeMeetingFromCollection meetingId\r\n        ###\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"get_chat_history_reply\" and message.payload.requester_id is \"nodeJSapp\"\r\n        unless Meteor.Meetings.findOne({MeetingId: message.payload.meeting_id})?\r\n          for chatMessage in message.payload.chat_history\r\n            addChatToCollection meetingId, chatMessage\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"send_public_chat_message\" or eventName is \"send_private_chat_message\"\r\n        messageObject = message.payload.message\r\n        # use current_time instead of message.from_time so that the chats from Flash and HTML5 have uniform times\r\n        messageObject.from_time = message.header.current_time\r\n        addChatToCollection meetingId, messageObject\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"presentation_shared_message\"\r\n        presentationId = message.payload.presentation?.id\r\n        # change the currently displayed presentation to presentation.current = false\r\n        Meteor.Presentations.update({\"presentation.current\": true, meetingId: meetingId},\r\n          {$set: {\"presentation.current\": false}})\r\n\r\n        #update(if already present) entirely the presentation with the fresh data\r\n        removePresentationFromCollection meetingId, presentationId\r\n        addPresentationToCollection meetingId, message.payload.presentation\r\n\r\n        for slide in message.payload.presentation?.pages\r\n          addSlideToCollection meetingId, message.payload.presentation?.id, slide\r\n          if slide.current\r\n            displayThisSlide meetingId, slide.id, slide\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"get_presentation_info_reply\" and message.payload.requester_id is \"nodeJSapp\"\r\n        for presentation in message.payload.presentations\r\n          addPresentationToCollection meetingId, presentation\r\n\r\n          for page in presentation.pages\r\n            #add the slide to the collection\r\n            addSlideToCollection meetingId, presentation.id, page\r\n\r\n            #request for shapes\r\n            whiteboardId = \"#{presentation.id}/#{page.num}\" # d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1404411622872/1\r\n            #Meteor.log.info \"the whiteboard_id here is:\" + whiteboardId\r\n\r\n            message =\r\n              \"payload\":\r\n                \"meeting_id\": meetingId\r\n                \"requester_id\": \"nodeJSapp\"\r\n                \"whiteboard_id\": whiteboardId\r\n              \"header\":\r\n                \"timestamp\": new Date().getTime()\r\n                \"name\": \"get_whiteboard_shapes_request\"\r\n                \"version\": \"0.0.1\"\r\n\r\n            if whiteboardId? and meetingId?\r\n              publish Meteor.config.redis.channels.toBBBApps.whiteboard, message #TODO\r\n            else\r\n              Meteor.log.info \"did not have enough information to send a user_leaving_request\" #TODO\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"presentation_page_changed_message\"\r\n        newSlide = message.payload.page\r\n        displayThisSlide meetingId, newSlide?.id, newSlide\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"presentation_removed_message\"\r\n        presentationId = message.payload.presentation_id\r\n        meetingId = message.payload.meeting_id\r\n        removePresentationFromCollection meetingId, presentationId\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"get_whiteboard_shapes_reply\" and message.payload.requester_id is \"nodeJSapp\"\r\n        # Create a whiteboard clean status or find one for the current meeting\r\n        if not Meteor.WhiteboardCleanStatus.findOne({meetingId: meetingId})?\r\n          Meteor.WhiteboardCleanStatus.insert({meetingId: meetingId, in_progress: false})\r\n\r\n        for shape in message.payload.shapes\r\n          whiteboardId = shape.wb_id\r\n          addShapeToCollection meetingId, whiteboardId, shape\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"send_whiteboard_shape_message\"\r\n        #Meteor stringifies an array of JSONs (...shape.result) in this message\r\n        #parsing the String and reassigning the value\r\n        if message.payload.shape.shape_type is \"poll_result\" and typeof message.payload.shape.shape.result is 'string'\r\n          message.payload.shape.shape.result = JSON.parse message.payload.shape.shape.result\r\n\r\n        shape = message.payload.shape\r\n        whiteboardId = shape?.wb_id\r\n        addShapeToCollection meetingId, whiteboardId, shape\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"presentation_cursor_updated_message\"\r\n        x = message.payload.x_percent\r\n        y = message.payload.y_percent\r\n        Meteor.Presentations.update({\"presentation.current\": true, meetingId: meetingId},\r\n          {$set: {\"pointer.x\": x, \"pointer.y\": y}})\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"whiteboard_cleared_message\"\r\n        whiteboardId = message.payload.whiteboard_id\r\n        Meteor.WhiteboardCleanStatus.update({meetingId: meetingId}, {$set: {'in_progress': true}})\r\n        removeAllShapesFromSlide meetingId, whiteboardId\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"undo_whiteboard_request\"\r\n        whiteboardId = message.payload.whiteboard_id\r\n        shapeId = message.payload.shape_id\r\n        removeShapeFromSlide meetingId, whiteboardId, shapeId\r\n        callback()\r\n\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"presentation_page_resized_message\"\r\n        slideId = message.payload.page?.id\r\n        heightRatio = message.payload.page?.height_ratio\r\n        widthRatio = message.payload.page?.width_ratio\r\n        xOffset = message.payload.page?.x_offset\r\n        yOffset = message.payload.page?.y_offset\r\n        presentationId = slideId.split(\"/\")[0]\r\n        Meteor.Slides.update({presentationId: presentationId, \"slide.current\": true},\r\n          {$set:{\"slide.height_ratio\": heightRatio,\"slide.width_ratio\": widthRatio,\"slide.x_offset\":xOffset,\"slide.y_offset\":yOffset}}\r\n        )\r\n        callback()\r\n\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"recording_status_changed_message\"\r\n        intendedForRecording = message.payload.recorded\r\n        currentlyBeingRecorded = message.payload.recording\r\n        Meteor.Meetings.update({meetingId: meetingId, intendedForRecording: intendedForRecording},\r\n          {$set: {currentlyBeingRecorded: currentlyBeingRecorded}}\r\n        )\r\n        callback()\r\n\r\n      # --------------------------------------------------\r\n      # lock settings ------------------------------------\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"eject_voice_user_message\"\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"new_permission_settings\"\r\n        oldSettings = Meteor.Meetings.findOne({meetingId:meetingId})?.roomLockSettings\r\n        newSettings = message.payload?.permissions\r\n\r\n        # if the disableMic setting was turned on\r\n        if !oldSettings?.disableMic and newSettings.disableMic\r\n          handleLockingMic(meetingId, newSettings)\r\n\r\n        # substitute with the new lock settings\r\n        Meteor.Meetings.update({meetingId: meetingId}, {$set: {\r\n          'roomLockSettings.disablePrivateChat': newSettings.disablePrivateChat\r\n          'roomLockSettings.disableCam': newSettings.disableCam\r\n          'roomLockSettings.disableMic': newSettings.disableMic\r\n          'roomLockSettings.lockOnJoin': newSettings.lockOnJoin\r\n          'roomLockSettings.lockedLayout': newSettings.lockedLayout\r\n          'roomLockSettings.disablePublicChat': newSettings.disablePublicChat\r\n          'roomLockSettings.lockOnJoinConfigurable': newSettings.lockOnJoinConfigurable #TODO\r\n        }})\r\n        callback()\r\n\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"poll_started_message\"\r\n        if message.payload.meeting_id? and message.payload.requester_id? and message.payload.poll?\r\n          if Meteor.Meetings.findOne({meetingId: message.payload.meeting_id})?\r\n            #initializing the list of current users\r\n            users = Meteor.Users.find({meetingId: message.payload.meeting_id},\r\n              {fields:{\"user.userid\": 1, _id: 0}} ).fetch()\r\n            addPollToCollection message.payload.poll, message.payload.requester_id,\r\n              users, message.payload.meeting_id\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"poll_stopped_message\"\r\n        meetingId = message.payload.meeting_id\r\n        poll_id = message.payload.poll_id\r\n        clearPollCollection meetingId, poll_id\r\n        callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"user_voted_poll_message\"\r\n        if message.payload?.poll? and message.payload.meeting_id? and message.payload.presenter_id?\r\n          pollObj = message.payload.poll\r\n          meetingId = message.payload.meeting_id\r\n          requesterId = message.payload.presenter_id\r\n          updatePollCollection pollObj, meetingId, requesterId\r\n          callback()\r\n\r\n      # for now not handling this serially #TODO\r\n      else if eventName is \"poll_show_result_message\"\r\n        if message.payload.poll.id? and message.payload.meeting_id?\r\n          poll_id = message.payload.poll.id\r\n          meetingId = message.payload.meeting_id\r\n          clearPollCollection meetingId, poll_id\r\n        callback()\r\n\r\n\r\n      else # keep moving in the queue\r\n        unless eventName in notLoggedEventTypes\r\n          Meteor.log.info \"WARNING!!!\r\n          THE JSON MESSAGE WAS NOT OF TYPE SUPPORTED BY THIS APPLICATION\\n\r\n          #{eventName}   {JSON.stringify message}\"\r\n        callback()\r\n    else\r\n      callback()\r\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/user_permissions.coffee.js                                   //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar moderator, presenter, viewer;                                      // 2\n                                                                       //\npresenter = {                                                          // 2\n  switchSlide: true,                                                   // 3\n  subscribePoll: true,                                                 // 3\n  subscribeAnswers: true                                               // 3\n};                                                                     //\n                                                                       //\nmoderator = {                                                          // 2\n  joinListenOnly: true,                                                // 13\n  leaveListenOnly: true,                                               // 13\n  raiseOwnHand: true,                                                  // 13\n  lowerOwnHand: true,                                                  // 13\n  muteSelf: true,                                                      // 13\n  unmuteSelf: true,                                                    // 13\n  logoutSelf: true,                                                    // 13\n  subscribeUsers: true,                                                // 13\n  subscribeChat: true,                                                 // 13\n  chatPublic: true,                                                    // 13\n  chatPrivate: true,                                                   // 13\n  subscribePoll: true,                                                 // 13\n  subscribeAnswers: false,                                             // 13\n  setEmojiStatus: true,                                                // 13\n  clearEmojiStatus: true                                               // 13\n};                                                                     //\n                                                                       //\nviewer = function(meetingId, userId) {                                 // 2\n  var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;                   // 50\n  return {                                                             //\n    joinListenOnly: true,                                              // 50\n    leaveListenOnly: true,                                             // 50\n    raiseOwnHand: true,                                                // 50\n    lowerOwnHand: true,                                                // 50\n    muteSelf: true,                                                    // 50\n    unmuteSelf: !((ref = Meteor.Meetings.findOne({                     // 50\n      meetingId: meetingId                                             //\n    })) != null ? ref.roomLockSettings.disableMic : void 0) || !((ref1 = Meteor.Users.findOne({\n      meetingId: meetingId,                                            //\n      userId: userId                                                   //\n    })) != null ? ref1.user.locked : void 0),                          //\n    logoutSelf: true,                                                  // 50\n    subscribeUsers: true,                                              // 50\n    subscribeChat: true,                                               // 50\n    chatPublic: !((ref2 = Meteor.Meetings.findOne({                    // 50\n      meetingId: meetingId                                             //\n    })) != null ? ref2.roomLockSettings.disablePublicChat : void 0) || !((ref3 = Meteor.Users.findOne({\n      meetingId: meetingId,                                            //\n      userId: userId                                                   //\n    })) != null ? ref3.user.locked : void 0) || ((ref4 = Meteor.Users.findOne({\n      meetingId: meetingId,                                            //\n      userId: userId                                                   //\n    })) != null ? ref4.user.presenter : void 0),                       //\n    chatPrivate: !((ref5 = Meteor.Meetings.findOne({                   // 50\n      meetingId: meetingId                                             //\n    })) != null ? ref5.roomLockSettings.disablePrivateChat : void 0) || !((ref6 = Meteor.Users.findOne({\n      meetingId: meetingId,                                            //\n      userId: userId                                                   //\n    })) != null ? ref6.user.locked : void 0) || ((ref7 = Meteor.Users.findOne({\n      meetingId: meetingId,                                            //\n      userId: userId                                                   //\n    })) != null ? ref7.user.presenter : void 0),                       //\n    subscribePoll: true,                                               // 50\n    subscribeAnswers: false,                                           // 50\n    setEmojiStatus: true,                                              // 50\n    clearEmojiStatus: true                                             // 50\n  };                                                                   //\n};                                                                     // 47\n                                                                       //\nthis.isAllowedTo = function(action, meetingId, userId, authToken) {    // 2\n  var ref, ref1, ref2, ref3, user, validated;                          // 91\n  validated = (ref = Meteor.Users.findOne({                            // 91\n    meetingId: meetingId,                                              //\n    userId: userId                                                     //\n  })) != null ? ref.validated : void 0;                                //\n  Meteor.log.info(\"in isAllowedTo: action-\" + action + \", userId=\" + userId + \", authToken=\" + authToken + \" validated:\" + validated);\n  user = Meteor.Users.findOne({                                        // 91\n    meetingId: meetingId,                                              // 94\n    userId: userId                                                     // 94\n  });                                                                  //\n  if ((user != null) && authToken === user.authToken) {                // 96\n    if (user.validated && user.clientType === \"HTML5\") {               // 97\n      if ((ref1 = user.user) != null ? ref1.presenter : void 0) {      // 101\n        Meteor.log.info(\"user permissions presenter case\");            // 102\n        return presenter[action] || viewer(meetingId, userId)[action] || false;\n      } else if (((ref2 = user.user) != null ? ref2.role : void 0) === 'VIEWER') {\n        Meteor.log.info(\"user permissions viewer case\");               // 107\n        return viewer(meetingId, userId)[action] || false;             // 108\n      } else if (((ref3 = user.user) != null ? ref3.role : void 0) === 'MODERATOR') {\n        Meteor.log.info(\"user permissions moderator case\");            // 112\n        return moderator[action] || false;                             // 113\n      } else {                                                         //\n        Meteor.log.warn(\"UNSUCCESSFULL ATTEMPT FROM userid=\" + userId + \" to perform:\" + action);\n        return false;                                                  // 117\n      }                                                                //\n    } else {                                                           //\n      if (action === \"logoutSelf\") {                                   // 120\n        Meteor.log.warn(\"a user was successfully removed from the meeting following an unsuccessful login\");\n        return true;                                                   // 123\n      }                                                                //\n      return false;                                                    // 124\n    }                                                                  //\n  } else {                                                             //\n    Meteor.log.error((\"in meetingId=\" + meetingId + \" userId=\" + userId + \" tried to perform \" + action + \" without permission\") + (\"\\n..while the authToken was \" + (user != null ? user.authToken : void 0) + \"    and the user's object is \" + (JSON.stringify(user))));\n    return false;                                                      // 129\n  }                                                                    //\n};                                                                     // 89\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/user_permissions.coffee.js","sourceMap":{"version":3,"sources":["/server/user_permissions.coffee"],"names":[],"mappings":"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","file":"/server/user_permissions.coffee.js","sourcesContent":["\npresenter =\n  switchSlide: true\n\n  #poll\n  subscribePoll: true\n  subscribeAnswers: true\n\n# holds the values for whether the moderator user is allowed to perform an action (true)\n# or false if not allowed. Some actions have dynamic values depending on the current lock settings\nmoderator =\n  # audio listen only\n  joinListenOnly: true\n  leaveListenOnly: true\n\n  # join audio with mic cannot be controlled on the server side as it is\n  # a client side only functionality\n\n  # raising/lowering hand\n  raiseOwnHand : true\n  lowerOwnHand : true\n\n  # muting\n  muteSelf : true\n  unmuteSelf : true\n\n  logoutSelf : true\n\n  #subscribing\n  subscribeUsers: true\n  subscribeChat: true\n\n  #chat\n  chatPublic: true\n  chatPrivate: true\n\n  #poll\n  subscribePoll: true\n  subscribeAnswers: false\n\n  #emojis\n  setEmojiStatus: true\n  clearEmojiStatus: true\n\n# holds the values for whether the viewer user is allowed to perform an action (true)\n# or false if not allowed. Some actions have dynamic values depending on the current lock settings\nviewer = (meetingId, userId) ->\n\n  # listen only\n  joinListenOnly: true\n  leaveListenOnly: true\n\n  # join audio with mic cannot be controlled on the server side as it is\n  # a client side only functionality\n\n  # raising/lowering hand\n  raiseOwnHand : true\n  lowerOwnHand : true\n\n  # muting\n  muteSelf : true\n  unmuteSelf : !(Meteor.Meetings.findOne({meetingId:meetingId})?.roomLockSettings.disableMic) or\n                !(Meteor.Users.findOne({meetingId:meetingId, userId:userId})?.user.locked)\n\n  logoutSelf : true\n\n  #subscribing\n  subscribeUsers: true\n  subscribeChat: true\n\n  #chat\n  chatPublic: !(Meteor.Meetings.findOne({meetingId:meetingId})?.roomLockSettings.disablePublicChat) or\n                !(Meteor.Users.findOne({meetingId:meetingId, userId:userId})?.user.locked) or\n                Meteor.Users.findOne({meetingId:meetingId, userId:userId})?.user.presenter\n  chatPrivate: !(Meteor.Meetings.findOne({meetingId:meetingId})?.roomLockSettings.disablePrivateChat) or\n                !(Meteor.Users.findOne({meetingId:meetingId, userId:userId})?.user.locked) or\n                Meteor.Users.findOne({meetingId:meetingId, userId:userId})?.user.presenter\n\n  #poll\n  subscribePoll: true\n  subscribeAnswers: false\n\n  #emojis\n  setEmojiStatus: true\n  clearEmojiStatus: true\n\n# carries out the decision making for actions affecting users. For the list of\n# actions and the default value - see 'viewer' and 'moderator' in the beginning of the file\n@isAllowedTo = (action, meetingId, userId, authToken) ->\n\n  validated = Meteor.Users.findOne({meetingId:meetingId, userId: userId})?.validated\n  Meteor.log.info \"in isAllowedTo: action-#{action}, userId=#{userId}, authToken=#{authToken} validated:#{validated}\"\n\n  user = Meteor.Users.findOne({meetingId:meetingId, userId: userId})\n  # Meteor.log.info \"user=\" + JSON.stringify user\n  if user? and authToken is user.authToken # check if the user is who he claims to be\n    if user.validated and user.clientType is \"HTML5\"\n\n      # PRESENTER\n      # check presenter specific actions or fallback to regular viewer actions\n      if user.user?.presenter\n        Meteor.log.info \"user permissions presenter case\"\n        return presenter[action] or viewer(meetingId, userId)[action] or false\n\n      # VIEWER\n      else if user.user?.role is 'VIEWER'\n        Meteor.log.info \"user permissions viewer case\"\n        return viewer(meetingId, userId)[action] or false\n\n      # MODERATOR\n      else if user.user?.role is 'MODERATOR'\n        Meteor.log.info \"user permissions moderator case\"\n        return moderator[action] or false\n\n      else\n        Meteor.log.warn \"UNSUCCESSFULL ATTEMPT FROM userid=#{userId} to perform:#{action}\"\n        return false\n    else\n      # user was not validated\n      if action is \"logoutSelf\"\n        # on unsuccessful sign-in\n        Meteor.log.warn \"a user was successfully removed from the meeting following an unsuccessful login\"\n        return true\n      return false\n\n  else\n    Meteor.log.error \"in meetingId=#{meetingId} userId=#{userId} tried to perform #{action} without permission\" +\n     \"\\n..while the authToken was #{user?.authToken}    and the user's object is #{JSON.stringify user}\"\n    return false\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// config.coffee.js                                                    //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar config, file, ref, transports, winston;                            // 4\n                                                                       //\nconfig = {};                                                           // 4\n                                                                       //\nconfig.appName = 'BigBlueButton HTML5 Client';                         // 4\n                                                                       //\nconfig.bbbServerVersion = '1.0-beta';                                  // 4\n                                                                       //\nconfig.copyrightYear = '2015';                                         // 4\n                                                                       //\nconfig.html5ClientBuild = 'NNNN';                                      // 4\n                                                                       //\nconfig.defaultWelcomeMessage = 'Welcome to %%CONFNAME%%!\\r\\rFor help on using BigBlueButton see these (short) <a href=\"event:http://www.bigbluebutton.org/content/videos\"><u>tutorial videos</u></a>.\\r\\rTo join the audio bridge click the gear icon (upper-right hand corner).  Use a headset to avoid causing background noise for others.\\r\\r\\r';\n                                                                       //\nconfig.defaultWelcomeMessageFooter = \"This server is running a build of <a href='http://docs.bigbluebutton.org/1.0/10overview.html' target='_blank'><u>BigBlueButton \" + config.bbbServerVersion + \"</u></a>.\";\n                                                                       //\nconfig.maxUsernameLength = 30;                                         // 4\n                                                                       //\nconfig.maxChatLength = 140;                                            // 4\n                                                                       //\nconfig.lockOnJoin = true;                                              // 4\n                                                                       //\nconfig.app = {};                                                       // 4\n                                                                       //\nconfig.app.mobileFont = 16;                                            // 4\n                                                                       //\nconfig.app.desktopFont = 14;                                           // 4\n                                                                       //\nconfig.app.autoJoinAudio = false;                                      // 4\n                                                                       //\nconfig.app.WebRTCHangupRetryInterval = 2000;                           // 4\n                                                                       //\nconfig.redis = {};                                                     // 4\n                                                                       //\nconfig.redis.host = \"127.0.0.1\";                                       // 4\n                                                                       //\nconfig.redis.post = \"6379\";                                            // 4\n                                                                       //\nconfig.redis.timeout = 5000;                                           // 4\n                                                                       //\nconfig.redis.channels = {};                                            // 4\n                                                                       //\nconfig.redis.channels.fromBBBApps = \"bigbluebutton:from-bbb-apps:*\";   // 4\n                                                                       //\nconfig.redis.channels.toBBBApps = {};                                  // 4\n                                                                       //\nconfig.redis.channels.toBBBApps.pattern = \"bigbluebutton:to-bbb-apps:*\";\n                                                                       //\nconfig.redis.channels.toBBBApps.chat = \"bigbluebutton:to-bbb-apps:chat\";\n                                                                       //\nconfig.redis.channels.toBBBApps.meeting = \"bigbluebutton:to-bbb-apps:meeting\";\n                                                                       //\nconfig.redis.channels.toBBBApps.presentation = \"bigbluebutton:to-bbb-apps:presentation\";\n                                                                       //\nconfig.redis.channels.toBBBApps.users = \"bigbluebutton:to-bbb-apps:users\";\n                                                                       //\nconfig.redis.channels.toBBBApps.voice = \"bigbluebutton:to-bbb-apps:voice\";\n                                                                       //\nconfig.redis.channels.toBBBApps.whiteboard = \"bigbluebutton:to-bbb-apps:whiteboard\";\n                                                                       //\nconfig.redis.channels.toBBBApps.polling = \"bigbluebutton:to-bbb-apps:polling\";\n                                                                       //\nconfig.log = {};                                                       // 4\n                                                                       //\nif (Meteor.isServer) {                                                 // 51\n  config.log.path = (typeof process !== \"undefined\" && process !== null ? (ref = process.env) != null ? ref.NODE_ENV : void 0 : void 0) === \"production\" ? \"/var/log/bigbluebutton/bbbnode.log\" : process.env.PWD + '/../log/development.log';\n  winston = Winston;                                                   // 52\n  file = config.log.path;                                              // 52\n  transports = [                                                       // 52\n    new winston.transports.Console(), new winston.transports.File({    //\n      filename: file                                                   // 61\n    })                                                                 //\n  ];                                                                   //\n  Meteor.log = new winston.Logger({                                    // 52\n    transports: transports                                             // 64\n  });                                                                  //\n}                                                                      //\n                                                                       //\nMeteor.config = config;                                                // 4\n                                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/config.coffee.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/config.coffee"],"names":[],"mappings":";;;;;;;;;AAGA;;AAAA,SAAS,EAAT;;AAAA,MAGM,CAAC,OAAP,GAAiB,4BAHjB;;AAAA,MAIM,CAAC,gBAAP,GAA0B,UAJ1B;;AAAA,MAKM,CAAC,aAAP,GAAuB,MALvB;;AAAA,MAMM,CAAC,gBAAP,GAA0B,MAN1B;;AAAA,MAOM,CAAC,qBAAP,GAA+B,qTAP/B;;AAAA,MAQM,CAAC,2BAAP,GAAqC,oIAAkI,MAAM,CAAC,gBAAzI,GAA0J,WAR/L;;AAAA,MAUM,CAAC,iBAAP,GAA2B,EAV3B;;AAAA,MAWM,CAAC,aAAP,GAAuB,GAXvB;;AAAA,MAaM,CAAC,UAAP,GAAoB,IAbpB;;AAAA,MAgBM,CAAC,GAAP,GAAa,EAhBb;;AAAA,MAmBM,CAAC,GAAG,CAAC,UAAX,GAAsB,EAnBtB;;AAAA,MAoBM,CAAC,GAAG,CAAC,WAAX,GAAuB,EApBvB;;AAAA,MAuBM,CAAC,GAAG,CAAC,aAAX,GAA2B,KAvB3B;;AAAA,MAyBM,CAAC,GAAG,CAAC,yBAAX,GAAuC,IAzBvC;;AAAA,MA4BM,CAAC,KAAP,GAAe,EA5Bf;;AAAA,MA6BM,CAAC,KAAK,CAAC,IAAb,GAAoB,WA7BpB;;AAAA,MA8BM,CAAC,KAAK,CAAC,IAAb,GAAoB,MA9BpB;;AAAA,MA+BM,CAAC,KAAK,CAAC,OAAb,GAAuB,IA/BvB;;AAAA,MAgCM,CAAC,KAAK,CAAC,QAAb,GAAwB,EAhCxB;;AAAA,MAiCM,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAtB,GAAoC,+BAjCpC;;AAAA,MAkCM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAtB,GAAkC,EAlClC;;AAAA,MAmCM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAhC,GAA0C,6BAnC1C;;AAAA,MAoCM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAhC,GAAuC,gCApCvC;;AAAA,MAqCM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAhC,GAA0C,mCArC1C;;AAAA,MAsCM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAhC,GAA+C,wCAtC/C;;AAAA,MAuCM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAhC,GAAwC,iCAvCxC;;AAAA,MAwCM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAhC,GAAwC,iCAxCxC;;AAAA,MAyCM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAhC,GAA6C,sCAzC7C;;AAAA,MA0CM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAhC,GAA0C,mCA1C1C;;AAAA,MA6CM,CAAC,GAAP,GAAa,EA7Cb;;AA+CA,IAAG,MAAM,CAAC,QAAV;AACE,QAAM,CAAC,GAAG,CAAC,IAAX,0FAAiC,CAAE,2BAAd,KAA0B,YAA7B,GAChB,oCADgB,GAIf,OAAO,CAAC,GAAG,CAAC,GAAZ,GAAkB,yBAJrB;AAAA,EAOA,UAAU,OAPV;AAAA,EAQA,OAAO,MAAM,CAAC,GAAG,CAAC,IARlB;AAAA,EASA,aAAa;IAAM,WAAO,CAAC,UAAU,CAAC,OAAnB,EAAN,EAAwC,WAAO,CAAC,UAAU,CAAC,IAAnB,CAAwB;AAAA,MAAE,UAAU,IAAZ;KAAxB,CAAxC;GATb;AAAA,EAWA,MAAM,CAAC,GAAP,GAAiB,WAAO,CAAC,MAAR,CACf;AAAA,gBAAY,UAAZ;GADe,CAXjB,CADF;CA/CA;;AAAA,MA8DM,CAAC,MAAP,GAAgB,MA9DhB","file":"/config.coffee.js","sourcesContent":["# TODO: should be split on server and client side\n# # Global configurations file\n\nconfig = {}\n\n# Default global variables\nconfig.appName = 'BigBlueButton HTML5 Client'\nconfig.bbbServerVersion = '1.0-beta'\nconfig.copyrightYear = '2015'\nconfig.html5ClientBuild = 'NNNN'\nconfig.defaultWelcomeMessage = 'Welcome to %%CONFNAME%%!\\r\\rFor help on using BigBlueButton see these (short) <a href=\"event:http://www.bigbluebutton.org/content/videos\"><u>tutorial videos</u></a>.\\r\\rTo join the audio bridge click the gear icon (upper-right hand corner).  Use a headset to avoid causing background noise for others.\\r\\r\\r'\nconfig.defaultWelcomeMessageFooter = \"This server is running a build of <a href='http://docs.bigbluebutton.org/1.0/10overview.html' target='_blank'><u>BigBlueButton #{config.bbbServerVersion}</u></a>.\"\n\nconfig.maxUsernameLength = 30\nconfig.maxChatLength = 140\n\nconfig.lockOnJoin = true\n\n## Application configurations\nconfig.app = {}\n\n#default font sizes for mobile / desktop\nconfig.app.mobileFont=16\nconfig.app.desktopFont=14\n\n# Will offer the user to join the audio when entering the meeting\nconfig.app.autoJoinAudio = false\n# The amount of time the client will wait before making another call to successfully hangup the WebRTC conference call\nconfig.app.WebRTCHangupRetryInterval = 2000\n\n# Configs for redis\nconfig.redis = {}\nconfig.redis.host = \"127.0.0.1\"\nconfig.redis.post = \"6379\"\nconfig.redis.timeout = 5000\nconfig.redis.channels = {}\nconfig.redis.channels.fromBBBApps = \"bigbluebutton:from-bbb-apps:*\"\nconfig.redis.channels.toBBBApps = {}\nconfig.redis.channels.toBBBApps.pattern = \"bigbluebutton:to-bbb-apps:*\"\nconfig.redis.channels.toBBBApps.chat = \"bigbluebutton:to-bbb-apps:chat\"\nconfig.redis.channels.toBBBApps.meeting = \"bigbluebutton:to-bbb-apps:meeting\"\nconfig.redis.channels.toBBBApps.presentation = \"bigbluebutton:to-bbb-apps:presentation\"\nconfig.redis.channels.toBBBApps.users = \"bigbluebutton:to-bbb-apps:users\"\nconfig.redis.channels.toBBBApps.voice = \"bigbluebutton:to-bbb-apps:voice\"\nconfig.redis.channels.toBBBApps.whiteboard = \"bigbluebutton:to-bbb-apps:whiteboard\"\nconfig.redis.channels.toBBBApps.polling = \"bigbluebutton:to-bbb-apps:polling\"\n\n# Logging\nconfig.log = {}\n\nif Meteor.isServer\n  config.log.path = if process?.env?.NODE_ENV is \"production\"\n    \"/var/log/bigbluebutton/bbbnode.log\"\n  else\n    # logs in the directory immediatly before the meteor app\n     process.env.PWD + '/../log/development.log'\n\n  # Setting up a logger in Meteor.log\n  winston = Winston #Meteor.require 'winston'\n  file = config.log.path\n  transports = [ new winston.transports.Console(), new winston.transports.File { filename: file } ]\n\n  Meteor.log = new winston.Logger\n    transports: transports\n\nMeteor.config = config\n"]}}]