[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\n\n/* Package-scope variables */\nvar _noopCallback, _nonReactive, ReactiveProperty;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// packages/cfs_reactive-property/packages/cfs_reactive-property.js                       //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\n(function () {                                                                            // 1\n                                                                                          // 2\n/////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                 //     // 4\n// packages/cfs:reactive-property/reactive-property.js                             //     // 5\n//                                                                                 //     // 6\n/////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                   //     // 8\n// #ReactiveProperty                                                               // 1   // 9\n// A simple class that provides an reactive property interface                     // 2   // 10\n                                                                                   // 3   // 11\n_noopCallback = function() {};                                                     // 4   // 12\n                                                                                   // 5   // 13\n_nonReactive = {                                                                   // 6   // 14\n  changed: _noopCallback,                                                          // 7   // 15\n  depend: _noopCallback                                                            // 8   // 16\n};                                                                                 // 9   // 17\n                                                                                   // 10  // 18\n/**                                                                                // 11  // 19\n  * @constructor                                                                   // 12  // 20\n  * @param {any} defaultValue Set the default value for the reactive property      // 13  // 21\n  * @param {boolean} [reactive = true] Allow the user to disable reactivity        // 14  // 22\n  *                                                                                // 15  // 23\n  * This api should only be in the internal.api.md                                 // 16  // 24\n  */                                                                               // 17  // 25\nReactiveProperty = function(defaultValue, reactive) {                              // 18  // 26\n  var self = this;                                                                 // 19  // 27\n  var _deps = (reactive === false)? _nonReactive : new Deps.Dependency();          // 20  // 28\n                                                                                   // 21  // 29\n  /** @property ReactiveProperty.value                                             // 22  // 30\n    * @private                                                                     // 23  // 31\n    * This contains the non reactive value, should only be used as a getter for    // 24  // 32\n    * internal use                                                                 // 25  // 33\n    */                                                                             // 26  // 34\n  self.value = defaultValue;                                                       // 27  // 35\n                                                                                   // 28  // 36\n  self.onChange = function() {};                                                   // 29  // 37\n                                                                                   // 30  // 38\n  self.changed = function() {                                                      // 31  // 39\n    _deps.changed();                                                               // 32  // 40\n    self.onChange(self.value);                                                     // 33  // 41\n  };                                                                               // 34  // 42\n                                                                                   // 35  // 43\n  /**                                                                              // 36  // 44\n    * @method ReactiveProperty.get                                                 // 37  // 45\n    * Usage:                                                                       // 38  // 46\n    * ```js                                                                        // 39  // 47\n    *   var foo = new ReactiveProperty('bar');                                     // 40  // 48\n    *   foo.get(); // equals \"bar\"                                                 // 41  // 49\n    * ```                                                                          // 42  // 50\n    */                                                                             // 43  // 51\n  self.get = function() {                                                          // 44  // 52\n    _deps.depend();                                                                // 45  // 53\n    return self.value;                                                             // 46  // 54\n  };                                                                               // 47  // 55\n                                                                                   // 48  // 56\n  /**                                                                              // 49  // 57\n    * @method ReactiveProperty.set Set property to value                           // 50  // 58\n    * @param {any} value                                                           // 51  // 59\n    * Usage:                                                                       // 52  // 60\n    * ```js                                                                        // 53  // 61\n    *   var foo = new ReactiveProperty('bar');                                     // 54  // 62\n    *   foo.set('bar');                                                            // 55  // 63\n    * ```                                                                          // 56  // 64\n    */                                                                             // 57  // 65\n  self.set = function(value) {                                                     // 58  // 66\n    if (self.value !== value) {                                                    // 59  // 67\n      self.value = value;                                                          // 60  // 68\n      self.changed();                                                              // 61  // 69\n    }                                                                              // 62  // 70\n  };                                                                               // 63  // 71\n                                                                                   // 64  // 72\n  /**                                                                              // 65  // 73\n    * @method ReactiveProperty.dec Decrease numeric property                       // 66  // 74\n    * @param {number} [by=1] Value to decrease by                                  // 67  // 75\n    * Usage:                                                                       // 68  // 76\n    * ```js                                                                        // 69  // 77\n    *   var foo = new ReactiveProperty('bar');                                     // 70  // 78\n    *   foo.set(0);                                                                // 71  // 79\n    *   foo.dec(5); // -5                                                          // 72  // 80\n    * ```                                                                          // 73  // 81\n    */                                                                             // 74  // 82\n  self.dec = function(by) {                                                        // 75  // 83\n    self.value -= by || 1;                                                         // 76  // 84\n    self.changed();                                                                // 77  // 85\n  };                                                                               // 78  // 86\n                                                                                   // 79  // 87\n  /**                                                                              // 80  // 88\n    * @method ReactiveProperty.inc increase numeric property                       // 81  // 89\n    * @param {number} [by=1] Value to increase by                                  // 82  // 90\n    * Usage:                                                                       // 83  // 91\n    * ```js                                                                        // 84  // 92\n    *   var foo = new ReactiveProperty('bar');                                     // 85  // 93\n    *   foo.set(0);                                                                // 86  // 94\n    *   foo.inc(5); // 5                                                           // 87  // 95\n    * ```                                                                          // 88  // 96\n    */                                                                             // 89  // 97\n  self.inc = function(by) {                                                        // 90  // 98\n    self.value += by || 1;                                                         // 91  // 99\n    self.changed();                                                                // 92  // 100\n  };                                                                               // 93  // 101\n                                                                                   // 94  // 102\n  /**                                                                              // 95  // 103\n    * @method ReactiveProperty.getset increase numeric property                    // 96  // 104\n    * @param {any} [value] Value to set property - if undefined the act like `get` // 97  // 105\n    * @returns {any} Returns value if no arguments are passed to the function      // 98  // 106\n    * Usage:                                                                       // 99  // 107\n    * ```js                                                                        // 100\n    *   var foo = new ReactiveProperty('bar');                                     // 101\n    *   foo.getset(5);                                                             // 102\n    *   foo.getset(); // returns 5                                                 // 103\n    * ```                                                                          // 104\n    */                                                                             // 105\n  self.getset = function(value) {                                                  // 106\n    if (typeof value !== 'undefined') {                                            // 107\n      self.set(value);                                                             // 108\n    } else {                                                                       // 109\n      return self.get();                                                           // 110\n    }                                                                              // 111\n  };                                                                               // 112\n                                                                                   // 113\n  /**                                                                              // 114\n    * @method ReactiveProperty.toString                                            // 115\n    * Usage:                                                                       // 116\n    * ```js                                                                        // 117\n    *   var foo = new ReactiveProperty('bar');                                     // 118\n    *   foo.toString(); // returns 'bar'                                           // 119\n    * ```                                                                          // 120\n    */                                                                             // 121\n  self.toString = function() {                                                     // 122\n    var val = self.get();                                                          // 123\n    return val ? val.toString() : '';                                              // 124\n  };                                                                               // 125\n                                                                                   // 126\n  /**                                                                              // 127\n    * @method ReactiveProperty.toText                                              // 128\n    * Usage:                                                                       // 129\n    * ```js                                                                        // 130\n    *   var foo = new ReactiveProperty('bar');                                     // 131\n    *   foo.toText(); // returns 'bar'                                             // 132\n    * ```                                                                          // 133\n    */                                                                             // 134\n  self.toText = self.toString;                                                     // 135\n                                                                                   // 136\n};                                                                                 // 137\n                                                                                   // 138\n/////////////////////////////////////////////////////////////////////////////////////     // 147\n                                                                                          // 148\n}).call(this);                                                                            // 149\n                                                                                          // 150\n////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['cfs:reactive-property'] = {\n  ReactiveProperty: ReactiveProperty\n};\n\n})();\n","servePath":"/packages/cfs_reactive-property.js","sourceMap":{"version":3,"sources":["/packages/cfs_reactive-property/packages/cfs_reactive-property.js"],"names":[],"mappingsgG","file":"/packages/cfs_reactive-property.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/cfs:reactive-property/reactive-property.js                             //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\n// #ReactiveProperty                                                               // 1\n// A simple class that provides an reactive property interface                     // 2\n                                                                                   // 3\n_noopCallback = function() {};                                                     // 4\n                                                                                   // 5\n_nonReactive = {                                                                   // 6\n  changed: _noopCallback,                                                          // 7\n  depend: _noopCallback                                                            // 8\n};                                                                                 // 9\n                                                                                   // 10\n/**                                                                                // 11\n  * @constructor                                                                   // 12\n  * @param {any} defaultValue Set the default value for the reactive property      // 13\n  * @param {boolean} [reactive = true] Allow the user to disable reactivity        // 14\n  *                                                                                // 15\n  * This api should only be in the internal.api.md                                 // 16\n  */                                                                               // 17\nReactiveProperty = function(defaultValue, reactive) {                              // 18\n  var self = this;                                                                 // 19\n  var _deps = (reactive === false)? _nonReactive : new Deps.Dependency();          // 20\n                                                                                   // 21\n  /** @property ReactiveProperty.value                                             // 22\n    * @private                                                                     // 23\n    * This contains the non reactive value, should only be used as a getter for    // 24\n    * internal use                                                                 // 25\n    */                                                                             // 26\n  self.value = defaultValue;                                                       // 27\n                                                                                   // 28\n  self.onChange = function() {};                                                   // 29\n                                                                                   // 30\n  self.changed = function() {                                                      // 31\n    _deps.changed();                                                               // 32\n    self.onChange(self.value);                                                     // 33\n  };                                                                               // 34\n                                                                                   // 35\n  /**                                                                              // 36\n    * @method ReactiveProperty.get                                                 // 37\n    * Usage:                                                                       // 38\n    * ```js                                                                        // 39\n    *   var foo = new ReactiveProperty('bar');                                     // 40\n    *   foo.get(); // equals \"bar\"                                                 // 41\n    * ```                                                                          // 42\n    */                                                                             // 43\n  self.get = function() {                                                          // 44\n    _deps.depend();                                                                // 45\n    return self.value;                                                             // 46\n  };                                                                               // 47\n                                                                                   // 48\n  /**                                                                              // 49\n    * @method ReactiveProperty.set Set property to value                           // 50\n    * @param {any} value                                                           // 51\n    * Usage:                                                                       // 52\n    * ```js                                                                        // 53\n    *   var foo = new ReactiveProperty('bar');                                     // 54\n    *   foo.set('bar');                                                            // 55\n    * ```                                                                          // 56\n    */                                                                             // 57\n  self.set = function(value) {                                                     // 58\n    if (self.value !== value) {                                                    // 59\n      self.value = value;                                                          // 60\n      self.changed();                                                              // 61\n    }                                                                              // 62\n  };                                                                               // 63\n                                                                                   // 64\n  /**                                                                              // 65\n    * @method ReactiveProperty.dec Decrease numeric property                       // 66\n    * @param {number} [by=1] Value to decrease by                                  // 67\n    * Usage:                                                                       // 68\n    * ```js                                                                        // 69\n    *   var foo = new ReactiveProperty('bar');                                     // 70\n    *   foo.set(0);                                                                // 71\n    *   foo.dec(5); // -5                                                          // 72\n    * ```                                                                          // 73\n    */                                                                             // 74\n  self.dec = function(by) {                                                        // 75\n    self.value -= by || 1;                                                         // 76\n    self.changed();                                                                // 77\n  };                                                                               // 78\n                                                                                   // 79\n  /**                                                                              // 80\n    * @method ReactiveProperty.inc increase numeric property                       // 81\n    * @param {number} [by=1] Value to increase by                                  // 82\n    * Usage:                                                                       // 83\n    * ```js                                                                        // 84\n    *   var foo = new ReactiveProperty('bar');                                     // 85\n    *   foo.set(0);                                                                // 86\n    *   foo.inc(5); // 5                                                           // 87\n    * ```                                                                          // 88\n    */                                                                             // 89\n  self.inc = function(by) {                                                        // 90\n    self.value += by || 1;                                                         // 91\n    self.changed();                                                                // 92\n  };                                                                               // 93\n                                                                                   // 94\n  /**                                                                              // 95\n    * @method ReactiveProperty.getset increase numeric property                    // 96\n    * @param {any} [value] Value to set property - if undefined the act like `get` // 97\n    * @returns {any} Returns value if no arguments are passed to the function      // 98\n    * Usage:                                                                       // 99\n    * ```js                                                                        // 100\n    *   var foo = new ReactiveProperty('bar');                                     // 101\n    *   foo.getset(5);                                                             // 102\n    *   foo.getset(); // returns 5                                                 // 103\n    * ```                                                                          // 104\n    */                                                                             // 105\n  self.getset = function(value) {                                                  // 106\n    if (typeof value !== 'undefined') {                                            // 107\n      self.set(value);                                                             // 108\n    } else {                                                                       // 109\n      return self.get();                                                           // 110\n    }                                                                              // 111\n  };                                                                               // 112\n                                                                                   // 113\n  /**                                                                              // 114\n    * @method ReactiveProperty.toString                                            // 115\n    * Usage:                                                                       // 116\n    * ```js                                                                        // 117\n    *   var foo = new ReactiveProperty('bar');                                     // 118\n    *   foo.toString(); // returns 'bar'                                           // 119\n    * ```                                                                          // 120\n    */                                                                             // 121\n  self.toString = function() {                                                     // 122\n    var val = self.get();                                                          // 123\n    return val ? val.toString() : '';                                              // 124\n  };                                                                               // 125\n                                                                                   // 126\n  /**                                                                              // 127\n    * @method ReactiveProperty.toText                                              // 128\n    * Usage:                                                                       // 129\n    * ```js                                                                        // 130\n    *   var foo = new ReactiveProperty('bar');                                     // 131\n    *   foo.toText(); // returns 'bar'                                             // 132\n    * ```                                                                          // 133\n    */                                                                             // 134\n  self.toText = self.toString;                                                     // 135\n                                                                                   // 136\n};                                                                                 // 137\n                                                                                   // 138\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]