{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({\n  listenOnlyRequestToggle: function(meetingId, userId, authToken, isJoining) {\n    var message, ref, ref1, username, voiceConf;\n    voiceConf = (ref = Meteor.Meetings.findOne({\n      meetingId: meetingId\n    })) != null ? ref.voiceConf : void 0;\n    username = (ref1 = Meteor.Users.findOne({\n      meetingId: meetingId,\n      userId: userId\n    })) != null ? ref1.user.name : void 0;\n    if (isJoining) {\n      if (isAllowedTo('joinListenOnly', meetingId, userId, authToken)) {\n        message = {\n          payload: {\n            userid: userId,\n            meeting_id: meetingId,\n            voice_conf: voiceConf,\n            name: username\n          },\n          header: {\n            timestamp: new Date().getTime(),\n            name: \"user_connected_to_global_audio\",\n            version: \"0.0.1\"\n          }\n        };\n        Meteor.log.info(\"publishing a user listenOnly toggleRequest \" + isJoining + \" request for \" + userId);\n        publish(Meteor.config.redis.channels.toBBBApps.meeting, message);\n      }\n    } else {\n      if (isAllowedTo('leaveListenOnly', meetingId, userId, authToken)) {\n        message = {\n          payload: {\n            userid: userId,\n            meeting_id: meetingId,\n            voice_conf: voiceConf,\n            name: username\n          },\n          header: {\n            timestamp: new Date().getTime(),\n            name: \"user_disconnected_from_global_audio\",\n            version: \"0.0.1\"\n          }\n        };\n        Meteor.log.info(\"publishing a user listenOnly toggleRequest \" + isJoining + \" request for \" + userId);\n        publish(Meteor.config.redis.channels.toBBBApps.meeting, message);\n      }\n    }\n  },\n  muteUser: function(meetingId, toMuteUserId, requesterUserId, requesterToken) {\n    var action, message;\n    action = function() {\n      if (toMuteUserId === requesterUserId) {\n        return 'muteSelf';\n      } else {\n        return 'muteOther';\n      }\n    };\n    if (isAllowedTo(action(), meetingId, requesterUserId, requesterToken)) {\n      message = {\n        payload: {\n          user_id: toMuteUserId,\n          meeting_id: meetingId,\n          mute: true,\n          requester_id: requesterUserId\n        },\n        header: {\n          timestamp: new Date().getTime(),\n          name: \"mute_user_request_message\",\n          version: \"0.0.1\"\n        }\n      };\n      Meteor.log.info(\"publishing a user mute request for \" + toMuteUserId);\n      publish(Meteor.config.redis.channels.toBBBApps.users, message);\n      updateVoiceUser(meetingId, {\n        'web_userid': toMuteUserId,\n        talking: false,\n        muted: true\n      });\n    }\n  },\n  unmuteUser: function(meetingId, toMuteUserId, requesterUserId, requesterToken) {\n    var action, message;\n    action = function() {\n      if (toMuteUserId === requesterUserId) {\n        return 'unmuteSelf';\n      } else {\n        return 'unmuteOther';\n      }\n    };\n    if (isAllowedTo(action(), meetingId, requesterUserId, requesterToken)) {\n      message = {\n        payload: {\n          user_id: toMuteUserId,\n          meeting_id: meetingId,\n          mute: false,\n          requester_id: requesterUserId\n        },\n        header: {\n          timestamp: new Date().getTime(),\n          name: \"mute_user_request_message\",\n          version: \"0.0.1\"\n        }\n      };\n      Meteor.log.info(\"publishing a user unmute request for \" + toMuteUserId);\n      publish(Meteor.config.redis.channels.toBBBApps.users, message);\n      updateVoiceUser(meetingId, {\n        'web_userid': toMuteUserId,\n        talking: false,\n        muted: false\n      });\n    }\n  },\n  userSetEmoji: function(meetingId, toRaiseUserId, raisedByUserId, raisedByToken, status) {\n    var message;\n    if (isAllowedTo('setEmojiStatus', meetingId, raisedByUserId, raisedByToken)) {\n      message = {\n        payload: {\n          emoji_status: status,\n          userid: toRaiseUserId,\n          meeting_id: meetingId\n        },\n        header: {\n          timestamp: new Date().getTime(),\n          name: \"user_emoji_status_message\",\n          version: \"0.0.1\"\n        }\n      };\n      publish(Meteor.config.redis.channels.toBBBApps.users, message);\n    }\n  },\n  userLogout: function(meetingId, userId, authToken) {\n    if (isAllowedTo('logoutSelf', meetingId, userId, authToken)) {\n      Meteor.log.info((\"a user is logging out from \" + meetingId + \":\") + userId);\n      return requestUserLeaving(meetingId, userId);\n    }\n  }\n});\n\nthis.markUserOffline = function(meetingId, userId, callback) {\n  var user;\n  user = Meteor.Users.findOne({\n    meetingId: meetingId,\n    userId: userId\n  });\n  if ((user != null ? user.clientType : void 0) === \"HTML5\") {\n    Meteor.log.info(\"marking html5 user [\" + userId + \"] as offline in meeting[\" + meetingId + \"]\");\n    return Meteor.Users.update({\n      meetingId: meetingId,\n      userId: userId\n    }, {\n      $set: {\n        'user.connection_status': 'offline',\n        'voiceUser.talking': false,\n        'voiceUser.joined': false,\n        'voiceUser.muted': false,\n        'user.time_of_joining': 0,\n        'user.listenOnly': false\n      }\n    }, function(err, numChanged) {\n      var funct;\n      if (err != null) {\n        Meteor.log.error(\"_unsucc update (mark as offline) of user \" + (user != null ? user.user.name : void 0) + \" \" + userId + \" err=\" + (JSON.stringify(err)));\n        return callback();\n      } else {\n        funct = function(cbk) {\n          Meteor.log.info(\"_marking as offline html5 user \" + (user != null ? user.user.name : void 0) + \" \" + userId + \"  numChanged=\" + numChanged);\n          return cbk();\n        };\n        return funct(callback);\n      }\n    });\n  } else {\n    return Meteor.Users.remove({\n      meetingId: meetingId,\n      userId: userId\n    }, function(err, numDeletions) {\n      var funct;\n      if (err != null) {\n        Meteor.log.error(\"_unsucc deletion of user \" + (user != null ? user.user.name : void 0) + \" \" + userId + \" err=\" + (JSON.stringify(err)));\n        return callback();\n      } else {\n        funct = function(cbk) {\n          Meteor.log.info(\"_deleting info for user \" + (user != null ? user.user.name : void 0) + \" \" + userId + \" numDeletions=\" + numDeletions);\n          return cbk();\n        };\n        return funct(callback);\n      }\n    });\n  }\n};\n\nthis.requestUserLeaving = function(meetingId, userId) {\n  var listenOnlyMessage, message, ref, userObject, voiceConf;\n  userObject = Meteor.Users.findOne({\n    'meetingId': meetingId,\n    'userId': userId\n  });\n  voiceConf = (ref = Meteor.Meetings.findOne({\n    meetingId: meetingId\n  })) != null ? ref.voiceConf : void 0;\n  if ((userObject != null) && (voiceConf != null) && (userId != null) && (meetingId != null)) {\n    if (userObject.user.listenOnly) {\n      listenOnlyMessage = {\n        payload: {\n          userid: userId,\n          meeting_id: meetingId,\n          voice_conf: voiceConf,\n          name: userObject.user.name\n        },\n        header: {\n          timestamp: new Date().getTime(),\n          name: \"user_disconnected_from_global_audio\"\n        }\n      };\n      publish(Meteor.config.redis.channels.toBBBApps.meeting, listenOnlyMessage);\n    }\n    message = {\n      payload: {\n        meeting_id: meetingId,\n        userid: userId\n      },\n      header: {\n        timestamp: new Date().getTime(),\n        name: \"user_leaving_request\"\n      }\n    };\n    Meteor.log.info(\"sending a user_leaving_request for \" + meetingId + \":\" + userId);\n    return publish(Meteor.config.redis.channels.toBBBApps.users, message);\n  } else {\n    return Meteor.log.info(\"did not have enough information to send a user_leaving_request\");\n  }\n};\n\nthis.updateVoiceUser = function(meetingId, voiceUserObject, callback) {\n  var u;\n  u = Meteor.Users.findOne({\n    userId: voiceUserObject.web_userid\n  });\n  if (u != null) {\n    if (voiceUserObject.talking != null) {\n      Meteor.Users.update({\n        meetingId: meetingId,\n        userId: voiceUserObject.web_userid\n      }, {\n        $set: {\n          'user.voiceUser.talking': voiceUserObject.talking\n        }\n      }, function(err, numChanged) {\n        if (err != null) {\n          Meteor.log.error(\"_unsucc update of voiceUser \" + voiceUserObject.web_userid + \" [talking] err=\" + (JSON.stringify(err)));\n        }\n        return callback();\n      });\n    }\n    if (voiceUserObject.joined != null) {\n      Meteor.Users.update({\n        meetingId: meetingId,\n        userId: voiceUserObject.web_userid\n      }, {\n        $set: {\n          'user.voiceUser.joined': voiceUserObject.joined\n        }\n      }, function(err, numChanged) {\n        if (err != null) {\n          Meteor.log.error(\"_unsucc update of voiceUser \" + voiceUserObject.web_userid + \" [joined] err=\" + (JSON.stringify(err)));\n        }\n        return callback();\n      });\n    }\n    if (voiceUserObject.locked != null) {\n      Meteor.Users.update({\n        meetingId: meetingId,\n        userId: voiceUserObject.web_userid\n      }, {\n        $set: {\n          'user.voiceUser.locked': voiceUserObject.locked\n        }\n      }, function(err, numChanged) {\n        if (err != null) {\n          Meteor.log.error(\"_unsucc update of voiceUser \" + voiceUserObject.web_userid + \" [locked] err=\" + (JSON.stringify(err)));\n        }\n        return callback();\n      });\n    }\n    if (voiceUserObject.muted != null) {\n      Meteor.Users.update({\n        meetingId: meetingId,\n        userId: voiceUserObject.web_userid\n      }, {\n        $set: {\n          'user.voiceUser.muted': voiceUserObject.muted\n        }\n      }, function(err, numChanged) {\n        if (err != null) {\n          Meteor.log.error(\"_unsucc update of voiceUser \" + voiceUserObject.web_userid + \" [muted] err=\" + (JSON.stringify(err)));\n        }\n        return callback();\n      });\n    }\n    if (voiceUserObject.listen_only != null) {\n      return Meteor.Users.update({\n        meetingId: meetingId,\n        userId: voiceUserObject.web_userid\n      }, {\n        $set: {\n          'user.listenOnly': voiceUserObject.listen_only\n        }\n      }, function(err, numChanged) {\n        if (err != null) {\n          Meteor.log.error(\"_unsucc update of voiceUser \" + voiceUserObject.web_userid + \" [listenOnly] err=\" + (JSON.stringify(err)));\n        }\n        return callback();\n      });\n    }\n  } else {\n    Meteor.log.error(\"ERROR! did not find such voiceUser!\");\n    return callback();\n  }\n};\n\nthis.userJoined = function(meetingId, user, callback) {\n  var ref, ref1, u, userId, welcomeMessage;\n  userId = user.userid;\n  u = Meteor.Users.findOne({\n    userId: user.userid,\n    meetingId: meetingId\n  });\n  if ((u != null) && (u.authToken != null)) {\n    Meteor.Users.update({\n      userId: user.userid,\n      meetingId: meetingId\n    }, {\n      $set: {\n        user: {\n          userid: user.userid,\n          presenter: user.presenter,\n          name: user.name,\n          _sort_name: user.name.toLowerCase(),\n          phone_user: user.phone_user,\n          set_emoji_time: user.set_emoji_time,\n          emoji_status: user.emoji_status,\n          has_stream: user.has_stream,\n          role: user.role,\n          listenOnly: user.listenOnly,\n          extern_userid: user.extern_userid,\n          locked: user.locked,\n          time_of_joining: user.timeOfJoining,\n          connection_status: \"online\",\n          voiceUser: {\n            web_userid: user.voiceUser.web_userid,\n            callernum: user.voiceUser.callernum,\n            userid: user.voiceUser.userid,\n            talking: user.voiceUser.talking,\n            joined: user.voiceUser.joined,\n            callername: user.voiceUser.callername,\n            locked: user.voiceUser.locked,\n            muted: user.voiceUser.muted\n          },\n          webcam_stream: user.webcam_stream\n        }\n      }\n    }, function(err) {\n      var funct;\n      if (err != null) {\n        Meteor.log.error(\"_error \" + err + \" when trying to insert user \" + userId);\n        return callback();\n      } else {\n        funct = function(cbk) {\n          Meteor.log.info(\"_(case1) UPDATING USER \" + user.userid + \", authToken= \" + u.authToken + \", locked=\" + user.locked + \", username=\" + user.name);\n          return cbk();\n        };\n        return funct(callback);\n      }\n    });\n    welcomeMessage = Meteor.config.defaultWelcomeMessage.replace(/%%CONFNAME%%/, (ref = Meteor.Meetings.findOne({\n      meetingId: meetingId\n    })) != null ? ref.meetingName : void 0);\n    welcomeMessage = welcomeMessage + Meteor.config.defaultWelcomeMessageFooter;\n    return Meteor.Chat.upsert({\n      meetingId: meetingId,\n      userId: userId,\n      'message.chat_type': 'SYSTEM_MESSAGE',\n      'message.to_userid': userId\n    }, {\n      meetingId: meetingId,\n      userId: userId,\n      message: {\n        chat_type: 'SYSTEM_MESSAGE',\n        message: welcomeMessage,\n        from_color: '0x3399FF',\n        to_userid: userId,\n        from_userid: 'SYSTEM_MESSAGE',\n        from_username: '',\n        from_time: (ref1 = user.timeOfJoining) != null ? ref1.toString() : void 0\n      }\n    }, function(err) {\n      if (err != null) {\n        return Meteor.log.error(\"_error \" + err + \" when trying to insert welcome message for \" + userId);\n      } else {\n        return Meteor.log.info(\"_added/updated a system message in chat for user \" + userId);\n      }\n    });\n  } else {\n    return Meteor.Users.upsert({\n      meetingId: meetingId,\n      userId: userId\n    }, {\n      meetingId: meetingId,\n      userId: userId,\n      user: {\n        userid: user.userid,\n        presenter: user.presenter,\n        name: user.name,\n        _sort_name: user.name.toLowerCase(),\n        phone_user: user.phone_user,\n        emoji_status: user.emoji_status,\n        set_emoji_time: user.set_emoji_time,\n        has_stream: user.has_stream,\n        role: user.role,\n        listenOnly: user.listenOnly,\n        extern_userid: user.extern_userid,\n        locked: user.locked,\n        time_of_joining: user.timeOfJoining,\n        connection_status: \"\",\n        voiceUser: {\n          web_userid: user.voiceUser.web_userid,\n          callernum: user.voiceUser.callernum,\n          userid: user.voiceUser.userid,\n          talking: user.voiceUser.talking,\n          joined: user.voiceUser.joined,\n          callername: user.voiceUser.callername,\n          locked: user.voiceUser.locked,\n          muted: user.voiceUser.muted\n        },\n        webcam_stream: user.webcam_stream\n      }\n    }, function(err, numChanged) {\n      var funct;\n      if (numChanged.insertedId != null) {\n        funct = function(cbk) {\n          Meteor.log.info(\"_joining user (case2) userid=[\" + userId + \"]:\" + user.name + \". Users.size is now \" + (Meteor.Users.find({\n            meetingId: meetingId\n          }).count()));\n          return cbk();\n        };\n        return funct(callback);\n      } else {\n        return callback();\n      }\n    });\n  }\n};\n\nthis.createDummyUser = function(meetingId, userId, authToken) {\n  if (Meteor.Users.findOne({\n    userId: userId,\n    meetingId: meetingId,\n    authToken: authToken\n  }) != null) {\n    return Meteor.log.info(\"html5 user userId:[\" + userId + \"] from [\" + meetingId + \"] tried to revalidate token\");\n  } else {\n    return Meteor.Users.insert({\n      meetingId: meetingId,\n      userId: userId,\n      authToken: authToken,\n      clientType: \"HTML5\",\n      validated: false\n    }, function(err, id) {\n      return Meteor.log.info(\"_added a dummy html5 user with: userId=[\" + userId + \"] Users.size is now \" + (Meteor.Users.find({\n        meetingId: meetingId\n      }).count()));\n    });\n  }\n};\n\nthis.handleLockingMic = function(meetingId, newSettings) {\n  var i, len, ref, ref1, results, u;\n  ref1 = (ref = Meteor.Users.find({\n    meetingId: meetingId,\n    'user.role': 'VIEWER',\n    'user.listenOnly': false,\n    'user.locked': true,\n    'user.voiceUser.joined': true,\n    'user.voiceUser.muted': false\n  })) != null ? ref.fetch() : void 0;\n  results = [];\n  for (i = 0, len = ref1.length; i < len; i++) {\n    u = ref1[i];\n    results.push(Meteor.call('muteUser', meetingId, u.userId, u.userId, u.authToken, true));\n  }\n  return results;\n};\n\nthis.setUserLockedStatus = function(meetingId, userId, isLocked) {\n  var u;\n  u = Meteor.Users.findOne({\n    meetingId: meetingId,\n    userId: userId\n  });\n  if (u != null) {\n    Meteor.Users.update({\n      userId: userId,\n      meetingId: meetingId\n    }, {\n      $set: {\n        'user.locked': isLocked\n      }\n    }, function(err, numChanged) {\n      if (err != null) {\n        return Meteor.log.error(\"_error \" + err + \" while updating user \" + userId + \" with lock settings\");\n      } else {\n        return Meteor.log.info(\"_setting user locked status for userid:[\" + userId + \"] from [\" + meetingId + \"] locked=\" + isLocked);\n      }\n    });\n    if (u.user.role === 'VIEWER' && !u.user.listenOnly && u.user.voiceUser.joined && !u.user.voiceUser.muted && isLocked) {\n      return Meteor.call('muteUser', meetingId, u.userId, u.userId, u.authToken, true);\n    }\n  } else {\n    return Meteor.log.error(\"(unsuccessful-no such user) setting user locked status for userid:[\" + userId + \"] from [\" + meetingId + \"] locked=\" + isLocked);\n  }\n};\n\nthis.clearUsersCollection = function(meetingId) {\n  if (meetingId != null) {\n    return Meteor.Users.remove({\n      meetingId: meetingId\n    }, function(err) {\n      if (err != null) {\n        return Meteor.log.error(\"_error \" + (JSON.stringify(err)) + \" while removing users from meeting \" + meetingId);\n      } else {\n        return Meteor.log.info(\"_cleared Users Collection (meetingId: \" + meetingId + \")!\");\n      }\n    });\n  } else {\n    return Meteor.Users.remove({}, function(err) {\n      if (err != null) {\n        return Meteor.log.error(\"_error \" + (JSON.stringify(err)) + \" while removing users from all meetings!\");\n      } else {\n        return Meteor.log.info(\"_cleared Users Collection (all meetings)!\");\n      }\n    });\n  }\n};\n","sourceMap":{"version":3,"file":"/server/collection_methods/users.coffee.js","sourceRoot":"","sources":["/server/collection_methods/users.coffee"],"names":[],"mappings":"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","sourcesContent":["# --------------------------------------------------------------------------------------------\r\n# Public methods on server\r\n# All these method must first authenticate the user before it calls the private function counterpart below\r\n# which sends the request to bbbApps. If the method is modifying the media the current user is sharing,\r\n# you should perform the request before sending the request to bbbApps. This allows the user request to be performed\r\n# immediately, since they do not require permission for things such as muting themsevles.\r\n# --------------------------------------------------------------------------------------------\r\nMeteor.methods\r\n  # meetingId: the meetingId of the meeting the user is in\r\n  # toSetUserId: the userId of the user joining\r\n  # requesterUserId: the userId of the requester\r\n  # requesterToken: the authToken of the requester\r\n  listenOnlyRequestToggle: (meetingId, userId, authToken, isJoining) ->\r\n    voiceConf = Meteor.Meetings.findOne({meetingId:meetingId})?.voiceConf\r\n    username = Meteor.Users.findOne({meetingId:meetingId, userId:userId})?.user.name\r\n    if isJoining\r\n      if isAllowedTo('joinListenOnly', meetingId, userId, authToken)\r\n        message =\r\n          payload:\r\n            userid: userId\r\n            meeting_id: meetingId\r\n            voice_conf: voiceConf\r\n            name: username\r\n          header:\r\n            timestamp: new Date().getTime()\r\n            name: \"user_connected_to_global_audio\"\r\n            version: \"0.0.1\"\r\n\r\n        Meteor.log.info \"publishing a user listenOnly toggleRequest #{isJoining} request for #{userId}\"\r\n\r\n        publish Meteor.config.redis.channels.toBBBApps.meeting, message\r\n\r\n    else\r\n      if isAllowedTo('leaveListenOnly', meetingId, userId, authToken)\r\n        message =\r\n          payload:\r\n            userid: userId\r\n            meeting_id: meetingId\r\n            voice_conf: voiceConf\r\n            name: username\r\n          header:\r\n            timestamp: new Date().getTime()\r\n            name: \"user_disconnected_from_global_audio\"\r\n            version: \"0.0.1\"\r\n\r\n        Meteor.log.info \"publishing a user listenOnly toggleRequest #{isJoining} request for #{userId}\"\r\n\r\n        publish Meteor.config.redis.channels.toBBBApps.meeting, message\r\n\r\n    return\r\n\r\n  # meetingId: the meetingId of the meeting the user[s] is in\r\n  # toMuteUserId: the userId of the user to be muted\r\n  # requesterUserId: the userId of the requester\r\n  # requesterToken: the authToken of the requester\r\n  muteUser: (meetingId, toMuteUserId, requesterUserId, requesterToken) ->\r\n    action = ->\r\n      if toMuteUserId is requesterUserId\r\n        return 'muteSelf'\r\n      else\r\n        return 'muteOther'\r\n\r\n    if isAllowedTo(action(), meetingId, requesterUserId, requesterToken)\r\n      message =\r\n        payload:\r\n          user_id: toMuteUserId\r\n          meeting_id: meetingId\r\n          mute: true\r\n          requester_id: requesterUserId\r\n        header:\r\n          timestamp: new Date().getTime()\r\n          name: \"mute_user_request_message\"\r\n          version: \"0.0.1\"\r\n\r\n      Meteor.log.info \"publishing a user mute request for #{toMuteUserId}\"\r\n\r\n      publish Meteor.config.redis.channels.toBBBApps.users, message\r\n      updateVoiceUser meetingId, {'web_userid': toMuteUserId, talking:false, muted:true}\r\n    return\r\n\r\n  # meetingId: the meetingId of the meeting the user[s] is in\r\n  # toMuteUserId: the userId of the user to be unmuted\r\n  # requesterUserId: the userId of the requester\r\n  # requesterToken: the authToken of the requester\r\n  unmuteUser: (meetingId, toMuteUserId, requesterUserId, requesterToken) ->\r\n    action = ->\r\n      if toMuteUserId is requesterUserId\r\n        return 'unmuteSelf'\r\n      else\r\n        return 'unmuteOther'\r\n\r\n    if isAllowedTo(action(), meetingId, requesterUserId, requesterToken)\r\n      message =\r\n        payload:\r\n          user_id: toMuteUserId\r\n          meeting_id: meetingId\r\n          mute: false\r\n          requester_id: requesterUserId\r\n        header:\r\n          timestamp: new Date().getTime()\r\n          name: \"mute_user_request_message\"\r\n          version: \"0.0.1\"\r\n\r\n      Meteor.log.info \"publishing a user unmute request for #{toMuteUserId}\"\r\n\r\n      publish Meteor.config.redis.channels.toBBBApps.users, message\r\n      updateVoiceUser meetingId, {'web_userid': toMuteUserId, talking:false, muted:false}\r\n    return\r\n\r\n  userSetEmoji: (meetingId, toRaiseUserId, raisedByUserId, raisedByToken, status) ->\r\n    if isAllowedTo('setEmojiStatus', meetingId, raisedByUserId, raisedByToken)\r\n      message =\r\n        payload:\r\n          emoji_status: status\r\n          userid: toRaiseUserId\r\n          meeting_id: meetingId\r\n        header:\r\n          timestamp: new Date().getTime()\r\n          name: \"user_emoji_status_message\"\r\n          version: \"0.0.1\"\r\n\r\n      # publish to pubsub\r\n      publish Meteor.config.redis.channels.toBBBApps.users, message\r\n    return\r\n\r\n  # meetingId: the meeting where the user is\r\n  # userId: the userid of the user logging out\r\n  # authToken: the authToken of the user\r\n  userLogout: (meetingId, userId, authToken) ->\r\n    if isAllowedTo('logoutSelf', meetingId, userId, authToken)\r\n      Meteor.log.info \"a user is logging out from #{meetingId}:\" + userId\r\n      requestUserLeaving meetingId, userId\r\n\r\n# --------------------------------------------------------------------------------------------\r\n# Private methods on server\r\n# --------------------------------------------------------------------------------------------\r\n\r\n# Only callable from server\r\n# Received information from BBB-Apps that a user left\r\n# Need to update the collection\r\n# params: meetingid, userid as defined in BBB-Apps\r\n# callback\r\n@markUserOffline = (meetingId, userId, callback) ->\r\n  # mark the user as offline. remove from the collection on meeting_end #TODO\r\n  user = Meteor.Users.findOne({meetingId: meetingId, userId: userId})\r\n  if user?.clientType is \"HTML5\"\r\n    Meteor.log.info \"marking html5 user [#{userId}] as offline in meeting[#{meetingId}]\"\r\n    Meteor.Users.update({meetingId: meetingId, userId: userId}, {$set:{\r\n    'user.connection_status':'offline'\r\n    'voiceUser.talking': false\r\n    'voiceUser.joined': false\r\n    'voiceUser.muted': false\r\n    'user.time_of_joining': 0\r\n    'user.listenOnly': false\r\n    }}, (err, numChanged) ->\r\n      if err?\r\n        Meteor.log.error \"_unsucc update (mark as offline) of user #{user?.user.name} #{userId}\r\n          err=#{JSON.stringify err}\"\r\n        callback()\r\n      else\r\n        funct = (cbk) ->\r\n          Meteor.log.info \"_marking as offline html5 user #{user?.user.name}\r\n           #{userId}  numChanged=#{numChanged}\"\r\n          cbk()\r\n\r\n        funct(callback)\r\n    )\r\n  else\r\n    Meteor.Users.remove({meetingId: meetingId, userId: userId}, (err, numDeletions) ->\r\n      if err?\r\n        Meteor.log.error \"_unsucc deletion of user #{user?.user.name} #{userId}\r\n          err=#{JSON.stringify err}\"\r\n        callback()\r\n      else\r\n        funct = (cbk) ->\r\n          Meteor.log.info \"_deleting info for user #{user?.user.name} #{userId}\r\n            numDeletions=#{numDeletions}\"\r\n          cbk()\r\n\r\n        funct(callback)\r\n    )\r\n\r\n\r\n# Corresponds to a valid action on the HTML clientside\r\n# After authorization, publish a user_leaving_request in redis\r\n# params: meetingid, userid as defined in BBB-App\r\n@requestUserLeaving = (meetingId, userId) ->\r\n  userObject = Meteor.Users.findOne({'meetingId': meetingId, 'userId': userId})\r\n  voiceConf = Meteor.Meetings.findOne({meetingId:meetingId})?.voiceConf\r\n  if userObject? and voiceConf? and userId? and meetingId?\r\n\r\n    # end listenOnly audio for the departing user\r\n    if userObject.user.listenOnly\r\n      listenOnlyMessage =\r\n        payload:\r\n          userid: userId\r\n          meeting_id: meetingId\r\n          voice_conf: voiceConf\r\n          name: userObject.user.name\r\n        header:\r\n          timestamp: new Date().getTime()\r\n          name: \"user_disconnected_from_global_audio\"\r\n\r\n      publish Meteor.config.redis.channels.toBBBApps.meeting, listenOnlyMessage\r\n\r\n    # remove user from meeting\r\n    message =\r\n      payload:\r\n        meeting_id: meetingId\r\n        userid: userId\r\n      header:\r\n        timestamp: new Date().getTime()\r\n        name: \"user_leaving_request\"\r\n\r\n    Meteor.log.info \"sending a user_leaving_request for #{meetingId}:#{userId}\"\r\n    publish Meteor.config.redis.channels.toBBBApps.users, message\r\n  else\r\n    Meteor.log.info \"did not have enough information to send a user_leaving_request\"\r\n\r\n\r\n#update a voiceUser - a helper method\r\n@updateVoiceUser = (meetingId, voiceUserObject, callback) ->\r\n  u = Meteor.Users.findOne userId: voiceUserObject.web_userid\r\n  if u?\r\n    if voiceUserObject.talking?\r\n      Meteor.Users.update({meetingId: meetingId ,userId: voiceUserObject.web_userid},\r\n       {$set: {'user.voiceUser.talking':voiceUserObject.talking}},\r\n       (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_unsucc update of voiceUser #{voiceUserObject.web_userid}\r\n           [talking] err=#{JSON.stringify err}\"\r\n        callback()\r\n      ) # talking\r\n    if voiceUserObject.joined?\r\n      Meteor.Users.update({meetingId: meetingId ,userId: voiceUserObject.web_userid},\r\n       {$set: {'user.voiceUser.joined':voiceUserObject.joined}},\r\n       (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_unsucc update of voiceUser #{voiceUserObject.web_userid}\r\n           [joined] err=#{JSON.stringify err}\"\r\n        callback()\r\n      ) # joined\r\n    if voiceUserObject.locked?\r\n      Meteor.Users.update({meetingId: meetingId ,userId: voiceUserObject.web_userid},\r\n       {$set: {'user.voiceUser.locked':voiceUserObject.locked}},\r\n       (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_unsucc update of voiceUser #{voiceUserObject.web_userid}\r\n           [locked] err=#{JSON.stringify err}\"\r\n        callback()\r\n      ) # locked\r\n    if voiceUserObject.muted?\r\n      Meteor.Users.update({meetingId: meetingId ,userId: voiceUserObject.web_userid},\r\n       {$set: {'user.voiceUser.muted':voiceUserObject.muted}},\r\n       (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_unsucc update of voiceUser #{voiceUserObject.web_userid}\r\n           [muted] err=#{JSON.stringify err}\"\r\n        callback()\r\n      ) # muted\r\n    if voiceUserObject.listen_only?\r\n      Meteor.Users.update({meetingId: meetingId ,userId: voiceUserObject.web_userid},\r\n       {$set: {'user.listenOnly':voiceUserObject.listen_only}},\r\n       (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_unsucc update of voiceUser #{voiceUserObject.web_userid}\r\n           [listenOnly] err=#{JSON.stringify err}\"\r\n        callback()\r\n      ) # listenOnly\r\n  else\r\n    Meteor.log.error \"ERROR! did not find such voiceUser!\"\r\n    callback()\r\n\r\n@userJoined = (meetingId, user, callback) ->\r\n  userId = user.userid\r\n\r\n  u = Meteor.Users.findOne({userId:user.userid, meetingId: meetingId})\r\n  # the collection already contains an entry for this user\r\n  # because the user is reconnecting OR\r\n  # in the case of an html5 client user we added a dummy user on\r\n  # register_user_message (to save authToken)\r\n  if u? and u.authToken?\r\n\r\n    Meteor.Users.update({userId:user.userid, meetingId: meetingId}, {$set:{\r\n      user:\r\n        userid: user.userid\r\n        presenter: user.presenter\r\n        name: user.name\r\n        _sort_name: user.name.toLowerCase()\r\n        phone_user: user.phone_user\r\n        set_emoji_time: user.set_emoji_time\r\n        emoji_status: user.emoji_status\r\n        has_stream: user.has_stream\r\n        role: user.role\r\n        listenOnly: user.listenOnly\r\n        extern_userid: user.extern_userid\r\n        locked: user.locked\r\n        time_of_joining: user.timeOfJoining\r\n        connection_status: \"online\" # TODO consider other default value\r\n        voiceUser:\r\n          web_userid: user.voiceUser.web_userid\r\n          callernum: user.voiceUser.callernum\r\n          userid: user.voiceUser.userid\r\n          talking: user.voiceUser.talking\r\n          joined: user.voiceUser.joined\r\n          callername: user.voiceUser.callername\r\n          locked: user.voiceUser.locked\r\n          muted: user.voiceUser.muted\r\n        webcam_stream: user.webcam_stream\r\n      }}, (err) ->\r\n        if err?\r\n          Meteor.log.error \"_error #{err} when trying to insert user #{userId}\"\r\n          callback()\r\n        else\r\n          funct = (cbk) ->\r\n            Meteor.log.info \"_(case1) UPDATING USER #{user.userid}, authToken=\r\n            #{u.authToken}, locked=#{user.locked}, username=#{user.name}\"\r\n            cbk()\r\n\r\n          funct(callback)\r\n    )\r\n\r\n    welcomeMessage = Meteor.config.defaultWelcomeMessage\r\n    .replace /%%CONFNAME%%/, Meteor.Meetings.findOne({meetingId: meetingId})?.meetingName\r\n    welcomeMessage = welcomeMessage + Meteor.config.defaultWelcomeMessageFooter\r\n    # add the welcome message if it's not there already OR update time_of_joining\r\n    Meteor.Chat.upsert({\r\n      meetingId: meetingId\r\n      userId: userId\r\n      'message.chat_type': 'SYSTEM_MESSAGE'\r\n      'message.to_userid': userId\r\n    }, {\r\n      meetingId: meetingId\r\n      userId: userId\r\n      message:\r\n        chat_type: 'SYSTEM_MESSAGE'\r\n        message: welcomeMessage\r\n        from_color: '0x3399FF'\r\n        to_userid: userId\r\n        from_userid: 'SYSTEM_MESSAGE'\r\n        from_username: ''\r\n        from_time: user.timeOfJoining?.toString()\r\n    }, (err) ->\r\n      if err?\r\n        Meteor.log.error \"_error #{err} when trying to insert welcome message for #{userId}\"\r\n      else\r\n        Meteor.log.info \"_added/updated a system message in chat for user #{userId}\"\r\n      # note that we already called callback() when updating the user. Adding\r\n      # the welcome message in the chat is not as vital and we can afford to\r\n      # complete it when possible, without blocking the serial event messages processing\r\n    )\r\n\r\n  else\r\n    # Meteor.log.info \"NOTE: got user_joined_message #{user.name} #{user.userid}\"\r\n    Meteor.Users.upsert({meetingId: meetingId, userId: userId}, {\r\n      meetingId: meetingId\r\n      userId: userId\r\n      user:\r\n        userid: user.userid\r\n        presenter: user.presenter\r\n        name: user.name\r\n        _sort_name: user.name.toLowerCase()\r\n        phone_user: user.phone_user\r\n        emoji_status: user.emoji_status\r\n        set_emoji_time: user.set_emoji_time\r\n        has_stream: user.has_stream\r\n        role: user.role\r\n        listenOnly: user.listenOnly\r\n        extern_userid: user.extern_userid\r\n        locked: user.locked\r\n        time_of_joining: user.timeOfJoining\r\n        connection_status: \"\" # TODO consider other default value\r\n        voiceUser:\r\n          web_userid: user.voiceUser.web_userid\r\n          callernum: user.voiceUser.callernum\r\n          userid: user.voiceUser.userid\r\n          talking: user.voiceUser.talking\r\n          joined: user.voiceUser.joined\r\n          callername: user.voiceUser.callername\r\n          locked: user.voiceUser.locked\r\n          muted: user.voiceUser.muted\r\n        webcam_stream: user.webcam_stream\r\n      }, (err, numChanged) ->\r\n        if numChanged.insertedId?\r\n          funct = (cbk) ->\r\n            Meteor.log.info \"_joining user (case2) userid=[#{userId}]:#{user.name}.\r\n            Users.size is now #{Meteor.Users.find({meetingId: meetingId}).count()}\"\r\n            cbk()\r\n\r\n          funct(callback)\r\n        else\r\n          callback()\r\n    )\r\n\r\n\r\n\r\n@createDummyUser = (meetingId, userId, authToken) ->\r\n  if Meteor.Users.findOne({userId:userId, meetingId: meetingId, authToken:authToken})?\r\n    Meteor.log.info \"html5 user userId:[#{userId}] from [#{meetingId}] tried to revalidate token\"\r\n  else\r\n    Meteor.Users.insert({\r\n      meetingId: meetingId\r\n      userId: userId\r\n      authToken: authToken\r\n      clientType: \"HTML5\"\r\n      validated: false #will be validated on validate_auth_token_reply\r\n      }, (err, id) ->\r\n        Meteor.log.info \"_added a dummy html5 user with: userId=[#{userId}]\r\n      Users.size is now #{Meteor.Users.find({meetingId: meetingId}).count()}\"\r\n    )\r\n\r\n# when new lock settings including disableMic are set,\r\n# all viewers that are in the audio bridge with a mic should be muted and locked\r\n@handleLockingMic = (meetingId, newSettings) ->\r\n  # send mute requests for the viewer users joined with mic\r\n  for u in Meteor.Users.find({\r\n        meetingId:meetingId\r\n        'user.role':'VIEWER'\r\n        'user.listenOnly':false\r\n        'user.locked':true\r\n        'user.voiceUser.joined':true\r\n        'user.voiceUser.muted':false})?.fetch()\r\n    # Meteor.log.info u.user.name #\r\n    Meteor.call('muteUser', meetingId, u.userId, u.userId, u.authToken, true) #true for muted\r\n\r\n# change the locked status of a user (lock settings)\r\n@setUserLockedStatus = (meetingId, userId, isLocked) ->\r\n  u = Meteor.Users.findOne({meetingId:meetingId, userId:userId})\r\n  if u?\r\n    Meteor.Users.update({userId:userId, meetingId: meetingId},\r\n      {$set:{'user.locked': isLocked}},\r\n      (err, numChanged) ->\r\n        if err?\r\n          Meteor.log.error \"_error #{err} while updating user #{userId} with lock settings\"\r\n        else\r\n          Meteor.log.info \"_setting user locked status for userid:[#{userId}] from [#{meetingId}] locked=#{isLocked}\"\r\n    )\r\n    # if the user is sharing audio, he should be muted upon locking involving disableMic\r\n    if u.user.role is 'VIEWER' and !u.user.listenOnly and u.user.voiceUser.joined and !u.user.voiceUser.muted and isLocked\r\n      Meteor.call('muteUser', meetingId, u.userId, u.userId, u.authToken, true) #true for muted\r\n\r\n  else\r\n    Meteor.log.error \"(unsuccessful-no such user) setting user locked status for userid:[#{userId}] from [#{meetingId}] locked=#{isLocked}\"\r\n\r\n\r\n# called on server start and on meeting end\r\n@clearUsersCollection = (meetingId) ->\r\n  if meetingId?\r\n    Meteor.Users.remove({meetingId: meetingId}, (err) ->\r\n      if err?\r\n        Meteor.log.error \"_error #{JSON.stringify err} while removing users from meeting #{meetingId}\"\r\n      else\r\n        Meteor.log.info \"_cleared Users Collection (meetingId: #{meetingId})!\"\r\n    )\r\n  else\r\n    Meteor.Users.remove({}, (err) ->\r\n      if err?\r\n        Meteor.log.error \"_error #{JSON.stringify err} while removing users from all meetings!\"\r\n      else\r\n        Meteor.log.info \"_cleared Users Collection (all meetings)!\"\r\n    )\r\n"]}}