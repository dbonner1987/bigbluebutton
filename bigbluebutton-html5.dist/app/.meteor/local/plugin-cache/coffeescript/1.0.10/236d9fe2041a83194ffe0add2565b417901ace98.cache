{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nMeteor.methods({\n  validateAuthToken: function(meetingId, userId, authToken) {\n    var message;\n    Meteor.log.info(\"sending a validate_auth_token with\", {\n      userid: userId,\n      authToken: authToken,\n      meetingid: meetingId\n    });\n    message = {\n      \"payload\": {\n        \"auth_token\": authToken,\n        \"userid\": userId,\n        \"meeting_id\": meetingId\n      },\n      \"header\": {\n        \"timestamp\": new Date().getTime(),\n        \"reply_to\": meetingId + \"/\" + userId,\n        \"name\": \"validate_auth_token\"\n      }\n    };\n    if ((authToken != null) && (userId != null) && (meetingId != null)) {\n      createDummyUser(meetingId, userId, authToken);\n      return publish(Meteor.config.redis.channels.toBBBApps.meeting, message);\n    } else {\n      return Meteor.log.info(\"did not have enough information to send a validate_auth_token message\");\n    }\n  }\n});\n\nMeteor.RedisPubSub = (function() {\n  function RedisPubSub(callback) {\n    this._addToQueue = bind(this._addToQueue, this);\n    this._onSubscribe = bind(this._onSubscribe, this);\n    Meteor.log.info(\"constructor RedisPubSub\");\n    this.pubClient = redis.createClient();\n    this.subClient = redis.createClient();\n    Meteor.log.info(\"Subscribing message on channel: \" + Meteor.config.redis.channels.fromBBBApps);\n    this.subClient.on(\"psubscribe\", Meteor.bindEnvironment(this._onSubscribe));\n    this.subClient.on(\"pmessage\", Meteor.bindEnvironment(this._addToQueue));\n    this.subClient.psubscribe(Meteor.config.redis.channels.fromBBBApps);\n    callback(this);\n  }\n\n  RedisPubSub.prototype._onSubscribe = function(channel, count) {\n    var message;\n    Meteor.log.info(\"Subscribed to \" + channel);\n    message = {\n      \"header\": {\n        \"name\": \"get_all_meetings_request\"\n      },\n      \"payload\": {}\n    };\n    return publish(Meteor.config.redis.channels.toBBBApps.meeting, message);\n  };\n\n  RedisPubSub.prototype._addToQueue = function(pattern, channel, jsonMsg) {\n    var eventName, message, messagesWeIgnore;\n    message = JSON.parse(jsonMsg);\n    eventName = message.header.name;\n    messagesWeIgnore = [\"BbbPubSubPongMessage\", \"bbb_apps_is_alive_message\", \"broadcast_layout_message\"];\n    if (indexOf.call(messagesWeIgnore, eventName) < 0) {\n      console.log(\"Q \" + eventName + \" \" + (Meteor.myQueue.total()));\n      return Meteor.myQueue.add({\n        pattern: pattern,\n        channel: channel,\n        jsonMsg: jsonMsg\n      });\n    }\n  };\n\n  return RedisPubSub;\n\n})();\n\nthis.publish = function(channel, message) {\n  Meteor.log.info(\"redis outgoing message  \" + message.header.name, {\n    channel: channel,\n    message: message\n  });\n  if (Meteor.redisPubSub != null) {\n    return Meteor.redisPubSub.pubClient.publish(channel, JSON.stringify(message), function(err, res) {\n      if (err) {\n        return Meteor.log.info(\"error\", {\n          error: err\n        });\n      }\n    });\n  } else {\n    return Meteor.log.info(\"ERROR!! Meteor.redisPubSub was undefined\");\n  }\n};\n","sourceMap":{"version":3,"file":"/server/redispubsub.coffee.js","sourceRoot":"","sources":["/server/redispubsub.coffee"],"names":[],"mappings":"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","sourcesContent":["Meteor.methods\n  # Construct and send a message to bbb-web to validate the user\n  validateAuthToken: (meetingId, userId, authToken) ->\n    Meteor.log.info \"sending a validate_auth_token with\",\n      userid: userId\n      authToken: authToken\n      meetingid: meetingId\n\n    message =\n      \"payload\":\n        \"auth_token\": authToken\n        \"userid\": userId\n        \"meeting_id\": meetingId\n      \"header\":\n        \"timestamp\": new Date().getTime()\n        \"reply_to\": meetingId + \"/\" + userId\n        \"name\": \"validate_auth_token\"\n\n    if authToken? and userId? and meetingId?\n      createDummyUser meetingId, userId, authToken\n      publish Meteor.config.redis.channels.toBBBApps.meeting, message\n    else\n      Meteor.log.info \"did not have enough information to send a validate_auth_token message\"\n\n\nclass Meteor.RedisPubSub\n  constructor: (callback) ->\n    Meteor.log.info \"constructor RedisPubSub\"\n\n    @pubClient = redis.createClient()\n    @subClient = redis.createClient()\n\n    Meteor.log.info(\"Subscribing message on channel: #{Meteor.config.redis.channels.fromBBBApps}\")\n\n    @subClient.on \"psubscribe\", Meteor.bindEnvironment(@_onSubscribe)\n    @subClient.on \"pmessage\", Meteor.bindEnvironment(@_addToQueue)\n\n    @subClient.psubscribe(Meteor.config.redis.channels.fromBBBApps)\n\n    callback @\n\n  _onSubscribe: (channel, count) =>\n    Meteor.log.info \"Subscribed to #{channel}\"\n\n    #grab data about all active meetings on the server\n    message =\n      \"header\":\n        \"name\": \"get_all_meetings_request\"\n      \"payload\": {} # I need this, otherwise bbb-apps won't recognize the message\n    publish Meteor.config.redis.channels.toBBBApps.meeting, message\n\n\n  _addToQueue: (pattern, channel, jsonMsg) =>\n    message = JSON.parse(jsonMsg)\n    eventName = message.header.name\n\n    messagesWeIgnore = [\n      \"BbbPubSubPongMessage\"\n      \"bbb_apps_is_alive_message\"\n      \"broadcast_layout_message\"\n    ]\n\n    unless eventName in messagesWeIgnore\n      console.log \"Q #{eventName} #{Meteor.myQueue.total()}\"\n      Meteor.myQueue.add({\n        pattern: pattern\n        channel: channel\n        jsonMsg: jsonMsg\n      })\n\n# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n\n# message should be an object\n@publish = (channel, message) ->\n  Meteor.log.info \"redis outgoing message  #{message.header.name}\",\n    channel: channel\n    message: message\n\n  if Meteor.redisPubSub?\n    Meteor.redisPubSub.pubClient.publish channel, JSON.stringify(message), (err, res) ->\n      if err\n        Meteor.log.info \"error\",\n          error: err\n\n  else\n    Meteor.log.info \"ERROR!! Meteor.redisPubSub was undefined\"\n"]}}