{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.displayThisSlide = function(meetingId, newSlideId, slideObject) {\n  var presentationId;\n  presentationId = newSlideId.split(\"/\")[0];\n  Meteor.Slides.update({\n    presentationId: presentationId,\n    \"slide.current\": true\n  }, {\n    $set: {\n      \"slide.current\": false\n    }\n  });\n  removeSlideFromCollection(meetingId, newSlideId);\n  return addSlideToCollection(meetingId, presentationId, slideObject);\n};\n\nthis.addSlideToCollection = function(meetingId, presentationId, slideObject) {\n  var entry, id;\n  if (Meteor.Slides.findOne({\n    meetingId: meetingId,\n    \"slide.id\": slideObject.id\n  }) == null) {\n    entry = {\n      meetingId: meetingId,\n      presentationId: presentationId,\n      slide: {\n        height_ratio: slideObject.height_ratio,\n        y_offset: slideObject.y_offset,\n        num: slideObject.num,\n        x_offset: slideObject.x_offset,\n        current: slideObject.current,\n        img_uri: slideObject.svg_uri !== void 0 ? slideObject.svg_uri : slideObject.png_uri,\n        txt_uri: slideObject.txt_uri,\n        id: slideObject.id,\n        width_ratio: slideObject.width_ratio,\n        swf_uri: slideObject.swf_uri,\n        thumb_uri: slideObject.thumb_uri\n      }\n    };\n    return id = Meteor.Slides.insert(entry);\n  }\n};\n\nthis.removeSlideFromCollection = function(meetingId, slideId) {\n  var id;\n  if ((meetingId != null) && (slideId != null) && (Meteor.Slides.findOne({\n    meetingId: meetingId,\n    \"slide.id\": slideId\n  }) != null)) {\n    id = Meteor.Slides.findOne({\n      meetingId: meetingId,\n      \"slide.id\": slideId\n    });\n    if (id != null) {\n      Meteor.Slides.remove(id._id);\n      return Meteor.log.info(\"----removed slide[\" + slideId + \"] from \" + meetingId);\n    }\n  }\n};\n\nthis.clearSlidesCollection = function(meetingId) {\n  if (meetingId != null) {\n    return Meteor.Slides.remove({\n      meetingId: meetingId\n    }, Meteor.log.info(\"cleared Slides Collection (meetingId: \" + meetingId + \"!\"));\n  } else {\n    return Meteor.Slides.remove({}, Meteor.log.info(\"cleared Slides Collection (all meetings)!\"));\n  }\n};\n","sourceMap":{"version":3,"file":"/server/collection_methods/slides.coffee.js","sourceRoot":"","sources":["/server/collection_methods/slides.coffee"],"names":[],"mappings":";AAGA,IAAC,CAAA,gBAAD,GAAoB,SAAC,SAAD,EAAY,UAAZ,EAAwB,WAAxB,GAAA;AACnB,MAAA,cAAA;AAAA,EAAA,cAAA,GAAiB,UAAU,CAAC,KAAX,CAAiB,GAAjB,CAAsB,CAAA,CAAA,CAAvC,CAAA;AAAA,EAEA,MAAM,CAAC,MAAM,CAAC,MAAd,CAAqB;AAAA,IAAC,cAAA,EAAgB,cAAjB;AAAA,IAAiC,eAAA,EAAiB,IAAlD;GAArB,EAA8E;AAAA,IAAC,IAAA,EAAM;AAAA,MAAC,eAAA,EAAiB,KAAlB;KAAP;GAA9E,CAFA,CAAA;AAAA,EAKA,yBAAA,CAA0B,SAA1B,EAAqC,UAArC,CALA,CAAA;SAOA,oBAAA,CAAqB,SAArB,EAAgC,cAAhC,EAAgD,WAAhD,EARmB;AAAA,CAApB,CAAA;;AAAA,IAWC,CAAA,oBAAD,GAAwB,SAAC,SAAD,EAAY,cAAZ,EAA4B,WAA5B,GAAA;AACvB,MAAA,SAAA;AAAA,EAAA,IAAO;;;YAAP;AACC,IAAA,KAAA,GACC;AAAA,MAAA,SAAA,EAAW,SAAX;AAAA,MACA,cAAA,EAAgB,cADhB;AAAA,MAEA,KAAA,EACC;AAAA,QAAA,YAAA,EAAc,WAAW,CAAC,YAA1B;AAAA,QACA,QAAA,EAAU,WAAW,CAAC,QADtB;AAAA,QAEA,GAAA,EAAK,WAAW,CAAC,GAFjB;AAAA,QAGA,QAAA,EAAU,WAAW,CAAC,QAHtB;AAAA,QAIA,OAAA,EAAS,WAAW,CAAC,OAJrB;AAAA,QAKA,OAAA,EAAY,WAAW,CAAC,OAAZ,KAAyB,MAA5B,GAA2C,WAAW,CAAC,OAAvD,GAAoE,WAAW,CAAC,OALzF;AAAA,QAMA,OAAA,EAAS,WAAW,CAAC,OANrB;AAAA,QAOA,EAAA,EAAI,WAAW,CAAC,EAPhB;AAAA,QAQA,WAAA,EAAa,WAAW,CAAC,WARzB;AAAA,QASA,OAAA,EAAS,WAAW,CAAC,OATrB;AAAA,QAUA,SAAA,EAAW,WAAW,CAAC,SAVvB;OAHD;KADD,CAAA;WAgBA,EAAA,GAAK,MAAM,CAAC,MAAM,CAAC,MAAd,CAAqB,KAArB,EAjBN;GADuB;AAAA,CAXxB,CAAA;;AAAA,IAgCC,CAAA,yBAAD,GAA6B,SAAC,SAAD,EAAY,OAAZ,GAAA;AAC5B,MAAA,EAAA;AAAA,EAAA,IAAG,mBAAA,IAAe,iBAAf,IAA4B;;;aAA/B;AACC,IAAA,EAAA,GAAK,MAAM,CAAC,MAAM,CAAC,OAAd,CAAsB;AAAA,MAAC,SAAA,EAAW,SAAZ;AAAA,MAAuB,UAAA,EAAY,OAAnC;KAAtB,CAAL,CAAA;AACA,IAAA,IAAG,UAAH;AACC,MAAA,MAAM,CAAC,MAAM,CAAC,MAAd,CAAqB,EAAE,CAAC,GAAxB,CAAA,CAAA;aACA,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,oBAAA,GAAuB,OAAvB,GAAiC,SAAjC,GAA6C,SAA7D,EAFD;KAFD;GAD4B;AAAA,CAhC7B,CAAA;;AAAA,IAwCC,CAAA,qBAAD,GAAyB,SAAC,SAAD,GAAA;AACxB,EAAA,IAAG,iBAAH;WACC,MAAM,CAAC,MAAM,CAAC,MAAd,CAAqB;AAAA,MAAC,SAAA,EAAW,SAAZ;KAArB,EAA6C,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,wCAAA,GAAyC,SAAzC,GAAmD,GAAnE,CAA7C,EADD;GAAA,MAAA;WAGC,MAAM,CAAC,MAAM,CAAC,MAAd,CAAqB,EAArB,EAAyB,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,2CAAhB,CAAzB,EAHD;GADwB;AAAA,CAxCzB,CAAA","sourcesContent":["# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n@displayThisSlide = (meetingId, newSlideId, slideObject) ->\n\tpresentationId = newSlideId.split(\"/\")[0] # grab the presentationId part of the slideId\n\t# change current to false for the old slide\n\tMeteor.Slides.update({presentationId: presentationId, \"slide.current\": true}, {$set: {\"slide.current\": false}})\n\t# for the new slide: remove the version which came with presentation_shared_message from the Collection\n\t# to avoid using old data (this message contains everything we need for the new slide)\n\tremoveSlideFromCollection(meetingId, newSlideId)\n\t# add the new slide to the collection\n\taddSlideToCollection(meetingId, presentationId, slideObject)\n\n\n@addSlideToCollection = (meetingId, presentationId, slideObject) ->\n\tunless Meteor.Slides.findOne({meetingId: meetingId, \"slide.id\": slideObject.id})?\n\t\tentry =\n\t\t\tmeetingId: meetingId\n\t\t\tpresentationId: presentationId\n\t\t\tslide:\n\t\t\t\theight_ratio: slideObject.height_ratio\n\t\t\t\ty_offset: slideObject.y_offset\n\t\t\t\tnum: slideObject.num\n\t\t\t\tx_offset: slideObject.x_offset\n\t\t\t\tcurrent: slideObject.current\n\t\t\t\timg_uri: if slideObject.svg_uri isnt undefined then slideObject.svg_uri else slideObject.png_uri\n\t\t\t\ttxt_uri: slideObject.txt_uri\n\t\t\t\tid: slideObject.id\n\t\t\t\twidth_ratio: slideObject.width_ratio\n\t\t\t\tswf_uri: slideObject.swf_uri\n\t\t\t\tthumb_uri: slideObject.thumb_uri\n\n\t\tid = Meteor.Slides.insert(entry)\n\t\t#Meteor.log.info \"added slide id =[#{id}]:#{slideObject.id} in #{meetingId}. Now there are #{Meteor.Slides.find({meetingId: meetingId}).count()} slides in the meeting\"\n\n@removeSlideFromCollection = (meetingId, slideId) ->\n\tif meetingId? and slideId? and Meteor.Slides.findOne({meetingId: meetingId, \"slide.id\": slideId})?\n\t\tid = Meteor.Slides.findOne({meetingId: meetingId, \"slide.id\": slideId})\n\t\tif id?\n\t\t\tMeteor.Slides.remove(id._id)\n\t\t\tMeteor.log.info \"----removed slide[\" + slideId + \"] from \" + meetingId\n\n# called on server start and meeting end\n@clearSlidesCollection = (meetingId) ->\n\tif meetingId?\n\t\tMeteor.Slides.remove({meetingId: meetingId}, Meteor.log.info \"cleared Slides Collection (meetingId: #{meetingId}!\")\n\telse\n\t\tMeteor.Slides.remove({}, Meteor.log.info \"cleared Slides Collection (all meetings)!\")\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n"]}}