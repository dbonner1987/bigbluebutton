{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({\n  sendChatMessagetoServer: function(meetingId, chatObject, requesterUserId, requesterToken) {\n    var action, chatType, eventName, message, recipient;\n    chatType = chatObject.chat_type;\n    recipient = chatObject.to_userid;\n    eventName = null;\n    action = function() {\n      if (chatType === \"PUBLIC_CHAT\") {\n        eventName = \"send_public_chat_message\";\n        return 'chatPublic';\n      } else {\n        eventName = \"send_private_chat_message\";\n        if (recipient === requesterUserId) {\n          return 'chatSelf';\n        } else {\n          return 'chatPrivate';\n        }\n      }\n    };\n    if (isAllowedTo(action(), meetingId, requesterUserId, requesterToken) && chatObject.from_userid === requesterUserId) {\n      chatObject.message = translateHTML5ToFlash(chatObject.message);\n      message = {\n        header: {\n          timestamp: new Date().getTime(),\n          name: eventName\n        },\n        payload: {\n          message: chatObject,\n          meeting_id: meetingId,\n          requester_id: chatObject.from_userid\n        }\n      };\n      Meteor.log.info(\"publishing chat to redis\");\n      publish(Meteor.config.redis.channels.toBBBApps.chat, message);\n    }\n  },\n  deletePrivateChatMessages: function(userId, contact_id) {\n    var contact, requester;\n    requester = Meteor.Users.findOne({\n      userId: userId\n    });\n    contact = Meteor.Users.findOne({\n      _id: contact_id\n    });\n    return deletePrivateChatMessages(requester.userId, contact.userId);\n  }\n});\n\nthis.addChatToCollection = function(meetingId, messageObject) {\n  var id;\n  messageObject.from_time = messageObject.from_time.toString().split('.').join(\"\").split(\"E\")[0];\n  if ((messageObject.from_userid != null) && (messageObject.to_userid != null)) {\n    messageObject.message = translateFlashToHTML5(messageObject.message);\n    return id = Meteor.Chat.upsert({\n      meetingId: meetingId,\n      'message.message': messageObject.message,\n      'message.from_time': messageObject.from_time,\n      'message.from_userid': messageObject.from_userid\n    }, {\n      meetingId: meetingId,\n      message: {\n        chat_type: messageObject.chat_type,\n        message: messageObject.message,\n        to_username: messageObject.to_username,\n        from_tz_offset: messageObject.from_tz_offset,\n        from_color: messageObject.from_color,\n        to_userid: messageObject.to_userid,\n        from_userid: messageObject.from_userid,\n        from_time: messageObject.from_time,\n        from_username: messageObject.from_username,\n        from_lang: messageObject.from_lang\n      }\n    }, function(err, numChanged) {\n      if (err != null) {\n        Meteor.log.error(\"_error \" + err + \" when adding chat to collection\");\n      }\n      if (numChanged.insertedId != null) {\n        return Meteor.log.info(\"_added chat id=[\" + numChanged.insertedId + \"] \" + messageObject.from_username + \" to \" + (messageObject.to_username != null ? 'PUBLIC' : void 0) + \":\" + messageObject.message);\n      }\n    });\n  }\n};\n\nthis.clearChatCollection = function(meetingId) {\n  if (meetingId != null) {\n    return Meteor.Chat.remove({\n      meetingId: meetingId\n    }, Meteor.log.info(\"cleared Chat Collection (meetingId: \" + meetingId + \"!\"));\n  } else {\n    return Meteor.Chat.remove({}, Meteor.log.info(\"cleared Chat Collection (all meetings)!\"));\n  }\n};\n\nthis.translateHTML5ToFlash = function(message) {\n  var result;\n  result = message;\n  result = result.replace(new RegExp(CARRIAGE_RETURN, 'g'), BREAK_LINE);\n  result = result.replace(new RegExp(NEW_LINE, 'g'), BREAK_LINE);\n  return result;\n};\n\nthis.translateFlashToHTML5 = function(message) {\n  var result;\n  result = message;\n  result = result.replace(new RegExp(BREAK_LINE, 'g'), CARRIAGE_RETURN);\n  return result;\n};\n","sourceMap":{"version":3,"file":"/server/collection_methods/chat.coffee.js","sourceRoot":"","sources":["/server/collection_methods/chat.coffee"],"names":[],"mappings":"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","sourcesContent":["Meteor.methods\n\t# meetingId: the id of the meeting\n\t# chatObject: the object including info on the chat message, including the text\n\t# requesterUserId: the userId of the user sending chat\n\t# requesterToken: the authToken of the requester\n\tsendChatMessagetoServer: (meetingId, chatObject, requesterUserId, requesterToken) ->\n\t\tchatType = chatObject.chat_type\n\t\trecipient = chatObject.to_userid\n\t\teventName = null\n\t\taction = ->\n\t\t\tif chatType is \"PUBLIC_CHAT\"\n\t\t\t\teventName = \"send_public_chat_message\"\n\t\t\t\treturn 'chatPublic'\n\t\t\telse\n\t\t\t\teventName = \"send_private_chat_message\"\n\t\t\t\tif recipient is requesterUserId\n\t\t\t\t\treturn 'chatSelf' #not allowed\n\t\t\t\telse\n\t\t\t\t\treturn 'chatPrivate'\n\n\t\tif isAllowedTo(action(), meetingId, requesterUserId, requesterToken) and chatObject.from_userid is requesterUserId\n\t\t\tchatObject.message = translateHTML5ToFlash(chatObject.message)\n\t\t\tmessage =\n\t\t\t\theader :\n\t\t\t\t\ttimestamp: new Date().getTime()\n\t\t\t\t\tname: eventName\n\t\t\t\tpayload:\n\t\t\t\t\tmessage: chatObject\n\t\t\t\t\tmeeting_id: meetingId\n\t\t\t\t\trequester_id: chatObject.from_userid\n\n\t\t\tMeteor.log.info \"publishing chat to redis\"\n\t\t\tpublish Meteor.config.redis.channels.toBBBApps.chat, message\n\t\treturn\n\n\tdeletePrivateChatMessages: (userId, contact_id) ->\n\t\t# if authorized pass through\n\t\trequester = Meteor.Users.findOne({userId: userId})\n\t\tcontact = Meteor.Users.findOne({_id: contact_id})\n\t\tdeletePrivateChatMessages(requester.userId, contact.userId)\n# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n@addChatToCollection = (meetingId, messageObject) ->\n\t# manually convert time from 1.408645053653E12 to 1408645053653 if necessary\n\t# (this is the time_from that the Flash client outputs)\n\tmessageObject.from_time = (messageObject.from_time).toString().split('.').join(\"\").split(\"E\")[0]\n\n\tif messageObject.from_userid? and messageObject.to_userid?\n\t\tmessageObject.message = translateFlashToHTML5(messageObject.message)\n\n\t\tid = Meteor.Chat.upsert({\n\t\t\tmeetingId:meetingId\n\t\t\t'message.message': messageObject.message\n\t\t\t'message.from_time': messageObject.from_time\n\t\t\t'message.from_userid': messageObject.from_userid\n\t\t\t}, {\n\t\t\tmeetingId: meetingId\n\t\t\tmessage:\n\t\t\t\tchat_type: messageObject.chat_type\n\t\t\t\tmessage: messageObject.message\n\t\t\t\tto_username: messageObject.to_username\n\t\t\t\tfrom_tz_offset: messageObject.from_tz_offset\n\t\t\t\tfrom_color: messageObject.from_color\n\t\t\t\tto_userid: messageObject.to_userid\n\t\t\t\tfrom_userid: messageObject.from_userid\n\t\t\t\tfrom_time: messageObject.from_time\n\t\t\t\tfrom_username: messageObject.from_username\n\t\t\t\tfrom_lang: messageObject.from_lang\n\t\t\t}, (err, numChanged) ->\n\t\t\t\tif err?\n\t\t\t\t\tMeteor.log.error \"_error #{err} when adding chat to collection\"\n\t\t\t\tif numChanged.insertedId?\n\t\t\t\t\tMeteor.log.info \"_added chat id=[#{numChanged.insertedId}]\n\t\t\t\t\t#{messageObject.from_username} to #{'PUBLIC' if messageObject.to_username?}:#{messageObject.message}\")\n\n# called on server start and meeting end\n@clearChatCollection = (meetingId) ->\n\tif meetingId?\n\t\tMeteor.Chat.remove({meetingId: meetingId}, Meteor.log.info \"cleared Chat Collection (meetingId: #{meetingId}!\")\n\telse\n\t\tMeteor.Chat.remove({}, Meteor.log.info \"cleared Chat Collection (all meetings)!\")\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n\n# translate '\\n' newline character and '\\r' carriage returns to '<br/>' breakline character for Flash\n@translateHTML5ToFlash = (message) ->\n\tresult = message\n\tresult = result.replace(new RegExp(CARRIAGE_RETURN, 'g'), BREAK_LINE)\n\tresult = result.replace(new RegExp(NEW_LINE, 'g'), BREAK_LINE)\n\tresult\n\n# translate '<br/>' breakline character to '\\r' carriage return character for HTML5\n@translateFlashToHTML5 = (message) ->\n\tresult = message\n\tresult = result.replace(new RegExp(BREAK_LINE, 'g'), CARRIAGE_RETURN)\n\tresult\n"]}}