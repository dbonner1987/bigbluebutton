{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({\n  publishSwitchToPreviousSlideMessage: function(meetingId, userId, authToken) {\n    var currentPresentationDoc, currentSlideDoc, message, previousSlideDoc;\n    currentPresentationDoc = Meteor.Presentations.findOne({\n      \"meetingId\": meetingId,\n      \"presentation.current\": true\n    });\n    currentSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId,\n      \"presentationId\": currentPresentationDoc != null ? currentPresentationDoc.presentation.id : void 0,\n      \"slide.current\": true\n    });\n    previousSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId,\n      \"presentationId\": currentPresentationDoc != null ? currentPresentationDoc.presentation.id : void 0,\n      \"slide.num\": (currentSlideDoc != null ? currentSlideDoc.slide.num : void 0) - 1\n    });\n    if ((previousSlideDoc != null) && isAllowedTo('switchSlide', meetingId, userId, authToken)) {\n      message = {\n        \"payload\": {\n          \"page\": previousSlideDoc.slide.id,\n          \"meeting_id\": meetingId\n        },\n        \"header\": {\n          \"name\": \"go_to_slide\"\n        }\n      };\n      return publish(Meteor.config.redis.channels.toBBBApps.presentation, message);\n    }\n  },\n  publishSwitchToNextSlideMessage: function(meetingId, userId, authToken) {\n    var currentPresentationDoc, currentSlideDoc, message, nextSlideDoc;\n    currentPresentationDoc = Meteor.Presentations.findOne({\n      \"meetingId\": meetingId,\n      \"presentation.current\": true\n    });\n    currentSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId,\n      \"presentationId\": currentPresentationDoc != null ? currentPresentationDoc.presentation.id : void 0,\n      \"slide.current\": true\n    });\n    nextSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId,\n      \"presentationId\": currentPresentationDoc != null ? currentPresentationDoc.presentation.id : void 0,\n      \"slide.num\": (currentSlideDoc != null ? currentSlideDoc.slide.num : void 0) + 1\n    });\n    if ((nextSlideDoc != null) && isAllowedTo('switchSlide', meetingId, userId, authToken)) {\n      message = {\n        \"payload\": {\n          \"page\": nextSlideDoc.slide.id,\n          \"meeting_id\": meetingId\n        },\n        \"header\": {\n          \"name\": \"go_to_slide\"\n        }\n      };\n      return publish(Meteor.config.redis.channels.toBBBApps.presentation, message);\n    }\n  }\n});\n\nthis.addPresentationToCollection = function(meetingId, presentationObject) {\n  var entry, id;\n  if (Meteor.Presentations.findOne({\n    meetingId: meetingId,\n    'presentation.id': presentationObject.id\n  }) == null) {\n    entry = {\n      meetingId: meetingId,\n      presentation: {\n        id: presentationObject.id,\n        name: presentationObject.name,\n        current: presentationObject.current\n      },\n      pointer: {\n        x: 0.0,\n        y: 0.0\n      }\n    };\n    return id = Meteor.Presentations.insert(entry);\n  }\n};\n\nthis.removePresentationFromCollection = function(meetingId, presentationId) {\n  var id;\n  if ((meetingId != null) && (presentationId != null) && (Meteor.Presentations.findOne({\n    meetingId: meetingId,\n    \"presentation.id\": presentationId\n  }) != null)) {\n    id = Meteor.Presentations.findOne({\n      meetingId: meetingId,\n      \"presentation.id\": presentationId\n    });\n    if (id != null) {\n      Meteor.Slides.remove({\n        presentationId: presentationId\n      }, Meteor.log.info(\"cleared Slides Collection (presentationId: \" + presentationId + \"!\"));\n      Meteor.Presentations.remove(id._id);\n      return Meteor.log.info(\"----removed presentation[\" + presentationId + \"] from \" + meetingId);\n    }\n  }\n};\n\nthis.clearPresentationsCollection = function(meetingId) {\n  if (meetingId != null) {\n    return Meteor.Presentations.remove({\n      meetingId: meetingId\n    }, Meteor.log.info(\"cleared Presentations Collection (meetingId: \" + meetingId + \"!\"));\n  } else {\n    return Meteor.Presentations.remove({}, Meteor.log.info(\"cleared Presentations Collection (all meetings)!\"));\n  }\n};\n","sourceMap":{"version":3,"file":"/server/collection_methods/presentations.coffee.js","sourceRoot":"","sources":["/server/collection_methods/presentations.coffee"],"names":[],"mappings":"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","sourcesContent":["\nMeteor.methods\n  publishSwitchToPreviousSlideMessage: (meetingId, userId, authToken) ->\n    currentPresentationDoc = Meteor.Presentations.findOne({\n      \"meetingId\": meetingId\n      \"presentation.current\" : true})\n    currentSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.current\" : true})\n    previousSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.num\" : currentSlideDoc?.slide.num-1})\n\n    if previousSlideDoc? and isAllowedTo('switchSlide', meetingId, userId, authToken)\n      message =\n        \"payload\":\n          \"page\": previousSlideDoc.slide.id\n          \"meeting_id\": meetingId\n        \"header\":\n          \"name\": \"go_to_slide\"\n\n      publish Meteor.config.redis.channels.toBBBApps.presentation, message\n\n\n  publishSwitchToNextSlideMessage: (meetingId, userId, authToken) ->\n    currentPresentationDoc = Meteor.Presentations.findOne({\n      \"meetingId\": meetingId\n      \"presentation.current\" : true})\n    currentSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.current\" : true})\n    nextSlideDoc = Meteor.Slides.findOne({\n      \"meetingId\": meetingId\n      \"presentationId\": currentPresentationDoc?.presentation.id\n      \"slide.num\" : currentSlideDoc?.slide.num+1})\n\n    if nextSlideDoc? and isAllowedTo('switchSlide', meetingId, userId, authToken)\n      message =\n        \"payload\":\n          \"page\": nextSlideDoc.slide.id\n          \"meeting_id\": meetingId\n        \"header\":\n          \"name\": \"go_to_slide\"\n\n      publish Meteor.config.redis.channels.toBBBApps.presentation, message\n\n\n# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n@addPresentationToCollection = (meetingId, presentationObject) ->\n  #check if the presentation is already in the collection\n  unless Meteor.Presentations.findOne({meetingId: meetingId, 'presentation.id': presentationObject.id})?\n    entry =\n      meetingId: meetingId\n      presentation:\n        id: presentationObject.id\n        name: presentationObject.name\n        current: presentationObject.current\n\n      pointer: #initially we have no data about the cursor\n        x: 0.0\n        y: 0.0\n\n    id = Meteor.Presentations.insert(entry)\n    #Meteor.log.info \"presentation added id =[#{id}]:#{presentationObject.id} in #{meetingId}. Presentations.size is now #{Meteor.Presentations.find({meetingId: meetingId}).count()}\"\n\n@removePresentationFromCollection = (meetingId, presentationId) ->\n  if meetingId? and presentationId? and Meteor.Presentations.findOne({meetingId: meetingId, \"presentation.id\": presentationId})?\n    id = Meteor.Presentations.findOne({meetingId: meetingId, \"presentation.id\": presentationId})\n    if id?\n      Meteor.Slides.remove({presentationId: presentationId}, Meteor.log.info \"cleared Slides Collection (presentationId: #{presentationId}!\")\n      Meteor.Presentations.remove(id._id)\n      Meteor.log.info \"----removed presentation[\" + presentationId + \"] from \" + meetingId\n\n\n# called on server start and meeting end\n@clearPresentationsCollection = (meetingId) ->\n  if meetingId?\n    Meteor.Presentations.remove({meetingId: meetingId}, Meteor.log.info \"cleared Presentations Collection (meetingId: #{meetingId}!\")\n  else\n    Meteor.Presentations.remove({}, Meteor.log.info \"cleared Presentations Collection (all meetings)!\")\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n"]}}