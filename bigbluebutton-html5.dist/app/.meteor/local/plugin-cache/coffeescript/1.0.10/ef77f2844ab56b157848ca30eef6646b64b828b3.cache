{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.activateBreakLines = function(str) {\n  var res;\n  if (typeof str === 'string') {\n    res = str.replace(new RegExp(CARRIAGE_RETURN, 'g'), BREAK_LINE);\n    return res;\n  }\n};\n\nthis.detectUnreadChat = function() {\n  return Meteor.Chat.find({}).observe({\n    added: (function(_this) {\n      return function(chatMessage) {\n        var findDestinationTab;\n        findDestinationTab = function() {\n          var ref, ref1;\n          if (((ref = chatMessage.message) != null ? ref.chat_type : void 0) === \"PUBLIC_CHAT\") {\n            return \"PUBLIC_CHAT\";\n          } else {\n            return (ref1 = chatMessage.message) != null ? ref1.from_userid : void 0;\n          }\n        };\n        return Tracker.autorun(function(comp) {\n          var destinationTab, tabsTime;\n          tabsTime = getInSession('userListRenderedTime');\n          if ((tabsTime != null) && chatMessage.message.from_userid !== \"SYSTEM_MESSAGE\" && chatMessage.message.from_time - tabsTime > 0) {\n            populateNotifications(chatMessage);\n            destinationTab = findDestinationTab();\n            if (destinationTab !== getInSession(\"inChatWith\")) {\n              setInSession('chats', getInSession('chats').map(function(tab) {\n                if (tab.userId === destinationTab) {\n                  tab.gotMail = true;\n                  tab.number++;\n                }\n                return tab;\n              }));\n            }\n          }\n          return comp.stop();\n        });\n      };\n    })(this)\n  });\n};\n\nthis.getFormattedMessagesForChat = function() {\n  var chattingWith;\n  chattingWith = getInSession('inChatWith');\n  if (chattingWith === 'PUBLIC_CHAT') {\n    return Meteor.Chat.find({\n      'message.chat_type': {\n        $in: [\"SYSTEM_MESSAGE\", \"PUBLIC_CHAT\"]\n      }\n    }, {\n      sort: {\n        'message.from_time': 1\n      }\n    }).fetch();\n  } else {\n    return Meteor.Chat.find({\n      'message.chat_type': 'PRIVATE_CHAT',\n      $or: [\n        {\n          'message.to_userid': chattingWith\n        }, {\n          'message.from_userid': chattingWith\n        }\n      ]\n    }).fetch();\n  }\n};\n\nHandlebars.registerHelper(\"autoscroll\", function() {\n  var ref;\n  $('#chatbody').scrollTop((ref = $('#chatbody')[0]) != null ? ref.scrollHeight : void 0);\n  return false;\n});\n\nHandlebars.registerHelper(\"publicChatDisabled\", function() {\n  var presenter, publicChatIsDisabled, ref, ref1, ref2, userIsLocked;\n  userIsLocked = (ref = Meteor.Users.findOne({\n    userId: getInSession('userId')\n  })) != null ? ref.user.locked : void 0;\n  publicChatIsDisabled = (ref1 = Meteor.Meetings.findOne({})) != null ? ref1.roomLockSettings.disablePublicChat : void 0;\n  presenter = (ref2 = Meteor.Users.findOne({\n    userId: getInSession('userId')\n  })) != null ? ref2.user.presenter : void 0;\n  return userIsLocked && publicChatIsDisabled && !presenter;\n});\n\nHandlebars.registerHelper(\"privateChatDisabled\", function() {\n  var presenter, privateChatIsDisabled, ref, ref1, ref2, userIsLocked;\n  userIsLocked = (ref = Meteor.Users.findOne({\n    userId: getInSession('userId')\n  })) != null ? ref.user.locked : void 0;\n  privateChatIsDisabled = (ref1 = Meteor.Meetings.findOne({})) != null ? ref1.roomLockSettings.disablePrivateChat : void 0;\n  presenter = (ref2 = Meteor.Users.findOne({\n    userId: getInSession('userId')\n  })) != null ? ref2.user.presenter : void 0;\n  return userIsLocked && privateChatIsDisabled && !presenter;\n});\n\nHandlebars.registerHelper(\"inPrivateChat\", function() {\n  return (getInSession('inChatWith')) !== 'PUBLIC_CHAT';\n});\n\nthis.sendMessage = function() {\n  var chattingWith, color, message, ref, toUsername;\n  message = linkify($('#newMessageInput').val());\n  if (!((message != null ? message.length : void 0) > 0 && (/\\S/.test(message)))) {\n    return;\n  }\n  color = \"0x000000\";\n  if ((chattingWith = getInSession('inChatWith')) !== \"PUBLIC_CHAT\") {\n    toUsername = (ref = Meteor.Users.findOne({\n      userId: chattingWith\n    })) != null ? ref.user.name : void 0;\n    BBB.sendPrivateChatMessage(color, \"en\", message, chattingWith, toUsername);\n  } else {\n    BBB.sendPublicChatMessage(color, \"en\", message);\n  }\n  return $('#newMessageInput').val('');\n};\n\nTemplate.chatbar.helpers({\n  getCombinedMessagesForChat: function() {\n    var deleted, i, j, len, msgs;\n    msgs = getFormattedMessagesForChat();\n    len = msgs != null ? msgs.length : void 0;\n    i = 0;\n    while (i < len) {\n      if (msgs[i].message.from_userid !== 'System') {\n        j = i + 1;\n        while (j < len) {\n          deleted = false;\n          if (msgs[j].message.from_userid !== 'System') {\n            if ((parseFloat(msgs[j].message.from_time) - parseFloat(msgs[i].message.from_time)) >= 60000) {\n              break;\n            }\n            if (msgs[i].message.from_userid === msgs[j].message.from_userid) {\n              msgs[i].message.message += \"\" + CARRIAGE_RETURN + msgs[j].message.message;\n              msgs.splice(j, 1);\n              deleted = true;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n          len = msgs.length;\n          if (!deleted) {\n            ++j;\n          }\n        }\n      }\n      ++i;\n      len = msgs.length;\n    }\n    return msgs;\n  },\n  userExists: function() {\n    if (getInSession('inChatWith') === \"PUBLIC_CHAT\") {\n      return true;\n    } else {\n      return Meteor.Users.findOne({\n        userId: getInSession('inChatWith')\n      }) != null;\n    }\n  }\n});\n\nTemplate.chatbar.rendered = function() {\n  return detectUnreadChat();\n};\n\nTemplate.chatbar.events({\n  'click .toPublic': function(event) {\n    setInSession('inChatWith', 'PUBLIC_CHAT');\n    return setInSession('chats', getInSession('chats').map(function(chat) {\n      if (chat.userId === \"PUBLIC_CHAT\") {\n        chat.gotMail = false;\n        chat.number = 0;\n      }\n      return chat;\n    }));\n  }\n});\n\nTemplate.privateChatTab.rendered = function() {\n  if (isLandscape() || isPortrait()) {\n    return $(\"#newMessageInput\").focus();\n  }\n};\n\nTemplate.message.rendered = function() {\n  var ref;\n  $('#chatbody').scrollTop((ref = $('#chatbody')[0]) != null ? ref.scrollHeight : void 0);\n  return false;\n};\n\nTemplate.chatInput.rendered = function() {\n  return $('.panel-footer').resizable({\n    handles: 'n',\n    minHeight: 70,\n    resize: function(event, ui) {\n      var ref;\n      if ($('.panel-footer').css('top') === '0px') {\n        $('.panel-footer').height(70);\n      } else {\n        $('.panel-footer').css('top', parseInt($('.panel-footer').css('top')) + 1 + 'px');\n      }\n      $('#chatbody').height($('#chat').height() - $('.panel-footer').height() - 45);\n      return $('#chatbody').scrollTop((ref = $('#chatbody')[0]) != null ? ref.scrollHeight : void 0);\n    },\n    start: function(event, ui) {\n      $('#newMessageInput').css('overflow', '');\n      return $('.panel-footer').resizable('option', 'maxHeight', Math.max($('.panel-footer').height(), $('#chat').height() / 2));\n    },\n    stop: function(event, ui) {\n      return setInSession('chatInputMinHeight', $('.panel-footer').height() + 1);\n    }\n  });\n};\n\nTemplate.chatInput.events({\n  'click #sendMessageButton': function(event) {\n    $('#sendMessageButton').blur();\n    sendMessage();\n    return adjustChatInputHeight();\n  },\n  'keypress #newMessageInput': function(event) {\n    var key;\n    key = (event.charCode ? event.charCode : (event.keyCode ? event.keyCode : 0));\n    if (event.shiftKey && (key === 13)) {\n      event.preventDefault();\n      document.getElementById(\"newMessageInput\").value += CARRIAGE_RETURN;\n      return;\n    }\n    if (key === 13) {\n      event.preventDefault();\n      sendMessage();\n      $('#newMessageInput').val(\"\");\n      return false;\n    }\n  }\n});\n\nTemplate.chatInputControls.rendered = function() {\n  return $('#newMessageInput').on('keydown paste cut', function() {\n    return setTimeout(function() {\n      return adjustChatInputHeight();\n    }, 0);\n  });\n};\n\nTemplate.message.helpers({\n  sanitizeAndFormat: function(str) {\n    var res;\n    if (typeof str === 'string') {\n      res = str.replace(/&/g, '&amp;').replace(/<(?![au\\/])/g, '&lt;').replace(/\\/([^au])>/g, '$1&gt;').replace(/([^=])\"(?!>)/g, '$1&quot;');\n      res = toClickable(res);\n      return res = activateBreakLines(res);\n    }\n  },\n  toClockTime: function(epochTime) {\n    var dateObj, hours, local, minutes, offset;\n    if (epochTime === null) {\n      return \"\";\n    }\n    local = new Date();\n    offset = local.getTimezoneOffset();\n    epochTime = epochTime - offset * 60000;\n    dateObj = new Date(epochTime);\n    hours = dateObj.getUTCHours();\n    minutes = dateObj.getUTCMinutes();\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n    return hours + \":\" + minutes;\n  }\n});\n\nthis.toClickable = function(str) {\n  var res;\n  if (typeof str === 'string') {\n    res = str.replace(/<a href='event:/gim, \"<a target='_blank' href='\");\n    return res = res.replace(/<a href=\"event:/gim, '<a target=\"_blank\" href=\"');\n  }\n};\n","sourceMap":{"version":3,"file":"/client/views/chat/chat_bar.coffee.js","sourceRoot":"","sources":["/client/views/chat/chat_bar.coffee"],"names":[],"mappings":"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","sourcesContent":["# --------------------------------------------------------------------------------------------------------------------\r\n# If a function's last line is the statement false that represents the function returning false\r\n# A function such as a click handler will continue along with the propogation and default behaivour if not stopped\r\n# Returning false stops propogation/prevents default. You cannot always use the event object to call these methods\r\n# Because most Meteor event handlers set the event object to the exact context of the event which does not\r\n# allow you to simply call these methods.\r\n# --------------------------------------------------------------------------------------------------------------------\r\n\r\n@activateBreakLines = (str) ->\r\n  if typeof str is 'string'\r\n    # turn '\\r' carriage return characters into '<br/>' break lines\r\n    res = str.replace(new RegExp(CARRIAGE_RETURN, 'g'), BREAK_LINE)\r\n    res\r\n\r\n@detectUnreadChat = ->\r\n  #if the current tab is not the same as the tab we just published in\r\n  Meteor.Chat.find({}).observe({\r\n    added: (chatMessage) =>\r\n      findDestinationTab = ->\r\n        if chatMessage.message?.chat_type is \"PUBLIC_CHAT\"\r\n          \"PUBLIC_CHAT\"\r\n        else\r\n          chatMessage.message?.from_userid\r\n      Tracker.autorun (comp) ->\r\n        tabsTime = getInSession('userListRenderedTime')\r\n        if tabsTime? and chatMessage.message.from_userid isnt \"SYSTEM_MESSAGE\" and chatMessage.message.from_time - tabsTime > 0\r\n          populateNotifications(chatMessage) # check if we need to show a new notification\r\n          destinationTab = findDestinationTab()\r\n          if destinationTab isnt getInSession \"inChatWith\"\r\n            setInSession 'chats', getInSession('chats').map((tab) ->\r\n              if tab.userId is destinationTab\r\n                tab.gotMail = true\r\n                tab.number++\r\n              tab\r\n            )\r\n        comp.stop()\r\n    })\r\n\r\n# This method returns all messages for the user. It looks at the session to determine whether the user is in\r\n# private or public chat. If true is passed, messages returned are from before the user joined. Else, the messages are from after the user joined\r\n@getFormattedMessagesForChat = ->\r\n  chattingWith = getInSession('inChatWith')\r\n  if chattingWith is 'PUBLIC_CHAT' # find all public and system messages\r\n    return Meteor.Chat.find({'message.chat_type': $in: [\"SYSTEM_MESSAGE\",\"PUBLIC_CHAT\"]},{sort: {'message.from_time': 1}}).fetch()\r\n  else\r\n    return Meteor.Chat.find({'message.chat_type': 'PRIVATE_CHAT', $or: [{'message.to_userid': chattingWith},{'message.from_userid': chattingWith}]}).fetch()\r\n\r\n# Scrolls the message container to the bottom. The number of pixels to scroll down is the height of the container\r\nHandlebars.registerHelper \"autoscroll\", ->\r\n  $('#chatbody').scrollTop($('#chatbody')[0]?.scrollHeight)\r\n  false\r\n\r\n# true if the lock settings limit public chat and the current user is locked\r\nHandlebars.registerHelper \"publicChatDisabled\", ->\r\n  userIsLocked = Meteor.Users.findOne({userId:getInSession 'userId'})?.user.locked\r\n  publicChatIsDisabled = Meteor.Meetings.findOne({})?.roomLockSettings.disablePublicChat\r\n  presenter = Meteor.Users.findOne({userId:getInSession 'userId'})?.user.presenter\r\n  return userIsLocked and publicChatIsDisabled and !presenter\r\n\r\n# true if the lock settings limit private chat and the current user is locked\r\nHandlebars.registerHelper \"privateChatDisabled\", ->\r\n  userIsLocked = Meteor.Users.findOne({userId:getInSession 'userId'})?.user.locked\r\n  privateChatIsDisabled = Meteor.Meetings.findOne({})?.roomLockSettings.disablePrivateChat\r\n  presenter = Meteor.Users.findOne({userId:getInSession 'userId'})?.user.presenter\r\n  return userIsLocked and privateChatIsDisabled and !presenter\r\n\r\n# return whether the user's chat pane is open in Private chat\r\nHandlebars.registerHelper \"inPrivateChat\", ->\r\n  return (getInSession 'inChatWith') isnt 'PUBLIC_CHAT'\r\n\r\n@sendMessage = ->\r\n  message = linkify $('#newMessageInput').val() # get the message from the input box\r\n  unless (message?.length > 0 and (/\\S/.test(message))) # check the message has content and it is not whitespace\r\n    return # do nothing if invalid message\r\n\r\n  color = \"0x000000\" #\"0x#{getInSession(\"messageColor\")}\"\r\n  if (chattingWith = getInSession('inChatWith')) isnt \"PUBLIC_CHAT\"\r\n    toUsername = Meteor.Users.findOne(userId: chattingWith)?.user.name\r\n    BBB.sendPrivateChatMessage(color, \"en\", message, chattingWith, toUsername)\r\n  else\r\n    BBB.sendPublicChatMessage(color, \"en\", message)\r\n\r\n  $('#newMessageInput').val '' # Clear message box\r\n\r\nTemplate.chatbar.helpers\r\n  getCombinedMessagesForChat: ->\r\n    msgs = getFormattedMessagesForChat()\r\n    len = msgs?.length # get length of messages\r\n    i = 0\r\n    while i < len # Must be a do while, for loop compiles and stores the length of array which can change inside the loop!\r\n      if msgs[i].message.from_userid isnt 'System' # skip system messages\r\n        j = i+1 # Start looking at messages right after the current one\r\n\r\n        while j < len\r\n          deleted = false\r\n          if msgs[j].message.from_userid isnt 'System' # Ignore system messages\r\n            # Check if the time discrepancy between the two messages exceeds window for grouping\r\n            if (parseFloat(msgs[j].message.from_time)-parseFloat(msgs[i].message.from_time)) >= 60000 # 60 seconds/1 minute\r\n              break # Messages are too far between, so them seperated and stop joining here\r\n\r\n            if msgs[i].message.from_userid is msgs[j].message.from_userid # Both messages are from the same user\r\n              # insert a '\\r' carriage return character between messages to put them on a new line\r\n              msgs[i].message.message += \"#{CARRIAGE_RETURN}#{msgs[j].message.message}\" # Combine the messages\r\n              msgs.splice(j,1) # Delete the message from the collection\r\n              deleted = true\r\n            else break # Messages are from different people, move on\r\n            #\r\n          else break # This is the break point in the chat, don't merge\r\n          #\r\n          len = msgs.length\r\n          ++j if not deleted\r\n      #\r\n      ++i\r\n      len = msgs.length\r\n\r\n    msgs\r\n\r\n  userExists: ->\r\n    if getInSession('inChatWith') is \"PUBLIC_CHAT\"\r\n      return true\r\n    else\r\n      return Meteor.Users.findOne({userId: getInSession('inChatWith')})?\r\n\r\n# When chatbar gets rendered, launch the auto-check for unread chat\r\nTemplate.chatbar.rendered = ->\r\n  detectUnreadChat()\r\n\r\n# When \"< Public\" is clicked, go to public chat\r\nTemplate.chatbar.events\r\n  'click .toPublic': (event) ->\r\n    setInSession 'inChatWith', 'PUBLIC_CHAT'\r\n    setInSession 'chats', getInSession('chats').map((chat) ->\r\n      if chat.userId is \"PUBLIC_CHAT\"\r\n        chat.gotMail = false\r\n        chat.number = 0\r\n      chat\r\n    )\r\n\r\nTemplate.privateChatTab.rendered = ->\r\n  if isLandscape() or isPortrait()\r\n    $(\"#newMessageInput\").focus()\r\n\r\n# When message gets rendered, scroll to the bottom\r\nTemplate.message.rendered = ->\r\n  $('#chatbody').scrollTop($('#chatbody')[0]?.scrollHeight)\r\n  false\r\n\r\nTemplate.chatInput.rendered = ->\r\n  $('.panel-footer').resizable\r\n    handles: 'n'\r\n    minHeight: 70\r\n    resize: (event, ui) ->\r\n      if $('.panel-footer').css('top') is '0px'\r\n        $('.panel-footer').height(70) # prevents the element from shrinking vertically for 1-2 px\r\n      else\r\n        $('.panel-footer').css('top', parseInt($('.panel-footer').css('top')) + 1 + 'px')\r\n      $('#chatbody').height($('#chat').height() - $('.panel-footer').height() - 45)\r\n      $('#chatbody').scrollTop($('#chatbody')[0]?.scrollHeight)\r\n    start: (event, ui) ->\r\n      $('#newMessageInput').css('overflow', '')\r\n      $('.panel-footer').resizable('option', 'maxHeight', Math.max($('.panel-footer').height(), $('#chat').height() / 2))\r\n    stop: (event, ui) ->\r\n      setInSession 'chatInputMinHeight', $('.panel-footer').height() + 1\r\n\r\nTemplate.chatInput.events\r\n  'click #sendMessageButton': (event) ->\r\n    $('#sendMessageButton').blur()\r\n    sendMessage()\r\n    adjustChatInputHeight()\r\n\r\n  'keypress #newMessageInput': (event) -> # user pressed a button inside the chatbox\r\n    key = (if event.charCode then event.charCode else (if event.keyCode then event.keyCode else 0))\r\n\r\n    if event.shiftKey and (key is 13)\r\n      event.preventDefault()\r\n      # append a '\\r' carriage return character to the input box dropping the cursor to a new line\r\n      document.getElementById(\"newMessageInput\").value += CARRIAGE_RETURN # Change newline character\r\n      return\r\n\r\n    if key is 13 # Check for pressing enter to submit message\r\n      event.preventDefault()\r\n      sendMessage()\r\n      $('#newMessageInput').val(\"\")\r\n      return false\r\n\r\nTemplate.chatInputControls.rendered = ->\r\n  $('#newMessageInput').on('keydown paste cut', () -> setTimeout(() ->\r\n    adjustChatInputHeight()\r\n  , 0))\r\n\r\nTemplate.message.helpers\r\n  sanitizeAndFormat: (str) ->\r\n    if typeof str is 'string'\r\n      # First, replace replace all tags with the ascii equivalent (excluding those involved in anchor tags)\r\n      res = str.replace(/&/g, '&amp;').replace(/<(?![au\\/])/g, '&lt;').replace(/\\/([^au])>/g, '$1&gt;').replace(/([^=])\"(?!>)/g, '$1&quot;');\r\n      res = toClickable res\r\n      res = activateBreakLines res\r\n\r\n  toClockTime: (epochTime) ->\r\n    if epochTime is null\r\n      return \"\"\r\n    local = new Date()\r\n    offset = local.getTimezoneOffset()\r\n    epochTime = epochTime - offset * 60000 # 1 min = 60 s = 60,000 ms\r\n    dateObj = new Date(epochTime)\r\n    hours = dateObj.getUTCHours()\r\n    minutes = dateObj.getUTCMinutes()\r\n    if minutes < 10\r\n      minutes = \"0\" + minutes\r\n    hours + \":\" + minutes\r\n\r\n# make links received from Flash client clickable in HTML\r\n@toClickable = (str) ->\r\n  if typeof str is 'string'\r\n    res = str.replace /<a href='event:/gim, \"<a target='_blank' href='\"\r\n    res = res.replace /<a href=\"event:/gim, '<a target=\"_blank\" href=\"'\r\n"]}}