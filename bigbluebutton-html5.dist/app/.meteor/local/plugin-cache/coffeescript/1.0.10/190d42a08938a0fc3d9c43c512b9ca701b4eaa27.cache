{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar calculateFontAndWidth, getRenderedTextSize,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nthis.WhiteboardPollModel = (function(superClass) {\n  extend(WhiteboardPollModel, superClass);\n\n  function WhiteboardPollModel(paper1) {\n    this.paper = paper1;\n    this.make = bind(this.make, this);\n    WhiteboardPollModel.__super__.constructor.call(this, this.paper);\n    this.definition = [0, 0, 0, 0, \"#333333\", \"2px\", \"#ffffff\"];\n    this.paper;\n  }\n\n  WhiteboardPollModel.prototype.make = function(startingData) {\n    var backgroundColor, barHeight, barWidth, calcFontSize, calculatedData, centerCell, color, height, horizontalPadding, i, k, l, leftCell, m, magicNumber, maxBarWidth, maxDigitWidth, maxLeftWidth, maxLineHeight, maxNumVotes, maxRightWidth, n, objects, percResult, ref, ref1, ref2, ref3, ref4, ref5, rightCell, svgNSi, tempSpanEl, tempTextNode, textArray, thickness, verticalPadding, votesTotal, width, x, x1, x2, xBar, xLeft, xNumVotes, xNumVotesDefault, xNumVotesMovedRight, xRight, y, y1, y2, yBar, yLeft, yNumVotes, yRight;\n    x1 = startingData.points[0];\n    y1 = startingData.points[1];\n    x2 = startingData.points[2] + startingData.points[0] - 0.001;\n    y2 = startingData.points[3] + startingData.points[1] - 0.001;\n    thickness = 2;\n    backgroundColor = \"#ffffff\";\n    verticalPadding = 0;\n    horizontalPadding = 0;\n    calcFontSize = 30;\n    votesTotal = 0;\n    maxNumVotes = 0;\n    textArray = [];\n    if (startingData.result != null) {\n      for (i = k = 0, ref = startingData.result.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {\n        votesTotal += startingData.result[i].num_votes;\n        if (maxNumVotes < startingData.result[i].num_votes) {\n          maxNumVotes = startingData.result[i].num_votes;\n        }\n        textArray[i] = [];\n      }\n      for (i = l = 0, ref1 = startingData.result.length - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {\n        textArray[i].push(startingData.result[i].key, startingData.result[i].num_votes + \"\");\n        if (votesTotal === 0) {\n          textArray[i].push(\"0%\");\n        } else {\n          percResult = startingData.result[i].num_votes / votesTotal * 100;\n          textArray[i].push(Math.round(percResult) + \"%\");\n        }\n      }\n    }\n    if (x2 < x1) {\n      ref2 = [x2, x1], x1 = ref2[0], x2 = ref2[1];\n    }\n    if (y2 < y1) {\n      ref3 = [y2, y1], y1 = ref3[0], y2 = ref3[1];\n    }\n    x = x1 * this.gw + this.xOffset;\n    y = y1 * this.gh + this.yOffset;\n    width = (x2 * this.gw + this.xOffset) - x;\n    height = (y2 * this.gh + this.yOffset) - y;\n    this.obj = this.paper.rect(x, y, width, height, 0);\n    this.obj.attr(\"fill\", backgroundColor);\n    this.obj.attr(\"stroke-width\", 0);\n    this.definition = {\n      shape: \"poll_result\",\n      data: [x1, y1, x2, y2, this.obj.attrs[\"stroke\"], this.obj.attrs[\"stroke-width\"], this.obj.attrs[\"fill\"]]\n    };\n    width = width * 0.95;\n    height = height - width * 0.05;\n    x = x + width * 0.025;\n    y = y + width * 0.025;\n    this.obj1 = this.paper.rect(x, y, width, height, 0);\n    this.obj1.attr(\"stroke\", \"#333333\");\n    this.obj1.attr(\"fill\", backgroundColor);\n    this.obj1.attr(\"stroke-width\", zoomStroke(formatThickness(thickness)));\n    this.definition = {\n      shape: \"poll_result\",\n      data: [x1, y1, x2, y2, this.obj.attrs[\"stroke\"], this.obj1.attrs[\"stroke-width\"], this.obj1.attrs[\"fill\"]]\n    };\n    calculatedData = calculateFontAndWidth(textArray, calcFontSize, width, height, x, y);\n    calcFontSize = calculatedData[0];\n    maxLeftWidth = calculatedData[1];\n    maxRightWidth = calculatedData[2];\n    maxLineHeight = calculatedData[3];\n    maxDigitWidth = calculatedData[4];\n    maxBarWidth = width * 0.9 - maxLeftWidth - maxRightWidth;\n    barHeight = height * 0.75 / textArray.length;\n    svgNSi = \"http://www.w3.org/2000/svg\";\n    this.obj2 = this.paper.text(x, y, \"\");\n    this.obj2.attr({\n      \"fill\": \"#333333\",\n      \"font-family\": \"Arial\",\n      \"font-size\": calcFontSize\n    });\n    this.obj2.node.style[\"text-anchor\"] = \"start\";\n    this.obj2.node.style[\"textAnchor\"] = \"start\";\n    leftCell = this.obj2.node;\n    while ((leftCell != null) && leftCell.hasChildNodes()) {\n      leftCell.removeChild(leftCell.firstChild);\n    }\n    this.obj3 = this.paper.text(x, y, \"\");\n    this.obj3.attr({\n      \"fill\": \"#333333\",\n      \"font-family\": \"Arial\",\n      \"font-size\": calcFontSize\n    });\n    this.obj3.node.style[\"text-anchor\"] = \"end\";\n    this.obj3.node.style[\"textAnchor\"] = \"end\";\n    rightCell = this.obj3.node;\n    while ((rightCell != null) && rightCell.hasChildNodes()) {\n      rightCell.removeChild(rightCell.firstChild);\n    }\n    leftCell.style['font-size'] = calcFontSize;\n    rightCell.style['font-size'] = calcFontSize;\n    horizontalPadding = width * 0.1 / 4;\n    verticalPadding = height * 0.25 / (textArray.length + 1);\n    magicNumber = 3.5;\n    yLeft = y + verticalPadding + barHeight / 2 - magicNumber;\n    xLeft = x + horizontalPadding + 1;\n    xBar = x + maxLeftWidth + horizontalPadding * 2;\n    yBar = y + verticalPadding;\n    yRight = y + verticalPadding + barHeight / 2 - magicNumber;\n    xRight = x + horizontalPadding * 3 + maxLeftWidth + maxRightWidth + maxBarWidth + 1;\n    objects = [this.obj, this.obj1, this.obj2, this.obj3];\n    for (i = m = 0, ref4 = textArray.length - 1; 0 <= ref4 ? m <= ref4 : m >= ref4; i = 0 <= ref4 ? ++m : --m) {\n      tempSpanEl = document.createElementNS(svgNSi, \"tspan\");\n      tempSpanEl.setAttributeNS(null, \"x\", xLeft);\n      tempSpanEl.setAttributeNS(null, \"y\", yLeft);\n      tempSpanEl.setAttributeNS(null, \"dy\", maxLineHeight / 2);\n      tempTextNode = document.createTextNode(textArray[i][0]);\n      tempSpanEl.appendChild(tempTextNode);\n      leftCell.appendChild(tempSpanEl);\n      if (maxNumVotes === 0 || startingData.result[i].num_votes === 0) {\n        barWidth = 2;\n      } else {\n        barWidth = startingData.result[i].num_votes / maxNumVotes * maxBarWidth;\n      }\n      this.obj4 = this.paper.rect(xBar, yBar, barWidth, barHeight, 0);\n      this.obj4.attr(\"stroke\", \"#333333\");\n      this.obj4.attr(\"fill\", \"#333333\");\n      this.obj4.attr(\"stroke-width\", zoomStroke(formatThickness(0)));\n      objects.push(this.obj4);\n      tempSpanEl = document.createElementNS(svgNSi, \"tspan\");\n      tempSpanEl.setAttributeNS(null, \"x\", xRight);\n      tempSpanEl.setAttributeNS(null, \"y\", yRight);\n      tempSpanEl.setAttributeNS(null, \"dy\", maxLineHeight / 2);\n      tempTextNode = document.createTextNode(textArray[i][2]);\n      tempSpanEl.appendChild(tempTextNode);\n      rightCell.appendChild(tempSpanEl);\n      yBar = yBar + barHeight + verticalPadding;\n      yLeft = yLeft + barHeight + verticalPadding;\n      yRight = yRight + barHeight + verticalPadding;\n    }\n    this.obj5 = this.paper.text(x, y, \"\");\n    this.obj5.attr({\n      \"fill\": \"#333333\",\n      \"font-family\": \"Arial\",\n      \"font-size\": calcFontSize\n    });\n    centerCell = this.obj5.node;\n    while ((centerCell != null) && centerCell.hasChildNodes()) {\n      centerCell.removeChild(centerCell.firstChild);\n    }\n    xNumVotesDefault = x + maxLeftWidth + horizontalPadding * 2;\n    xNumVotesMovedRight = xNumVotesDefault + barWidth / 2 + horizontalPadding + maxDigitWidth / 2;\n    yNumVotes = y + verticalPadding - magicNumber;\n    color = \"white\";\n    for (i = n = 0, ref5 = textArray.length - 1; 0 <= ref5 ? n <= ref5 : n >= ref5; i = 0 <= ref5 ? ++n : --n) {\n      if (maxNumVotes === 0 || startingData.result[i].num_votes === 0) {\n        barWidth = 2;\n      } else {\n        barWidth = startingData.result[i].num_votes / maxNumVotes * maxBarWidth;\n      }\n      if (barWidth < maxDigitWidth + 8) {\n        xNumVotes = xNumVotesMovedRight;\n        color = \"#333333\";\n      } else {\n        xNumVotes = xNumVotesDefault;\n        color = \"white\";\n      }\n      tempSpanEl = document.createElementNS(svgNSi, \"tspan\");\n      tempSpanEl.setAttributeNS(null, \"x\", xNumVotes + barWidth / 2);\n      tempSpanEl.setAttributeNS(null, \"y\", yNumVotes + barHeight / 2);\n      tempSpanEl.setAttributeNS(null, \"dy\", maxLineHeight / 2);\n      tempSpanEl.setAttributeNS(null, \"fill\", color);\n      tempTextNode = document.createTextNode(startingData.result[i].num_votes);\n      tempSpanEl.appendChild(tempTextNode);\n      centerCell.appendChild(tempSpanEl);\n      yNumVotes = yNumVotes + barHeight + verticalPadding;\n    }\n    objects.push(this.obj5);\n    return objects;\n  };\n\n  WhiteboardPollModel.prototype.update = function(startingData) {};\n\n  return WhiteboardPollModel;\n\n})(WhiteboardToolModel);\n\ncalculateFontAndWidth = function(textArray, calcFontSize, width, height, x, y) {\n  var calculatedData, flag, i, j, k, l, len, line, m, maxDigitWidth, maxLeftWidth, maxLineHeight, maxLineWidth, maxRightWidth, ref, ref1, spanHeight, spanWidth, test;\n  calculatedData = [];\n  maxLineWidth = width / 3;\n  maxLineHeight = height * 0.75 / (textArray != null ? textArray.length : void 0);\n  flag = true;\n  while (flag) {\n    flag = false;\n    for (i = k = 0, ref = textArray.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {\n      for (j = l = 0, ref1 = textArray[i].length - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {\n        test = getRenderedTextSize(textArray[i][j], calcFontSize);\n        spanWidth = test[0];\n        spanHeight = test[1];\n        if (spanWidth > maxLineWidth || spanHeight > maxLineHeight) {\n          calcFontSize -= 1;\n          flag = true;\n        }\n      }\n    }\n  }\n  calculatedData.push(calcFontSize);\n  maxLeftWidth = 0;\n  maxRightWidth = 0;\n  maxLineHeight = 0;\n  for (m = 0, len = textArray.length; m < len; m++) {\n    line = textArray[m];\n    test = getRenderedTextSize(line[0], calcFontSize);\n    spanWidth = test[0];\n    spanHeight = test[1];\n    if (spanWidth > maxLeftWidth) {\n      maxLeftWidth = spanWidth;\n    }\n    if (spanHeight > maxLineHeight) {\n      maxLineHeight = spanHeight;\n    }\n    test = getRenderedTextSize(line[2], calcFontSize);\n    spanWidth = test[0];\n    spanHeight = test[1];\n    if (spanWidth > maxRightWidth) {\n      maxRightWidth = spanWidth;\n    }\n    if (spanHeight > maxLineHeight) {\n      maxLineHeight = spanHeight;\n    }\n  }\n  test = getRenderedTextSize(\"0\", calcFontSize);\n  spanWidth = test[0];\n  spanHeight = test[1];\n  maxDigitWidth = spanWidth;\n  calculatedData.push(maxLeftWidth, maxRightWidth, maxLineHeight, maxDigitWidth);\n  return calculatedData;\n};\n\ngetRenderedTextSize = function(string, fontSize) {\n  var arrayTest, bBox, el, paper;\n  paper = Raphael(0, 0, 0, 0);\n  paper.canvas.style.visibility = 'hidden';\n  el = paper.text(0, 0, string);\n  el.attr(\"font-family\", \"Arial\");\n  el.attr(\"font-size\", fontSize);\n  bBox = el.getBBox();\n  paper.remove();\n  arrayTest = [];\n  arrayTest.push(bBox.width);\n  arrayTest.push(bBox.height);\n  paper.remove();\n  return arrayTest;\n};\n","sourceMap":{"version":3,"file":"/client/whiteboard_models/whiteboard_poll.coffee.js","sourceRoot":"","sources":["/client/whiteboard_models/whiteboard_poll.coffee"],"names":[],"mappings":"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","sourcesContent":["# A poll in the whiteboard\r\nclass @WhiteboardPollModel extends WhiteboardToolModel\r\n  constructor: (@paper) ->\r\n    super @paper\r\n\r\n    # the defintion of this shape, kept so we can redraw the shape whenever needed\r\n    # format: x1, y1, x2, y2, stroke color, thickness, fill\r\n    @definition = [0, 0, 0, 0, \"#333333\", \"2px\", \"#ffffff\"]\r\n    @paper\r\n\r\n  # Creates a polling in the paper\r\n  # @param  {number} x1                the x value of the top left corner\r\n  # @param  {number} y1                the y value of the top left corner\r\n  # @param  {number} x2                the x value of the bottom right corner\r\n  # @param  {number} y2                the y value of the bottom right corner\r\n  # @param  {number} thickness         the thickness of the object's line(s)\r\n  # @param  {string} backgroundColor   the background color of the base poll rectangle\r\n  # @param  {number} calcFontSize      the default font-size of the text objects\r\n  make: (startingData) =>\r\n    #data needed to create the first base rectangle filled with white color\r\n    x1 = startingData.points[0]\r\n    y1 = startingData.points[1]\r\n    x2 = startingData.points[2] + startingData.points[0] - 0.001\r\n    y2 = startingData.points[3] + startingData.points[1] - 0.001\r\n    thickness = 2\r\n    backgroundColor = \"#ffffff\"\r\n    verticalPadding = 0\r\n    horizontalPadding = 0\r\n    calcFontSize = 30\r\n    votesTotal = 0\r\n    maxNumVotes = 0\r\n    textArray = []\r\n\r\n    #creating an array of text objects for the labels, percentages and number inside line bars\r\n    if startingData.result?\r\n      #counting the total number of votes and finding the biggest number of votes\r\n      for i in [0..startingData.result.length-1]\r\n        votesTotal += startingData.result[i].num_votes\r\n        if maxNumVotes < startingData.result[i].num_votes\r\n          maxNumVotes = startingData.result[i].num_votes\r\n        textArray[i] = []\r\n      #filling the array with proper text objects to display\r\n      for i in [0..startingData.result.length-1]\r\n        textArray[i].push(startingData.result[i].key, startingData.result[i].num_votes+\"\")\r\n        if votesTotal is 0\r\n          textArray[i].push(\"0%\")\r\n        else\r\n          percResult = startingData.result[i].num_votes/votesTotal*100;\r\n          textArray[i].push(Math.round(percResult) + \"%\")\r\n\r\n    #if coordinates are reversed - change them back\r\n    if x2 < x1\r\n        [x1, x2] = [x2, x1]\r\n    if y2 < y1\r\n      [y1, y2] = [y2, y1]\r\n\r\n    #Params:\r\n    #x      - the actual calculated x value of the top left corner of the polling area\r\n    #y      - the actual calculated y value of the top left corner of the polling area\r\n    #width  - the width of the polling area\r\n    #height - the height of the polling area\r\n    x = x1 * @gw + @xOffset\r\n    y = y1 * @gh + @yOffset\r\n    width = (x2 * @gw + @xOffset) - x\r\n    height = (y2 * @gh + @yOffset) - y\r\n\r\n    #creating a base outer rectangle\r\n    @obj = @paper.rect(x, y, width, height, 0)\r\n    @obj.attr \"fill\", backgroundColor\r\n    @obj.attr \"stroke-width\", 0\r\n    @definition =\r\n      shape: \"poll_result\"\r\n      data: [x1, y1, x2, y2, @obj.attrs[\"stroke\"], @obj.attrs[\"stroke-width\"], @obj.attrs[\"fill\"]]\r\n\r\n    #recalculated coordinates, width and height for the inner rectangle\r\n    width = width*0.95\r\n    height = height - width*0.05\r\n    x = x+width*0.025\r\n    y = y+width*0.025\r\n\r\n    #creating a base inner rectangle\r\n    @obj1 = @paper.rect(x, y, width, height, 0)\r\n    @obj1.attr \"stroke\", \"#333333\"\r\n    @obj1.attr \"fill\", backgroundColor\r\n    @obj1.attr \"stroke-width\", zoomStroke(formatThickness(thickness))\r\n    @definition =\r\n      shape: \"poll_result\"\r\n      data: [x1, y1, x2, y2, @obj.attrs[\"stroke\"], @obj1.attrs[\"stroke-width\"], @obj1.attrs[\"fill\"]]\r\n\r\n    #Calculating a proper font-size, and the maximum widht and height of the objects\r\n    calculatedData = calculateFontAndWidth(textArray, calcFontSize, width, height, x, y)\r\n    calcFontSize = calculatedData[0]\r\n    maxLeftWidth = calculatedData[1]\r\n    maxRightWidth = calculatedData[2]\r\n    maxLineHeight = calculatedData[3]\r\n    maxDigitWidth = calculatedData[4]\r\n    maxBarWidth = width*0.9-maxLeftWidth-maxRightWidth\r\n    barHeight = height*0.75/textArray.length\r\n    svgNSi = \"http://www.w3.org/2000/svg\"\r\n\r\n    #Initializing a text element for further calculations and for the left column of keys\r\n    @obj2 = @paper.text(x, y, \"\")\r\n    @obj2.attr\r\n      \"fill\": \"#333333\"\r\n      \"font-family\": \"Arial\"\r\n      \"font-size\": calcFontSize\r\n    @obj2.node.style[\"text-anchor\"] = \"start\" # force left align\r\n    @obj2.node.style[\"textAnchor\"] = \"start\"  # for firefox, 'cause they like to be different\r\n    leftCell = @obj2.node\r\n    while leftCell? and leftCell.hasChildNodes()\r\n      leftCell.removeChild(leftCell.firstChild)\r\n\r\n    #Initializing a text element for the right column of percentages\r\n    @obj3 = @paper.text(x, y, \"\")\r\n    @obj3.attr\r\n      \"fill\": \"#333333\"\r\n      \"font-family\": \"Arial\"\r\n      \"font-size\": calcFontSize\r\n    @obj3.node.style[\"text-anchor\"] = \"end\" # force right align\r\n    @obj3.node.style[\"textAnchor\"] = \"end\"  # for firefox, 'cause they like to be different\r\n    rightCell = @obj3.node\r\n    while rightCell? and rightCell.hasChildNodes()\r\n      rightCell.removeChild(rightCell.firstChild)\r\n\r\n\r\n    #setting a font size for the text elements on the left and on the right\r\n    leftCell.style['font-size'] = calcFontSize\r\n    rightCell.style['font-size'] = calcFontSize\r\n    #Horizontal padding\r\n    horizontalPadding = width*0.1/4\r\n    #Vertical padding\r\n    verticalPadding = height*0.25/(textArray.length+1)\r\n\r\n    #*****************************************************************************************************\r\n    #******************************************MAGIC NUMBER***********************************************\r\n    #There is no automatic vertical centering in SVG.\r\n    #To center the text element we have to move it down by the half of its height.\r\n    #But every text element has its own padding by default.\r\n    #The height we receive by calling getBBox() includes padding, but the anchor point doesn't consider it.\r\n    #This way the text element is moved down a little bit too much and we have to move it up a bit.\r\n    #Number 3.5 seems to work fine.\r\n    # Oleksandr Zhurbenko. August 19, 2015\r\n    magicNumber = 3.5\r\n    #*****************************************************************************************************\r\n\r\n    #Initial coordinates of the key column\r\n    yLeft = y+verticalPadding+barHeight/2 - magicNumber\r\n    xLeft = x + horizontalPadding + 1\r\n    #Initial coordinates of the line bar column\r\n    xBar = x+maxLeftWidth+horizontalPadding*2\r\n    yBar = y + verticalPadding\r\n    #Initial coordinates of the percentage column\r\n    yRight = y+verticalPadding+barHeight/2 - magicNumber\r\n    xRight = x + horizontalPadding*3 + maxLeftWidth + maxRightWidth + maxBarWidth + 1\r\n    objects = [@obj, @obj1, @obj2, @obj3]\r\n\r\n    for i in [0..textArray.length-1]\r\n      #Adding an element to the left column\r\n      tempSpanEl = document.createElementNS(svgNSi, \"tspan\")\r\n      tempSpanEl.setAttributeNS null, \"x\", xLeft\r\n      tempSpanEl.setAttributeNS null, \"y\", yLeft\r\n      tempSpanEl.setAttributeNS null, \"dy\", maxLineHeight/2\r\n      tempTextNode = document.createTextNode(textArray[i][0])\r\n      tempSpanEl.appendChild tempTextNode\r\n      leftCell.appendChild tempSpanEl\r\n\r\n      #drawing a black graph bar\r\n      if maxNumVotes is 0 or startingData.result[i].num_votes is 0\r\n        barWidth = 2\r\n      else\r\n        barWidth = startingData.result[i].num_votes / maxNumVotes * maxBarWidth\r\n      @obj4 = @paper.rect(xBar, yBar, barWidth, barHeight, 0)\r\n      @obj4.attr \"stroke\", \"#333333\"\r\n      @obj4.attr \"fill\", \"#333333\"\r\n      @obj4.attr \"stroke-width\", zoomStroke(formatThickness(0))\r\n      objects.push @obj4\r\n\r\n      #Adding an element to the right column\r\n      tempSpanEl = document.createElementNS(svgNSi, \"tspan\")\r\n      tempSpanEl.setAttributeNS null, \"x\", xRight\r\n      tempSpanEl.setAttributeNS null, \"y\", yRight\r\n      tempSpanEl.setAttributeNS null, \"dy\", maxLineHeight/2\r\n      tempTextNode = document.createTextNode(textArray[i][2])\r\n      tempSpanEl.appendChild tempTextNode\r\n      rightCell.appendChild tempSpanEl\r\n\r\n      #changing the Y coordinate for all the objects\r\n      yBar = yBar + barHeight + verticalPadding\r\n      yLeft = yLeft + barHeight + verticalPadding\r\n      yRight = yRight + barHeight + verticalPadding\r\n\r\n    #Initializing a text element for the number of votes text field inside the line bar\r\n    @obj5 = @paper.text(x, y, \"\")\r\n    @obj5.attr\r\n      \"fill\": \"#333333\"\r\n      \"font-family\": \"Arial\"\r\n      \"font-size\": calcFontSize\r\n    centerCell = @obj5.node\r\n    while centerCell? and centerCell.hasChildNodes()\r\n      centerCell.removeChild(centerCell.firstChild)\r\n\r\n    #Initial coordinates of the text inside the bar column\r\n    xNumVotesDefault = x+maxLeftWidth+horizontalPadding*2\r\n    xNumVotesMovedRight = xNumVotesDefault + barWidth/2 + horizontalPadding + maxDigitWidth/2\r\n    yNumVotes = y + verticalPadding - magicNumber\r\n    color = \"white\"\r\n    #Drawing the text element with the number of votes inside of the black line bars\r\n    #Or outside if a line bar is too small\r\n    for i in [0..textArray.length-1]\r\n      if maxNumVotes is 0 or startingData.result[i].num_votes is 0\r\n        barWidth = 2\r\n      else\r\n        barWidth = startingData.result[i].num_votes / maxNumVotes * maxBarWidth\r\n      if barWidth < maxDigitWidth + 8\r\n        xNumVotes = xNumVotesMovedRight\r\n        color = \"#333333\"\r\n      else\r\n        xNumVotes = xNumVotesDefault\r\n        color = \"white\"\r\n\r\n      tempSpanEl = document.createElementNS(svgNSi, \"tspan\")\r\n      tempSpanEl.setAttributeNS null, \"x\", xNumVotes + barWidth/2\r\n      tempSpanEl.setAttributeNS null, \"y\", yNumVotes + barHeight/2\r\n      tempSpanEl.setAttributeNS null, \"dy\", maxLineHeight/2\r\n      tempSpanEl.setAttributeNS null, \"fill\", color\r\n      tempTextNode = document.createTextNode(startingData.result[i].num_votes)\r\n      tempSpanEl.appendChild tempTextNode\r\n      centerCell.appendChild tempSpanEl\r\n      yNumVotes = yNumVotes + barHeight + verticalPadding\r\n\r\n    objects.push @obj5\r\n    objects\r\n\r\n\r\n  # Update the poll dimensions. Does nothing.\r\n  update: (startingData) ->\r\n\r\ncalculateFontAndWidth = (textArray, calcFontSize, width, height, x, y) ->\r\n    calculatedData = []\r\n    #maximum line width can be either 1/3 of the line or 40px\r\n    #maximum line height is 75% of the initial size of the box divided by the number of lines\r\n    maxLineWidth = width/3\r\n    maxLineHeight = height*0.75/textArray?.length\r\n\r\n    #calculating a proper font-size\r\n    flag = true\r\n    while flag\r\n      flag = false\r\n      for i in [0..textArray.length-1]\r\n        for j in [0..textArray[i].length-1]\r\n          test = getRenderedTextSize(textArray[i][j], calcFontSize)\r\n          spanWidth = test[0]\r\n          spanHeight = test[1]\r\n          if spanWidth > maxLineWidth or spanHeight > maxLineHeight\r\n            calcFontSize -= 1\r\n            flag = true\r\n    calculatedData.push calcFontSize\r\n\r\n    #looking for a maximum width and height of the left and right text elements\r\n    maxLeftWidth = 0\r\n    maxRightWidth = 0\r\n    maxLineHeight = 0\r\n    for line in textArray\r\n      test = getRenderedTextSize(line[0], calcFontSize)\r\n      spanWidth = test[0]\r\n      spanHeight = test[1]\r\n      if spanWidth > maxLeftWidth\r\n        maxLeftWidth = spanWidth\r\n      if spanHeight > maxLineHeight\r\n        maxLineHeight = spanHeight\r\n      test = getRenderedTextSize(line[2], calcFontSize)\r\n      spanWidth = test[0]\r\n      spanHeight = test[1]\r\n      if spanWidth > maxRightWidth\r\n        maxRightWidth = spanWidth\r\n      if spanHeight > maxLineHeight\r\n        maxLineHeight = spanHeight\r\n\r\n    test = getRenderedTextSize(\"0\", calcFontSize)\r\n    spanWidth = test[0]\r\n    spanHeight = test[1]\r\n    maxDigitWidth = spanWidth\r\n    calculatedData.push maxLeftWidth, maxRightWidth, maxLineHeight, maxDigitWidth\r\n    calculatedData\r\n\r\n\r\n  getRenderedTextSize = (string, fontSize) ->\r\n    paper = Raphael(0, 0, 0, 0)\r\n    paper.canvas.style.visibility = 'hidden'\r\n    el = paper.text(0, 0, string)\r\n    el.attr \"font-family\", \"Arial\"\r\n    el.attr \"font-size\", fontSize\r\n    bBox = el.getBBox()\r\n    paper.remove()\r\n    arrayTest = []\r\n    arrayTest.push bBox.width\r\n    arrayTest.push bBox.height\r\n    paper.remove()\r\n    arrayTest\r\n"]}}