{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({\n  publishVoteMessage: function(meetingId, pollAnswerId, requesterUserId, requesterToken) {\n    var _poll_id, eventName, message, result;\n    if (isAllowedTo(\"subscribePoll\", meetingId, requesterUserId, requesterToken)) {\n      eventName = \"vote_poll_user_request_message\";\n      result = Meteor.Polls.findOne({\n        \"poll_info.users\": requesterUserId,\n        \"poll_info.meetingId\": meetingId,\n        \"poll_info.poll.answers.id\": pollAnswerId\n      }, {\n        fields: {\n          \"poll_info.poll.id\": 1,\n          _id: 0\n        }\n      });\n      _poll_id = result.poll_info.poll.id;\n      if ((eventName != null) && (meetingId != null) && (requesterUserId != null) && (_poll_id != null) && (pollAnswerId != null)) {\n        message = {\n          header: {\n            timestamp: new Date().getTime(),\n            name: eventName\n          },\n          payload: {\n            meeting_id: meetingId,\n            user_id: requesterUserId,\n            poll_id: _poll_id,\n            question_id: 0,\n            answer_id: pollAnswerId\n          }\n        };\n        Meteor.Polls.update({\n          \"poll_info.users\": requesterUserId,\n          \"poll_info.meetingId\": meetingId,\n          \"poll_info.poll.answers.id\": pollAnswerId\n        }, {\n          $pull: {\n            \"poll_info.users\": requesterUserId\n          }\n        });\n        Meteor.log.info(\"publishing Poll response to redis\");\n        return publish(Meteor.config.redis.channels.toBBBApps.polling, message);\n      }\n    }\n  }\n});\n\nthis.addPollToCollection = function(poll, requester_id, users, meetingId) {\n  var _users, answer, entry, i, j, len, len1, ref, user;\n  _users = [];\n  for (i = 0, len = users.length; i < len; i++) {\n    user = users[i];\n    _users.push(user.user.userid);\n  }\n  ref = poll.answers;\n  for (j = 0, len1 = ref.length; j < len1; j++) {\n    answer = ref[j];\n    answer.num_votes = 0;\n  }\n  poll.num_responders = -1;\n  poll.num_respondents = -1;\n  entry = {\n    poll_info: {\n      \"meetingId\": meetingId,\n      \"poll\": poll,\n      \"requester\": requester_id,\n      \"users\": _users\n    }\n  };\n  Meteor.log.info(\"added poll _id=[\" + poll.id + \"]:meetingId=[\" + meetingId + \"].\");\n  return Meteor.Polls.insert(entry);\n};\n\nthis.clearPollCollection = function(meetingId, poll_id) {\n  if ((meetingId != null) && (poll_id != null) && (Meteor.Polls.findOne({\n    \"poll_info.meetingId\": meetingId,\n    \"poll_info.poll.id\": poll_id\n  }) != null)) {\n    return Meteor.Polls.remove({\n      \"poll_info.meetingId\": meetingId,\n      \"poll_info.poll.id\": poll_id\n    }, Meteor.log.info(\"cleared Polls Collection (meetingId: \" + meetingId + \", pollId: \" + poll_id + \"!)\"));\n  } else {\n    return Meteor.Polls.remove({}, Meteor.log.info(\"cleared Polls Collection (all meetings)!\"));\n  }\n};\n\nthis.updatePollCollection = function(poll, meetingId, requesterId) {\n  if ((poll.answers != null) && (poll.num_responders != null) && (poll.num_respondents != null) && (poll.id != null) && (meetingId != null) && (requesterId != null)) {\n    return Meteor.Polls.update({\n      \"poll_info.meetingId\": meetingId,\n      \"poll_info.requester\": requesterId,\n      \"poll_info.poll.id\": poll.id\n    }, {\n      $set: {\n        \"poll_info.poll.answers\": poll.answers,\n        \"poll_info.poll.num_responders\": poll.num_responders,\n        \"poll_info.poll.num_respondents\": poll.num_respondents\n      }\n    }, Meteor.log.info(\"updating Polls Collection (meetingId: \" + meetingId + \", pollId: \" + poll.id + \"!)\"));\n  }\n};\n","sourceMap":{"version":3,"file":"/server/collection_methods/poll.coffee.js","sourceRoot":"","sources":["/server/collection_methods/poll.coffee"],"names":[],"mappings":"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","sourcesContent":["# --------------------------------------------------------------------------------------------\r\n# Public methods on server\r\n# --------------------------------------------------------------------------------------------\r\nMeteor.methods\r\n\r\n  publishVoteMessage: (meetingId, pollAnswerId, requesterUserId, requesterToken) ->\r\n    if isAllowedTo(\"subscribePoll\", meetingId, requesterUserId, requesterToken)\r\n      eventName = \"vote_poll_user_request_message\"\r\n\r\n      result = Meteor.Polls.findOne({\"poll_info.users\": requesterUserId, \"poll_info.meetingId\": meetingId, \"poll_info.poll.answers.id\": pollAnswerId},\r\n        {fields: {\"poll_info.poll.id\": 1, _id: 0}})\r\n      _poll_id = result.poll_info.poll.id\r\n\r\n      if eventName? and meetingId? and requesterUserId? and _poll_id? and pollAnswerId?\r\n        message =\r\n          header:\r\n            timestamp: new Date().getTime()\r\n            name: eventName\r\n          payload:\r\n            meeting_id: meetingId\r\n            user_id: requesterUserId\r\n            poll_id: _poll_id\r\n            question_id: 0\r\n            answer_id: pollAnswerId\r\n\r\n        Meteor.Polls.update({\"poll_info.users\": requesterUserId, \"poll_info.meetingId\": meetingId, \"poll_info.poll.answers.id\": pollAnswerId},\r\n          { $pull: {\"poll_info.users\": requesterUserId}});\r\n\r\n        Meteor.log.info \"publishing Poll response to redis\"\r\n        publish Meteor.config.redis.channels.toBBBApps.polling, message\r\n\r\n\r\n# --------------------------------------------------------------------------------------------\r\n# Private methods on server\r\n# --------------------------------------------------------------------------------------------\r\n@addPollToCollection = (poll, requester_id, users, meetingId) ->\r\n  #copying all the userids into an array\r\n  _users = []\r\n  for user in users\r\n    _users.push user.user.userid\r\n  #adding the initial number of votes for each answer\r\n  for answer in poll.answers\r\n    answer.num_votes = 0\r\n  #adding the initial number of responders and respondents to the poll, which will be displayed for presenter (in HTML5 client) when he starts the poll\r\n  poll.num_responders = -1\r\n  poll.num_respondents = -1\r\n\r\n  #adding all together and inserting into the Polls collection\r\n  entry =\r\n    poll_info:\r\n      \"meetingId\": meetingId\r\n      \"poll\": poll\r\n      \"requester\": requester_id\r\n      \"users\": _users\r\n  Meteor.log.info \"added poll _id=[#{poll.id}]:meetingId=[#{meetingId}].\"\r\n  Meteor.Polls.insert(entry)\r\n\r\n@clearPollCollection = (meetingId, poll_id) ->\r\n  if meetingId? and poll_id? and Meteor.Polls.findOne({\"poll_info.meetingId\": meetingId, \"poll_info.poll.id\": poll_id})?\r\n    Meteor.Polls.remove({\r\n      \"poll_info.meetingId\": meetingId, \r\n      \"poll_info.poll.id\": poll_id}, \r\n      Meteor.log.info \"cleared Polls Collection (meetingId: #{meetingId}, pollId: #{poll_id}!)\")\r\n  else\r\n    Meteor.Polls.remove({}, Meteor.log.info \"cleared Polls Collection (all meetings)!\")\r\n\r\n@updatePollCollection = (poll, meetingId, requesterId) ->\r\n  if poll.answers? and poll.num_responders? and poll.num_respondents? and poll.id? and meetingId? and requesterId?\r\n    Meteor.Polls.update({\"poll_info.meetingId\": meetingId, \"poll_info.requester\": requesterId, \"poll_info.poll.id\": poll.id},\r\n      {$set:\r\n        {\"poll_info.poll.answers\": poll.answers, \"poll_info.poll.num_responders\": poll.num_responders, \"poll_info.poll.num_respondents\": poll.num_respondents}\r\n      }, Meteor.log.info \"updating Polls Collection (meetingId: #{meetingId}, pollId: #{poll.id}!)\")\r\n"]}}