{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.addMeetingToCollection = function(meetingId, name, intendedForRecording, voiceConf, duration, callback) {\n  var obj;\n  return obj = Meteor.Meetings.upsert({\n    meetingId: meetingId\n  }, {\n    $set: {\n      meetingName: name,\n      intendedForRecording: intendedForRecording,\n      currentlyBeingRecorded: false,\n      voiceConf: voiceConf,\n      duration: duration,\n      roomLockSettings: {\n        disablePrivateChat: false,\n        disableCam: false,\n        disableMic: false,\n        lockOnJoin: Meteor.config.lockOnJoin,\n        lockedLayout: false,\n        disablePublicChat: false,\n        lockOnJoinConfigurable: false\n      }\n    }\n  }, (function(_this) {\n    return function(err, numChanged) {\n      var funct;\n      if (numChanged.insertedId != null) {\n        funct = function(cbk) {\n          Meteor.log.info(\"__added MEETING \" + meetingId);\n          return cbk();\n        };\n        return funct(callback);\n      } else {\n        Meteor.log.error(\"nothing happened\");\n        return callback();\n      }\n    };\n  })(this));\n};\n\nthis.clearMeetingsCollection = function(meetingId) {\n  if (meetingId != null) {\n    return Meteor.Meetings.remove({\n      meetingId: meetingId\n    }, Meteor.log.info(\"cleared Meetings Collection (meetingId: \" + meetingId + \"!\"));\n  } else {\n    return Meteor.Meetings.remove({}, Meteor.log.info(\"cleared Meetings Collection (all meetings)!\"));\n  }\n};\n\nthis.removeMeetingFromCollection = function(meetingId, callback) {\n  var funct;\n  if (Meteor.Meetings.findOne({\n    meetingId: meetingId\n  }) != null) {\n    Meteor.log.info(\"end of meeting \" + meetingId + \". Clear the meeting data from all collections\");\n    clearUsersCollection(meetingId);\n    clearSlidesCollection(meetingId);\n    clearShapesCollection(meetingId);\n    clearPresentationsCollection(meetingId);\n    clearChatCollection(meetingId);\n    clearMeetingsCollection(meetingId);\n    return callback();\n  } else {\n    funct = function(localCallback) {\n      Meteor.log.error(\"Error! There was no such meeting \" + meetingId);\n      return localCallback();\n    };\n    return funct(callback);\n  }\n};\n","sourceMap":{"version":3,"file":"/server/collection_methods/meetings.coffee.js","sourceRoot":"","sources":["/server/collection_methods/meetings.coffee"],"names":[],"mappings":";AAIA,IAAC,CAAA,sBAAD,GAA0B,SAAC,SAAD,EAAY,IAAZ,EAAkB,oBAAlB,EAAwC,SAAxC,EAAmD,QAAnD,EAA6D,QAA7D,GAAA;AAGzB,MAAA,GAAA;SAAA,GAAA,GAAM,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAuB;AAAA,IAAC,SAAA,EAAU,SAAX;GAAvB,EAA8C;AAAA,IAAC,IAAA,EAAM;AAAA,MAC1D,WAAA,EAAY,IAD8C;AAAA,MAE1D,oBAAA,EAAsB,oBAFoC;AAAA,MAG1D,sBAAA,EAAwB,KAHkC;AAAA,MAI1D,SAAA,EAAW,SAJ+C;AAAA,MAK1D,QAAA,EAAU,QALgD;AAAA,MAM1D,gBAAA,EAEC;AAAA,QAAA,kBAAA,EAAoB,KAApB;AAAA,QACA,UAAA,EAAY,KADZ;AAAA,QAEA,UAAA,EAAY,KAFZ;AAAA,QAGA,UAAA,EAAY,MAAM,CAAC,MAAM,CAAC,UAH1B;AAAA,QAIA,YAAA,EAAc,KAJd;AAAA,QAKA,iBAAA,EAAmB,KALnB;AAAA,QAMA,sBAAA,EAAwB,KANxB;OARyD;KAAP;GAA9C,EAeF,CAAA,SAAA,KAAA,GAAA;WAAA,SAAC,GAAD,EAAM,UAAN,GAAA;AACH,UAAA,KAAA;AAAA,MAAA,IAAG,6BAAH;AACC,QAAA,KAAA,GAAQ,SAAC,GAAD,GAAA;AACP,UAAA,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,kBAAA,GAAmB,SAAnC,CAAA,CAAA;iBACA,GAAA,CAAA,EAFO;QAAA,CAAR,CAAA;eAGA,KAAA,CAAM,QAAN,EAJD;OAAA,MAAA;AAMC,QAAA,MAAM,CAAC,GAAG,CAAC,KAAX,CAAiB,kBAAjB,CAAA,CAAA;eACA,QAAA,CAAA,EAPD;OADG;IAAA,EAAA;EAAA,CAAA,CAAA,CAAA,IAAA,CAfE,EAHmB;AAAA,CAA1B,CAAA;;AAAA,IA+BC,CAAA,uBAAD,GAA2B,SAAC,SAAD,GAAA;AAC1B,EAAA,IAAG,iBAAH;WACC,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAuB;AAAA,MAAC,SAAA,EAAW,SAAZ;KAAvB,EACC,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,0CAAA,GAA2C,SAA3C,GAAqD,GAArE,CADD,EADD;GAAA,MAAA;WAIC,MAAM,CAAC,QAAQ,CAAC,MAAhB,CAAuB,EAAvB,EAA2B,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,6CAAhB,CAA3B,EAJD;GAD0B;AAAA,CA/B3B,CAAA;;AAAA,IAwCC,CAAA,2BAAD,GAA+B,SAAC,SAAD,EAAY,QAAZ,GAAA;AAC9B,MAAA,KAAA;AAAA,EAAA,IAAG;;YAAH;AACC,IAAA,MAAM,CAAC,GAAG,CAAC,IAAX,CAAgB,iBAAA,GAAkB,SAAlB,GAA4B,+CAA5C,CAAA,CAAA;AAAA,IAEA,oBAAA,CAAqB,SAArB,CAFA,CAAA;AAAA,IAKA,qBAAA,CAAsB,SAAtB,CALA,CAAA;AAAA,IAQA,qBAAA,CAAsB,SAAtB,CARA,CAAA;AAAA,IAWA,4BAAA,CAA6B,SAA7B,CAXA,CAAA;AAAA,IAcA,mBAAA,CAAoB,SAApB,CAdA,CAAA;AAAA,IAiBA,uBAAA,CAAwB,SAAxB,CAjBA,CAAA;WAmBA,QAAA,CAAA,EApBD;GAAA,MAAA;AAsBC,IAAA,KAAA,GAAQ,SAAC,aAAD,GAAA;AACP,MAAA,MAAM,CAAC,GAAG,CAAC,KAAX,CAAkB,mCAAA,GAAoC,SAAtD,CAAA,CAAA;aACA,aAAA,CAAA,EAFO;IAAA,CAAR,CAAA;WAGA,KAAA,CAAM,QAAN,EAzBD;GAD8B;AAAA,CAxC/B,CAAA","sourcesContent":["# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n\n@addMeetingToCollection = (meetingId, name, intendedForRecording, voiceConf, duration, callback) ->\n\t#check if the meeting is already in the collection\n\n\tobj = Meteor.Meetings.upsert({meetingId:meetingId}, {$set: {\n\t\tmeetingName:name\n\t\tintendedForRecording: intendedForRecording\n\t\tcurrentlyBeingRecorded: false # default value\n\t\tvoiceConf: voiceConf\n\t\tduration: duration\n\t\troomLockSettings:\n\t\t\t# by default the lock settings will be disabled on meeting create\n\t\t\tdisablePrivateChat: false\n\t\t\tdisableCam: false\n\t\t\tdisableMic: false\n\t\t\tlockOnJoin: Meteor.config.lockOnJoin\n\t\t\tlockedLayout: false\n\t\t\tdisablePublicChat: false\n\t\t\tlockOnJoinConfigurable: false # TODO\n\t}}, (err, numChanged) =>\n\t\tif numChanged.insertedId?\n\t\t\tfunct = (cbk) ->\n\t\t\t\tMeteor.log.info \"__added MEETING #{meetingId}\"\n\t\t\t\tcbk()\n\t\t\tfunct(callback)\n\t\telse\n\t\t\tMeteor.log.error \"nothing happened\"\n\t\t\tcallback()\n\t)\n\n\n\n@clearMeetingsCollection = (meetingId) ->\n\tif meetingId?\n\t\tMeteor.Meetings.remove({meetingId: meetingId},\n\t\t\tMeteor.log.info \"cleared Meetings Collection (meetingId: #{meetingId}!\")\n\telse\n\t\tMeteor.Meetings.remove({}, Meteor.log.info \"cleared Meetings Collection (all meetings)!\")\n\n\n#clean up upon a meeting's end\n@removeMeetingFromCollection = (meetingId, callback) ->\n\tif Meteor.Meetings.findOne({meetingId: meetingId})?\n\t\tMeteor.log.info \"end of meeting #{meetingId}. Clear the meeting data from all collections\"\n\t\t# delete all users in the meeting\n\t\tclearUsersCollection(meetingId)\n\n\t\t# delete all slides in the meeting\n\t\tclearSlidesCollection(meetingId)\n\n\t\t# delete all shapes in the meeting\n\t\tclearShapesCollection(meetingId)\n\n\t\t# delete all presentations in the meeting\n\t\tclearPresentationsCollection(meetingId)\n\n\t\t# delete all chat messages in the meeting\n\t\tclearChatCollection(meetingId)\n\n\t\t# delete the meeting\n\t\tclearMeetingsCollection(meetingId)\n\n\t\tcallback()\n\telse\n\t\tfunct = (localCallback) ->\n\t\t\tMeteor.log.error (\"Error! There was no such meeting #{meetingId}\")\n\t\t\tlocalCallback()\n\t\tfunct(callback)\n\n\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n"]}}