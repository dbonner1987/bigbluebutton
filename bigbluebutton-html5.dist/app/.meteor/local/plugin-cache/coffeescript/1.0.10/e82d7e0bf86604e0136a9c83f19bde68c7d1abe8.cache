{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.addShapeToCollection = function(meetingId, whiteboardId, shapeObject) {\n  var entry, id, removeTempTextShape;\n  if ((shapeObject != null ? shapeObject.shape_type : void 0) === \"text\") {\n    Meteor.log.info(\"we are dealing with a text shape and the event is:\" + shapeObject.status);\n    entry = {\n      meetingId: meetingId,\n      whiteboardId: whiteboardId,\n      shape: {\n        type: shapeObject.shape.type,\n        textBoxHeight: shapeObject.shape.textBoxHeight,\n        backgroundColor: shapeObject.shape.backgroundColor,\n        fontColor: shapeObject.shape.fontColor,\n        status: shapeObject.shape.status,\n        dataPoints: shapeObject.shape.dataPoints,\n        x: shapeObject.shape.x,\n        textBoxWidth: shapeObject.shape.textBoxWidth,\n        whiteboardId: shapeObject.shape.whiteboardId,\n        fontSize: shapeObject.shape.fontSize,\n        id: shapeObject.shape.id,\n        y: shapeObject.shape.y,\n        calcedFontSize: shapeObject.shape.calcedFontSize,\n        text: shapeObject.shape.text,\n        background: shapeObject.shape.background\n      }\n    };\n    if (shapeObject.status === \"textEdited\" || shapeObject.status === \"textPublished\") {\n      removeTempTextShape = function(callback) {\n        Meteor.Shapes.remove({\n          'shape.id': shapeObject.shape.id\n        });\n        return callback();\n      };\n      return removeTempTextShape(function() {\n        var id;\n        id = Meteor.Shapes.insert(entry);\n        return Meteor.log.info(shapeObject.status + \" substituting the temp shapes with the newer one\");\n      });\n    }\n  } else {\n    if ((shapeObject != null ? shapeObject.status : void 0) === \"DRAW_END\" || ((shapeObject != null ? shapeObject.status : void 0) === \"DRAW_START\" && (shapeObject != null ? shapeObject.shape_type : void 0) === \"pencil\")) {\n      entry = {\n        meetingId: meetingId,\n        whiteboardId: whiteboardId,\n        shape: {\n          wb_id: shapeObject.wb_id,\n          shape_type: shapeObject.shape_type,\n          status: shapeObject.status,\n          id: shapeObject.id,\n          shape: {\n            type: shapeObject.shape.type,\n            status: shapeObject.shape.status,\n            points: shapeObject.shape.points,\n            whiteboardId: shapeObject.shape.whiteboardId,\n            id: shapeObject.shape.id,\n            square: shapeObject.shape.square,\n            transparency: shapeObject.shape.transparency,\n            thickness: shapeObject.shape.thickness,\n            color: shapeObject.shape.color,\n            result: shapeObject.shape.result,\n            num_respondents: shapeObject.shape.num_respondents,\n            num_responders: shapeObject.shape.num_responders\n          }\n        }\n      };\n      return id = Meteor.Shapes.insert(entry);\n    }\n  }\n};\n\nthis.removeAllShapesFromSlide = function(meetingId, whiteboardId) {\n  Meteor.log.info(\"removeAllShapesFromSlide__\" + whiteboardId);\n  if ((meetingId != null) && (whiteboardId != null) && (Meteor.Shapes.find({\n    meetingId: meetingId,\n    whiteboardId: whiteboardId\n  }) != null)) {\n    return Meteor.Shapes.remove({\n      meetingId: meetingId,\n      whiteboardId: whiteboardId\n    }, function() {\n      Meteor.log.info(\"clearing all shapes from slide\");\n      return Meteor.setTimeout(function() {\n        return Meteor.WhiteboardCleanStatus.update({\n          meetingId: meetingId\n        }, {\n          $set: {\n            in_progress: false\n          }\n        });\n      }, 1000);\n    });\n  }\n};\n\nthis.removeShapeFromSlide = function(meetingId, whiteboardId, shapeId) {\n  var shapeToRemove;\n  shapeToRemove = Meteor.Shapes.findOne({\n    meetingId: meetingId,\n    whiteboardId: whiteboardId,\n    \"shape.id\": shapeId\n  });\n  if ((meetingId != null) && (whiteboardId != null) && (shapeId != null) && (shapeToRemove != null)) {\n    Meteor.Shapes.remove(shapeToRemove._id);\n    Meteor.log.info(\"----removed shape[\" + shapeId + \"] from \" + whiteboardId);\n    return Meteor.log.info(\"remaining shapes on the slide:\" + Meteor.Shapes.find({\n      meetingId: meetingId,\n      whiteboardId: whiteboardId\n    }).count());\n  }\n};\n\nthis.clearShapesCollection = function(meetingId) {\n  if (meetingId != null) {\n    return Meteor.Shapes.remove({}, function() {\n      Meteor.log.info(\"cleared Shapes Collection (meetingId: \" + meetingId + \"!\");\n      return Meteor.WhiteboardCleanStatus.update({\n        meetingId: meetingId\n      }, {\n        $set: {\n          in_progress: false\n        }\n      });\n    });\n  } else {\n    return Meteor.Shapes.remove({}, function() {\n      Meteor.log.info(\"cleared Shapes Collection (all meetings)!\");\n      return Meteor.WhiteboardCleanStatus.update({\n        meetingId: meetingId\n      }, {\n        $set: {\n          in_progress: false\n        }\n      });\n    });\n  }\n};\n","sourceMap":{"version":3,"file":"/server/collection_methods/shapes.coffee.js","sourceRoot":"","sources":["/server/collection_methods/shapes.coffee"],"names":[],"mappings":"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","sourcesContent":["# --------------------------------------------------------------------------------------------\n# Private methods on server\n# --------------------------------------------------------------------------------------------\n@addShapeToCollection = (meetingId, whiteboardId, shapeObject) ->\n  if shapeObject?.shape_type is \"text\"\n    Meteor.log.info \"we are dealing with a text shape and the event is:#{shapeObject.status}\"\n\n    entry =\n      meetingId: meetingId\n      whiteboardId: whiteboardId\n      shape:\n        type: shapeObject.shape.type\n        textBoxHeight: shapeObject.shape.textBoxHeight\n        backgroundColor: shapeObject.shape.backgroundColor\n        fontColor: shapeObject.shape.fontColor\n        status: shapeObject.shape.status\n        dataPoints: shapeObject.shape.dataPoints\n        x: shapeObject.shape.x\n        textBoxWidth: shapeObject.shape.textBoxWidth\n        whiteboardId: shapeObject.shape.whiteboardId\n        fontSize: shapeObject.shape.fontSize\n        id: shapeObject.shape.id\n        y: shapeObject.shape.y\n        calcedFontSize: shapeObject.shape.calcedFontSize\n        text: shapeObject.shape.text\n        background: shapeObject.shape.background\n\n    if shapeObject.status is \"textEdited\" or shapeObject.status is \"textPublished\"\n      # only keep the final version of the text shape\n      removeTempTextShape = (callback) ->\n        Meteor.Shapes.remove({'shape.id':shapeObject.shape.id})\n        # for s in Meteor.Shapes.find({'shape.id':shapeObject.shape.id}).fetch()\n        #   Meteor.log.info \"there is this shape: #{s.shape.text}\"\n        callback()\n\n      removeTempTextShape( ->\n        # display as the prestenter is typing\n        id = Meteor.Shapes.insert(entry)\n        Meteor.log.info \"#{shapeObject.status} substituting the temp shapes with the newer one\"\n      )\n\n  else\n    # the mouse button was released - the drawing is complete\n    # TODO: pencil messages currently don't send draw_end and are labeled all as DRAW_START\n    if shapeObject?.status is \"DRAW_END\" or (shapeObject?.status is \"DRAW_START\" and shapeObject?.shape_type is \"pencil\")\n      entry =\n        meetingId: meetingId\n        whiteboardId: whiteboardId\n        shape:\n          wb_id: shapeObject.wb_id\n          shape_type: shapeObject.shape_type\n          status: shapeObject.status\n          id: shapeObject.id\n          shape:\n            type: shapeObject.shape.type\n            status: shapeObject.shape.status\n            points: shapeObject.shape.points\n            whiteboardId: shapeObject.shape.whiteboardId\n            id: shapeObject.shape.id\n            square: shapeObject.shape.square\n            transparency: shapeObject.shape.transparency\n            thickness: shapeObject.shape.thickness\n            color: shapeObject.shape.color\n            result: shapeObject.shape.result\n            num_respondents: shapeObject.shape.num_respondents\n            num_responders: shapeObject.shape.num_responders\n\n      id = Meteor.Shapes.insert(entry)\n\n@removeAllShapesFromSlide = (meetingId, whiteboardId) ->\n  Meteor.log.info \"removeAllShapesFromSlide__\" + whiteboardId\n  if meetingId? and whiteboardId? and Meteor.Shapes.find({meetingId: meetingId, whiteboardId: whiteboardId})?\n    Meteor.Shapes.remove {meetingId: meetingId, whiteboardId: whiteboardId}, ->\n      Meteor.log.info \"clearing all shapes from slide\"\n\n      # After shapes are cleared, wait 1 second and set cleaning off\n      Meteor.setTimeout ->\n        Meteor.WhiteboardCleanStatus.update({meetingId: meetingId}, {$set: {in_progress: false}})\n      , 1000\n\n@removeShapeFromSlide = (meetingId, whiteboardId, shapeId) ->\n  shapeToRemove = Meteor.Shapes.findOne({meetingId: meetingId, whiteboardId: whiteboardId, \"shape.id\": shapeId})\n  if meetingId? and whiteboardId? and shapeId? and shapeToRemove?\n    Meteor.Shapes.remove(shapeToRemove._id)\n    Meteor.log.info \"----removed shape[\" + shapeId + \"] from \" + whiteboardId\n    Meteor.log.info \"remaining shapes on the slide:\" + Meteor.Shapes.find({meetingId: meetingId, whiteboardId: whiteboardId}).count()\n\n\n# called on server start and meeting end\n@clearShapesCollection = (meetingId) ->\n  if meetingId?\n    Meteor.Shapes.remove {}, ->\n      Meteor.log.info \"cleared Shapes Collection (meetingId: #{meetingId}!\"\n      Meteor.WhiteboardCleanStatus.update({meetingId: meetingId}, {$set: {in_progress: false}})\n  else\n    Meteor.Shapes.remove {}, ->\n      Meteor.log.info \"cleared Shapes Collection (all meetings)!\"\n      Meteor.WhiteboardCleanStatus.update({meetingId: meetingId}, {$set: {in_progress: false}})\n\n# --------------------------------------------------------------------------------------------\n# end Private methods on server\n# --------------------------------------------------------------------------------------------\n"]}}