{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.WhiteboardPaperModel = (function() {\n  function WhiteboardPaperModel(container) {\n    this.container = container;\n    this.cursor = null;\n    this.slides = {};\n    this.panX = null;\n    this.panY = null;\n    this.current = {};\n    this.current.slide = null;\n    this.current.shapes = null;\n    this.current.shapeDefinitions = [];\n    this.zoomLevel = 1;\n    this.shiftPressed = false;\n    this.currentPathCount = 0;\n    this._updateContainerDimensions();\n    this.zoomObserver = null;\n    this.adjustedWidth = 0;\n    this.adjustedHeight = 0;\n    this.widthRatio = 100;\n    this.heightRatio = 100;\n  }\n\n  WhiteboardPaperModel.prototype.create = function() {\n    var h, w;\n    h = $(\"#\" + this.container).height();\n    w = $(\"#\" + this.container).width();\n    if (this.raphaelObj == null) {\n      this.raphaelObj = ScaleRaphael(this.container, w, h);\n    }\n    if (this.raphaelObj == null) {\n      this.raphaelObj = ScaleRaphael(this.container, $container.innerHeight(), $container.innerWidth());\n    }\n    this.raphaelObj.canvas.setAttribute(\"preserveAspectRatio\", \"xMinYMin slice\");\n    this.createCursor();\n    if (this.slides) {\n      this.rebuild();\n    } else {\n      this.slides = {};\n    }\n    if (navigator.userAgent.indexOf(\"Firefox\") !== -1) {\n      this.raphaelObj.renderfix();\n    }\n    return this.raphaelObj;\n  };\n\n  WhiteboardPaperModel.prototype.rebuild = function() {\n    var results, url;\n    this.current.slide = null;\n    results = [];\n    for (url in this.slides) {\n      if (this.slides.hasOwnProperty(url)) {\n        results.push(this.addImageToPaper(url, this.slides[url].getWidth(), this.slides[url].getHeight()));\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n  WhiteboardPaperModel.prototype.scale = function(width, height) {\n    var ref;\n    return (ref = this.raphaelObj) != null ? ref.changeSize(width, height) : void 0;\n  };\n\n  WhiteboardPaperModel.prototype.addImageToPaper = function(url, width, height) {\n    var cx, cy, img, max, sh, sw;\n    this._updateContainerDimensions();\n    max = Math.max(width / this.containerWidth, height / this.containerHeight);\n    url = this._slideUrl(url);\n    sw = width / max;\n    sh = height / max;\n    img = this.raphaelObj.image(url, cx = 0, cy = 0, width, height);\n    this.slides[url] = new WhiteboardSlideModel(img.id, url, img, width, height, sw, sh, cx, cy);\n    if (this.current.slide == null) {\n      img.toBack();\n      this.current.slide = this.slides[url];\n    } else if (this.current.slide.url === url) {\n      img.toBack();\n    } else {\n      img.hide();\n    }\n    this._updateContainerDimensions();\n    this._updateZoomRatios();\n    if (this.raphaelObj.w === 100) {\n      this.cursor.setRadius(0.65 * this.widthRatio / 100);\n    } else {\n      this.cursor.setRadius(6 * this.widthRatio / 100);\n    }\n    return img;\n  };\n\n  WhiteboardPaperModel.prototype.removeAllImagesFromPaper = function() {\n    var ref, ref1, url;\n    for (url in this.slides) {\n      if (this.slides.hasOwnProperty(url)) {\n        if ((ref = this.raphaelObj.getById((ref1 = this.slides[url]) != null ? ref1.getId() : void 0)) != null) {\n          ref.remove();\n        }\n      }\n    }\n    this.slides = {};\n    return this.current.slide = null;\n  };\n\n  WhiteboardPaperModel.prototype.setCurrentTool = function(tool) {\n    this.currentTool = tool;\n    console.log(\"setting current tool to\", tool);\n    switch (tool) {\n      case \"line\":\n        this.cursor.undrag();\n        this.current.line = this._createTool(tool);\n        return this.cursor.drag(this.current.line.dragOnMove, this.current.line.dragOnStart, this.current.line.dragOnEnd);\n      case \"rectangle\":\n        this.cursor.undrag();\n        this.current.rectangle = this._createTool(tool);\n        return this.cursor.drag(this.current.rectangle.dragOnMove, this.current.rectangle.dragOnStart, this.current.rectangle.dragOnEnd);\n      default:\n        return console.log(\"ERROR: Cannot set invalid tool:\", tool);\n    }\n  };\n\n  WhiteboardPaperModel.prototype.clearShapes = function() {\n    if (this.current.shapes != null) {\n      this.current.shapes.forEach(function(element) {\n        return element.remove();\n      });\n      this.current.shapeDefinitions = [];\n      this.current.shapes.clear();\n    }\n    this.clearCursor();\n    return this.createCursor();\n  };\n\n  WhiteboardPaperModel.prototype.clearCursor = function() {\n    var ref;\n    return (ref = this.cursor) != null ? ref.remove() : void 0;\n  };\n\n  WhiteboardPaperModel.prototype.createCursor = function() {\n    if (this.raphaelObj.w === 100) {\n      this.cursor = new WhiteboardCursorModel(this.raphaelObj, 0.65);\n      this.cursor.setRadius(0.65 * this.widthRatio / 100);\n    } else {\n      this.cursor = new WhiteboardCursorModel(this.raphaelObj);\n      this.cursor.setRadius(6 * this.widthRatio / 100);\n    }\n    return this.cursor.draw();\n  };\n\n  WhiteboardPaperModel.prototype.updateShape = function(shape, data) {\n    return this.current[shape].update(data);\n  };\n\n  WhiteboardPaperModel.prototype.makeShape = function(shape, data) {\n    var base, base1, i, len, obj, tool, toolModel;\n    data.thickness *= this.adjustedWidth / 1000;\n    tool = null;\n    this.current[shape] = this._createTool(shape);\n    toolModel = this.current[shape];\n    tool = this.current[shape].make(data);\n    if ((tool != null) && shape !== \"poll_result\") {\n      if ((base = this.current).shapes == null) {\n        base.shapes = this.raphaelObj.set();\n      }\n      this.current.shapes.push(tool);\n      this.current.shapeDefinitions.push(toolModel.getDefinition());\n    }\n    if ((tool != null) && shape === \"poll_result\") {\n      if ((base1 = this.current).shapes == null) {\n        base1.shapes = this.raphaelObj.set();\n      }\n      for (i = 0, len = tool.length; i < len; i++) {\n        obj = tool[i];\n        this.current.shapes.push(obj);\n      }\n      return this.current.shapeDefinitions.push(toolModel.getDefinition());\n    }\n  };\n\n  WhiteboardPaperModel.prototype.moveCursor = function(x, y) {\n    var cx, cy, ref, ref1, slideHeight, slideWidth;\n    ref = this._currentSlideOffsets(), cx = ref[0], cy = ref[1];\n    ref1 = this._currentSlideOriginalDimensions(), slideWidth = ref1[0], slideHeight = ref1[1];\n    this.cursor.setPosition(x * slideWidth + cx, y * slideHeight + cy);\n    if ((this.viewBoxXpos != null) && (this.viewBoxYPos != null) && (this.viewBoxWidth != null) && (this.viewBoxHeight != null)) {\n      return this.cursor.setPosition(this.viewBoxXpos + x * this.viewBoxWidth, this.viewBoxYPos + y * this.viewBoxHeight);\n    }\n  };\n\n  WhiteboardPaperModel.prototype.zoomAndPan = function(widthRatio, heightRatio, xOffset, yOffset) {\n    var newHeight, newWidth, newX, newY;\n    newX = -xOffset * 2 * this.adjustedWidth / 100;\n    newY = -yOffset * 2 * this.adjustedHeight / 100;\n    newWidth = this.adjustedWidth * widthRatio / 100;\n    newHeight = this.adjustedHeight * heightRatio / 100;\n    return this.raphaelObj.setViewBox(newX, newY, newWidth, newHeight);\n  };\n\n  WhiteboardPaperModel.prototype.setAdjustedDimensions = function(width, height) {\n    this.adjustedWidth = width;\n    return this.adjustedHeight = height;\n  };\n\n  WhiteboardPaperModel.prototype._updateContainerDimensions = function() {\n    var $container, containerDimensions, ref, ref1;\n    $container = $('#whiteboard-paper');\n    containerDimensions = scaleSlide(getInSession('slideOriginalWidth'), getInSession('slideOriginalHeight'));\n    if ($container.innerWidth() === 0) {\n      this.containerWidth = containerDimensions.boardWidth;\n    } else {\n      this.containerWidth = $container.innerWidth();\n    }\n    if ($container.innerHeight() === 0) {\n      this.containerHeight = containerDimensions.boardHeight;\n    } else {\n      this.containerHeight = $container.innerHeight();\n    }\n    this.containerOffsetLeft = (ref = $container.offset()) != null ? ref.left : void 0;\n    return this.containerOffsetTop = (ref1 = $container.offset()) != null ? ref1.top : void 0;\n  };\n\n  WhiteboardPaperModel.prototype._updateZoomRatios = function() {\n    var currentSlideDoc;\n    currentSlideDoc = getCurrentSlideDoc();\n    this.widthRatio = currentSlideDoc.slide.width_ratio;\n    return this.heightRatio = currentSlideDoc.slide.height_ratio;\n  };\n\n  WhiteboardPaperModel.prototype._getImageFromPaper = function(url) {\n    var id;\n    if (this.slides[url]) {\n      id = this.slides[url].getId();\n      if (id != null) {\n        return this.raphaelObj.getById(id);\n      }\n    }\n    return null;\n  };\n\n  WhiteboardPaperModel.prototype._currentSlideDimensions = function() {\n    if (this.current.slide != null) {\n      return this.current.slide.getDimensions();\n    } else {\n      return [0, 0];\n    }\n  };\n\n  WhiteboardPaperModel.prototype._currentSlideOriginalDimensions = function() {\n    if (this.current.slide != null) {\n      return this.current.slide.getOriginalDimensions();\n    } else {\n      return [0, 0];\n    }\n  };\n\n  WhiteboardPaperModel.prototype._currentSlideOffsets = function() {\n    if (this.current.slide != null) {\n      return this.current.slide.getOffsets();\n    } else {\n      return [0, 0];\n    }\n  };\n\n  WhiteboardPaperModel.prototype._createTool = function(type) {\n    var height, model, ref, ref1, ref2, slideHeight, slideWidth, tool, width, xOffset, yOffset;\n    switch (type) {\n      case \"pencil\":\n        model = WhiteboardLineModel;\n        break;\n      case \"path\":\n      case \"line\":\n        model = WhiteboardLineModel;\n        break;\n      case \"rectangle\":\n        model = WhiteboardRectModel;\n        break;\n      case \"ellipse\":\n        model = WhiteboardEllipseModel;\n        break;\n      case \"triangle\":\n        model = WhiteboardTriangleModel;\n        break;\n      case \"text\":\n        model = WhiteboardTextModel;\n        break;\n      case \"poll_result\":\n        model = WhiteboardPollModel;\n    }\n    if (model != null) {\n      ref = this._currentSlideOriginalDimensions(), slideWidth = ref[0], slideHeight = ref[1];\n      ref1 = this._currentSlideOffsets(), xOffset = ref1[0], yOffset = ref1[1];\n      ref2 = this._currentSlideDimensions(), width = ref2[0], height = ref2[1];\n      tool = new model(this.raphaelObj);\n      tool.setPaperSize(slideHeight, slideWidth);\n      tool.setOffsets(xOffset, yOffset);\n      tool.setPaperDimensions(width, height);\n      return tool;\n    } else {\n      return null;\n    }\n  };\n\n  WhiteboardPaperModel.prototype._slideUrl = function(url) {\n    if (url != null ? url.match(/http[s]?:/) : void 0) {\n      return url;\n    } else {\n      return console.log(\"The url '\" + url + \"'' did not match the expected format of: http/s\");\n    }\n  };\n\n  WhiteboardPaperModel.prototype._displayPage = function(data, originalWidth, originalHeight) {\n    var _this, boardHeight, boardWidth, currentPresentation, currentSlide, currentSlideCursor, presentationId, ref;\n    this.removeAllImagesFromPaper();\n    this._updateContainerDimensions();\n    boardWidth = this.containerWidth;\n    boardHeight = this.containerHeight;\n    currentSlide = getCurrentSlideDoc();\n    currentPresentation = Meteor.Presentations.findOne({\n      \"presentation.current\": true\n    });\n    presentationId = currentPresentation != null ? (ref = currentPresentation.presentation) != null ? ref.id : void 0 : void 0;\n    currentSlideCursor = Meteor.Slides.find({\n      \"presentationId\": presentationId,\n      \"slide.current\": true\n    });\n    if (this.zoomObserver !== null) {\n      this.zoomObserver.stop();\n    }\n    _this = this;\n    this.zoomObserver = currentSlideCursor.observe({\n      changed: function(newDoc, oldDoc) {\n        var newRatio, oldRatio, ref1, ref2;\n        if (originalWidth <= originalHeight) {\n          this.adjustedWidth = boardHeight * originalWidth / originalHeight;\n          this.adjustedHeight = boardHeight;\n        } else {\n          this.adjustedHeight = boardWidth * originalHeight / originalWidth;\n          this.adjustedWidth = boardWidth;\n        }\n        _this.zoomAndPan(newDoc.slide.width_ratio, newDoc.slide.height_ratio, newDoc.slide.x_offset, newDoc.slide.y_offset);\n        oldRatio = (oldDoc.slide.width_ratio + oldDoc.slide.height_ratio) / 2;\n        newRatio = (newDoc.slide.width_ratio + newDoc.slide.height_ratio) / 2;\n        if (_this != null) {\n          if ((ref1 = _this.current) != null) {\n            if ((ref2 = ref1.shapes) != null) {\n              ref2.forEach(function(shape) {\n                return shape.attr(\"stroke-width\", shape.attr('stroke-width') * oldRatio / newRatio);\n              });\n            }\n          }\n        }\n        if (_this.raphaelObj === 100) {\n          return _this.cursor.setRadius(0.65 * newDoc.slide.width_ratio / 100);\n        } else {\n          return _this.cursor.setRadius(6 * newDoc.slide.width_ratio / 100);\n        }\n      }\n    });\n    if (originalWidth <= originalHeight) {\n      this.adjustedWidth = boardHeight * originalWidth / originalHeight;\n      $('#whiteboard-paper').width(this.adjustedWidth);\n      this.addImageToPaper(data, this.adjustedWidth, boardHeight);\n      this.adjustedHeight = boardHeight;\n    } else {\n      this.adjustedHeight = boardWidth * originalHeight / originalWidth;\n      $('#whiteboard-paper').height(this.adjustedHeight);\n      this.addImageToPaper(data, boardWidth, this.adjustedHeight);\n      this.adjustedWidth = boardWidth;\n    }\n    return this.zoomAndPan(currentSlide.slide.width_ratio, currentSlide.slide.height_ratio, currentSlide.slide.x_offset, currentSlide.slide.y_offset);\n  };\n\n  return WhiteboardPaperModel;\n\n})();\n","sourceMap":{"version":3,"file":"/client/whiteboard_models/whiteboard_paper.coffee.js","sourceRoot":"","sources":["/client/whiteboard_models/whiteboard_paper.coffee"],"names":[],"mappings":"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","sourcesContent":["# \"Paper\" which is the Raphael term for the entire SVG object on the webpage.\n# This class deals with this SVG component only.\nclass Meteor.WhiteboardPaperModel\n\n  # Container must be a DOM element\n  constructor: (@container) ->\n    # a WhiteboardCursorModel\n    @cursor = null\n\n    # all slides in the presentation indexed by url\n    @slides = {}\n\n    @panX = null\n    @panY = null\n\n    @current = {}\n\n    # the slide being shown\n    @current.slide = null\n\n    # a raphaeljs set with all the shapes in the current slide\n    @current.shapes = null\n    # a list of shapes as passed to this client when it receives `all_slides`\n    # (se we are able to redraw the shapes whenever needed)\n    @current.shapeDefinitions = []\n\n    @zoomLevel = 1\n    @shiftPressed = false\n    @currentPathCount = 0\n\n    @_updateContainerDimensions()\n\n    @zoomObserver = null\n\n    @adjustedWidth = 0\n    @adjustedHeight = 0\n\n    @widthRatio = 100\n    @heightRatio = 100\n\n  # Initializes the paper in the page.\n  # Can't do these things in initialize() because by then some elements\n  # are not yet created in the page.\n  create: ->\n    # paper is embedded within the div#slide of the page.\n    # @raphaelObj ?= ScaleRaphael(@container, \"900\", \"500\")\n\n    h = $(\"#\"+@container).height()\n    w = $(\"#\"+@container).width()\n\n    @raphaelObj ?= ScaleRaphael(@container, w, h)\n    @raphaelObj ?= ScaleRaphael(@container, $container.innerHeight(), $container.innerWidth())\n\n    @raphaelObj.canvas.setAttribute \"preserveAspectRatio\", \"xMinYMin slice\"\n\n    @createCursor()\n\n    if @slides\n      @rebuild()\n    else\n      @slides = {} # if previously loaded\n    unless navigator.userAgent.indexOf(\"Firefox\") is -1\n      @raphaelObj.renderfix()\n\n    @raphaelObj\n\n  # Re-add the images to the paper that are found\n  # in the slides array (an object of urls and dimensions).\n  rebuild: ->\n    @current.slide = null\n    for url of @slides\n      if @slides.hasOwnProperty(url)\n        @addImageToPaper url, @slides[url].getWidth(), @slides[url].getHeight()\n\n  scale: (width, height) ->\n    @raphaelObj?.changeSize(width, height)\n\n  # Add an image to the paper.\n  # @param {string} url the URL of the image to add to the paper\n  # @param {number} width   the width of the image (in pixels)\n  # @param {number} height   the height of the image (in pixels)\n  # @return {Raphael.image} the image object added to the whiteboard\n  addImageToPaper: (url, width, height) ->\n    @_updateContainerDimensions()\n\n    # solve for the ratio of what length is going to fit more than the other\n    max = Math.max(width / @containerWidth, height / @containerHeight)\n    # fit it all in appropriately\n    url = @_slideUrl(url)\n    sw = width / max\n    sh = height / max\n    #cx = (@containerWidth / 2) - (width / 2)\n    #cy = (@containerHeight / 2) - (height / 2)\n    img = @raphaelObj.image(url, cx = 0, cy = 0, width, height)\n\n    # sw slide width as percentage of original width of paper\n    # sh slide height as a percentage of original height of paper\n    # x-offset from top left corner as percentage of original width of paper\n    # y-offset from top left corner as percentage of original height of paper\n    @slides[url] = new WhiteboardSlideModel(img.id, url, img, width, height, sw, sh, cx, cy)\n\n    unless @current.slide?\n      img.toBack()\n      @current.slide = @slides[url]\n    else if @current.slide.url is url\n      img.toBack()\n    else\n      img.hide()\n\n    # TODO: other places might also required an update in these dimensions\n    @_updateContainerDimensions()\n\n    @_updateZoomRatios()\n    if @raphaelObj.w is 100 # on first load: Raphael object is initially tiny\n      @cursor.setRadius(0.65 * @widthRatio / 100)\n    else\n      @cursor.setRadius(6 * @widthRatio / 100)\n\n    img\n\n  # Removes all the images from the Raphael paper.\n  removeAllImagesFromPaper: ->\n    for url of @slides\n      if @slides.hasOwnProperty(url)\n        @raphaelObj.getById(@slides[url]?.getId())?.remove()\n        #@trigger('paper:image:removed', @slides[url].getId()) # Removes the previous image preventing images from being redrawn over each other repeatedly\n    @slides = {}\n    @current.slide = null\n\n\n  # Switches the tool and thus the functions that get\n  # called when certain events are fired from Raphael.\n  # @param  {string} tool the tool to turn on\n  # @return {undefined}\n  setCurrentTool: (tool) ->\n    @currentTool = tool\n    console.log \"setting current tool to\", tool\n    switch tool\n      when \"line\"\n        @cursor.undrag()\n        @current.line = @_createTool(tool)\n        @cursor.drag(@current.line.dragOnMove, @current.line.dragOnStart, @current.line.dragOnEnd)\n      when \"rectangle\"\n        @cursor.undrag()\n        @current.rectangle = @_createTool(tool)\n        @cursor.drag(@current.rectangle.dragOnMove, @current.rectangle.dragOnStart, @current.rectangle.dragOnEnd)\n      else\n        console.log \"ERROR: Cannot set invalid tool:\", tool\n\n  # Clear all shapes from this paper.\n  clearShapes: ->\n    if @current.shapes?\n      @current.shapes.forEach (element) ->\n        element.remove()\n      @current.shapeDefinitions = []\n      @current.shapes.clear()\n    @clearCursor()\n    @createCursor()\n\n  clearCursor: ->\n    @cursor?.remove()\n\n  createCursor: ->\n    if @raphaelObj.w is 100 # on first load: Raphael object is initially tiny\n      @cursor = new WhiteboardCursorModel(@raphaelObj, 0.65)\n      @cursor.setRadius(0.65 * @widthRatio / 100)\n    else\n      @cursor = new WhiteboardCursorModel(@raphaelObj)\n      @cursor.setRadius(6 * @widthRatio / 100)\n    @cursor.draw()\n\n  # Updated a shape `shape` with the data in `data`.\n  # TODO: check if the objects exist before calling update, if they don't they should be created\n  updateShape: (shape, data) ->\n    @current[shape].update(data)\n\n  # Make a shape `shape` with the data in `data`.\n  makeShape: (shape, data) ->\n    data.thickness *= @adjustedWidth / 1000\n\n    tool = null\n    #TODO pay attention to this array, data in this array slows down the whiteboard\n    #console.log @current\n    #console.log @\n    @current[shape] = @_createTool(shape)\n    toolModel = @current[shape]\n    tool = @current[shape].make(data)\n\n    if tool? and shape isnt \"poll_result\"\n      @current.shapes ?= @raphaelObj.set()\n      @current.shapes.push(tool)\n      @current.shapeDefinitions.push(toolModel.getDefinition())\n\n    #We have a separate case for Poll as it returns an array instead of just one object\n    if tool? and shape is \"poll_result\"\n      @current.shapes ?= @raphaelObj.set()\n      for obj in tool\n        @current.shapes.push(obj)\n      @current.shapeDefinitions.push(toolModel.getDefinition())\n\n  # Update the cursor position on screen\n  # @param  {number} x the x value of the cursor as a percentage of the width\n  # @param  {number} y the y value of the cursor as a percentage of the height\n  moveCursor: (x, y) ->\n    [cx, cy] = @_currentSlideOffsets()\n    [slideWidth, slideHeight] = @_currentSlideOriginalDimensions()\n    @cursor.setPosition(x * slideWidth + cx, y * slideHeight + cy)\n\n    #if the slide is zoomed in then move the cursor based on where the viewBox is looking\n    if @viewBoxXpos? && @viewBoxYPos?  && @viewBoxWidth? && @viewBoxHeight?\n      @cursor.setPosition( @viewBoxXpos + x * @viewBoxWidth, @viewBoxYPos + y * @viewBoxHeight )\n\n  zoomAndPan: (widthRatio, heightRatio, xOffset, yOffset) ->\n    # console.log \"zoomAndPan #{widthRatio} #{heightRatio} #{xOffset} #{yOffset}\"\n    newX = - xOffset * 2 * @adjustedWidth / 100\n    newY = - yOffset * 2 * @adjustedHeight / 100\n    newWidth = @adjustedWidth * widthRatio / 100\n    newHeight = @adjustedHeight * heightRatio / 100\n    @raphaelObj.setViewBox(newX, newY, newWidth, newHeight) # zooms and pans\n\n  setAdjustedDimensions: (width, height) ->\n    @adjustedWidth = width\n    @adjustedHeight = height\n\n  # Update the dimensions of the container.\n  _updateContainerDimensions: ->\n    $container = $('#whiteboard-paper')\n\n    containerDimensions = scaleSlide(getInSession('slideOriginalWidth'), getInSession('slideOriginalHeight'))\n    if($container.innerWidth() is 0)\n      @containerWidth = containerDimensions.boardWidth\n    else\n      @containerWidth = $container.innerWidth()\n    if($container.innerHeight() is 0)\n      @containerHeight = containerDimensions.boardHeight\n    else\n      @containerHeight = $container.innerHeight()\n\n    @containerOffsetLeft = $container.offset()?.left\n    @containerOffsetTop = $container.offset()?.top\n\n  _updateZoomRatios: ->\n    currentSlideDoc = getCurrentSlideDoc()\n    @widthRatio = currentSlideDoc.slide.width_ratio\n    @heightRatio = currentSlideDoc.slide.height_ratio\n\n  # Retrieves an image element from the paper.\n  # The url must be in the slides array.\n  # @param  {string} url        the url of the image (must be in slides array)\n  # @return {Raphael.image}     return the image or null if not found\n  _getImageFromPaper: (url) ->\n    if @slides[url]\n      id = @slides[url].getId()\n      return @raphaelObj.getById(id) if id?\n    null\n\n  _currentSlideDimensions: ->\n    if @current.slide? then @current.slide.getDimensions() else [0, 0]\n\n  _currentSlideOriginalDimensions: ->\n    if @current.slide? then @current.slide.getOriginalDimensions() else [0, 0]\n\n  _currentSlideOffsets: ->\n    if @current.slide? then @current.slide.getOffsets() else [0, 0]\n\n  # Wrapper method to create a tool for the whiteboard\n  _createTool: (type) ->\n    switch type\n      when \"pencil\"\n        model = WhiteboardLineModel\n      when \"path\", \"line\"\n        model = WhiteboardLineModel\n      when \"rectangle\"\n        model = WhiteboardRectModel\n      when \"ellipse\"\n        model = WhiteboardEllipseModel\n      when \"triangle\"\n        model = WhiteboardTriangleModel\n      when \"text\"\n        model = WhiteboardTextModel\n      when \"poll_result\"\n        model = WhiteboardPollModel\n\n    if model?\n      [slideWidth, slideHeight] = @_currentSlideOriginalDimensions()\n      [xOffset, yOffset] = @_currentSlideOffsets()\n      [width, height] = @_currentSlideDimensions()\n\n      tool = new model(@raphaelObj)\n      # TODO: why are the parameters inverted and it works?\n      tool.setPaperSize(slideHeight, slideWidth)\n      tool.setOffsets(xOffset, yOffset)\n      tool.setPaperDimensions(width,height)\n      tool\n    else\n      null\n\n  # Adds the base url (the protocol+server part) to `url` if needed.\n  _slideUrl: (url) ->\n    if url?.match(/http[s]?:/)\n      url\n    else\n      console.log \"The url '#{url}'' did not match the expected format of: http/s\"\n      #globals.presentationServer + url\n\n  #Changes the currently displayed page/slide (if any) with this one\n  #@param {data} message object containing the \"presentation\" object\n  _displayPage: (data, originalWidth, originalHeight) ->\n    @removeAllImagesFromPaper()\n\n    @_updateContainerDimensions()\n    boardWidth = @containerWidth\n    boardHeight = @containerHeight\n\n    currentSlide = getCurrentSlideDoc()\n    currentPresentation = Meteor.Presentations.findOne({\"presentation.current\": true})\n    presentationId = currentPresentation?.presentation?.id\n    currentSlideCursor = Meteor.Slides.find({\"presentationId\": presentationId, \"slide.current\": true})\n\n    if @zoomObserver isnt null\n      @zoomObserver.stop()\n    _this = this\n    @zoomObserver = currentSlideCursor.observe # watching the current slide changes\n      changed: (newDoc, oldDoc) ->\n        if originalWidth <= originalHeight\n          @adjustedWidth = boardHeight * originalWidth / originalHeight\n          @adjustedHeight = boardHeight\n        else\n          @adjustedHeight = boardWidth * originalHeight / originalWidth\n          @adjustedWidth = boardWidth\n\n        _this.zoomAndPan(newDoc.slide.width_ratio, newDoc.slide.height_ratio,\n          newDoc.slide.x_offset, newDoc.slide.y_offset)\n\n        oldRatio = (oldDoc.slide.width_ratio + oldDoc.slide.height_ratio) / 2\n        newRatio = (newDoc.slide.width_ratio + newDoc.slide.height_ratio) / 2\n\n        _this?.current?.shapes?.forEach (shape) ->\n          shape.attr \"stroke-width\", shape.attr('stroke-width') * oldRatio  / newRatio\n\n        if _this.raphaelObj is 100 # on first load: Raphael object is initially tiny\n          _this.cursor.setRadius(0.65 * newDoc.slide.width_ratio / 100)\n        else\n          _this.cursor.setRadius(6 * newDoc.slide.width_ratio / 100)\n\n    if originalWidth <= originalHeight\n      # square => boardHeight is the shortest side\n      @adjustedWidth = boardHeight * originalWidth / originalHeight\n      $('#whiteboard-paper').width(@adjustedWidth)\n      @addImageToPaper(data, @adjustedWidth, boardHeight)\n      @adjustedHeight = boardHeight\n    else\n      @adjustedHeight = boardWidth * originalHeight / originalWidth\n      $('#whiteboard-paper').height(@adjustedHeight)\n      @addImageToPaper(data, boardWidth, @adjustedHeight)\n      @adjustedWidth = boardWidth\n\n    @zoomAndPan(currentSlide.slide.width_ratio, currentSlide.slide.height_ratio,\n      currentSlide.slide.x_offset, currentSlide.slide.y_offset)\n"]}}