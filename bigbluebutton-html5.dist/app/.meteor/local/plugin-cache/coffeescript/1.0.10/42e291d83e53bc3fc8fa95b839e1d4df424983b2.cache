{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nthis.WhiteboardTriangleModel = (function(superClass) {\n  extend(WhiteboardTriangleModel, superClass);\n\n  function WhiteboardTriangleModel(paper) {\n    this.paper = paper;\n    WhiteboardTriangleModel.__super__.constructor.call(this, this.paper);\n    this.definition = [0, 0, 0, 0, \"#000\", \"0px\"];\n  }\n\n  WhiteboardTriangleModel.prototype.make = function(info) {\n    var color, path, thickness, x, y;\n    if ((info != null ? info.points : void 0) != null) {\n      x = info.points[0];\n      y = info.points[1];\n      color = info.color;\n      thickness = info.thickness;\n      path = this._buildPath(x, y, x, y, x, y);\n      this.obj = this.paper.path(path);\n      this.obj.attr(\"stroke\", formatColor(color));\n      this.obj.attr(\"stroke-width\", zoomStroke(formatThickness(thickness)));\n      this.obj.attr({\n        \"stroke-linejoin\": \"round\"\n      });\n      this.definition = [x, y, x, y, this.obj.attrs[\"stroke\"], this.obj.attrs[\"stroke-width\"]];\n    }\n    return this.obj;\n  };\n\n  WhiteboardTriangleModel.prototype.update = function(info) {\n    var path, ref, x1, x2, xBottomLeft, xBottomRight, xTop, y1, y2, yBottomLeft, yBottomRight, yTop;\n    if ((info != null ? info.points : void 0) != null) {\n      x1 = info.points[0];\n      y1 = info.points[1];\n      x2 = info.points[2];\n      y2 = info.points[3];\n      if (this.obj != null) {\n        ref = this._getCornersFromPoints(x1, y1, x2, y2), xTop = ref[0], yTop = ref[1], xBottomLeft = ref[2], yBottomLeft = ref[3], xBottomRight = ref[4], yBottomRight = ref[5];\n        path = this._buildPath(xTop * this.gw + this.xOffset, yTop * this.gh + this.yOffset, xBottomLeft * this.gw + this.xOffset, yBottomLeft * this.gh + this.yOffset, xBottomRight * this.gw + this.xOffset, yBottomRight * this.gh + this.yOffset);\n        this.obj.attr({\n          path: path\n        });\n        this.definition[0] = x1;\n        this.definition[1] = y1;\n        this.definition[2] = x2;\n        return this.definition[3] = y2;\n      }\n    }\n  };\n\n  WhiteboardTriangleModel.prototype.draw = function(x1, y1, x2, y2, colour, thickness) {\n    var path, ref, triangle, xBottomLeft, xBottomRight, xTop, yBottomLeft, yBottomRight, yTop;\n    ref = this._getCornersFromPoints(x1, y1, x2, y2), xTop = ref[0], yTop = ref[1], xBottomLeft = ref[2], yBottomLeft = ref[3], xBottomRight = ref[4], yBottomRight = ref[5];\n    path = this._buildPath(xTop, yTop, xBottomLeft, yBottomLeft, xBottomRight, yBottomRight);\n    path = this._scaleTrianglePath(path, this.gw, this.gh, this.xOffset, this.yOffset);\n    triangle = this.paper.path(path);\n    triangle.attr(Utils.strokeAndThickness(colour, thickness));\n    triangle.attr({\n      \"stroke-linejoin\": \"round\"\n    });\n    return triangle;\n  };\n\n  WhiteboardTriangleModel.prototype._getCornersFromPoints = function(x1, y1, x2, y2) {\n    var xBottomLeft, xBottomRight, xTop, yBottomLeft, yBottomRight, yTop;\n    xTop = ((x2 - x1) / 2) + x1;\n    yTop = y1;\n    xBottomLeft = x1;\n    yBottomLeft = y2;\n    xBottomRight = x2;\n    yBottomRight = y2;\n    return [xTop, yTop, xBottomLeft, yBottomLeft, xBottomRight, yBottomRight];\n  };\n\n  WhiteboardTriangleModel.prototype._buildPath = function(xTop, yTop, xBottomLeft, yBottomLeft, xBottomRight, yBottomRight) {\n    return \"M\" + xTop + \",\" + yTop + \",\" + xBottomLeft + \",\" + yBottomLeft + \",\" + xBottomRight + \",\" + yBottomRight + \"z\";\n  };\n\n  WhiteboardTriangleModel.prototype._scaleTrianglePath = function(string, w, h, xOffset, yOffset) {\n    var j, len, path, points;\n    if (xOffset == null) {\n      xOffset = 0;\n    }\n    if (yOffset == null) {\n      yOffset = 0;\n    }\n    path = null;\n    points = string.match(/(\\d+[.]?\\d*)/g);\n    len = points.length;\n    j = 0;\n    path = \"M\";\n    while (j < len) {\n      if (j !== 0) {\n        path += \",\";\n      }\n      path += \"\" + (points[j] * w + xOffset) + \",\" + (points[j + 1] * h + yOffset);\n      j += 2;\n    }\n    return path + \"z\";\n  };\n\n  return WhiteboardTriangleModel;\n\n})(WhiteboardToolModel);\n\nWhiteboardTriangleModel;\n","sourceMap":{"version":3,"file":"/client/whiteboard_models/whiteboard_triangle.coffee.js","sourceRoot":"","sources":["/client/whiteboard_models/whiteboard_triangle.coffee"],"names":[],"mappings":";AACA,IAAA;6BAAA;;AAAA,IAAO,CAAA;AAEL,6CAAA,CAAA;;AAAa,EAAA,iCAAC,KAAD,GAAA;AACX,IADY,IAAC,CAAA,QAAD,KACZ,CAAA;AAAA,IAAA,yDAAM,IAAC,CAAA,KAAP,CAAA,CAAA;AAAA,IAIA,IAAC,CAAA,UAAD,GAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,MAAb,EAAqB,KAArB,CAJd,CADW;EAAA,CAAb;;AAAA,oCAYA,IAAA,GAAM,SAAC,IAAD,GAAA;AACJ,QAAA,4BAAA;AAAA,IAAA,IAAG,6CAAH;AACE,MAAA,CAAA,GAAI,IAAI,CAAC,MAAO,CAAA,CAAA,CAAhB,CAAA;AAAA,MACA,CAAA,GAAI,IAAI,CAAC,MAAO,CAAA,CAAA,CADhB,CAAA;AAAA,MAEA,KAAA,GAAQ,IAAI,CAAC,KAFb,CAAA;AAAA,MAGA,SAAA,GAAY,IAAI,CAAC,SAHjB,CAAA;AAAA,MAKA,IAAA,GAAO,IAAC,CAAA,UAAD,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CALP,CAAA;AAAA,MAMA,IAAC,CAAA,GAAD,GAAO,IAAC,CAAA,KAAK,CAAC,IAAP,CAAY,IAAZ,CANP,CAAA;AAAA,MAOA,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,QAAV,EAAoB,WAAA,CAAY,KAAZ,CAApB,CAPA,CAAA;AAAA,MAQA,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,cAAV,EAA0B,UAAA,CAAW,eAAA,CAAgB,SAAhB,CAAX,CAA1B,CARA,CAAA;AAAA,MASA,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU;AAAA,QAAC,iBAAA,EAAmB,OAApB;OAAV,CATA,CAAA;AAAA,MAWA,IAAC,CAAA,UAAD,GAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,IAAC,CAAA,GAAG,CAAC,KAAM,CAAA,QAAA,CAAxB,EAAmC,IAAC,CAAA,GAAG,CAAC,KAAM,CAAA,cAAA,CAA9C,CAXd,CADF;KAAA;WAcA,IAAC,CAAA,IAfG;EAAA,CAZN,CAAA;;AAAA,oCAkCA,MAAA,GAAQ,SAAC,IAAD,GAAA;AACN,QAAA,2FAAA;AAAA,IAAA,IAAG,6CAAH;AACE,MAAA,EAAA,GAAK,IAAI,CAAC,MAAO,CAAA,CAAA,CAAjB,CAAA;AAAA,MACA,EAAA,GAAK,IAAI,CAAC,MAAO,CAAA,CAAA,CADjB,CAAA;AAAA,MAEA,EAAA,GAAK,IAAI,CAAC,MAAO,CAAA,CAAA,CAFjB,CAAA;AAAA,MAGA,EAAA,GAAK,IAAI,CAAC,MAAO,CAAA,CAAA,CAHjB,CAAA;AAKA,MAAA,IAAG,gBAAH;AACE,QAAA,MAAqE,IAAC,CAAA,qBAAD,CAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,CAArE,EAAC,aAAD,EAAO,aAAP,EAAa,oBAAb,EAA0B,oBAA1B,EAAuC,qBAAvC,EAAqD,qBAArD,CAAA;AAAA,QAEA,IAAA,GAAO,IAAC,CAAA,UAAD,CAAY,IAAA,GAAO,IAAC,CAAA,EAAR,GAAa,IAAC,CAAA,OAA1B,EAAmC,IAAA,GAAO,IAAC,CAAA,EAAR,GAAa,IAAC,CAAA,OAAjD,EACY,WAAA,GAAc,IAAC,CAAA,EAAf,GAAoB,IAAC,CAAA,OADjC,EAC0C,WAAA,GAAc,IAAC,CAAA,EAAf,GAAoB,IAAC,CAAA,OAD/D,EAEY,YAAA,GAAe,IAAC,CAAA,EAAhB,GAAqB,IAAC,CAAA,OAFlC,EAE2C,YAAA,GAAe,IAAC,CAAA,EAAhB,GAAqB,IAAC,CAAA,OAFjE,CAFP,CAAA;AAAA,QAKA,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU;AAAA,UAAA,IAAA,EAAM,IAAN;SAAV,CALA,CAAA;AAAA,QAOA,IAAC,CAAA,UAAW,CAAA,CAAA,CAAZ,GAAiB,EAPjB,CAAA;AAAA,QAQA,IAAC,CAAA,UAAW,CAAA,CAAA,CAAZ,GAAiB,EARjB,CAAA;AAAA,QASA,IAAC,CAAA,UAAW,CAAA,CAAA,CAAZ,GAAiB,EATjB,CAAA;eAUA,IAAC,CAAA,UAAW,CAAA,CAAA,CAAZ,GAAiB,GAXnB;OANF;KADM;EAAA,CAlCR,CAAA;;AAAA,oCA6DA,IAAA,GAAM,SAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,MAAjB,EAAyB,SAAzB,GAAA;AACJ,QAAA,qFAAA;AAAA,IAAA,MAAqE,IAAC,CAAA,qBAAD,CAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,CAArE,EAAC,aAAD,EAAO,aAAP,EAAa,oBAAb,EAA0B,oBAA1B,EAAuC,qBAAvC,EAAqD,qBAArD,CAAA;AAAA,IACA,IAAA,GAAO,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,IAAlB,EAAwB,WAAxB,EAAqC,WAArC,EAAkD,YAAlD,EAAgE,YAAhE,CADP,CAAA;AAAA,IAEA,IAAA,GAAO,IAAC,CAAA,kBAAD,CAAoB,IAApB,EAA0B,IAAC,CAAA,EAA3B,EAA+B,IAAC,CAAA,EAAhC,EAAoC,IAAC,CAAA,OAArC,EAA8C,IAAC,CAAA,OAA/C,CAFP,CAAA;AAAA,IAGA,QAAA,GAAW,IAAC,CAAA,KAAK,CAAC,IAAP,CAAY,IAAZ,CAHX,CAAA;AAAA,IAIA,QAAQ,CAAC,IAAT,CAAc,KAAK,CAAC,kBAAN,CAAyB,MAAzB,EAAiC,SAAjC,CAAd,CAJA,CAAA;AAAA,IAKA,QAAQ,CAAC,IAAT,CAAc;AAAA,MAAC,iBAAA,EAAmB,OAApB;KAAd,CALA,CAAA;WAMA,SAPI;EAAA,CA7DN,CAAA;;AAAA,oCAsEA,qBAAA,GAAuB,SAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,GAAA;AACrB,QAAA,gEAAA;AAAA,IAAA,IAAA,GAAQ,CAAC,CAAC,EAAA,GAAK,EAAN,CAAA,GAAY,CAAb,CAAA,GAAkB,EAA1B,CAAA;AAAA,IACA,IAAA,GAAO,EADP,CAAA;AAAA,IAEA,WAAA,GAAc,EAFd,CAAA;AAAA,IAGA,WAAA,GAAc,EAHd,CAAA;AAAA,IAIA,YAAA,GAAe,EAJf,CAAA;AAAA,IAKA,YAAA,GAAe,EALf,CAAA;WAMA,CAAC,IAAD,EAAO,IAAP,EAAa,WAAb,EAA0B,WAA1B,EAAuC,YAAvC,EAAqD,YAArD,EAPqB;EAAA,CAtEvB,CAAA;;AAAA,oCA+EA,UAAA,GAAY,SAAC,IAAD,EAAO,IAAP,EAAa,WAAb,EAA0B,WAA1B,EAAuC,YAAvC,EAAqD,YAArD,GAAA;WACV,GAAA,GAAI,IAAJ,GAAS,GAAT,GAAY,IAAZ,GAAiB,GAAjB,GAAoB,WAApB,GAAgC,GAAhC,GAAmC,WAAnC,GAA+C,GAA/C,GAAkD,YAAlD,GAA+D,GAA/D,GAAkE,YAAlE,GAA+E,IADrE;EAAA,CA/EZ,CAAA;;AAAA,oCAsFA,kBAAA,GAAoB,SAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,EAAe,OAAf,EAA0B,OAA1B,GAAA;AAClB,QAAA,oBAAA;;MADiC,UAAQ;KACzC;;MAD4C,UAAQ;KACpD;AAAA,IAAA,IAAA,GAAO,IAAP,CAAA;AAAA,IACA,MAAA,GAAS,MAAM,CAAC,KAAP,CAAa,eAAb,CADT,CAAA;AAAA,IAEA,GAAA,GAAM,MAAM,CAAC,MAFb,CAAA;AAAA,IAGA,CAAA,GAAI,CAHJ,CAAA;AAAA,IAMA,IAAA,GAAO,GANP,CAAA;AAOA,WAAM,CAAA,GAAI,GAAV,GAAA;AACE,MAAA,IAAmB,CAAA,KAAK,CAAxB;AAAA,QAAA,IAAA,IAAQ,GAAR,CAAA;OAAA;AAAA,MACA,IAAA,IAAQ,EAAA,GAAK,CAAC,MAAO,CAAA,CAAA,CAAP,GAAY,CAAZ,GAAgB,OAAjB,CAAL,GAAiC,GAAjC,GAAuC,CAAC,MAAO,CAAA,CAAA,GAAI,CAAJ,CAAP,GAAgB,CAAhB,GAAoB,OAArB,CAD/C,CAAA;AAAA,MAEA,CAAA,IAAK,CAFL,CADF;IAAA,CAPA;WAWA,IAAA,GAAO,IAZW;EAAA,CAtFpB,CAAA;;iCAAA;;GAFqC,oBAAvC,CAAA;;AAAA,uBAAA,CAAA","sourcesContent":["# A triangle in the whiteboard\nclass @WhiteboardTriangleModel extends WhiteboardToolModel\n\n  constructor: (@paper) ->\n    super @paper\n\n    # the defintion of this shape, kept so we can redraw the shape whenever needed\n    # format: x1, y1, x2, y2, stroke color, thickness\n    @definition = [0, 0, 0, 0, \"#000\", \"0px\"]\n\n  # Make a triangle on the whiteboard\n  # @param  {[type]} x         the x value of the top left corner\n  # @param  {[type]} y         the y value of the top left corner\n  # @param  {string} colour    the colour of the object\n  # @param  {number} thickness the thickness of the object's line(s)\n  make: (info) ->\n    if info?.points?\n      x = info.points[0]\n      y = info.points[1]\n      color = info.color\n      thickness = info.thickness\n\n      path = @_buildPath(x, y, x, y, x, y)\n      @obj = @paper.path(path)\n      @obj.attr \"stroke\", formatColor(color)\n      @obj.attr \"stroke-width\", zoomStroke(formatThickness(thickness))\n      @obj.attr({\"stroke-linejoin\": \"round\"})\n\n      @definition = [x, y, x, y, @obj.attrs[\"stroke\"], @obj.attrs[\"stroke-width\"]]\n\n    @obj\n\n  # Update triangle drawn\n  # @param  {number} x1 the x value of the top left corner\n  # @param  {number} y1 the y value of the top left corner\n  # @param  {number} x2 the x value of the bottom right corner\n  # @param  {number} y2 the y value of the bottom right corner\n  update: (info) ->\n    if info?.points?\n      x1 = info.points[0]\n      y1 = info.points[1]\n      x2 = info.points[2]\n      y2 = info.points[3]\n\n      if @obj?\n        [xTop, yTop, xBottomLeft, yBottomLeft, xBottomRight, yBottomRight] = @_getCornersFromPoints(x1, y1, x2, y2)\n\n        path = @_buildPath(xTop * @gw + @xOffset, yTop * @gh + @yOffset,\n                           xBottomLeft * @gw + @xOffset, yBottomLeft * @gh + @yOffset,\n                           xBottomRight * @gw + @xOffset, yBottomRight * @gh + @yOffset)\n        @obj.attr path: path\n\n        @definition[0] = x1\n        @definition[1] = y1\n        @definition[2] = x2\n        @definition[3] = y2\n\n  # Draw a triangle on the whiteboard\n  # @param  {number} x1 the x value of the top left corner\n  # @param  {number} y1 the y value of the top left corner\n  # @param  {number} x2 the x value of the bottom right corner\n  # @param  {number} y2 the y value of the bottom right corner\n  # @param  {string} colour    the colour of the object\n  # @param  {number} thickness the thickness of the object's line(s)\n  draw: (x1, y1, x2, y2, colour, thickness) ->\n    [xTop, yTop, xBottomLeft, yBottomLeft, xBottomRight, yBottomRight] = @_getCornersFromPoints(x1, y1, x2, y2)\n    path = @_buildPath(xTop, yTop, xBottomLeft, yBottomLeft, xBottomRight, yBottomRight)\n    path = @_scaleTrianglePath(path, @gw, @gh, @xOffset, @yOffset)\n    triangle = @paper.path(path)\n    triangle.attr Utils.strokeAndThickness(colour, thickness)\n    triangle.attr({\"stroke-linejoin\": \"round\"})\n    triangle\n\n  _getCornersFromPoints: (x1, y1, x2, y2) ->\n    xTop = (((x2 - x1) / 2) + x1)\n    yTop = y1\n    xBottomLeft = x1\n    yBottomLeft = y2\n    xBottomRight = x2\n    yBottomRight = y2\n    [xTop, yTop, xBottomLeft, yBottomLeft, xBottomRight, yBottomRight]\n\n  _buildPath: (xTop, yTop, xBottomLeft, yBottomLeft, xBottomRight, yBottomRight) ->\n    \"M#{xTop},#{yTop},#{xBottomLeft},#{yBottomLeft},#{xBottomRight},#{yBottomRight}z\"\n\n  # Scales a triangle path string to fit within a width and height of the new paper size\n  # @param  {number} w width of the shape as a percentage of the original width\n  # @param  {number} h height of the shape as a percentage of the original height\n  # @return {string}   the path string after being manipulated to new paper size\n  _scaleTrianglePath: (string, w, h, xOffset=0, yOffset=0) ->\n    path = null\n    points = string.match(/(\\d+[.]?\\d*)/g)\n    len = points.length\n    j = 0\n\n    # go through each point and multiply it by the new height and width\n    path = \"M\"\n    while j < len\n      path += \",\" unless j is 0\n      path += \"\" + (points[j] * w + xOffset) + \",\" + (points[j + 1] * h + yOffset)\n      j += 2\n    path + \"z\"\n\nWhiteboardTriangleModel\n"]}}