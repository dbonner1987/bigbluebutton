{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nTemplate.slide.rendered = function() {\n  var currentSlide, pic, ref;\n  currentSlide = getCurrentSlideDoc();\n  pic = new Image();\n  pic.onload = function() {\n    var ref;\n    setInSession('slideOriginalWidth', this.width);\n    setInSession('slideOriginalHeight', this.height);\n    $(window).resize(function() {\n      if (!$('.panel-footer').hasClass('ui-resizable-resizing')) {\n        return scaleWhiteboard();\n      }\n    });\n    if ((currentSlide != null ? (ref = currentSlide.slide) != null ? ref.img_uri : void 0 : void 0) != null) {\n      return createWhiteboardPaper(function(wpm) {\n        return displaySlide(wpm);\n      });\n    }\n  };\n  return pic.src = currentSlide != null ? (ref = currentSlide.slide) != null ? ref.img_uri : void 0 : void 0;\n};\n\nthis.createWhiteboardPaper = (function(_this) {\n  return function(callback) {\n    _this.whiteboardPaperModel = new Meteor.WhiteboardPaperModel('whiteboard-paper');\n    return callback(_this.whiteboardPaperModel);\n  };\n})(this);\n\nthis.displaySlide = function(wpm) {\n  var adjustedDimensions, currentSlide, ref;\n  currentSlide = getCurrentSlideDoc();\n  wpm.create();\n  adjustedDimensions = scaleSlide(getInSession('slideOriginalWidth'), getInSession('slideOriginalHeight'));\n  wpm._displayPage(currentSlide != null ? (ref = currentSlide.slide) != null ? ref.img_uri : void 0 : void 0, getInSession('slideOriginalWidth'), getInSession('slideOriginalHeight'));\n  manuallyDisplayShapes();\n  return wpm.scale(adjustedDimensions.width, adjustedDimensions.height);\n};\n\nthis.manuallyDisplayShapes = function() {\n  var currentSlide, i, j, len, len1, num, ref, ref1, ref2, results, s, shapeInfo, shapeType, shapes, wpm;\n  if (Meteor.WhiteboardCleanStatus.findOne({\n    in_progress: true\n  }) != null) {\n    return;\n  }\n  currentSlide = getCurrentSlideDoc();\n  wpm = this.whiteboardPaperModel;\n  shapes = Meteor.Shapes.find({\n    whiteboardId: currentSlide != null ? (ref = currentSlide.slide) != null ? ref.id : void 0 : void 0\n  }).fetch();\n  results = [];\n  for (i = 0, len1 = shapes.length; i < len1; i++) {\n    s = shapes[i];\n    shapeInfo = ((ref1 = s.shape) != null ? ref1.shape : void 0) || (s != null ? s.shape : void 0);\n    shapeType = shapeInfo != null ? shapeInfo.type : void 0;\n    if (shapeType !== \"text\") {\n      len = shapeInfo.points.length;\n      for (num = j = 0, ref2 = len; 0 <= ref2 ? j <= ref2 : j >= ref2; num = 0 <= ref2 ? ++j : --j) {\n        if (shapeInfo != null) {\n          shapeInfo.points[num] = (shapeInfo != null ? shapeInfo.points[num] : void 0) / 100;\n        }\n      }\n    }\n    if (wpm != null) {\n      wpm.makeShape(shapeType, shapeInfo);\n    }\n    results.push(wpm != null ? wpm.updateShape(shapeType, shapeInfo) : void 0);\n  }\n  return results;\n};\n\nthis.scaleSlide = function(originalWidth, originalHeight) {\n  var adjustedHeight, adjustedWidth, boardHeight, boardWidth;\n  if (window.matchMedia('(orientation: landscape)').matches) {\n    boardWidth = $(\"#whiteboard-container\").width();\n    boardHeight = $(\"#whiteboard-container\").height();\n  } else {\n    boardWidth = $(\"#whiteboard-container\").width();\n    boardHeight = 1.4 * $(\"#whiteboard-container\").width();\n  }\n  adjustedWidth = null;\n  adjustedHeight = null;\n  if (originalWidth <= originalHeight) {\n    adjustedWidth = boardHeight * originalWidth / originalHeight;\n    if (boardWidth < adjustedWidth) {\n      adjustedHeight = boardHeight * boardWidth / adjustedWidth;\n      adjustedWidth = boardWidth;\n    } else {\n      adjustedHeight = boardHeight;\n    }\n  } else {\n    adjustedHeight = boardWidth * originalHeight / originalWidth;\n    if (boardHeight < adjustedHeight) {\n      adjustedWidth = boardWidth * boardHeight / adjustedHeight;\n      adjustedHeight = boardHeight;\n    } else {\n      adjustedWidth = boardWidth;\n    }\n  }\n  return {\n    width: adjustedWidth,\n    height: adjustedHeight,\n    boardWidth: boardWidth,\n    boardHeight: boardHeight\n  };\n};\n\nTemplate.slide.helpers({\n  updatePointerLocation: function(pointer) {\n    var wpm;\n    if (typeof whiteboardPaperModel !== \"undefined\" && whiteboardPaperModel !== null) {\n      wpm = whiteboardPaperModel;\n      return wpm != null ? wpm.moveCursor(pointer.x, pointer.y) : void 0;\n    }\n  }\n});\n\nTemplate.shape.rendered = function() {\n  var i, len, num, ref, ref1, shapeInfo, shapeType, wpm;\n  shapeInfo = ((ref = this.data.shape) != null ? ref.shape : void 0) || this.data.shape;\n  shapeType = shapeInfo != null ? shapeInfo.type : void 0;\n  if (shapeType !== \"text\") {\n    len = shapeInfo.points.length;\n    for (num = i = 0, ref1 = len; 0 <= ref1 ? i <= ref1 : i >= ref1; num = 0 <= ref1 ? ++i : --i) {\n      shapeInfo.points[num] = shapeInfo.points[num] / 100;\n    }\n  }\n  if (typeof whiteboardPaperModel !== \"undefined\" && whiteboardPaperModel !== null) {\n    wpm = whiteboardPaperModel;\n    if (wpm != null) {\n      wpm.makeShape(shapeType, shapeInfo);\n    }\n    return wpm != null ? wpm.updateShape(shapeType, shapeInfo) : void 0;\n  }\n};\n\nTemplate.shape.destroyed = function() {\n  var wpm;\n  if (typeof whiteboardPaperModel !== \"undefined\" && whiteboardPaperModel !== null) {\n    wpm = whiteboardPaperModel;\n    wpm.clearShapes();\n    return manuallyDisplayShapes();\n  }\n};\n","sourceMap":{"version":3,"file":"/client/views/whiteboard/slide.coffee.js","sourceRoot":"","sources":["/client/views/whiteboard/slide.coffee"],"names":[],"mappings":"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","sourcesContent":["Template.slide.rendered = ->\n  currentSlide = getCurrentSlideDoc()\n\n  pic = new Image()\n  pic.onload = ->\n    setInSession 'slideOriginalWidth', this.width\n    setInSession 'slideOriginalHeight', this.height\n    $(window).resize( ->\n      # redraw the whiteboard to adapt to the resized window\n      if !$('.panel-footer').hasClass('ui-resizable-resizing') # not in the middle of resizing the message input\n        scaleWhiteboard()\n    )\n    if currentSlide?.slide?.img_uri?\n      createWhiteboardPaper (wpm) ->\n        displaySlide wpm\n  pic.src = currentSlide?.slide?.img_uri\n\n@createWhiteboardPaper = (callback) =>\n  @whiteboardPaperModel = new Meteor.WhiteboardPaperModel('whiteboard-paper')\n  callback(@whiteboardPaperModel)\n\n@displaySlide = (wpm) ->\n  currentSlide = getCurrentSlideDoc()\n\n  wpm.create()\n  adjustedDimensions = scaleSlide(getInSession('slideOriginalWidth'), getInSession('slideOriginalHeight'))\n  wpm._displayPage(currentSlide?.slide?.img_uri, getInSession('slideOriginalWidth'), getInSession('slideOriginalHeight'))\n  manuallyDisplayShapes()\n  wpm.scale(adjustedDimensions.width, adjustedDimensions.height)\n\n@manuallyDisplayShapes = ->\n\n  return if Meteor.WhiteboardCleanStatus.findOne({in_progress: true})?\n\n  currentSlide = getCurrentSlideDoc()\n  wpm = @whiteboardPaperModel\n  shapes = Meteor.Shapes.find({whiteboardId: currentSlide?.slide?.id}).fetch()\n  for s in shapes\n    shapeInfo = s.shape?.shape or s?.shape\n    shapeType = shapeInfo?.type\n\n    if shapeType isnt \"text\"\n      len = shapeInfo.points.length\n      for num in [0..len] # the coordinates must be in the range 0 to 1\n        shapeInfo?.points[num] = shapeInfo?.points[num] / 100\n    wpm?.makeShape(shapeType, shapeInfo)\n    wpm?.updateShape(shapeType, shapeInfo)\n\n\n# calculates and returns the best fitting {width, height} pair\n# based on the image's original width and height\n@scaleSlide = (originalWidth, originalHeight) ->\n\n  # set the size of the whiteboard space (frame) where the slide will be displayed\n  if window.matchMedia('(orientation: landscape)').matches\n    # for landscape orientation we want \"fit to height\" so that we can\n    # minimize the empty space above and below the slide (for best readability)\n    boardWidth = $(\"#whiteboard-container\").width()\n    boardHeight = $(\"#whiteboard-container\").height()\n  else\n    # for portrait orientation we want \"fit to width\" so that we can\n    # minimize the empty space on the sides of the slide (for best readability)\n    boardWidth = $(\"#whiteboard-container\").width()\n    boardHeight = 1.4 * $(\"#whiteboard-container\").width() # A4 paper size\n\n  # this is the best fitting pair\n  adjustedWidth = null\n  adjustedHeight = null\n\n\n  # the slide image is in portrait orientation\n  if originalWidth <= originalHeight\n    adjustedWidth = boardHeight * originalWidth / originalHeight\n    if boardWidth < adjustedWidth\n      adjustedHeight = boardHeight * boardWidth / adjustedWidth\n      adjustedWidth = boardWidth\n    else\n      adjustedHeight = boardHeight\n\n  # ths slide image is in landscape orientation\n  else\n    adjustedHeight = boardWidth * originalHeight / originalWidth\n    if boardHeight < adjustedHeight\n      adjustedWidth = boardWidth * boardHeight / adjustedHeight\n      adjustedHeight = boardHeight\n    else\n      adjustedWidth = boardWidth\n\n  { width: adjustedWidth, height: adjustedHeight, boardWidth: boardWidth, boardHeight: boardHeight }\n\nTemplate.slide.helpers\n  updatePointerLocation: (pointer) ->\n    if whiteboardPaperModel?\n      wpm = whiteboardPaperModel\n      wpm?.moveCursor(pointer.x, pointer.y)\n\n#### SHAPE ####\nTemplate.shape.rendered = ->\n  # @data is the shape object coming from the {{#each}} in the html file\n  shapeInfo = @data.shape?.shape or @data.shape\n  shapeType = shapeInfo?.type\n\n  if shapeType isnt \"text\"\n    len = shapeInfo.points.length\n    for num in [0..len] # the coordinates must be in the range 0 to 1\n      shapeInfo.points[num] = shapeInfo.points[num] / 100\n\n  if whiteboardPaperModel?\n    wpm = whiteboardPaperModel\n    wpm?.makeShape(shapeType, shapeInfo)\n    wpm?.updateShape(shapeType, shapeInfo)\n\nTemplate.shape.destroyed = ->\n  if whiteboardPaperModel?\n    wpm = whiteboardPaperModel\n    wpm.clearShapes()\n    manuallyDisplayShapes()\n"]}}