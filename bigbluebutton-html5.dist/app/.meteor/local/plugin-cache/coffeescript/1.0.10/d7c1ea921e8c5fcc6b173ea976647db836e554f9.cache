{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.Router.configure({\n  layoutTemplate: 'layout'\n});\n\nthis.Router.map(function() {\n  this.route(\"main\", {\n    path: \"/html5client/:meeting_id/:user_id/:auth_token\",\n    onBeforeAction: function() {\n      var applyNewSessionVars, authToken, meetingId, userId;\n      meetingId = this.params.meeting_id;\n      userId = this.params.user_id;\n      authToken = this.params.auth_token;\n      if ((authToken == null) || (meetingId == null) || (userId == null)) {\n        document.location = getInSession('logoutURL');\n      } else {\n        Meteor.call(\"validateAuthToken\", meetingId, userId, authToken);\n        applyNewSessionVars = function() {\n          setInSession(\"authToken\", authToken);\n          setInSession(\"meetingId\", meetingId);\n          setInSession(\"userId\", userId);\n          return Router.go('/html5client');\n        };\n        clearSessionVar(applyNewSessionVars);\n      }\n      return this.next();\n    }\n  });\n  this.route(\"signedin\", {\n    path: \"/html5client\",\n    action: function() {\n      var authToken, meetingId, onErrorFunction, userId;\n      meetingId = getInSession(\"meetingId\");\n      userId = getInSession(\"userId\");\n      authToken = getInSession(\"authToken\");\n      onErrorFunction = function(error, result) {\n        console.log(\"ONERRORFUNCTION\");\n        Meteor.call(\"userLogout\", meetingId, userId, authToken);\n        clearSessionVar(alert(\"Please sign in again\"));\n        document.location = getInSession('logoutURL') || '/';\n      };\n      Meteor.subscribe('chat', meetingId, userId, authToken, {\n        onError: onErrorFunction,\n        onReady: (function(_this) {\n          return function() {\n            return Meteor.subscribe('shapes', meetingId, {\n              onReady: function() {\n                return Meteor.subscribe('slides', meetingId, {\n                  onReady: function() {\n                    return Meteor.subscribe('meetings', meetingId, {\n                      onReady: function() {\n                        return Meteor.subscribe('presentations', meetingId, {\n                          onReady: function() {\n                            return Meteor.subscribe('users', meetingId, userId, authToken, {\n                              onError: onErrorFunction,\n                              onReady: function() {\n                                return Meteor.subscribe('whiteboard-clean-status', meetingId, {\n                                  onReady: function() {\n                                    var a, handleLogourUrlError;\n                                    Meteor.subscribe('bbb_poll', meetingId, userId, authToken, {\n                                      onReady: function() {}\n                                    });\n                                    _this.render('main');\n                                    onLoadComplete();\n                                    handleLogourUrlError = function() {\n                                      alert(\"Error: could not find the logoutURL\");\n                                      setInSession(\"logoutURL\", document.location.hostname);\n                                    };\n                                    a = $.ajax({\n                                      dataType: 'json',\n                                      url: '/bigbluebutton/api/enter'\n                                    });\n                                    a.done(function(data) {\n                                      if (data.response.logoutURL != null) {\n                                        setInSession(\"logoutURL\", data.response.logoutURL);\n                                      } else {\n                                        if (data.response.logoutUrl != null) {\n                                          setInSession(\"logoutURL\", data.response.logoutUrl);\n                                        } else {\n                                          return handleLogourUrlError();\n                                        }\n                                      }\n                                    });\n                                    return a.fail(function(data, textStatus, errorThrown) {\n                                      return handleLogourUrlError();\n                                    });\n                                  }\n                                });\n                              }\n                            });\n                          }\n                        });\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          };\n        })(this)\n      });\n      return this.render('loading');\n    }\n  });\n  this.route('meteorEndpoint', {\n    path: '/check',\n    where: 'server',\n    action: function() {\n      this.response.writeHead(200, {\n        'Content-Type': 'application/json'\n      });\n      this.response.end(JSON.stringify({\n        \"html5clientStatus\": \"running\"\n      }));\n    }\n  });\n});\n","sourceMap":{"version":3,"file":"/lib/router.coffee.js","sourceRoot":"","sources":["/lib/router.coffee"],"names":[],"mappings":";AAAA,IAAC,CAAA,MAAM,CAAC,SAAR,CAAkB;AAAA,EAAA,cAAA,EAAgB,QAAhB;CAAlB,CAAA,CAAA;;AAAA,IAEC,CAAA,MAAM,CAAC,GAAR,CAAY,SAAA,GAAA;AAEV,EAAA,IAAC,CAAA,KAAD,CAAO,MAAP,EACE;AAAA,IAAA,IAAA,EAAM,+CAAN;AAAA,IACA,cAAA,EAAgB,SAAA,GAAA;AACd,UAAA,iDAAA;AAAA,MAAA,SAAA,GAAY,IAAC,CAAA,MAAM,CAAC,UAApB,CAAA;AAAA,MACA,MAAA,GAAS,IAAC,CAAA,MAAM,CAAC,OADjB,CAAA;AAAA,MAEA,SAAA,GAAY,IAAC,CAAA,MAAM,CAAC,UAFpB,CAAA;AAKA,MAAA,IAAO,mBAAJ,IAAsB,mBAAtB,IAAwC,gBAA3C;AAEE,QAAA,QAAQ,CAAC,QAAT,GAAoB,YAAA,CAAa,WAAb,CAApB,CAFF;OAAA,MAAA;AAKE,QAAA,MAAM,CAAC,IAAP,CAAY,mBAAZ,EAAiC,SAAjC,EAA4C,MAA5C,EAAoD,SAApD,CAAA,CAAA;AAAA,QAEA,mBAAA,GAAsB,SAAA,GAAA;AACpB,UAAA,YAAA,CAAa,WAAb,EAA0B,SAA1B,CAAA,CAAA;AAAA,UACA,YAAA,CAAa,WAAb,EAA0B,SAA1B,CADA,CAAA;AAAA,UAEA,YAAA,CAAa,QAAb,EAAuB,MAAvB,CAFA,CAAA;iBAGA,MAAM,CAAC,EAAP,CAAU,cAAV,EAJoB;QAAA,CAFtB,CAAA;AAAA,QAQA,eAAA,CAAgB,mBAAhB,CARA,CALF;OALA;aAoBA,IAAC,CAAA,IAAD,CAAA,EArBc;IAAA,CADhB;GADF,CAAA,CAAA;AAAA,EA2BA,IAAC,CAAA,KAAD,CAAO,UAAP,EACE;AAAA,IAAA,IAAA,EAAM,cAAN;AAAA,IACA,MAAA,EAAQ,SAAA,GAAA;AACN,UAAA,6CAAA;AAAA,MAAA,SAAA,GAAY,YAAA,CAAa,WAAb,CAAZ,CAAA;AAAA,MACA,MAAA,GAAS,YAAA,CAAa,QAAb,CADT,CAAA;AAAA,MAEA,SAAA,GAAY,YAAA,CAAa,WAAb,CAFZ,CAAA;AAAA,MAIA,eAAA,GAAkB,SAAC,KAAD,EAAQ,MAAR,GAAA;AAChB,QAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAA,CAAA;AAAA,QAMA,MAAM,CAAC,IAAP,CAAY,YAAZ,EAA0B,SAA1B,EAAqC,MAArC,EAA6C,SAA7C,CANA,CAAA;AAAA,QAQA,eAAA,CAAiB,KAAA,CAAM,sBAAN,CAAjB,CARA,CAAA;AAAA,QASA,QAAQ,CAAC,QAAT,GAAoB,YAAA,CAAa,WAAb,CAAA,IAA6B,GATjD,CADgB;MAAA,CAJlB,CAAA;AAAA,MAiBA,MAAM,CAAC,SAAP,CAAiB,MAAjB,EAAyB,SAAzB,EAAoC,MAApC,EAA4C,SAA5C,EAAuD;AAAA,QAAA,OAAA,EAAS,eAAT;AAAA,QAA0B,OAAA,EAAS,CAAA,SAAA,KAAA,GAAA;iBAAA,SAAA,GAAA;mBACxF,MAAM,CAAC,SAAP,CAAiB,QAAjB,EAA2B,SAA3B,EAAsC;AAAA,cAAA,OAAA,EAAS,SAAA,GAAA;uBAC7C,MAAM,CAAC,SAAP,CAAiB,QAAjB,EAA2B,SAA3B,EAAsC;AAAA,kBAAA,OAAA,EAAS,SAAA,GAAA;2BAC7C,MAAM,CAAC,SAAP,CAAiB,UAAjB,EAA6B,SAA7B,EAAwC;AAAA,sBAAA,OAAA,EAAS,SAAA,GAAA;+BAC/C,MAAM,CAAC,SAAP,CAAiB,eAAjB,EAAkC,SAAlC,EAA6C;AAAA,0BAAA,OAAA,EAAS,SAAA,GAAA;mCACpD,MAAM,CAAC,SAAP,CAAiB,OAAjB,EAA0B,SAA1B,EAAqC,MAArC,EAA6C,SAA7C,EAAwD;AAAA,8BAAA,OAAA,EAAS,eAAT;AAAA,8BAA0B,OAAA,EAAS,SAAA,GAAA;uCACzF,MAAM,CAAC,SAAP,CAAiB,yBAAjB,EAA4C,SAA5C,EAAuD;AAAA,kCAAA,OAAA,EAAS,SAAA,GAAA;AAC9D,wCAAA,uBAAA;AAAA,oCAAA,MAAM,CAAC,SAAP,CAAiB,UAAjB,EAA6B,SAA7B,EAAyC,MAAzC,EAAiD,SAAjD,EAA4D;AAAA,sCAAA,OAAA,EAAS,SAAA,GAAA,CAAT;qCAA5D,CAAA,CAAA;AAAA,oCAEA,KAAC,CAAA,MAAD,CAAQ,MAAR,CAFA,CAAA;AAAA,oCAGA,cAAA,CAAA,CAHA,CAAA;AAAA,oCAKA,oBAAA,GAAuB,SAAA,GAAA;AACrB,sCAAA,KAAA,CAAM,qCAAN,CAAA,CAAA;AAAA,sCACA,YAAA,CAAa,WAAb,EAA0B,QAAQ,CAAC,QAAQ,CAAC,QAA5C,CADA,CADqB;oCAAA,CALvB,CAAA;AAAA,oCAWA,CAAA,GAAI,CAAC,CAAC,IAAF,CAAO;AAAA,sCAAC,QAAA,EAAU,MAAX;AAAA,sCAAmB,GAAA,EAAK,0BAAxB;qCAAP,CAXJ,CAAA;AAAA,oCAYA,CAAC,CAAC,IAAF,CAAO,SAAC,IAAD,GAAA;AACL,sCAAA,IAAG,+BAAH;wCACE,YAAA,CAAa,WAAb,EAA0B,IAAI,CAAC,QAAQ,CAAC,SAAxC,EADF;uCAAA,MAAA;AAIE,wCAAA,IAAG,+BAAH;0CACE,YAAA,CAAa,WAAb,EAA0B,IAAI,CAAC,QAAQ,CAAC,SAAxC,EADF;yCAAA,MAAA;iDAIE,oBAAA,CAAA,EAJF;yCAJF;uCADK;oCAAA,CAAP,CAZA,CAAA;2CAuBA,CAAC,CAAC,IAAF,CAAO,SAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,GAAA;6CACL,oBAAA,CAAA,EADK;oCAAA,CAAP,EAxB8D;kCAAA,CAAT;iCAAvD,EADyF;8BAAA,CAAnC;6BAAxD,EADoD;0BAAA,CAAT;yBAA7C,EAD+C;sBAAA,CAAT;qBAAxC,EAD6C;kBAAA,CAAT;iBAAtC,EAD6C;cAAA,CAAT;aAAtC,EADwF;UAAA,EAAA;QAAA,CAAA,CAAA,CAAA,IAAA,CAAnC;OAAvD,CAjBA,CAAA;aAkDA,IAAC,CAAA,MAAD,CAAQ,SAAR,EAnDM;IAAA,CADR;GADF,CA3BA,CAAA;AAAA,EAoFA,IAAC,CAAA,KAAD,CAAO,gBAAP,EACE;AAAA,IAAA,IAAA,EAAM,QAAN;AAAA,IACA,KAAA,EAAO,QADP;AAAA,IAEA,MAAA,EAAQ,SAAA,GAAA;AACN,MAAA,IAAC,CAAA,QAAQ,CAAC,SAAV,CAAoB,GAApB,EAAyB;AAAA,QAAA,cAAA,EAAgB,kBAAhB;OAAzB,CAAA,CAAA;AAAA,MAGA,IAAC,CAAA,QAAQ,CAAC,GAAV,CAAc,IAAI,CAAC,SAAL,CAAe;AAAA,QAAC,mBAAA,EAAoB,SAArB;OAAf,CAAd,CAHA,CADM;IAAA,CAFR;GADF,CApFA,CAFU;AAAA,CAAZ,CAFA,CAAA","sourcesContent":["@Router.configure layoutTemplate: 'layout'\n\n@Router.map ->\n  # this is how we handle login attempts\n  @route \"main\",\n    path: \"/html5client/:meeting_id/:user_id/:auth_token\"\n    onBeforeAction: ->\n      meetingId = @params.meeting_id\n      userId = @params.user_id\n      authToken = @params.auth_token\n\n      # catch if any of the user's meeting data is invalid\n      if not authToken? or not meetingId? or not userId?\n        # if their data is invalid, redirect the user to the logout page\n        document.location = getInSession 'logoutURL'\n\n      else\n        Meteor.call(\"validateAuthToken\", meetingId, userId, authToken)\n\n        applyNewSessionVars = ->\n          setInSession(\"authToken\", authToken)\n          setInSession(\"meetingId\", meetingId)\n          setInSession(\"userId\", userId)\n          Router.go('/html5client')\n\n        clearSessionVar(applyNewSessionVars)\n\n      @next()\n\n\n  # the user successfully logged in\n  @route \"signedin\",\n    path: \"/html5client\"\n    action: ->\n      meetingId = getInSession \"meetingId\"\n      userId = getInSession \"userId\"\n      authToken = getInSession \"authToken\"\n\n      onErrorFunction = (error, result) ->\n        console.log \"ONERRORFUNCTION\"\n        #if error\n        #  # Was unable to authorize the user. Redirect to the home page\n        #  # alert error.reason\n\n        #make sure the user is not let through\n        Meteor.call(\"userLogout\", meetingId, userId, authToken)\n\n        clearSessionVar (alert \"Please sign in again\")\n        document.location = getInSession('logoutURL') or '/'\n        return\n\n      Meteor.subscribe 'chat', meetingId, userId, authToken, onError: onErrorFunction, onReady: =>\n        Meteor.subscribe 'shapes', meetingId, onReady: =>\n          Meteor.subscribe 'slides', meetingId, onReady: =>\n            Meteor.subscribe 'meetings', meetingId, onReady: =>\n              Meteor.subscribe 'presentations', meetingId, onReady: =>\n                Meteor.subscribe 'users', meetingId, userId, authToken, onError: onErrorFunction, onReady: =>\n                  Meteor.subscribe 'whiteboard-clean-status', meetingId, onReady: =>\n                    Meteor.subscribe 'bbb_poll', meetingId,  userId, authToken, onReady: =>\n                    # done subscribing, start rendering the client and set default settings\n                    @render('main')\n                    onLoadComplete()\n\n                    handleLogourUrlError = () ->\n                      alert \"Error: could not find the logoutURL\"\n                      setInSession(\"logoutURL\", document.location.hostname)\n                      return\n\n                    # obtain the logoutURL\n                    a = $.ajax({dataType: 'json', url: '/bigbluebutton/api/enter'})\n                    a.done (data) ->\n                      if data.response.logoutURL? # for a meeting with 0 users\n                        setInSession(\"logoutURL\", data.response.logoutURL)\n                        return\n                      else\n                        if data.response.logoutUrl? # for a running meeting\n                          setInSession(\"logoutURL\", data.response.logoutUrl)\n                          return\n                        else\n                          handleLogourUrlError()\n\n                    a.fail (data, textStatus, errorThrown) ->\n                      handleLogourUrlError()\n\n      @render('loading')\n\n\n  # endpoint - is the html5client running (ready to handle a user)\n  @route 'meteorEndpoint',\n    path: '/check'\n    where: 'server'\n    action: ->\n      @response.writeHead 200, 'Content-Type': 'application/json'\n\n      # reply that the html5client is running\n      @response.end JSON.stringify {\"html5clientStatus\":\"running\"}\n      return\n  return\n"]}}