{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/**\n * Lets Velocity know the mirror has started successfully\n *\n * @method velocity/mirrors/register\n * @param {Object} options\n *   @param {String} options.framework The name of the test framework\n *                                     making the request\n *   @param {String} options.host The root url of this mirror without any\n *                                additional paths. Must include port. Used\n *                                for making DDP connections\n */\nVelocity.Methods['velocity/mirrors/register'] = function (options) {\n  check(options, Match.ObjectIncluding({\n    framework: String,\n    host: String\n  }));\n\n  DEBUG && console.log('[velocity] Mirror registered. Handshaking with mirror...');\n\n  this.unblock();\n\n  // TODO: Should the host really include the port?\n  var mirrorConnection = DDP.connect(options.host, {\n    // Don't show the user connection errors when not in debug mode.\n    // We will normally eventually connect to the mirror after\n    // a connection error has been shown.\n    _dontPrintErrors: !DEBUG\n  });\n  mirrorConnection.onReconnect = function () {\n    DEBUG && console.log('[velocity] Connected to mirror, setting state to ready', options);\n    mirrorConnection.call('velocity/parentHandshake', function (e, r) {\n      DEBUG && console.log('[velocity] Parent Handshake response', e, r);\n    });\n    mirrorConnection.disconnect();\n\n    var _updateQuery = {\n      framework: options.framework,\n      port: parseInt(options.port)\n    };\n    Velocity.Collections.Mirrors.update(_updateQuery, {\n      $set: {\n        state: 'ready',\n        lastModified: Date.now()\n      }\n    });\n  };\n};","ast":null,"map":{"version":3,"sources":["/src/methods/mirrors/mirror_register.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,QAAQ,CAAC,OAAO,CAAC,2BAA2B,CAAC,GAAG,UAAU,OAAO,EAAE;AACjE,OAAK,CAAC,OAAO,EAAE,KAAK,CAAC,eAAe,CAAC;AACnC,aAAS,EAAE,MAAM;AACjB,QAAI,EAAE,MAAM;GACb,CAAC,CAAC,CAAC;;AAEJ,OAAK,IAAI,OAAO,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAC;;AAEjF,MAAI,CAAC,OAAO,EAAE,CAAC;;;AAGf,MAAI,gBAAgB,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;;;;AAI/C,oBAAgB,EAAE,CAAC,KAAK;GACzB,CAAC,CAAC;AACH,kBAAgB,CAAC,WAAW,GAAG,YAAY;AACzC,SAAK,IAAI,OAAO,CAAC,GAAG,CAAC,wDAAwD,EAAE,OAAO,CAAC,CAAC;AACxF,oBAAgB,CAAC,IAAI,CAAC,0BAA0B,EAAE,UAAS,CAAC,EAAE,CAAC,EAAE;AAC/D,WAAK,IAAI,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KACpE,CAAC,CAAC;AACH,oBAAgB,CAAC,UAAU,EAAE,CAAC;;AAE9B,QAAI,YAAY,GAAG;AACjB,eAAS,EAAE,OAAO,CAAC,SAAS;AAC5B,UAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;KAC7B,CAAC;AACF,YAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE;AAChD,UAAI,EAAE;AACJ,aAAK,EAAE,OAAO;AACd,oBAAY,EAAE,IAAI,CAAC,GAAG,EAAE;OACzB;KACF,CAAC,CAAC;GAEJ,CAAC;CACH,CAAC","file":"/src/methods/mirrors/mirror_register.js.map","sourcesContent":["/**\n * Lets Velocity know the mirror has started successfully\n *\n * @method velocity/mirrors/register\n * @param {Object} options\n *   @param {String} options.framework The name of the test framework\n *                                     making the request\n *   @param {String} options.host The root url of this mirror without any\n *                                additional paths. Must include port. Used\n *                                for making DDP connections\n */\nVelocity.Methods['velocity/mirrors/register'] = function (options) {\n  check(options, Match.ObjectIncluding({\n    framework: String,\n    host: String\n  }));\n\n  DEBUG && console.log('[velocity] Mirror registered. Handshaking with mirror...');\n\n  this.unblock();\n\n  // TODO: Should the host really include the port?\n  var mirrorConnection = DDP.connect(options.host, {\n    // Don't show the user connection errors when not in debug mode.\n    // We will normally eventually connect to the mirror after\n    // a connection error has been shown.\n    _dontPrintErrors: !DEBUG\n  });\n  mirrorConnection.onReconnect = function () {\n    DEBUG && console.log('[velocity] Connected to mirror, setting state to ready', options);\n    mirrorConnection.call('velocity/parentHandshake', function(e, r) {\n      DEBUG && console.log('[velocity] Parent Handshake response', e, r);\n    });\n    mirrorConnection.disconnect();\n\n    var _updateQuery = {\n      framework: options.framework,\n      port: parseInt(options.port)\n    };\n    Velocity.Collections.Mirrors.update(_updateQuery, {\n      $set: {\n        state: 'ready',\n        lastModified: Date.now()\n      }\n    });\n\n  };\n};\n"]},"hash":"8634bc245cc215e21d50c21333cd2c44d8db5ae9"}
